import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest8 {

    public static boolean debug = false;

    @Test
    public void test4001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4001");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getGridFsDatabase();
        java.lang.String str7 = mongoProperties0.getDatabase();
        java.lang.String str8 = mongoProperties0.database;
        mongoProperties0.username = "";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str15 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("");
        java.lang.Class<?> wildcardClass18 = mongoProperties0.fieldNamingStrategy;
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(wildcardClass18);
    }

    @Test
    public void test4002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4002");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str7 = mongoProperties0.getUri();
        java.lang.String str8 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
    }

    @Test
    public void test4003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4003");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder4.maxConnectionIdleTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder4.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.requiredReplicaSetName("test");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder19 = builder17.threadsAllowedToBlockForConnectionMultiplier((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: threadsAllowedToBlockForConnectionMultiplier must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test4004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4004");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.serverSelectionTimeout((int) (short) -1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.serverSelectionTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.description("");
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.connectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.description("");
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions51 = builder48.build();
        int int52 = mongoClientOptions51.getHeartbeatConnectTimeout();
        int int53 = mongoClientOptions51.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry54 = mongoClientOptions51.getCodecRegistry();
        int int55 = mongoClientOptions51.getServerSelectionTimeout();
        int int56 = mongoClientOptions51.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern57 = mongoClientOptions51.getWriteConcern();
        com.mongodb.ReadPreference readPreference58 = mongoClientOptions51.getReadPreference();
        org.bson.codecs.configuration.CodecRegistry codecRegistry59 = mongoClientOptions51.getCodecRegistry();
        com.mongodb.DBDecoderFactory dBDecoderFactory60 = mongoClientOptions51.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder61 = builder35.dbDecoderFactory(dBDecoderFactory60);
        com.mongodb.MongoClientOptions.Builder builder62 = builder18.dbDecoderFactory(dBDecoderFactory60);
        com.mongodb.MongoClientOptions.Builder builder64 = builder18.threadsAllowedToBlockForConnectionMultiplier(32);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.minConnectionsPerHost(10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoClientOptions51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 20000 + "'", int52 == 20000);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(codecRegistry54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 30000 + "'", int55 == 30000);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(writeConcern57);
        org.junit.Assert.assertNotNull(readPreference58);
        org.junit.Assert.assertNotNull(codecRegistry59);
        org.junit.Assert.assertNotNull(dBDecoderFactory60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test4005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4005");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("");
        mongoProperties0.uri = "hi!";
        java.lang.String str9 = mongoProperties0.uri;
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.build();
        int int24 = mongoClientOptions23.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions23.getDbDecoderFactory();
        java.lang.Object obj26 = null;
        boolean boolean27 = mongoClientOptions23.equals(obj26);
        com.mongodb.MongoClientOptions.Builder builder28 = com.mongodb.MongoClientOptions.builder(mongoClientOptions23);
        com.mongodb.ReadPreference readPreference29 = mongoClientOptions23.getReadPreference();
        int int30 = mongoClientOptions23.getServerSelectionTimeout();
        int int31 = mongoClientOptions23.getThreadsAllowedToBlockForConnectionMultiplier();
        int int32 = mongoClientOptions23.getConnectionsPerHost();
        int int33 = mongoClientOptions23.getMaxWaitTime();
        org.springframework.core.env.Environment environment34 = null;
        com.mongodb.MongoClient mongoClient35 = mongoProperties0.createMongoClient(mongoClientOptions23, environment34);
        mongoProperties0.host = "mongodb://localhost/test";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(readPreference29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 30000 + "'", int30 == 30000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 120000 + "'", int33 == 120000);
        org.junit.Assert.assertNotNull(mongoClient35);
    }

    @Test
    public void test4006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4006");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionLifeTime(5);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectionsPerHost(120000);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        int int25 = mongoClientOptions24.getHeartbeatConnectTimeout();
        int int26 = mongoClientOptions24.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions24.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList28 = mongoClientOptions24.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory29 = mongoClientOptions24.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder30 = builder10.dbDecoderFactory(dBDecoderFactory29);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder10.build();
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.description("");
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder42.build();
        com.mongodb.MongoClientOptions.Builder builder47 = builder42.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder49 = builder42.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder51 = builder42.socketKeepAlive(false);
        boolean boolean52 = mongoClientOptions31.equals((java.lang.Object) false);
        int int53 = mongoClientOptions31.getMaxWaitTime();
        int int54 = mongoClientOptions31.getConnectTimeout();
        int int55 = mongoClientOptions31.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(commandListenerList28);
        org.junit.Assert.assertNotNull(dBDecoderFactory29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 120000 + "'", int53 == 120000);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 500 + "'", int55 == 500);
    }

    @Test
    public void test4007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4007");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions19.getReadConcern();
        int int24 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int25 = mongoClientOptions19.getHeartbeatConnectTimeout();
        int int26 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int27 = mongoClientOptions19.getServerSelectionTimeout();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(readConcern23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 30000 + "'", int27 == 30000);
    }

    @Test
    public void test4008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4008");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        java.lang.String str12 = mongoProperties0.username;
        char[] charArray13 = new char[] {};
        mongoProperties0.setPassword(charArray13);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder25.build();
        int int29 = mongoClientOptions28.getHeartbeatConnectTimeout();
        int int30 = mongoClientOptions28.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference31 = mongoClientOptions28.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList32 = mongoClientOptions28.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions28.getDbDecoderFactory();
        int int34 = mongoClientOptions28.getMinConnectionsPerHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties35.database = "";
        java.lang.Class<?> wildcardClass38 = mongoProperties35.getFieldNamingStrategy();
        mongoProperties35.setDatabase("hi!");
        boolean boolean41 = mongoClientOptions28.equals((java.lang.Object) mongoProperties35);
        mongoProperties35.database = "mongodb://localhost/test";
        int int44 = mongoProperties35.getDEFAULT_PORT();
        mongoProperties35.setHost("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties47 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties47.setAuthenticationDatabase("hi!");
        java.lang.String str50 = mongoProperties47.getHost();
        mongoProperties47.authenticationDatabase = "hi!";
        org.springframework.core.env.Environment environment53 = null;
        int int54 = mongoProperties47.determinePort(environment53);
        mongoProperties47.authenticationDatabase = "";
        char[] charArray57 = mongoProperties47.password;
        com.mongodb.MongoClientOptions mongoClientOptions58 = null;
        org.springframework.core.env.Environment environment59 = null;
        com.mongodb.MongoClient mongoClient60 = mongoProperties47.createMongoClient(mongoClientOptions58, environment59);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties61 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties61.host = "";
        java.lang.String str64 = mongoProperties61.getHost();
        char[] charArray66 = new char[] { ' ' };
        mongoProperties61.setPassword(charArray66);
        char[] charArray71 = new char[] { '4', '4', '#' };
        mongoProperties61.password = charArray71;
        mongoProperties47.setPassword(charArray71);
        mongoProperties35.password = charArray71;
        mongoProperties0.password = charArray71;
        java.lang.String str76 = mongoProperties0.uri;
        java.lang.String str77 = mongoProperties0.getDatabase();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, 4, #]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(readPreference31);
        org.junit.Assert.assertNotNull(commandListenerList32);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 27017 + "'", int44 == 27017);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 27017 + "'", int54 == 27017);
        org.junit.Assert.assertNull(charArray57);
        org.junit.Assert.assertNotNull(mongoClient60);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[ ]");
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[4, 4, #]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "mongodb://localhost/test" + "'", str76, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str77);
    }

    @Test
    public void test4009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4009");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.threadsAllowedToBlockForConnectionMultiplier((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder19 = builder15.connectionsPerHost((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: connectionPerHost must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test4010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4010");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder5 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder5.build();
        com.mongodb.MongoClientOptions.Builder builder8 = builder5.threadsAllowedToBlockForConnectionMultiplier(30000);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.serverSelectionTimeout((int) (short) -1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test4011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4011");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        char[] charArray4 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions mongoClientOptions5 = null;
        org.springframework.core.env.Environment environment6 = null;
        com.mongodb.MongoClient mongoClient7 = mongoProperties0.createMongoClient(mongoClientOptions5, environment6);
        mongoProperties0.setUsername("");
        org.springframework.core.env.Environment environment10 = null;
        int int11 = mongoProperties0.determinePort(environment10);
        mongoProperties0.setUsername("");
        java.lang.String str14 = mongoProperties0.gridFsDatabase;
        mongoProperties0.gridFsDatabase = "test";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(charArray4);
        org.junit.Assert.assertNotNull(mongoClient7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 27017 + "'", int11 == 27017);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test4012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4012");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        java.lang.Object obj20 = null;
        boolean boolean21 = mongoClientOptions19.equals(obj20);
        int int22 = mongoClientOptions19.getHeartbeatConnectTimeout();
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions19, environment23);
        java.lang.Class<?> wildcardClass25 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str26 = mongoProperties0.host;
        java.lang.String str27 = mongoProperties0.getUri();
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "mongodb://localhost/test" + "'", str27, "mongodb://localhost/test");
    }

    @Test
    public void test4013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4013");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder5 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.minHeartbeatFrequency(27017);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        int int11 = mongoClientOptions10.getMinHeartbeatFrequency();
        int int12 = mongoClientOptions10.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 27017 + "'", int11 == 27017);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
    }

    @Test
    public void test4014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4014");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        mongoProperties0.clearPassword();
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 20000);
        java.lang.String str11 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties12.host = "";
        java.lang.String str15 = mongoProperties12.getHost();
        java.lang.String str16 = mongoProperties12.getHost();
        mongoProperties12.gridFsDatabase = "mongodb://localhost/test";
        mongoProperties12.setPort((java.lang.Integer) 5);
        mongoProperties12.clearPassword();
        mongoProperties12.setUsername("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties24 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties24.host = "";
        java.lang.String str27 = mongoProperties24.getHost();
        char[] charArray29 = new char[] { ' ' };
        mongoProperties24.setPassword(charArray29);
        char[] charArray34 = new char[] { '4', '4', '#' };
        mongoProperties24.password = charArray34;
        mongoProperties24.setAuthenticationDatabase("");
        java.lang.String str38 = mongoProperties24.getUri();
        java.lang.String str39 = mongoProperties24.getUsername();
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.description("");
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions53 = builder50.build();
        int int54 = mongoClientOptions53.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry55 = mongoClientOptions53.getCodecRegistry();
        boolean boolean56 = mongoClientOptions53.isSocketKeepAlive();
        boolean boolean57 = mongoClientOptions53.isSocketKeepAlive();
        int int58 = mongoClientOptions53.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder59 = mongoProperties24.builder(mongoClientOptions53);
        com.mongodb.MongoClientOptions.Builder builder60 = mongoProperties12.builder(mongoClientOptions53);
        int int61 = mongoClientOptions53.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment62 = null;
        com.mongodb.MongoClient mongoClient63 = mongoProperties0.createMongoClient(mongoClientOptions53, environment62);
        com.mongodb.MongoClientOptions.Builder builder64 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions53);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000]");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ ]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[4, 4, #]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "mongodb://localhost/test" + "'", str38, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(mongoClientOptions53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 20000 + "'", int54 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10000 + "'", int61 == 10000);
        org.junit.Assert.assertNotNull(mongoClient63);
    }

    @Test
    public void test4015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4015");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        java.lang.Object obj20 = null;
        boolean boolean21 = mongoClientOptions19.equals(obj20);
        int int22 = mongoClientOptions19.getHeartbeatConnectTimeout();
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions19, environment23);
        java.lang.Class<?> wildcardClass25 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties27 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties27.host = "";
        mongoProperties27.username = "";
        mongoProperties27.clearPassword();
        java.lang.Integer int33 = mongoProperties27.port;
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.description("");
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder44.build();
        int int48 = mongoClientOptions47.getHeartbeatConnectTimeout();
        int int49 = mongoClientOptions47.getMaxConnectionIdleTime();
        int int50 = mongoClientOptions47.getLocalThreshold();
        com.mongodb.ReadConcern readConcern51 = mongoClientOptions47.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.description("");
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions65 = builder62.build();
        int int66 = mongoClientOptions65.getHeartbeatConnectTimeout();
        int int67 = mongoClientOptions65.getMaxConnectionIdleTime();
        boolean boolean68 = mongoClientOptions65.isCursorFinalizerEnabled();
        boolean boolean69 = mongoClientOptions47.equals((java.lang.Object) mongoClientOptions65);
        com.mongodb.MongoClientOptions.Builder builder70 = com.mongodb.MongoClientOptions.builder(mongoClientOptions65);
        org.springframework.core.env.Environment environment71 = null;
        com.mongodb.MongoClient mongoClient72 = mongoProperties27.createMongoClient(mongoClientOptions65, environment71);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties73 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties73.host = "";
        mongoProperties73.setUsername("hi!");
        mongoProperties73.port = (-1);
        char[] charArray80 = mongoProperties73.getPassword();
        java.lang.String str81 = mongoProperties73.gridFsDatabase;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties82 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties82.host = "";
        char[] charArray86 = new char[] { '4' };
        mongoProperties82.setPassword(charArray86);
        mongoProperties73.password = charArray86;
        mongoProperties27.setPassword(charArray86);
        mongoProperties0.setPassword(charArray86);
        java.lang.String str91 = mongoProperties0.getMongoClientDatabase();
        java.lang.Integer int92 = mongoProperties0.port;
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(mongoClientOptions47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 20000 + "'", int48 == 20000);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 15 + "'", int50 == 15);
        org.junit.Assert.assertNotNull(readConcern51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(mongoClientOptions65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 20000 + "'", int66 == 20000);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(mongoClient72);
        org.junit.Assert.assertNull(charArray80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(charArray86);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray86), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray86), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray86), "[4]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "test" + "'", str91, "test");
        org.junit.Assert.assertNull(int92);
    }

    @Test
    public void test4016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4016");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getHost();
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        mongoProperties0.setPort((java.lang.Integer) 5);
        mongoProperties0.clearPassword();
        mongoProperties0.setUsername("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties12.host = "";
        java.lang.String str15 = mongoProperties12.getHost();
        char[] charArray17 = new char[] { ' ' };
        mongoProperties12.setPassword(charArray17);
        char[] charArray22 = new char[] { '4', '4', '#' };
        mongoProperties12.password = charArray22;
        mongoProperties12.setAuthenticationDatabase("");
        java.lang.String str26 = mongoProperties12.getUri();
        java.lang.String str27 = mongoProperties12.getUsername();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder38.build();
        int int42 = mongoClientOptions41.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry43 = mongoClientOptions41.getCodecRegistry();
        boolean boolean44 = mongoClientOptions41.isSocketKeepAlive();
        boolean boolean45 = mongoClientOptions41.isSocketKeepAlive();
        int int46 = mongoClientOptions41.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder47 = mongoProperties12.builder(mongoClientOptions41);
        com.mongodb.MongoClientOptions.Builder builder48 = mongoProperties0.builder(mongoClientOptions41);
        java.util.List<com.mongodb.event.CommandListener> commandListenerList49 = mongoClientOptions41.getCommandListeners();
        com.mongodb.MongoClientOptions.Builder builder50 = com.mongodb.MongoClientOptions.builder(mongoClientOptions41);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.maxWaitTime(0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ ]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[4, 4, #]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "mongodb://localhost/test" + "'", str26, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20000 + "'", int42 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(commandListenerList49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test4017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4017");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions13.getDbDecoderFactory();
        java.lang.Object obj16 = null;
        boolean boolean17 = mongoClientOptions13.equals(obj16);
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions13.getReadPreference();
        int int20 = mongoClientOptions13.getMinHeartbeatFrequency();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList21 = mongoClientOptions13.getCommandListeners();
        int int22 = mongoClientOptions13.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(readPreference19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertNotNull(commandListenerList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test4018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4018");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        mongoProperties0.authenticationDatabase = "test";
        mongoProperties0.setUri("hi!");
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder32.build();
        int int36 = mongoClientOptions35.getHeartbeatSocketTimeout();
        int int37 = mongoClientOptions35.getMaxConnectionIdleTime();
        org.springframework.core.env.Environment environment38 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClient mongoClient39 = mongoProperties0.createMongoClient(mongoClientOptions35, environment38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The connection string is invalid. Connection strings must start with 'mongodb://'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20000 + "'", int36 == 20000);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test4019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4019");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.threadsAllowedToBlockForConnectionMultiplier(30000);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.serverSelectionTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder29.build();
        int int33 = mongoClientOptions32.getHeartbeatConnectTimeout();
        int int34 = mongoClientOptions32.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference35 = mongoClientOptions32.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList36 = mongoClientOptions32.getCommandListeners();
        int int37 = mongoClientOptions32.getLocalThreshold();
        int int38 = mongoClientOptions32.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory39 = mongoClientOptions32.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder40 = builder16.dbDecoderFactory(dBDecoderFactory39);
        com.mongodb.MongoClientOptions.Builder builder41 = builder6.dbDecoderFactory(dBDecoderFactory39);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20000 + "'", int33 == 20000);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(readPreference35);
        org.junit.Assert.assertNotNull(commandListenerList36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 15 + "'", int37 == 15);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 120000 + "'", int38 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test4020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4020");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern9 = mongoClientOptions7.getReadConcern();
        int int10 = mongoClientOptions7.getMaxWaitTime();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions7.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(readConcern9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 120000 + "'", int10 == 120000);
        org.junit.Assert.assertNotNull(socketFactory11);
    }

    @Test
    public void test4021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4021");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.String str6 = mongoProperties0.host;
        java.lang.Integer int7 = mongoProperties0.getPort();
        java.lang.Class<?> wildcardClass8 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.setUri("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setAuthenticationDatabase("hi!");
        java.lang.String str14 = mongoProperties11.getHost();
        mongoProperties11.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder27.build();
        int int31 = mongoClientOptions30.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder32 = mongoProperties11.builder(mongoClientOptions30);
        int int33 = mongoClientOptions30.getMaxConnectionIdleTime();
        int int34 = mongoClientOptions30.getConnectionsPerHost();
        boolean boolean35 = mongoClientOptions30.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder36 = mongoProperties0.builder(mongoClientOptions30);
        java.lang.String str37 = mongoProperties0.getUri();
        java.lang.Class<?> wildcardClass38 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str39 = mongoProperties0.uri;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20000 + "'", int31 == 20000);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
    }

    @Test
    public void test4022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4022");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.database;
        java.lang.String str5 = mongoProperties0.authenticationDatabase;
        mongoProperties0.username = "mongodb://localhost/test";
        mongoProperties0.authenticationDatabase = "test";
        char[] charArray10 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(charArray10);
    }

    @Test
    public void test4023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4023");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str5 = mongoProperties0.getHost();
        java.lang.String str6 = mongoProperties0.username;
        mongoProperties0.setPort((java.lang.Integer) 500);
        mongoProperties0.clearPassword();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        int int26 = mongoClientOptions25.getHeartbeatConnectTimeout();
        int int27 = mongoClientOptions25.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry28 = mongoClientOptions25.getCodecRegistry();
        int int29 = mongoClientOptions25.getServerSelectionTimeout();
        int int30 = mongoClientOptions25.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern31 = mongoClientOptions25.getWriteConcern();
        java.lang.Class<?> wildcardClass32 = mongoClientOptions25.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass32;
        java.lang.String str34 = mongoProperties0.authenticationDatabase;
        org.springframework.core.env.Environment environment35 = null;
        int int36 = mongoProperties0.determinePort(environment35);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(codecRegistry28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 30000 + "'", int29 == 30000);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertNotNull(writeConcern31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 500 + "'", int36 == 500);
    }

    @Test
    public void test4024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4024");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.description("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.setAuthenticationDatabase("hi!");
        java.lang.String str10 = mongoProperties7.getHost();
        mongoProperties7.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        int int27 = mongoClientOptions26.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder28 = mongoProperties7.builder(mongoClientOptions26);
        int int29 = mongoClientOptions26.getMaxConnectionIdleTime();
        int int30 = mongoClientOptions26.getConnectionsPerHost();
        int int31 = mongoClientOptions26.getSocketTimeout();
        int int32 = mongoClientOptions26.getMinHeartbeatFrequency();
        boolean boolean33 = mongoClientOptions26.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions26);
        com.mongodb.WriteConcern writeConcern35 = mongoClientOptions26.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder36 = builder6.writeConcern(writeConcern35);
        com.mongodb.MongoClientOptions.Builder builder38 = builder6.heartbeatConnectTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.description("");
        com.mongodb.MongoClientOptions.Builder builder49 = builder45.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder54 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder58 = builder54.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions61 = builder58.build();
        int int62 = mongoClientOptions61.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern63 = mongoClientOptions61.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder64 = builder51.readConcern(readConcern63);
        com.mongodb.MongoClientOptions.Builder builder65 = builder38.readConcern(readConcern63);
        com.mongodb.MongoClientOptions.Builder builder67 = builder38.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.minHeartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder71 = builder67.maxConnectionIdleTime(32);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 500 + "'", int32 == 500);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(writeConcern35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(mongoClientOptions61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertNotNull(readConcern63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test4025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4025");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClientOptions.Builder builder5 = mongoProperties0.builder(mongoClientOptions4);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.minHeartbeatFrequency(32);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.serverSelectionTimeout((int) (short) 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test4026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4026");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.cursorFinalizerEnabled(false);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties13.host = "";
        java.lang.Class<?> wildcardClass16 = mongoProperties13.getFieldNamingStrategy();
        java.lang.String str17 = mongoProperties13.database;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties18.host = "";
        mongoProperties18.setUsername("hi!");
        mongoProperties18.port = (-1);
        java.lang.String str25 = mongoProperties18.authenticationDatabase;
        java.lang.String str26 = mongoProperties18.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.description("");
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder37.build();
        int int41 = mongoClientOptions40.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory42 = mongoClientOptions40.getDbDecoderFactory();
        java.lang.Object obj43 = null;
        boolean boolean44 = mongoClientOptions40.equals(obj43);
        com.mongodb.MongoClientOptions.Builder builder45 = com.mongodb.MongoClientOptions.builder(mongoClientOptions40);
        com.mongodb.ReadPreference readPreference46 = mongoClientOptions40.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory47 = mongoClientOptions40.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder48 = mongoProperties18.builder(mongoClientOptions40);
        int int49 = mongoClientOptions40.getThreadsAllowedToBlockForConnectionMultiplier();
        org.springframework.core.env.Environment environment50 = null;
        com.mongodb.MongoClient mongoClient51 = mongoProperties13.createMongoClient(mongoClientOptions40, environment50);
        com.mongodb.WriteConcern writeConcern52 = mongoClientOptions40.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder53 = builder10.writeConcern(writeConcern52);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20000 + "'", int41 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(readPreference46);
        org.junit.Assert.assertNotNull(dBEncoderFactory47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(mongoClient51);
        org.junit.Assert.assertNotNull(writeConcern52);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test4027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4027");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        org.springframework.core.env.Environment environment6 = null;
        int int7 = mongoProperties0.determinePort(environment6);
        mongoProperties0.authenticationDatabase = "";
        char[] charArray10 = mongoProperties0.password;
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions11, environment12);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties14.database = "";
        java.lang.String str17 = mongoProperties14.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties18.host = "";
        java.lang.String str21 = mongoProperties18.getHost();
        char[] charArray23 = new char[] { ' ' };
        mongoProperties18.setPassword(charArray23);
        char[] charArray28 = new char[] { '4', '4', '#' };
        mongoProperties18.password = charArray28;
        mongoProperties14.setPassword(charArray28);
        mongoProperties0.password = charArray28;
        mongoProperties0.gridFsDatabase = "test";
        mongoProperties0.setUsername("test");
        mongoProperties0.setDatabase("mongodb://localhost/test");
        mongoProperties0.setDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(charArray10);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[ ]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[4, 4, #]");
    }

    @Test
    public void test4028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4028");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        boolean boolean16 = mongoClientOptions13.isCursorFinalizerEnabled();
        org.bson.codecs.configuration.CodecRegistry codecRegistry17 = mongoClientOptions13.getCodecRegistry();
        int int18 = mongoClientOptions13.getConnectTimeout();
        int int19 = mongoClientOptions13.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(codecRegistry17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 15 + "'", int19 == 15);
    }

    @Test
    public void test4029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4029");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClientOptions.Builder builder5 = mongoProperties0.builder(mongoClientOptions4);
        char[] charArray6 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.host;
        java.lang.String str11 = mongoProperties0.database;
        java.lang.String str12 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str13 = mongoProperties0.database;
        java.lang.String str14 = mongoProperties0.getUri();
        mongoProperties0.uri = "mongodb://localhost/test";
        java.lang.String str17 = mongoProperties0.username;
        mongoProperties0.host = "";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb://localhost/test" + "'", str14, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test4030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4030");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.setAuthenticationDatabase("hi!");
        java.lang.String str10 = mongoProperties7.getHost();
        mongoProperties7.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        int int27 = mongoClientOptions26.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder28 = mongoProperties7.builder(mongoClientOptions26);
        int int29 = mongoClientOptions26.getMaxConnectionIdleTime();
        int int30 = mongoClientOptions26.getConnectionsPerHost();
        int int31 = mongoClientOptions26.getSocketTimeout();
        int int32 = mongoClientOptions26.getMinHeartbeatFrequency();
        boolean boolean33 = mongoClientOptions26.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder34 = mongoProperties0.builder(mongoClientOptions26);
        boolean boolean35 = mongoClientOptions26.isSslEnabled();
        int int36 = mongoClientOptions26.getHeartbeatConnectTimeout();
        int int37 = mongoClientOptions26.getServerSelectionTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry38 = mongoClientOptions26.getCodecRegistry();
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 500 + "'", int32 == 500);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20000 + "'", int36 == 20000);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 30000 + "'", int37 == 30000);
        org.junit.Assert.assertNotNull(codecRegistry38);
    }

    @Test
    public void test4031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4031");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        mongoProperties0.clearPassword();
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.authenticationDatabase = "mongodb://localhost/test";
        java.lang.String str11 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setDatabase("mongodb://localhost/test");
        java.lang.String str14 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.threadsAllowedToBlockForConnectionMultiplier((int) '#');
        java.lang.Class<?> wildcardClass20 = builder17.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass20;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000]");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "test" + "'", str11, "test");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test4032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4032");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.connectTimeout((int) (byte) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4033");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.uri = "";
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        java.lang.String str8 = mongoProperties0.authenticationDatabase;
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test4034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4034");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions27, environment29);
        boolean boolean31 = mongoClientOptions27.isSslEnabled();
        boolean boolean32 = mongoClientOptions27.isSslInvalidHostNameAllowed();
        int int33 = mongoClientOptions27.getMaxConnectionIdleTime();
        int int34 = mongoClientOptions27.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions27);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.minHeartbeatFrequency((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder47 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.description("");
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder58 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.description("");
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions71 = builder68.build();
        int int72 = mongoClientOptions71.getHeartbeatConnectTimeout();
        int int73 = mongoClientOptions71.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference74 = mongoClientOptions71.getReadPreference();
        com.mongodb.ReadPreference readPreference75 = mongoClientOptions71.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder76 = builder57.readPreference(readPreference75);
        com.mongodb.MongoClientOptions.Builder builder77 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder79 = builder77.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder81 = builder77.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder82 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder84 = builder82.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder86 = builder84.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions87 = builder84.build();
        java.lang.String str88 = mongoClientOptions87.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory89 = mongoClientOptions87.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder90 = builder77.dbEncoderFactory(dBEncoderFactory89);
        com.mongodb.MongoClientOptions.Builder builder91 = builder57.dbEncoderFactory(dBEncoderFactory89);
        com.mongodb.MongoClientOptions.Builder builder92 = builder46.dbEncoderFactory(dBEncoderFactory89);
        com.mongodb.MongoClientOptions mongoClientOptions93 = builder92.build();
        java.lang.String str94 = mongoClientOptions93.getDescription();
        int int95 = mongoClientOptions93.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry96 = mongoClientOptions93.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder97 = builder37.codecRegistry(codecRegistry96);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20000 + "'", int34 == 20000);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(mongoClientOptions71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 20000 + "'", int72 == 20000);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNotNull(readPreference74);
        org.junit.Assert.assertNotNull(readPreference75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(mongoClientOptions87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(dBEncoderFactory89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(mongoClientOptions93);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 20000 + "'", int95 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry96);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test4035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4035");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        int int18 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions13.getWriteConcern();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions13.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        boolean boolean22 = mongoClientOptions13.isSslEnabled();
        int int23 = mongoClientOptions13.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
    }

    @Test
    public void test4036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4036");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        java.lang.Class<?> wildcardClass5 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        int int21 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions19.getReadPreference();
        boolean boolean23 = mongoClientOptions19.isAlwaysUseMBeans();
        boolean boolean24 = mongoClientOptions19.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions19.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = mongoProperties0.builder(mongoClientOptions19);
        mongoProperties0.setPort((java.lang.Integer) (-1));
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.uri = "";
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test4037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4037");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions27, environment29);
        mongoProperties0.database = "hi!";
        java.lang.String str33 = mongoProperties0.database;
        java.lang.String str34 = mongoProperties0.authenticationDatabase;
        boolean boolean35 = mongoProperties0.hasCustomCredentials();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test4038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4038");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass9 = builder8.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass9;
        java.lang.Integer int11 = mongoProperties0.port;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties12.setAuthenticationDatabase("hi!");
        java.lang.String str15 = mongoProperties12.getHost();
        mongoProperties12.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.description("");
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder28.build();
        int int32 = mongoClientOptions31.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder33 = mongoProperties12.builder(mongoClientOptions31);
        int int34 = mongoClientOptions31.getMaxConnectionIdleTime();
        int int35 = mongoClientOptions31.getConnectionsPerHost();
        int int36 = mongoClientOptions31.getSocketTimeout();
        int int37 = mongoClientOptions31.getMinHeartbeatFrequency();
        boolean boolean38 = mongoClientOptions31.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions31);
        com.mongodb.MongoClientOptions.Builder builder40 = mongoProperties0.builder(mongoClientOptions31);
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions31);
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatConnectTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder47 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder53 = builder49.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder55 = builder49.localThreshold(500);
        com.mongodb.MongoClientOptions.Builder builder56 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.description("");
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions69 = builder66.build();
        int int70 = mongoClientOptions69.getHeartbeatConnectTimeout();
        int int71 = mongoClientOptions69.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry72 = mongoClientOptions69.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry73 = mongoClientOptions69.getCodecRegistry();
        com.mongodb.WriteConcern writeConcern74 = mongoClientOptions69.getWriteConcern();
        com.mongodb.DBDecoderFactory dBDecoderFactory75 = mongoClientOptions69.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern76 = mongoClientOptions69.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder77 = builder55.writeConcern(writeConcern76);
        com.mongodb.MongoClientOptions.Builder builder78 = builder46.writeConcern(writeConcern76);
        com.mongodb.MongoClientOptions.Builder builder79 = builder41.writeConcern(writeConcern76);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20000 + "'", int32 == 20000);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 500 + "'", int37 == 500);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(mongoClientOptions69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 20000 + "'", int70 == 20000);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertNotNull(codecRegistry72);
        org.junit.Assert.assertNotNull(codecRegistry73);
        org.junit.Assert.assertNotNull(writeConcern74);
        org.junit.Assert.assertNotNull(dBDecoderFactory75);
        org.junit.Assert.assertNotNull(writeConcern76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test4039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4039");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass9 = builder8.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass9;
        boolean boolean11 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        int int26 = mongoClientOptions25.getHeartbeatConnectTimeout();
        int int27 = mongoClientOptions25.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry28 = mongoClientOptions25.getCodecRegistry();
        int int29 = mongoClientOptions25.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions25.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList31 = mongoClientOptions25.getCommandListeners();
        boolean boolean32 = mongoClientOptions25.isSocketKeepAlive();
        int int33 = mongoClientOptions25.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder34 = mongoProperties0.builder(mongoClientOptions25);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.connectionsPerHost(10000);
        com.mongodb.event.CommandListener commandListener37 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder38 = builder34.addCommandListener(commandListener37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(codecRegistry28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 30000 + "'", int29 == 30000);
        org.junit.Assert.assertNotNull(readPreference30);
        org.junit.Assert.assertNotNull(commandListenerList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test4040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4040");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.String str6 = mongoProperties0.getUri();
        java.lang.Integer int7 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test4041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4041");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        mongoProperties0.setHost("hi!");
        mongoProperties0.setDatabase("test");
        mongoProperties0.host = "mongodb://localhost/test";
        mongoProperties0.authenticationDatabase = "mongodb://localhost/test";
        mongoProperties0.setUsername("mongodb://localhost/test");
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test4042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4042");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.getUri();
        char[] charArray7 = mongoProperties0.password;
        char[] charArray8 = mongoProperties0.password;
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        int int23 = mongoClientOptions22.getHeartbeatConnectTimeout();
        int int24 = mongoClientOptions22.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry25 = mongoClientOptions22.getCodecRegistry();
        boolean boolean26 = mongoClientOptions22.isSocketKeepAlive();
        int int27 = mongoClientOptions22.getMinConnectionsPerHost();
        boolean boolean28 = mongoClientOptions22.isSocketKeepAlive();
        java.lang.String str29 = mongoClientOptions22.getDescription();
        com.mongodb.MongoClientOptions.Builder builder30 = mongoProperties0.builder(mongoClientOptions22);
        java.lang.String str31 = mongoClientOptions22.getDescription();
        int int32 = mongoClientOptions22.getServerSelectionTimeout();
        boolean boolean33 = mongoClientOptions22.isCursorFinalizerEnabled();
        int int34 = mongoClientOptions22.getMinHeartbeatFrequency();
        java.lang.String str35 = mongoClientOptions22.getDescription();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertNull(charArray8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(codecRegistry25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 30000 + "'", int32 == 30000);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 500 + "'", int34 == 500);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test4043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4043");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isAlwaysUseMBeans();
        int int9 = mongoClientOptions7.getConnectTimeout();
        int int10 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        java.lang.String str17 = mongoClientOptions16.getDescription();
        int int18 = mongoClientOptions16.getMaxWaitTime();
        boolean boolean19 = mongoClientOptions7.equals((java.lang.Object) mongoClientOptions16);
        int int20 = mongoClientOptions16.getServerSelectionTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions16);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder32.build();
        int int36 = mongoClientOptions35.getHeartbeatConnectTimeout();
        int int37 = mongoClientOptions35.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference38 = mongoClientOptions35.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList39 = mongoClientOptions35.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory40 = mongoClientOptions35.getDbDecoderFactory();
        int int41 = mongoClientOptions35.getMinConnectionsPerHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties42 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties42.database = "";
        java.lang.Class<?> wildcardClass45 = mongoProperties42.getFieldNamingStrategy();
        mongoProperties42.setDatabase("hi!");
        boolean boolean48 = mongoClientOptions35.equals((java.lang.Object) mongoProperties42);
        int int49 = mongoClientOptions35.getMaxWaitTime();
        java.lang.String str50 = mongoClientOptions35.getRequiredReplicaSetName();
        int int51 = mongoClientOptions35.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry52 = mongoClientOptions35.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder53 = builder21.codecRegistry(codecRegistry52);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.cursorFinalizerEnabled(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120000 + "'", int18 == 120000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20000 + "'", int36 == 20000);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(readPreference38);
        org.junit.Assert.assertNotNull(commandListenerList39);
        org.junit.Assert.assertNotNull(dBDecoderFactory40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 120000 + "'", int49 == 120000);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 20000 + "'", int51 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test4044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4044");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.uri;
        java.lang.String str7 = mongoProperties0.uri;
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("hi!");
        java.lang.Class<?> wildcardClass13 = builder12.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass13;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties15.host = "";
        mongoProperties15.setUsername("hi!");
        char[] charArray20 = mongoProperties15.getPassword();
        java.lang.String str21 = mongoProperties15.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties22.database = "";
        java.lang.String str25 = mongoProperties22.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties26 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties26.host = "";
        java.lang.String str29 = mongoProperties26.getHost();
        char[] charArray31 = new char[] { ' ' };
        mongoProperties26.setPassword(charArray31);
        char[] charArray36 = new char[] { '4', '4', '#' };
        mongoProperties26.password = charArray36;
        mongoProperties22.setPassword(charArray36);
        mongoProperties15.password = charArray36;
        mongoProperties0.setPassword(charArray36);
        java.lang.String str41 = mongoProperties0.username;
        mongoProperties0.port = 120000;
        mongoProperties0.port = 27017;
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNull(charArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "mongodb://localhost/test" + "'", str21, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ ]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[4, 4, #]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
    }

    @Test
    public void test4045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4045");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        boolean boolean18 = mongoClientOptions13.isAlwaysUseMBeans();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions13.getDbEncoderFactory();
        int int21 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
    }

    @Test
    public void test4046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4046");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.serverSelectionTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.requiredReplicaSetName("test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test4047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4047");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str5 = mongoProperties0.getHost();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str7 = mongoProperties0.getUri();
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Integer int9 = mongoProperties0.getPort();
        java.lang.String str10 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 500);
        java.lang.String str13 = mongoProperties0.getHost();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test4048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4048");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClientOptions.Builder builder5 = mongoProperties0.builder(mongoClientOptions4);
        char[] charArray6 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getHost();
        mongoProperties0.setHost("mongodb://localhost/test");
        mongoProperties0.setAuthenticationDatabase("");
        org.springframework.core.env.Environment environment15 = null;
        int int16 = mongoProperties0.determinePort(environment15);
        mongoProperties0.username = "";
        char[] charArray19 = mongoProperties0.getPassword();
        java.lang.String str20 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 27017 + "'", int16 == 27017);
        org.junit.Assert.assertNull(charArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test4049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4049");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        int int26 = mongoClientOptions25.getHeartbeatConnectTimeout();
        int int27 = mongoClientOptions25.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry28 = mongoClientOptions25.getCodecRegistry();
        com.mongodb.ReadConcern readConcern29 = mongoClientOptions25.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder30 = builder11.readConcern(readConcern29);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder30.build();
        com.mongodb.MongoClientOptions.Builder builder33 = builder30.sslInvalidHostNameAllowed(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(codecRegistry28);
        org.junit.Assert.assertNotNull(readConcern29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test4050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4050");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.authenticationDatabase = "";
        java.lang.Class<?> wildcardClass10 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass10);
    }

    @Test
    public void test4051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4051");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime(10000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxWaitTime(20000);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.serverSelectionTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test4052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4052");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str5 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        int int21 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions19.getReadPreference();
        boolean boolean23 = mongoClientOptions19.isAlwaysUseMBeans();
        boolean boolean24 = mongoClientOptions19.isCursorFinalizerEnabled();
        int int25 = mongoClientOptions19.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        org.springframework.core.env.Environment environment27 = null;
        com.mongodb.MongoClient mongoClient28 = mongoProperties0.createMongoClient(mongoClientOptions19, environment27);
        com.mongodb.DBDecoderFactory dBDecoderFactory29 = mongoClientOptions19.getDbDecoderFactory();
        int int30 = mongoClientOptions19.getMaxConnectionIdleTime();
        boolean boolean31 = mongoClientOptions19.isSocketKeepAlive();
        com.mongodb.WriteConcern writeConcern32 = mongoClientOptions19.getWriteConcern();
        java.lang.String str33 = mongoClientOptions19.getRequiredReplicaSetName();
        int int34 = mongoClientOptions19.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry35 = mongoClientOptions19.getCodecRegistry();
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertNotNull(dBDecoderFactory29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(writeConcern32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20000 + "'", int34 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry35);
    }

    @Test
    public void test4053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4053");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.serverSelectionTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.minHeartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionLifeTime(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test4054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4054");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getUri();
        mongoProperties0.gridFsDatabase = "";
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.setPort((java.lang.Integer) (-1));
        mongoProperties0.setPort((java.lang.Integer) 15);
        mongoProperties0.setDatabase("");
        java.lang.String str15 = mongoProperties0.database;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test4055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4055");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str14 = mongoProperties0.getUri();
        java.lang.String str15 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        int int30 = mongoClientOptions29.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry31 = mongoClientOptions29.getCodecRegistry();
        boolean boolean32 = mongoClientOptions29.isSocketKeepAlive();
        boolean boolean33 = mongoClientOptions29.isSocketKeepAlive();
        int int34 = mongoClientOptions29.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder35 = mongoProperties0.builder(mongoClientOptions29);
        mongoProperties0.setDatabase("test");
        boolean boolean38 = mongoProperties0.hasCustomAddress();
        mongoProperties0.setDatabase("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties41 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties41.setAuthenticationDatabase("hi!");
        java.lang.String str44 = mongoProperties41.getHost();
        mongoProperties41.authenticationDatabase = "hi!";
        org.springframework.core.env.Environment environment47 = null;
        int int48 = mongoProperties41.determinePort(environment47);
        mongoProperties41.authenticationDatabase = "";
        char[] charArray51 = mongoProperties41.password;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties52 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties52.database = "";
        java.lang.String str55 = mongoProperties52.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions56 = null;
        com.mongodb.MongoClientOptions.Builder builder57 = mongoProperties52.builder(mongoClientOptions56);
        char[] charArray58 = mongoProperties52.getPassword();
        com.mongodb.MongoClientOptions mongoClientOptions59 = null;
        org.springframework.core.env.Environment environment60 = null;
        com.mongodb.MongoClient mongoClient61 = mongoProperties52.createMongoClient(mongoClientOptions59, environment60);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties62 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties62.database = "";
        java.lang.String str65 = mongoProperties62.getDatabase();
        java.lang.String str66 = mongoProperties62.getUri();
        java.lang.Integer int67 = mongoProperties62.getPort();
        char[] charArray71 = new char[] { ' ', ' ', '4' };
        mongoProperties62.setPassword(charArray71);
        mongoProperties52.password = charArray71;
        mongoProperties41.setPassword(charArray71);
        mongoProperties0.password = charArray71;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, 4, #]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb://localhost/test" + "'", str14, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 27017 + "'", int48 == 27017);
        org.junit.Assert.assertNull(charArray51);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(charArray58);
        org.junit.Assert.assertNotNull(mongoClient61);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "mongodb://localhost/test" + "'", str66, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int67);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "  4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "  4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[ ,  , 4]");
    }

    @Test
    public void test4056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4056");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setAuthenticationDatabase("");
        int int5 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.port = 15;
        mongoProperties0.port = 32;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
    }

    @Test
    public void test4057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4057");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.port = 0;
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder15.build();
        int int19 = mongoClientOptions18.getMinConnectionsPerHost();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions18.getReadPreference();
        int int21 = mongoClientOptions18.getMinConnectionsPerHost();
        int int22 = mongoClientOptions18.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder23 = mongoProperties0.builder(mongoClientOptions18);
        char[] charArray24 = mongoProperties0.password;
        org.springframework.core.env.Environment environment25 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int26 = mongoProperties0.determinePort(environment25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: spring.data.mongodb.port=0 and no local mongo port configuration is available");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(charArray24);
    }

    @Test
    public void test4058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4058");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getUri();
        mongoProperties0.gridFsDatabase = "";
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        int int9 = mongoProperties0.getDEFAULT_PORT();
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.port = 500;
        mongoProperties0.port = 30000;
        java.lang.Class<?> wildcardClass15 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str16 = mongoProperties0.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass17 = mongoProperties0.fieldNamingStrategy;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27017 + "'", int9 == 27017);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb://localhost/test" + "'", str10, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb://localhost/test" + "'", str16, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass17);
    }

    @Test
    public void test4059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4059");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass9 = builder8.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass9;
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        mongoProperties0.database = "mongodb://localhost/test";
        java.lang.String str15 = mongoProperties0.getMongoClientDatabase();
        java.lang.Integer int16 = mongoProperties0.getPort();
        mongoProperties0.setUri("");
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb://localhost/test" + "'", str15, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int16);
    }

    @Test
    public void test4060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4060");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory6 = mongoClientOptions5.getDbEncoderFactory();
        int int7 = mongoClientOptions5.getLocalThreshold();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties8.host = "";
        java.lang.String str11 = mongoProperties8.getHost();
        char[] charArray13 = new char[] { ' ' };
        mongoProperties8.setPassword(charArray13);
        char[] charArray18 = new char[] { '4', '4', '#' };
        mongoProperties8.password = charArray18;
        mongoProperties8.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder32.build();
        int int36 = mongoClientOptions35.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment37 = null;
        com.mongodb.MongoClient mongoClient38 = mongoProperties8.createMongoClient(mongoClientOptions35, environment37);
        boolean boolean39 = mongoClientOptions35.isSslEnabled();
        boolean boolean40 = mongoClientOptions5.equals((java.lang.Object) mongoClientOptions35);
        boolean boolean41 = mongoClientOptions35.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertNotNull(dBEncoderFactory6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ ]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10000 + "'", int36 == 10000);
        org.junit.Assert.assertNotNull(mongoClient38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test4061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4061");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        char[] charArray4 = new char[] { '4' };
        mongoProperties0.setPassword(charArray4);
        java.lang.String str6 = mongoProperties0.username;
        java.lang.String str7 = mongoProperties0.getHost();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        mongoProperties0.database = "";
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4]");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test4062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4062");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionLifeTime(5);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectionsPerHost(120000);
        com.mongodb.MongoClientOptions.Builder builder11 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder8.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test4063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4063");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.username = "hi!";
        java.lang.String str6 = mongoProperties0.database;
        mongoProperties0.clearPassword();
        java.lang.String str8 = mongoProperties0.uri;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.database = "";
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.build();
        java.lang.String str18 = mongoClientOptions17.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions17.getDbEncoderFactory();
        int int20 = mongoClientOptions17.getServerSelectionTimeout();
        com.mongodb.ReadConcern readConcern21 = mongoClientOptions17.getReadConcern();
        boolean boolean22 = mongoClientOptions17.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder23 = mongoProperties9.builder(mongoClientOptions17);
        com.mongodb.ReadConcern readConcern24 = mongoClientOptions17.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder25 = mongoProperties0.builder(mongoClientOptions17);
        boolean boolean26 = mongoProperties0.hasCustomCredentials();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(readConcern21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(readConcern24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test4064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4064");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        char[] charArray4 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions mongoClientOptions5 = null;
        org.springframework.core.env.Environment environment6 = null;
        com.mongodb.MongoClient mongoClient7 = mongoProperties0.createMongoClient(mongoClientOptions5, environment6);
        mongoProperties0.setUsername("");
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str11 = mongoProperties0.getDatabase();
        boolean boolean12 = mongoProperties0.hasCustomCredentials();
        java.lang.String str13 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(charArray4);
        org.junit.Assert.assertNotNull(mongoClient7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test4065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4065");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.gridFsDatabase = "";
        java.lang.String str5 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        com.mongodb.MongoClientOptions.Builder builder7 = mongoProperties0.builder(mongoClientOptions6);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.connectionsPerHost(10000);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.heartbeatFrequency(97);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test4066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4066");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime(10000);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        java.lang.String str15 = mongoClientOptions14.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions14.getDbEncoderFactory();
        int int17 = mongoClientOptions14.getServerSelectionTimeout();
        com.mongodb.ReadConcern readConcern18 = mongoClientOptions14.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder19 = builder6.readConcern(readConcern18);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(readConcern18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test4067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4067");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getSocketTimeout();
        int int25 = mongoClientOptions19.getMaxConnectionLifeTime();
        int int26 = mongoClientOptions19.getThreadsAllowedToBlockForConnectionMultiplier();
        javax.net.SocketFactory socketFactory27 = mongoClientOptions19.getSocketFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory28 = mongoClientOptions19.getDbDecoderFactory();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNotNull(socketFactory27);
        org.junit.Assert.assertNotNull(dBDecoderFactory28);
    }

    @Test
    public void test4068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4068");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions13.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        boolean boolean19 = mongoClientOptions13.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test4069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4069");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        int int18 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions13.getWriteConcern();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions13.getReadPreference();
        int int21 = mongoClientOptions13.getHeartbeatSocketTimeout();
        int int22 = mongoClientOptions13.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
    }

    @Test
    public void test4070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4070");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int18 = mongoClientOptions13.getLocalThreshold();
        java.lang.String str19 = mongoClientOptions13.getRequiredReplicaSetName();
        int int20 = mongoClientOptions13.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
    }

    @Test
    public void test4071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4071");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        org.springframework.core.env.Environment environment6 = null;
        int int7 = mongoProperties0.determinePort(environment6);
        mongoProperties0.authenticationDatabase = "";
        char[] charArray10 = mongoProperties0.password;
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions11, environment12);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties14.database = "";
        java.lang.String str17 = mongoProperties14.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties18.host = "";
        java.lang.String str21 = mongoProperties18.getHost();
        char[] charArray23 = new char[] { ' ' };
        mongoProperties18.setPassword(charArray23);
        char[] charArray28 = new char[] { '4', '4', '#' };
        mongoProperties18.password = charArray28;
        mongoProperties14.setPassword(charArray28);
        mongoProperties0.password = charArray28;
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder39 = builder38.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder43 = builder38.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.minHeartbeatFrequency(500);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder43.build();
        javax.net.SocketFactory socketFactory47 = mongoClientOptions46.getSocketFactory();
        int int48 = mongoClientOptions46.getMaxConnectionIdleTime();
        com.mongodb.MongoClientOptions.Builder builder49 = mongoProperties0.builder(mongoClientOptions46);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties50 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties50.setAuthenticationDatabase("hi!");
        java.lang.String str53 = mongoProperties50.getHost();
        mongoProperties50.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder56 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.description("");
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions69 = builder66.build();
        int int70 = mongoClientOptions69.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder71 = mongoProperties50.builder(mongoClientOptions69);
        int int72 = mongoClientOptions69.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder73 = mongoProperties0.builder(mongoClientOptions69);
        java.lang.String str74 = mongoProperties0.authenticationDatabase;
        mongoProperties0.setAuthenticationDatabase("hi!");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(charArray10);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[ ]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[4, 4, #]");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertNotNull(socketFactory47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 27017 + "'", int48 == 27017);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(mongoClientOptions69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 20000 + "'", int70 == 20000);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
    }

    @Test
    public void test4072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4072");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.build();
        int int21 = mongoClientOptions20.getHeartbeatConnectTimeout();
        int int22 = mongoClientOptions20.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry23 = mongoClientOptions20.getCodecRegistry();
        int int24 = mongoClientOptions20.getServerSelectionTimeout();
        int int25 = mongoClientOptions20.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern26 = mongoClientOptions20.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder27 = builder4.writeConcern(writeConcern26);
        com.mongodb.MongoClientOptions.Builder builder29 = builder4.maxConnectionLifeTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder30 = builder4.legacyDefaults();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties31 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties31.host = "";
        mongoProperties31.username = "";
        mongoProperties31.clearPassword();
        java.lang.Class<?> wildcardClass37 = mongoProperties31.getFieldNamingStrategy();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties38 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties38.database = "";
        java.lang.String str41 = mongoProperties38.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions42 = null;
        com.mongodb.MongoClientOptions.Builder builder43 = mongoProperties38.builder(mongoClientOptions42);
        char[] charArray44 = mongoProperties38.getPassword();
        mongoProperties38.setHost("hi!");
        com.mongodb.MongoClientOptions.Builder builder47 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.description("");
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions60 = builder57.build();
        int int61 = mongoClientOptions60.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment62 = null;
        com.mongodb.MongoClient mongoClient63 = mongoProperties38.createMongoClient(mongoClientOptions60, environment62);
        int int64 = mongoClientOptions60.getMaxConnectionLifeTime();
        boolean boolean65 = mongoClientOptions60.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder66 = mongoProperties31.builder(mongoClientOptions60);
        com.mongodb.WriteConcern writeConcern67 = mongoClientOptions60.getWriteConcern();
        int int68 = mongoClientOptions60.getMinHeartbeatFrequency();
        int int69 = mongoClientOptions60.getConnectTimeout();
        javax.net.SocketFactory socketFactory70 = mongoClientOptions60.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder71 = builder4.socketFactory(socketFactory70);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(codecRegistry23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 30000 + "'", int24 == 30000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(writeConcern26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(charArray44);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(mongoClientOptions60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10000 + "'", int61 == 10000);
        org.junit.Assert.assertNotNull(mongoClient63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(writeConcern67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 500 + "'", int68 == 500);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10000 + "'", int69 == 10000);
        org.junit.Assert.assertNotNull(socketFactory70);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test4073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4073");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str5 = mongoProperties0.getHost();
        java.lang.String str6 = mongoProperties0.getHost();
        char[] charArray7 = mongoProperties0.password;
        java.lang.String str8 = mongoProperties0.getUri();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        int int23 = mongoClientOptions22.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry24 = mongoClientOptions22.getCodecRegistry();
        int int25 = mongoClientOptions22.getMinConnectionsPerHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties26 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties26.setAuthenticationDatabase("hi!");
        java.lang.String str29 = mongoProperties26.getHost();
        mongoProperties26.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.description("");
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder42.build();
        int int46 = mongoClientOptions45.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder47 = mongoProperties26.builder(mongoClientOptions45);
        boolean boolean48 = mongoClientOptions22.equals((java.lang.Object) mongoClientOptions45);
        int int49 = mongoClientOptions22.getHeartbeatConnectTimeout();
        java.lang.String str50 = mongoClientOptions22.getDescription();
        boolean boolean51 = mongoClientOptions22.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder52 = mongoProperties0.builder(mongoClientOptions22);
        java.lang.String str53 = mongoProperties0.database;
        char[] charArray54 = mongoProperties0.password;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 20000 + "'", int46 == 20000);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 20000 + "'", int49 == 20000);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNull(charArray54);
    }

    @Test
    public void test4074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4074");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        int int23 = mongoClientOptions22.getHeartbeatConnectTimeout();
        int int24 = mongoClientOptions22.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry25 = mongoClientOptions22.getCodecRegistry();
        int int26 = mongoClientOptions22.getServerSelectionTimeout();
        int int27 = mongoClientOptions22.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern28 = mongoClientOptions22.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder29 = builder8.writeConcern(writeConcern28);
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.description("");
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions43 = builder40.build();
        int int44 = mongoClientOptions43.getHeartbeatConnectTimeout();
        int int45 = mongoClientOptions43.getMaxConnectionIdleTime();
        boolean boolean46 = mongoClientOptions43.isCursorFinalizerEnabled();
        int int47 = mongoClientOptions43.getMinConnectionsPerHost();
        com.mongodb.ReadConcern readConcern48 = mongoClientOptions43.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder49 = builder29.readConcern(readConcern48);
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.description("");
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder60.build();
        int int64 = mongoClientOptions63.getHeartbeatConnectTimeout();
        int int65 = mongoClientOptions63.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference66 = mongoClientOptions63.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList67 = mongoClientOptions63.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory68 = mongoClientOptions63.getDbDecoderFactory();
        int int69 = mongoClientOptions63.getMinConnectionsPerHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties70 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties70.database = "";
        java.lang.Class<?> wildcardClass73 = mongoProperties70.getFieldNamingStrategy();
        mongoProperties70.setDatabase("hi!");
        boolean boolean76 = mongoClientOptions63.equals((java.lang.Object) mongoProperties70);
        int int77 = mongoClientOptions63.getSocketTimeout();
        int int78 = mongoClientOptions63.getHeartbeatConnectTimeout();
        int int79 = mongoClientOptions63.getThreadsAllowedToBlockForConnectionMultiplier();
        int int80 = mongoClientOptions63.getConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory81 = mongoClientOptions63.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder82 = builder29.dbEncoderFactory(dBEncoderFactory81);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(codecRegistry25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 30000 + "'", int26 == 30000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertNotNull(writeConcern28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoClientOptions43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 20000 + "'", int44 == 20000);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(readConcern48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoClientOptions63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 20000 + "'", int64 == 20000);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(readPreference66);
        org.junit.Assert.assertNotNull(commandListenerList67);
        org.junit.Assert.assertNotNull(dBDecoderFactory68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 20000 + "'", int78 == 20000);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 5 + "'", int79 == 5);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 100 + "'", int80 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory81);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test4075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4075");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        int int30 = mongoClientOptions29.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern31 = mongoClientOptions29.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder32 = builder19.readConcern(readConcern31);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.description("");
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder43.build();
        int int47 = mongoClientOptions46.getHeartbeatConnectTimeout();
        int int48 = mongoClientOptions46.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory49 = mongoClientOptions46.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder50 = builder19.dbDecoderFactory(dBDecoderFactory49);
        com.mongodb.MongoClientOptions.Builder builder51 = builder4.dbDecoderFactory(dBDecoderFactory49);
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder60 = builder56.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder61 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder65 = builder61.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder66 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions71 = builder68.build();
        java.lang.String str72 = mongoClientOptions71.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory73 = mongoClientOptions71.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder74 = builder61.dbEncoderFactory(dBEncoderFactory73);
        com.mongodb.MongoClientOptions.Builder builder75 = builder56.dbEncoderFactory(dBEncoderFactory73);
        com.mongodb.MongoClientOptions.Builder builder76 = builder51.dbEncoderFactory(dBEncoderFactory73);
        com.mongodb.MongoClientOptions.Builder builder78 = builder76.maxConnectionLifeTime(30000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertNotNull(readConcern31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 20000 + "'", int47 == 20000);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(mongoClientOptions71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(dBEncoderFactory73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test4076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4076");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getConnectionsPerHost();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList10 = mongoClientOptions7.getCommandListeners();
        int int11 = mongoClientOptions7.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(commandListenerList10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test4077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4077");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder7.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minHeartbeatFrequency(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        com.mongodb.ReadConcern readConcern14 = mongoClientOptions13.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder15 = builder0.readConcern(readConcern14);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.description("");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder31.build();
        int int35 = mongoClientOptions34.getHeartbeatConnectTimeout();
        int int36 = mongoClientOptions34.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry37 = mongoClientOptions34.getCodecRegistry();
        int int38 = mongoClientOptions34.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference39 = mongoClientOptions34.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList40 = mongoClientOptions34.getCommandListeners();
        int int41 = mongoClientOptions34.getSocketTimeout();
        javax.net.SocketFactory socketFactory42 = mongoClientOptions34.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder43 = builder18.socketFactory(socketFactory42);
        com.mongodb.MongoClientOptions.Builder builder44 = builder0.socketFactory(socketFactory42);
        com.mongodb.MongoClientOptions.Builder builder45 = builder0.legacyDefaults();
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder47 = builder45.minHeartbeatFrequency((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: minHeartbeatFrequency must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(readConcern14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20000 + "'", int35 == 20000);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(codecRegistry37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 30000 + "'", int38 == 30000);
        org.junit.Assert.assertNotNull(readPreference39);
        org.junit.Assert.assertNotNull(commandListenerList40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(socketFactory42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test4078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4078");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str5 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        int int21 = mongoClientOptions19.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry22 = mongoClientOptions19.getCodecRegistry();
        int int23 = mongoClientOptions19.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions19.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList25 = mongoClientOptions19.getCommandListeners();
        int int26 = mongoClientOptions19.getSocketTimeout();
        java.lang.String str27 = mongoClientOptions19.getDescription();
        com.mongodb.MongoClientOptions.Builder builder28 = mongoProperties0.builder(mongoClientOptions19);
        java.lang.String str29 = mongoClientOptions19.getRequiredReplicaSetName();
        java.lang.String str30 = mongoClientOptions19.getDescription();
        int int31 = mongoClientOptions19.getMinConnectionsPerHost();
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(codecRegistry22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 30000 + "'", int23 == 30000);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertNotNull(commandListenerList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test4079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4079");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder5 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.minHeartbeatFrequency(27017);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.ReadConcern readConcern11 = mongoClientOptions10.getReadConcern();
        java.lang.String str12 = mongoClientOptions10.getRequiredReplicaSetName();
        int int13 = mongoClientOptions10.getConnectTimeout();
        boolean boolean14 = mongoClientOptions10.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder19.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.description("");
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder36.build();
        int int40 = mongoClientOptions39.getHeartbeatConnectTimeout();
        int int41 = mongoClientOptions39.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference42 = mongoClientOptions39.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList43 = mongoClientOptions39.getCommandListeners();
        int int44 = mongoClientOptions39.getLocalThreshold();
        int int45 = mongoClientOptions39.getConnectionsPerHost();
        java.lang.String str46 = mongoClientOptions39.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern47 = mongoClientOptions39.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder48 = builder25.writeConcern(writeConcern47);
        boolean boolean49 = mongoClientOptions10.equals((java.lang.Object) builder25);
        int int50 = mongoClientOptions10.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(readConcern11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 20000 + "'", int40 == 20000);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(readPreference42);
        org.junit.Assert.assertNotNull(commandListenerList43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 15 + "'", int44 == 15);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(writeConcern47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test4080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4080");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.uri = "";
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        int int8 = mongoProperties0.getDEFAULT_PORT();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 27017 + "'", int8 == 27017);
    }

    @Test
    public void test4081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4081");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUri("hi!");
        java.lang.String str5 = mongoProperties0.database;
        mongoProperties0.host = "mongodb://localhost/test";
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test4082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4082");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getHost();
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        mongoProperties0.setPort((java.lang.Integer) 5);
        mongoProperties0.clearPassword();
        mongoProperties0.setUsername("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties12.host = "";
        java.lang.String str15 = mongoProperties12.getHost();
        char[] charArray17 = new char[] { ' ' };
        mongoProperties12.setPassword(charArray17);
        char[] charArray22 = new char[] { '4', '4', '#' };
        mongoProperties12.password = charArray22;
        mongoProperties12.setAuthenticationDatabase("");
        java.lang.String str26 = mongoProperties12.getUri();
        java.lang.String str27 = mongoProperties12.getUsername();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder38.build();
        int int42 = mongoClientOptions41.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry43 = mongoClientOptions41.getCodecRegistry();
        boolean boolean44 = mongoClientOptions41.isSocketKeepAlive();
        boolean boolean45 = mongoClientOptions41.isSocketKeepAlive();
        int int46 = mongoClientOptions41.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder47 = mongoProperties12.builder(mongoClientOptions41);
        com.mongodb.MongoClientOptions.Builder builder48 = mongoProperties0.builder(mongoClientOptions41);
        com.mongodb.MongoClientOptions.Builder builder49 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder53 = builder49.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder54 = builder53.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.minHeartbeatFrequency(27017);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions59 = builder56.build();
        com.mongodb.ReadConcern readConcern60 = mongoClientOptions59.getReadConcern();
        java.lang.String str61 = mongoClientOptions59.getRequiredReplicaSetName();
        int int62 = mongoClientOptions59.getConnectTimeout();
        org.springframework.core.env.Environment environment63 = null;
        com.mongodb.MongoClient mongoClient64 = mongoProperties0.createMongoClient(mongoClientOptions59, environment63);
        int int65 = mongoClientOptions59.getLocalThreshold();
        int int66 = mongoClientOptions59.getMaxConnectionIdleTime();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ ]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[4, 4, #]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "mongodb://localhost/test" + "'", str26, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20000 + "'", int42 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(mongoClientOptions59);
        org.junit.Assert.assertNotNull(readConcern60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10000 + "'", int62 == 10000);
        org.junit.Assert.assertNotNull(mongoClient64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 15 + "'", int65 == 15);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test4083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4083");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder5 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder5.build();
        com.mongodb.MongoClientOptions.Builder builder8 = builder5.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxWaitTime(10);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        java.lang.String str12 = mongoClientOptions11.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test4084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4084");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getHost();
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        char[] charArray7 = mongoProperties0.password;
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        mongoProperties0.setPort((java.lang.Integer) 10);
        mongoProperties0.host = "test";
        mongoProperties0.authenticationDatabase = "hi!";
        java.lang.String str16 = mongoProperties0.uri;
        char[] charArray17 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass18 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str19 = mongoProperties0.uri;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb://localhost/test" + "'", str16, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray17);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "mongodb://localhost/test" + "'", str19, "mongodb://localhost/test");
    }

    @Test
    public void test4085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4085");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        mongoProperties0.clearPassword();
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        int int23 = mongoClientOptions22.getHeartbeatConnectTimeout();
        int int24 = mongoClientOptions22.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference25 = mongoClientOptions22.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList26 = mongoClientOptions22.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory27 = mongoClientOptions22.getDbDecoderFactory();
        boolean boolean28 = mongoClientOptions22.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions22, environment29);
        java.lang.String str31 = mongoProperties0.database;
        mongoProperties0.setDatabase("mongodb://localhost/test");
        mongoProperties0.setUsername("");
        mongoProperties0.setGridFsDatabase("hi!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000]");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(readPreference25);
        org.junit.Assert.assertNotNull(commandListenerList26);
        org.junit.Assert.assertNotNull(dBDecoderFactory27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test4086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4086");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder5.build();
        java.lang.String str9 = mongoClientOptions8.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory10 = mongoClientOptions8.getDbEncoderFactory();
        int int11 = mongoClientOptions8.getServerSelectionTimeout();
        com.mongodb.ReadConcern readConcern12 = mongoClientOptions8.getReadConcern();
        boolean boolean13 = mongoClientOptions8.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder14 = mongoProperties0.builder(mongoClientOptions8);
        java.lang.String str15 = mongoProperties0.database;
        mongoProperties0.database = "mongodb://localhost/test";
        java.lang.String str18 = mongoProperties0.database;
        java.lang.String str19 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(dBEncoderFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(readConcern12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb://localhost/test" + "'", str18, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test4087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4087");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        int int26 = mongoClientOptions25.getHeartbeatConnectTimeout();
        int int27 = mongoClientOptions25.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry28 = mongoClientOptions25.getCodecRegistry();
        com.mongodb.ReadConcern readConcern29 = mongoClientOptions25.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder30 = builder11.readConcern(readConcern29);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder11.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(codecRegistry28);
        org.junit.Assert.assertNotNull(readConcern29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
    }

    @Test
    public void test4088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4088");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions19.getReadConcern();
        boolean boolean24 = mongoClientOptions19.isSslInvalidHostNameAllowed();
        boolean boolean25 = mongoClientOptions19.isAlwaysUseMBeans();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions19.getSocketFactory();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(readConcern23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(socketFactory26);
    }

    @Test
    public void test4089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4089");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass9 = builder8.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass9;
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str13 = mongoProperties0.database;
        boolean boolean14 = mongoProperties0.hasCustomAddress();
        boolean boolean15 = mongoProperties0.hasCustomCredentials();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        int int30 = mongoClientOptions29.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory31 = mongoClientOptions29.getDbDecoderFactory();
        java.lang.Object obj32 = null;
        boolean boolean33 = mongoClientOptions29.equals(obj32);
        com.mongodb.MongoClientOptions.Builder builder34 = com.mongodb.MongoClientOptions.builder(mongoClientOptions29);
        boolean boolean35 = mongoClientOptions29.isSslEnabled();
        org.springframework.core.env.Environment environment36 = null;
        com.mongodb.MongoClient mongoClient37 = mongoProperties0.createMongoClient(mongoClientOptions29, environment36);
        int int38 = mongoClientOptions29.getMaxConnectionLifeTime();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(mongoClient37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test4090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4090");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.description("");
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder28.build();
        int int32 = mongoClientOptions31.getHeartbeatConnectTimeout();
        int int33 = mongoClientOptions31.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference34 = mongoClientOptions31.getReadPreference();
        com.mongodb.ReadPreference readPreference35 = mongoClientOptions31.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder36 = builder17.readPreference(readPreference35);
        com.mongodb.MongoClientOptions.Builder builder37 = builder36.legacyDefaults();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties38 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties38.setAuthenticationDatabase("hi!");
        java.lang.String str41 = mongoProperties38.getHost();
        mongoProperties38.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.description("");
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions57 = builder54.build();
        int int58 = mongoClientOptions57.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder59 = mongoProperties38.builder(mongoClientOptions57);
        int int60 = mongoClientOptions57.getMaxConnectionIdleTime();
        int int61 = mongoClientOptions57.getConnectionsPerHost();
        int int62 = mongoClientOptions57.getHeartbeatSocketTimeout();
        java.lang.String str63 = mongoClientOptions57.getDescription();
        com.mongodb.ReadPreference readPreference64 = mongoClientOptions57.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory65 = mongoClientOptions57.getDbEncoderFactory();
        int int66 = mongoClientOptions57.getServerSelectionTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory67 = mongoClientOptions57.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern68 = mongoClientOptions57.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder69 = builder36.writeConcern(writeConcern68);
        com.mongodb.MongoClientOptions.Builder builder70 = builder4.writeConcern(writeConcern68);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20000 + "'", int32 == 20000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(readPreference34);
        org.junit.Assert.assertNotNull(readPreference35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mongoClientOptions57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 20000 + "'", int58 == 20000);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 20000 + "'", int62 == 20000);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(readPreference64);
        org.junit.Assert.assertNotNull(dBEncoderFactory65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 30000 + "'", int66 == 30000);
        org.junit.Assert.assertNotNull(dBEncoderFactory67);
        org.junit.Assert.assertNotNull(writeConcern68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test4091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4091");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test4092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4092");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        java.lang.String str7 = mongoProperties0.getUsername();
        mongoProperties0.database = "hi!";
        java.lang.String str10 = mongoProperties0.getUsername();
        mongoProperties0.setAuthenticationDatabase("test");
        java.lang.String str13 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.uri = "test";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "test" + "'", str13, "test");
    }

    @Test
    public void test4093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4093");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions19.getReadConcern();
        boolean boolean24 = mongoClientOptions19.isSslInvalidHostNameAllowed();
        boolean boolean25 = mongoClientOptions19.isSslEnabled();
        int int26 = mongoClientOptions19.getConnectionsPerHost();
        int int27 = mongoClientOptions19.getServerSelectionTimeout();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder38.build();
        int int42 = mongoClientOptions41.getHeartbeatConnectTimeout();
        int int43 = mongoClientOptions41.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry44 = mongoClientOptions41.getCodecRegistry();
        int int45 = mongoClientOptions41.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference46 = mongoClientOptions41.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList47 = mongoClientOptions41.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory48 = mongoClientOptions41.getDbDecoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList49 = mongoClientOptions41.getCommandListeners();
        int int50 = mongoClientOptions41.getMaxConnectionIdleTime();
        com.mongodb.MongoClientOptions.Builder builder51 = com.mongodb.MongoClientOptions.builder(mongoClientOptions41);
        boolean boolean52 = mongoClientOptions19.equals((java.lang.Object) mongoClientOptions41);
        com.mongodb.ReadConcern readConcern53 = mongoClientOptions41.getReadConcern();
        com.mongodb.ReadConcern readConcern54 = mongoClientOptions41.getReadConcern();
        int int55 = mongoClientOptions41.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(readConcern23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 30000 + "'", int27 == 30000);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20000 + "'", int42 == 20000);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(codecRegistry44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 30000 + "'", int45 == 30000);
        org.junit.Assert.assertNotNull(readPreference46);
        org.junit.Assert.assertNotNull(commandListenerList47);
        org.junit.Assert.assertNotNull(dBDecoderFactory48);
        org.junit.Assert.assertNotNull(commandListenerList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(readConcern53);
        org.junit.Assert.assertNotNull(readConcern54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 20000 + "'", int55 == 20000);
    }

    @Test
    public void test4094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4094");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        boolean boolean17 = mongoClientOptions13.isSocketKeepAlive();
        int int18 = mongoClientOptions13.getMinConnectionsPerHost();
        int int19 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int20 = mongoClientOptions13.getServerSelectionTimeout();
        int int21 = mongoClientOptions13.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 30000 + "'", int20 == 30000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 500 + "'", int21 == 500);
    }

    @Test
    public void test4095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4095");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str5 = mongoProperties0.authenticationDatabase;
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.database = "";
        java.lang.String str10 = mongoProperties7.getUsername();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.host = "";
        char[] charArray15 = new char[] { '4' };
        mongoProperties11.setPassword(charArray15);
        mongoProperties7.password = charArray15;
        mongoProperties0.setPassword(charArray15);
        java.lang.Class<?> wildcardClass19 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str20 = mongoProperties0.gridFsDatabase;
        java.lang.String str21 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "test" + "'", str6, "test");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[4]");
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test4096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4096");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getSocketTimeout();
        int int25 = mongoClientOptions19.getMinHeartbeatFrequency();
        boolean boolean26 = mongoClientOptions19.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatConnectTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder29.legacyDefaults();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 500 + "'", int25 == 500);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test4097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4097");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry17 = mongoClientOptions13.getCodecRegistry();
        com.mongodb.ReadConcern readConcern18 = mongoClientOptions13.getReadConcern();
        int int19 = mongoClientOptions13.getLocalThreshold();
        boolean boolean20 = mongoClientOptions13.isSocketKeepAlive();
        int int21 = mongoClientOptions13.getMaxConnectionIdleTime();
        boolean boolean22 = mongoClientOptions13.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(codecRegistry17);
        org.junit.Assert.assertNotNull(readConcern18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 15 + "'", int19 == 15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test4098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4098");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.setAuthenticationDatabase("hi!");
        java.lang.String str10 = mongoProperties7.getHost();
        mongoProperties7.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        int int27 = mongoClientOptions26.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder28 = mongoProperties7.builder(mongoClientOptions26);
        int int29 = mongoClientOptions26.getMaxConnectionIdleTime();
        int int30 = mongoClientOptions26.getConnectionsPerHost();
        int int31 = mongoClientOptions26.getSocketTimeout();
        int int32 = mongoClientOptions26.getMinHeartbeatFrequency();
        boolean boolean33 = mongoClientOptions26.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder34 = mongoProperties0.builder(mongoClientOptions26);
        int int35 = mongoClientOptions26.getHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern36 = mongoClientOptions26.getWriteConcern();
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 500 + "'", int32 == 500);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10000 + "'", int35 == 10000);
        org.junit.Assert.assertNotNull(writeConcern36);
    }

    @Test
    public void test4099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4099");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClientOptions.Builder builder5 = mongoProperties0.builder(mongoClientOptions4);
        char[] charArray6 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        mongoProperties0.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.database = "";
        java.lang.String str14 = mongoProperties11.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        com.mongodb.MongoClientOptions.Builder builder16 = mongoProperties11.builder(mongoClientOptions15);
        char[] charArray17 = mongoProperties11.getPassword();
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.springframework.core.env.Environment environment19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties11.createMongoClient(mongoClientOptions18, environment19);
        java.lang.String str21 = mongoProperties11.host;
        java.lang.String str22 = mongoProperties11.getHost();
        java.lang.String str23 = mongoProperties11.uri;
        java.lang.Class<?> wildcardClass24 = mongoProperties11.getFieldNamingStrategy();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties25 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties25.clearPassword();
        char[] charArray27 = mongoProperties25.getPassword();
        mongoProperties25.authenticationDatabase = "";
        java.lang.String str30 = mongoProperties25.authenticationDatabase;
        java.lang.String str31 = mongoProperties25.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties32 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties32.database = "";
        java.lang.String str35 = mongoProperties32.getUsername();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties36 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties36.host = "";
        char[] charArray40 = new char[] { '4' };
        mongoProperties36.setPassword(charArray40);
        mongoProperties32.password = charArray40;
        mongoProperties25.setPassword(charArray40);
        mongoProperties11.password = charArray40;
        mongoProperties0.password = charArray40;
        java.lang.Class<?> wildcardClass46 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder47 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.description("");
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions60 = builder57.build();
        int int61 = mongoClientOptions60.getHeartbeatConnectTimeout();
        int int62 = mongoClientOptions60.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry63 = mongoClientOptions60.getCodecRegistry();
        boolean boolean64 = mongoClientOptions60.isSocketKeepAlive();
        int int65 = mongoClientOptions60.getHeartbeatSocketTimeout();
        int int66 = mongoClientOptions60.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder67 = mongoProperties0.builder(mongoClientOptions60);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(charArray17);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "mongodb://localhost/test" + "'", str23, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNull(charArray27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "test" + "'", str31, "test");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[4]");
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(mongoClientOptions60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 20000 + "'", int61 == 20000);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNotNull(codecRegistry63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 20000 + "'", int65 == 20000);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test4100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4100");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.uri;
        mongoProperties0.host = "";
        mongoProperties0.username = "hi!";
        org.springframework.core.env.Environment environment11 = null;
        int int12 = mongoProperties0.determinePort(environment11);
        mongoProperties0.setDatabase("");
        mongoProperties0.setUsername("test");
        java.lang.String str17 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass18 = mongoProperties0.fieldNamingStrategy;
        int int19 = mongoProperties0.getDEFAULT_PORT();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 27017 + "'", int12 == 27017);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 27017 + "'", int19 == 27017);
    }

    @Test
    public void test4101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4101");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.build();
        int int18 = mongoClientOptions17.getHeartbeatConnectTimeout();
        int int19 = mongoClientOptions17.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry20 = mongoClientOptions17.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry21 = mongoClientOptions17.getCodecRegistry();
        com.mongodb.ReadConcern readConcern22 = mongoClientOptions17.getReadConcern();
        int int23 = mongoClientOptions17.getLocalThreshold();
        int int24 = mongoClientOptions17.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions17, environment25);
        java.lang.String str27 = mongoProperties0.getGridFsDatabase();
        java.lang.String str28 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(codecRegistry20);
        org.junit.Assert.assertNotNull(codecRegistry21);
        org.junit.Assert.assertNotNull(readConcern22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 15 + "'", int23 == 15);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10000 + "'", int24 == 10000);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test4102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4102");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions13.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        boolean boolean19 = mongoClientOptions13.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test4103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4103");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.localThreshold(500);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        int int23 = mongoClientOptions22.getHeartbeatConnectTimeout();
        int int24 = mongoClientOptions22.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry25 = mongoClientOptions22.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry26 = mongoClientOptions22.getCodecRegistry();
        com.mongodb.WriteConcern writeConcern27 = mongoClientOptions22.getWriteConcern();
        com.mongodb.DBDecoderFactory dBDecoderFactory28 = mongoClientOptions22.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern29 = mongoClientOptions22.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder30 = builder8.writeConcern(writeConcern29);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.threadsAllowedToBlockForConnectionMultiplier(5);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(codecRegistry25);
        org.junit.Assert.assertNotNull(codecRegistry26);
        org.junit.Assert.assertNotNull(writeConcern27);
        org.junit.Assert.assertNotNull(dBDecoderFactory28);
        org.junit.Assert.assertNotNull(writeConcern29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test4104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4104");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectTimeout((int) (short) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test4105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4105");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions7.getMaxConnectionIdleTime();
        int int10 = mongoClientOptions7.getMinHeartbeatFrequency();
        boolean boolean11 = mongoClientOptions7.isSslInvalidHostNameAllowed();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test4106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4106");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minConnectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.maxConnectionLifeTime(120000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder14 = builder6.connectTimeout((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: connectTimeout must be >= 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test4107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4107");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getServerSelectionTimeout();
        int int9 = mongoClientOptions7.getHeartbeatConnectTimeout();
        int int10 = mongoClientOptions7.getConnectTimeout();
        boolean boolean11 = mongoClientOptions7.isCursorFinalizerEnabled();
        java.lang.String str12 = mongoClientOptions7.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 30000 + "'", int8 == 30000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test4108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4108");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getUri();
        mongoProperties0.gridFsDatabase = "";
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        mongoProperties0.uri = "";
        char[] charArray11 = mongoProperties0.password;
        mongoProperties0.username = "hi!";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties14.database = "";
        java.lang.String str17 = mongoProperties14.getDatabase();
        java.lang.String str18 = mongoProperties14.getUri();
        java.lang.Class<?> wildcardClass19 = mongoProperties14.fieldNamingStrategy;
        mongoProperties14.setPort((java.lang.Integer) 120000);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties22.host = "";
        java.lang.String str25 = mongoProperties22.getHost();
        char[] charArray27 = new char[] { ' ' };
        mongoProperties22.setPassword(charArray27);
        mongoProperties14.password = charArray27;
        mongoProperties0.setPassword(charArray27);
        mongoProperties0.uri = "hi!";
        java.lang.String str33 = mongoProperties0.gridFsDatabase;
        java.lang.String str34 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray11);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb://localhost/test" + "'", str18, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test4109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4109");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.setAuthenticationDatabase("hi!");
        java.lang.String str9 = mongoProperties6.getHost();
        mongoProperties6.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        int int26 = mongoClientOptions25.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder27 = mongoProperties6.builder(mongoClientOptions25);
        int int28 = mongoClientOptions25.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern29 = mongoClientOptions25.getReadConcern();
        boolean boolean30 = mongoClientOptions25.isSslInvalidHostNameAllowed();
        boolean boolean31 = mongoClientOptions25.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder32 = mongoProperties0.builder(mongoClientOptions25);
        int int33 = mongoClientOptions25.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean34 = mongoClientOptions25.isAlwaysUseMBeans();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList35 = mongoClientOptions25.getCommandListeners();
        int int36 = mongoClientOptions25.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry37 = mongoClientOptions25.getCodecRegistry();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(readConcern29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(commandListenerList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(codecRegistry37);
    }

    @Test
    public void test4110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4110");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        mongoProperties0.setGridFsDatabase("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setAuthenticationDatabase("hi!");
        java.lang.String str12 = mongoProperties9.getHost();
        mongoProperties9.authenticationDatabase = "hi!";
        org.springframework.core.env.Environment environment15 = null;
        int int16 = mongoProperties9.determinePort(environment15);
        mongoProperties9.authenticationDatabase = "";
        char[] charArray19 = mongoProperties9.password;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties20 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties20.database = "";
        java.lang.String str23 = mongoProperties20.getUsername();
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass29 = builder28.getClass();
        mongoProperties20.fieldNamingStrategy = wildcardClass29;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties31 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties31.database = "";
        java.lang.String str34 = mongoProperties31.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties35.host = "";
        java.lang.String str38 = mongoProperties35.getHost();
        char[] charArray40 = new char[] { ' ' };
        mongoProperties35.setPassword(charArray40);
        char[] charArray45 = new char[] { '4', '4', '#' };
        mongoProperties35.password = charArray45;
        mongoProperties31.setPassword(charArray45);
        mongoProperties20.password = charArray45;
        mongoProperties9.setPassword(charArray45);
        mongoProperties0.setPassword(charArray45);
        java.lang.Integer int51 = mongoProperties0.port;
        java.lang.String str52 = mongoProperties0.username;
        java.lang.Class<?> wildcardClass53 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.setGridFsDatabase("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 27017 + "'", int16 == 27017);
        org.junit.Assert.assertNull(charArray19);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ ]");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[4, 4, #]");
        org.junit.Assert.assertNull(int51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(wildcardClass53);
    }

    @Test
    public void test4111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4111");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.uri;
        boolean boolean7 = mongoProperties0.hasCustomAddress();
        java.lang.String str8 = mongoProperties0.getHost();
        mongoProperties0.port = 10000;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.host = "";
        java.lang.String str14 = mongoProperties11.getHost();
        char[] charArray16 = new char[] { ' ' };
        mongoProperties11.setPassword(charArray16);
        char[] charArray21 = new char[] { '4', '4', '#' };
        mongoProperties11.password = charArray21;
        mongoProperties11.setAuthenticationDatabase("");
        java.lang.String str25 = mongoProperties11.getUri();
        java.lang.String str26 = mongoProperties11.authenticationDatabase;
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.description("");
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder37.build();
        int int41 = mongoClientOptions40.getHeartbeatConnectTimeout();
        int int42 = mongoClientOptions40.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry43 = mongoClientOptions40.getCodecRegistry();
        com.mongodb.DBDecoderFactory dBDecoderFactory44 = mongoClientOptions40.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder45 = mongoProperties11.builder(mongoClientOptions40);
        mongoProperties11.port = (-1);
        char[] charArray48 = mongoProperties11.getPassword();
        mongoProperties0.password = charArray48;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties50 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties50.database = "";
        java.lang.String str53 = mongoProperties50.getDatabase();
        java.lang.Class<?> wildcardClass54 = mongoProperties50.fieldNamingStrategy;
        java.lang.Integer int55 = mongoProperties50.getPort();
        java.lang.String str56 = mongoProperties50.getDatabase();
        mongoProperties50.gridFsDatabase = "mongodb://localhost/test";
        mongoProperties50.setPort((java.lang.Integer) 20000);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties61 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties61.host = "";
        mongoProperties61.setUsername("hi!");
        mongoProperties61.port = (-1);
        char[] charArray68 = mongoProperties61.getPassword();
        java.lang.String str69 = mongoProperties61.gridFsDatabase;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties70 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties70.host = "";
        char[] charArray74 = new char[] { '4' };
        mongoProperties70.setPassword(charArray74);
        mongoProperties61.password = charArray74;
        mongoProperties50.password = charArray74;
        mongoProperties0.password = charArray74;
        mongoProperties0.setDatabase("test");
        mongoProperties0.host = "";
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[ ]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, 4, #]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "mongodb://localhost/test" + "'", str25, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20000 + "'", int41 == 20000);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNotNull(codecRegistry43);
        org.junit.Assert.assertNotNull(dBDecoderFactory44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[4, 4, #]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNull(wildcardClass54);
        org.junit.Assert.assertNull(int55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNull(charArray68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[4]");
    }

    @Test
    public void test4112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4112");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str5 = mongoProperties0.getUsername();
        mongoProperties0.database = "";
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder18.build();
        int int22 = mongoClientOptions21.getHeartbeatConnectTimeout();
        int int23 = mongoClientOptions21.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory24 = mongoClientOptions21.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = mongoProperties0.builder(mongoClientOptions21);
        java.lang.String str26 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.host = "hi!";
        mongoProperties0.setUri("hi!");
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test4113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4113");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass9 = builder8.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass9;
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str13 = mongoProperties0.getMongoClientDatabase();
        char[] charArray14 = mongoProperties0.password;
        mongoProperties0.uri = "";
        java.lang.String str17 = mongoProperties0.username;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(charArray14);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test4114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4114");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.connectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder10 = builder0.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxWaitTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test4115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4115");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions27, environment29);
        boolean boolean31 = mongoClientOptions27.isSslEnabled();
        boolean boolean32 = mongoClientOptions27.isAlwaysUseMBeans();
        int int33 = mongoClientOptions27.getMinConnectionsPerHost();
        javax.net.SocketFactory socketFactory34 = mongoClientOptions27.getSocketFactory();
        com.mongodb.ReadConcern readConcern35 = mongoClientOptions27.getReadConcern();
        boolean boolean36 = mongoClientOptions27.isAlwaysUseMBeans();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(socketFactory34);
        org.junit.Assert.assertNotNull(readConcern35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test4116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4116");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.setAuthenticationDatabase("hi!");
        java.lang.String str9 = mongoProperties6.getHost();
        mongoProperties6.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        int int26 = mongoClientOptions25.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder27 = mongoProperties6.builder(mongoClientOptions25);
        int int28 = mongoClientOptions25.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern29 = mongoClientOptions25.getReadConcern();
        boolean boolean30 = mongoClientOptions25.isSslInvalidHostNameAllowed();
        boolean boolean31 = mongoClientOptions25.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder32 = mongoProperties0.builder(mongoClientOptions25);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.serverSelectionTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.maxWaitTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.description("");
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder47.build();
        int int51 = mongoClientOptions50.getHeartbeatConnectTimeout();
        int int52 = mongoClientOptions50.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference53 = mongoClientOptions50.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList54 = mongoClientOptions50.getCommandListeners();
        org.bson.codecs.configuration.CodecRegistry codecRegistry55 = mongoClientOptions50.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder56 = builder36.codecRegistry(codecRegistry55);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder59 = builder56.legacyDefaults();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(readConcern29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 20000 + "'", int51 == 20000);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(readPreference53);
        org.junit.Assert.assertNotNull(commandListenerList54);
        org.junit.Assert.assertNotNull(codecRegistry55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test4117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4117");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str5 = mongoProperties0.getUsername();
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.gridFsDatabase = "";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test4118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4118");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getUri();
        mongoProperties0.gridFsDatabase = "";
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.Integer int9 = mongoProperties0.port;
        mongoProperties0.setDatabase("");
        java.lang.String str12 = mongoProperties0.gridFsDatabase;
        org.springframework.core.env.Environment environment13 = null;
        int int14 = mongoProperties0.determinePort(environment13);
        mongoProperties0.uri = "test";
        char[] charArray17 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 27017 + "'", int14 == 27017);
        org.junit.Assert.assertNull(charArray17);
    }

    @Test
    public void test4119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4119");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.setAuthenticationDatabase("hi!");
        java.lang.String str10 = mongoProperties7.getHost();
        mongoProperties7.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        int int27 = mongoClientOptions26.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder28 = mongoProperties7.builder(mongoClientOptions26);
        int int29 = mongoClientOptions26.getMaxConnectionIdleTime();
        int int30 = mongoClientOptions26.getConnectionsPerHost();
        int int31 = mongoClientOptions26.getSocketTimeout();
        int int32 = mongoClientOptions26.getMinHeartbeatFrequency();
        boolean boolean33 = mongoClientOptions26.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder34 = mongoProperties0.builder(mongoClientOptions26);
        int int35 = mongoClientOptions26.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions26);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.description("");
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder51.build();
        int int55 = mongoClientOptions54.getHeartbeatConnectTimeout();
        int int56 = mongoClientOptions54.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry57 = mongoClientOptions54.getCodecRegistry();
        int int58 = mongoClientOptions54.getServerSelectionTimeout();
        int int59 = mongoClientOptions54.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern60 = mongoClientOptions54.getWriteConcern();
        com.mongodb.ReadPreference readPreference61 = mongoClientOptions54.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder62 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions54);
        com.mongodb.DBDecoderFactory dBDecoderFactory63 = mongoClientOptions54.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder64 = builder38.dbDecoderFactory(dBDecoderFactory63);
        com.mongodb.MongoClientOptions.Builder builder65 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.description("");
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder77 = builder75.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions78 = builder75.build();
        int int79 = mongoClientOptions78.getHeartbeatConnectTimeout();
        int int80 = mongoClientOptions78.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference81 = mongoClientOptions78.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList82 = mongoClientOptions78.getCommandListeners();
        int int83 = mongoClientOptions78.getLocalThreshold();
        int int84 = mongoClientOptions78.getConnectionsPerHost();
        java.lang.String str85 = mongoClientOptions78.getRequiredReplicaSetName();
        int int86 = mongoClientOptions78.getConnectTimeout();
        boolean boolean87 = mongoClientOptions78.isSslEnabled();
        com.mongodb.ReadConcern readConcern88 = mongoClientOptions78.getReadConcern();
        com.mongodb.WriteConcern writeConcern89 = mongoClientOptions78.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder90 = builder38.writeConcern(writeConcern89);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 500 + "'", int32 == 500);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10000 + "'", int35 == 10000);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(mongoClientOptions54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 20000 + "'", int55 == 20000);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNotNull(codecRegistry57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 30000 + "'", int58 == 30000);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(writeConcern60);
        org.junit.Assert.assertNotNull(readPreference61);
        org.junit.Assert.assertNotNull(dBDecoderFactory63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(mongoClientOptions78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 20000 + "'", int79 == 20000);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertNotNull(readPreference81);
        org.junit.Assert.assertNotNull(commandListenerList82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 15 + "'", int83 == 15);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 100 + "'", int84 == 100);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10000 + "'", int86 == 10000);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(readConcern88);
        org.junit.Assert.assertNotNull(writeConcern89);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test4120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4120");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        int int25 = mongoClientOptions24.getHeartbeatConnectTimeout();
        int int26 = mongoClientOptions24.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions24.getReadPreference();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions24.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder29 = builder10.readPreference(readPreference28);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.description("mongodb://localhost/test");
        java.lang.Class<?> wildcardClass36 = builder33.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test4121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4121");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxWaitTime(5);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test4122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4122");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder4.maxConnectionIdleTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder4.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder4.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder15 = builder4.heartbeatConnectTimeout((int) (byte) 10);
        com.mongodb.event.CommandListener commandListener16 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder17 = builder15.addCommandListener(commandListener16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test4123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4123");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(20000);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.socketTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.description("");
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder41.build();
        int int45 = mongoClientOptions44.getHeartbeatConnectTimeout();
        int int46 = mongoClientOptions44.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry47 = mongoClientOptions44.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder48 = builder26.codecRegistry(codecRegistry47);
        com.mongodb.MongoClientOptions.Builder builder49 = builder21.codecRegistry(codecRegistry47);
        com.mongodb.MongoClientOptions.Builder builder50 = builder10.codecRegistry(codecRegistry47);
        com.mongodb.event.CommandListener commandListener51 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder52 = builder10.addCommandListener(commandListener51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 20000 + "'", int45 == 20000);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(codecRegistry47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test4124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4124");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.getUri();
        char[] charArray7 = mongoProperties0.password;
        char[] charArray8 = mongoProperties0.password;
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        int int23 = mongoClientOptions22.getHeartbeatConnectTimeout();
        int int24 = mongoClientOptions22.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry25 = mongoClientOptions22.getCodecRegistry();
        boolean boolean26 = mongoClientOptions22.isSocketKeepAlive();
        int int27 = mongoClientOptions22.getMinConnectionsPerHost();
        boolean boolean28 = mongoClientOptions22.isSocketKeepAlive();
        java.lang.String str29 = mongoClientOptions22.getDescription();
        com.mongodb.MongoClientOptions.Builder builder30 = mongoProperties0.builder(mongoClientOptions22);
        java.lang.String str31 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertNull(charArray8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(codecRegistry25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test4125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4125");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder4.maxConnectionIdleTime((int) (short) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties10.setAuthenticationDatabase("hi!");
        java.lang.String str13 = mongoProperties10.getHost();
        mongoProperties10.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        int int30 = mongoClientOptions29.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder31 = mongoProperties10.builder(mongoClientOptions29);
        int int32 = mongoClientOptions29.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern33 = mongoClientOptions29.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder34 = builder4.readConcern(readConcern33);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.description("");
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder45.build();
        int int49 = mongoClientOptions48.getHeartbeatConnectTimeout();
        int int50 = mongoClientOptions48.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference51 = mongoClientOptions48.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList52 = mongoClientOptions48.getCommandListeners();
        org.bson.codecs.configuration.CodecRegistry codecRegistry53 = mongoClientOptions48.getCodecRegistry();
        javax.net.SocketFactory socketFactory54 = mongoClientOptions48.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder55 = builder34.socketFactory(socketFactory54);
        com.mongodb.MongoClientOptions.Builder builder56 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder60 = builder56.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.socketTimeout((int) (short) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties63 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties63.setAuthenticationDatabase("hi!");
        java.lang.String str66 = mongoProperties63.getHost();
        mongoProperties63.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder69 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder77 = builder75.description("");
        com.mongodb.MongoClientOptions.Builder builder79 = builder77.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder81 = builder79.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions82 = builder79.build();
        int int83 = mongoClientOptions82.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder84 = mongoProperties63.builder(mongoClientOptions82);
        javax.net.SocketFactory socketFactory85 = mongoClientOptions82.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder86 = builder62.socketFactory(socketFactory85);
        com.mongodb.MongoClientOptions.Builder builder87 = builder34.socketFactory(socketFactory85);
        com.mongodb.MongoClientOptions.Builder builder88 = builder34.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder90 = builder34.serverSelectionTimeout((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertNotNull(readConcern33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 20000 + "'", int49 == 20000);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(readPreference51);
        org.junit.Assert.assertNotNull(commandListenerList52);
        org.junit.Assert.assertNotNull(codecRegistry53);
        org.junit.Assert.assertNotNull(socketFactory54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(mongoClientOptions82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 20000 + "'", int83 == 20000);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(socketFactory85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test4126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4126");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionLifeTime(0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.maxConnectionIdleTime(20000);
        com.mongodb.MongoClientOptions.Builder builder22 = builder16.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test4127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4127");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.host = "hi!";
        mongoProperties0.database = "";
        mongoProperties0.gridFsDatabase = "hi!";
        java.lang.Class<?> wildcardClass10 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass11 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str12 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str13 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test4128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4128");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        boolean boolean16 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        boolean boolean17 = mongoClientOptions13.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test4129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4129");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getMinConnectionsPerHost();
        java.lang.String str17 = mongoClientOptions13.getRequiredReplicaSetName();
        javax.net.SocketFactory socketFactory18 = mongoClientOptions13.getSocketFactory();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions13.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions13.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(socketFactory18);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
    }

    @Test
    public void test4130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4130");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str5 = mongoProperties0.getUsername();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.database = "";
        java.lang.String str9 = mongoProperties6.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        com.mongodb.MongoClientOptions.Builder builder11 = mongoProperties6.builder(mongoClientOptions10);
        char[] charArray12 = mongoProperties6.getPassword();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.springframework.core.env.Environment environment14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties6.createMongoClient(mongoClientOptions13, environment14);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties16.database = "";
        java.lang.String str19 = mongoProperties16.getDatabase();
        java.lang.String str20 = mongoProperties16.getUri();
        java.lang.Integer int21 = mongoProperties16.getPort();
        char[] charArray25 = new char[] { ' ', ' ', '4' };
        mongoProperties16.setPassword(charArray25);
        mongoProperties6.password = charArray25;
        mongoProperties0.password = charArray25;
        java.lang.String str29 = mongoProperties0.gridFsDatabase;
        java.lang.String str30 = mongoProperties0.getGridFsDatabase();
        java.lang.String str31 = mongoProperties0.authenticationDatabase;
        java.lang.String str32 = mongoProperties0.authenticationDatabase;
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "mongodb://localhost/test" + "'", str20, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "  4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "  4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ ,  , 4]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test4131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4131");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.gridFsDatabase = "";
        java.lang.String str5 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        com.mongodb.MongoClientOptions.Builder builder7 = mongoProperties0.builder(mongoClientOptions6);
        java.lang.String str8 = mongoProperties0.authenticationDatabase;
        java.lang.Integer int9 = mongoProperties0.getPort();
        boolean boolean10 = mongoProperties0.hasCustomAddress();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test4132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4132");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.connectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder10 = builder0.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder0.minHeartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder0.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxWaitTime(30000);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder14.build();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory26 = mongoClientOptions25.getDbEncoderFactory();
        int int27 = mongoClientOptions25.getHeartbeatConnectTimeout();
        int int28 = mongoClientOptions25.getHeartbeatConnectTimeout();
        int int29 = mongoClientOptions25.getHeartbeatConnectTimeout();
        boolean boolean30 = mongoClientOptions25.isSslInvalidHostNameAllowed();
        com.mongodb.ReadPreference readPreference31 = mongoClientOptions25.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder32 = builder14.readPreference(readPreference31);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(dBEncoderFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(readPreference31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test4133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4133");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str5 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        int int21 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions19.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList23 = mongoClientOptions19.getCommandListeners();
        org.bson.codecs.configuration.CodecRegistry codecRegistry24 = mongoClientOptions19.getCodecRegistry();
        javax.net.SocketFactory socketFactory25 = mongoClientOptions19.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = mongoProperties0.builder(mongoClientOptions19);
        int int27 = mongoProperties0.getDEFAULT_PORT();
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertNotNull(commandListenerList23);
        org.junit.Assert.assertNotNull(codecRegistry24);
        org.junit.Assert.assertNotNull(socketFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 27017 + "'", int27 == 27017);
    }

    @Test
    public void test4134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4134");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getLocalThreshold();
        int int15 = mongoClientOptions13.getConnectTimeout();
        boolean boolean16 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.heartbeatConnectTimeout((-1));
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test4135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4135");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getSocketTimeout();
        int int25 = mongoClientOptions19.getMinHeartbeatFrequency();
        boolean boolean26 = mongoClientOptions19.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.localThreshold(100);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.connectTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.serverSelectionTimeout(500);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 500 + "'", int25 == 500);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test4136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4136");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        int int25 = mongoClientOptions24.getHeartbeatConnectTimeout();
        int int26 = mongoClientOptions24.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions24.getReadPreference();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions24.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder29 = builder10.readPreference(readPreference28);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.requiredReplicaSetName("mongodb://localhost/test");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder33 = builder29.connectTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: connectTimeout must be >= 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test4137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4137");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getServerSelectionTimeout();
        int int24 = mongoClientOptions19.getHeartbeatFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions19.getDbEncoderFactory();
        int int26 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int27 = mongoClientOptions19.getServerSelectionTimeout();
        int int28 = mongoClientOptions19.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 30000 + "'", int23 == 30000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10000 + "'", int24 == 10000);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 30000 + "'", int27 == 30000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
    }

    @Test
    public void test4138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4138");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime(120000);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.threadsAllowedToBlockForConnectionMultiplier((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.connectTimeout(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test4139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4139");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.uri;
        mongoProperties0.host = "";
        mongoProperties0.username = "hi!";
        mongoProperties0.uri = "test";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties13.setAuthenticationDatabase("hi!");
        java.lang.String str16 = mongoProperties13.getHost();
        mongoProperties13.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder29.build();
        int int33 = mongoClientOptions32.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder34 = mongoProperties13.builder(mongoClientOptions32);
        int int35 = mongoClientOptions32.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern36 = mongoClientOptions32.getReadConcern();
        boolean boolean37 = mongoClientOptions32.isSslInvalidHostNameAllowed();
        boolean boolean38 = mongoClientOptions32.isSslEnabled();
        int int39 = mongoClientOptions32.getConnectionsPerHost();
        int int40 = mongoClientOptions32.getServerSelectionTimeout();
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.description("");
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder51.build();
        int int55 = mongoClientOptions54.getHeartbeatConnectTimeout();
        int int56 = mongoClientOptions54.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry57 = mongoClientOptions54.getCodecRegistry();
        int int58 = mongoClientOptions54.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference59 = mongoClientOptions54.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList60 = mongoClientOptions54.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory61 = mongoClientOptions54.getDbDecoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList62 = mongoClientOptions54.getCommandListeners();
        int int63 = mongoClientOptions54.getMaxConnectionIdleTime();
        com.mongodb.MongoClientOptions.Builder builder64 = com.mongodb.MongoClientOptions.builder(mongoClientOptions54);
        boolean boolean65 = mongoClientOptions32.equals((java.lang.Object) mongoClientOptions54);
        java.lang.Class<?> wildcardClass66 = mongoClientOptions32.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass66;
        mongoProperties0.uri = "";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20000 + "'", int33 == 20000);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(readConcern36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 30000 + "'", int40 == 30000);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(mongoClientOptions54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 20000 + "'", int55 == 20000);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNotNull(codecRegistry57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 30000 + "'", int58 == 30000);
        org.junit.Assert.assertNotNull(readPreference59);
        org.junit.Assert.assertNotNull(commandListenerList60);
        org.junit.Assert.assertNotNull(dBDecoderFactory61);
        org.junit.Assert.assertNotNull(commandListenerList62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test4140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4140");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions27, environment29);
        boolean boolean31 = mongoClientOptions27.isSslEnabled();
        boolean boolean32 = mongoClientOptions27.isAlwaysUseMBeans();
        int int33 = mongoClientOptions27.getConnectTimeout();
        java.lang.String str34 = mongoClientOptions27.getDescription();
        int int35 = mongoClientOptions27.getMinHeartbeatFrequency();
        boolean boolean36 = mongoClientOptions27.isSslEnabled();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10000 + "'", int33 == 10000);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 500 + "'", int35 == 500);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test4141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4141");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder6.build();
        org.springframework.core.env.Environment environment10 = null;
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions9, environment10);
        int int12 = mongoClientOptions9.getConnectionsPerHost();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions9.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.heartbeatConnectTimeout((int) (short) 100);
        boolean boolean25 = mongoClientOptions9.equals((java.lang.Object) builder20);
        boolean boolean26 = mongoClientOptions9.isSslEnabled();
        boolean boolean27 = mongoClientOptions9.isAlwaysUseMBeans();
        int int28 = mongoClientOptions9.getMinConnectionsPerHost();
        java.lang.Class<?> wildcardClass29 = mongoClientOptions9.getClass();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test4142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4142");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minConnectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.build();
        int int24 = mongoClientOptions23.getHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern25 = mongoClientOptions23.getWriteConcern();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions23.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder27 = builder6.socketFactory(socketFactory26);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10000 + "'", int24 == 10000);
        org.junit.Assert.assertNotNull(writeConcern25);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test4143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4143");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder22 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.minHeartbeatFrequency(500);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions25.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder27 = builder10.socketFactory(socketFactory26);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder27.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test4144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4144");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        int int25 = mongoClientOptions24.getHeartbeatConnectTimeout();
        int int26 = mongoClientOptions24.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions24.getReadPreference();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions24.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder29 = builder10.readPreference(readPreference28);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder40 = builder34.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder45 = builder41.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder45.build();
        int int49 = mongoClientOptions48.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern50 = mongoClientOptions48.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder51 = builder34.readConcern(readConcern50);
        com.mongodb.MongoClientOptions.Builder builder52 = builder33.readConcern(readConcern50);
        com.mongodb.MongoClientOptions.Builder builder54 = builder33.description("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertNotNull(readConcern50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test4145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4145");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str5 = mongoProperties0.getUsername();
        mongoProperties0.database = "";
        org.springframework.core.env.Environment environment8 = null;
        int int9 = mongoProperties0.determinePort(environment8);
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27017 + "'", int9 == 27017);
    }

    @Test
    public void test4146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4146");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions13.getDbDecoderFactory();
        int int16 = mongoClientOptions13.getConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry17 = mongoClientOptions13.getCodecRegistry();
        int int18 = mongoClientOptions13.getMaxConnectionLifeTime();
        int int19 = mongoClientOptions13.getMinHeartbeatFrequency();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList20 = mongoClientOptions13.getCommandListeners();
        boolean boolean21 = mongoClientOptions13.isSslEnabled();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList22 = mongoClientOptions13.getCommandListeners();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList23 = mongoClientOptions13.getCommandListeners();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(codecRegistry17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 500 + "'", int19 == 500);
        org.junit.Assert.assertNotNull(commandListenerList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(commandListenerList22);
        org.junit.Assert.assertNotNull(commandListenerList23);
    }

    @Test
    public void test4147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4147");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        javax.net.SocketFactory socketFactory22 = mongoClientOptions19.getSocketFactory();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions19.getReadPreference();
        com.mongodb.ReadConcern readConcern24 = mongoClientOptions19.getReadConcern();
        boolean boolean25 = mongoClientOptions19.isSslInvalidHostNameAllowed();
        com.mongodb.MongoClientOptions.Builder builder26 = com.mongodb.MongoClientOptions.builder(mongoClientOptions19);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(socketFactory22);
        org.junit.Assert.assertNotNull(readPreference23);
        org.junit.Assert.assertNotNull(readConcern24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test4148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4148");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder5 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder5.build();
        com.mongodb.MongoClientOptions.Builder builder8 = builder5.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        int int17 = mongoClientOptions16.getConnectionsPerHost();
        boolean boolean18 = mongoClientOptions16.isSocketKeepAlive();
        int int19 = mongoClientOptions16.getMaxWaitTime();
        int int20 = mongoClientOptions16.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference21 = mongoClientOptions16.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder22 = builder8.readPreference(readPreference21);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatConnectTimeout((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(readPreference21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test4149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4149");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minConnectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxConnectionIdleTime(20000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test4150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4150");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.username;
        org.springframework.core.env.Environment environment4 = null;
        int int5 = mongoProperties0.determinePort(environment4);
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test4151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4151");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions13.getReadPreference();
        java.lang.String str19 = mongoClientOptions13.getRequiredReplicaSetName();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList20 = mongoClientOptions13.getCommandListeners();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(commandListenerList20);
    }

    @Test
    public void test4152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4152");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str14 = mongoProperties0.getUri();
        java.lang.String str15 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        int int30 = mongoClientOptions29.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry31 = mongoClientOptions29.getCodecRegistry();
        boolean boolean32 = mongoClientOptions29.isSocketKeepAlive();
        boolean boolean33 = mongoClientOptions29.isSocketKeepAlive();
        int int34 = mongoClientOptions29.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder35 = mongoProperties0.builder(mongoClientOptions29);
        int int36 = mongoClientOptions29.getMaxConnectionIdleTime();
        boolean boolean37 = mongoClientOptions29.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions29);
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder47 = builder43.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder49 = builder43.heartbeatConnectTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.minConnectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.maxWaitTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.description("test");
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties58 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties58.host = "";
        java.lang.String str61 = mongoProperties58.getHost();
        char[] charArray63 = new char[] { ' ' };
        mongoProperties58.setPassword(charArray63);
        char[] charArray68 = new char[] { '4', '4', '#' };
        mongoProperties58.password = charArray68;
        mongoProperties58.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder72 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder76 = builder74.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder78 = builder76.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.description("");
        com.mongodb.MongoClientOptions.Builder builder82 = builder80.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder84 = builder82.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions85 = builder82.build();
        int int86 = mongoClientOptions85.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment87 = null;
        com.mongodb.MongoClient mongoClient88 = mongoProperties58.createMongoClient(mongoClientOptions85, environment87);
        boolean boolean89 = mongoClientOptions85.isSslEnabled();
        boolean boolean90 = mongoClientOptions85.isAlwaysUseMBeans();
        int int91 = mongoClientOptions85.getConnectTimeout();
        javax.net.SocketFactory socketFactory92 = mongoClientOptions85.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder93 = builder55.socketFactory(socketFactory92);
        com.mongodb.MongoClientOptions.Builder builder94 = builder38.socketFactory(socketFactory92);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, 4, #]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb://localhost/test" + "'", str14, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[ ]");
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(mongoClientOptions85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10000 + "'", int86 == 10000);
        org.junit.Assert.assertNotNull(mongoClient88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10000 + "'", int91 == 10000);
        org.junit.Assert.assertNotNull(socketFactory92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test4153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4153");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry17 = mongoClientOptions13.getCodecRegistry();
        com.mongodb.ReadConcern readConcern18 = mongoClientOptions13.getReadConcern();
        int int19 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean20 = mongoClientOptions13.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(codecRegistry17);
        org.junit.Assert.assertNotNull(readConcern18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test4154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4154");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder5 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder5.build();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder16 = builder11.maxConnectionIdleTime((int) (short) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties17.setAuthenticationDatabase("hi!");
        java.lang.String str20 = mongoProperties17.getHost();
        mongoProperties17.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.description("");
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder33.build();
        int int37 = mongoClientOptions36.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder38 = mongoProperties17.builder(mongoClientOptions36);
        int int39 = mongoClientOptions36.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern40 = mongoClientOptions36.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder41 = builder11.readConcern(readConcern40);
        com.mongodb.MongoClientOptions.Builder builder43 = builder11.heartbeatConnectTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder45 = builder11.description("test");
        boolean boolean46 = mongoClientOptions6.equals((java.lang.Object) builder11);
        com.mongodb.ReadPreference readPreference47 = mongoClientOptions6.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 20000 + "'", int37 == 20000);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(readConcern40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(readPreference47);
    }

    @Test
    public void test4155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4155");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.uri;
        mongoProperties0.host = "";
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.host = "";
        java.lang.String str14 = mongoProperties11.getHost();
        char[] charArray16 = new char[] { ' ' };
        mongoProperties11.setPassword(charArray16);
        mongoProperties11.clearPassword();
        boolean boolean19 = mongoProperties11.hasCustomCredentials();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder26.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder31 = builder26.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.minHeartbeatFrequency(500);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties34 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties34.database = "";
        java.lang.String str37 = mongoProperties34.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions38 = null;
        com.mongodb.MongoClientOptions.Builder builder39 = mongoProperties34.builder(mongoClientOptions38);
        char[] charArray40 = mongoProperties34.getPassword();
        mongoProperties34.setHost("hi!");
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.description("");
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions56 = builder53.build();
        int int57 = mongoClientOptions56.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment58 = null;
        com.mongodb.MongoClient mongoClient59 = mongoProperties34.createMongoClient(mongoClientOptions56, environment58);
        int int60 = mongoClientOptions56.getMaxConnectionLifeTime();
        boolean boolean61 = mongoClientOptions56.isSslEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory62 = mongoClientOptions56.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder63 = builder31.dbEncoderFactory(dBEncoderFactory62);
        java.lang.Class<?> wildcardClass64 = builder31.getClass();
        mongoProperties11.fieldNamingStrategy = wildcardClass64;
        mongoProperties0.fieldNamingStrategy = wildcardClass64;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[\000]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(charArray40);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoClientOptions56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10000 + "'", int57 == 10000);
        org.junit.Assert.assertNotNull(mongoClient59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test4156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4156");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setUri("hi!");
        mongoProperties0.setDatabase("test");
        java.lang.String str8 = mongoProperties0.database;
        boolean boolean9 = mongoProperties0.hasCustomAddress();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "test" + "'", str8, "test");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test4157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4157");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.Class<?> wildcardClass3 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setDatabase("hi!");
        java.lang.String str6 = mongoProperties0.username;
        java.lang.Integer int7 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test4158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4158");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectTimeout((int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4159");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder2.build();
        java.lang.String str6 = mongoClientOptions5.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions5.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder8 = com.mongodb.MongoClientOptions.builder(mongoClientOptions5);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxWaitTime((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties19.setAuthenticationDatabase("hi!");
        java.lang.String str22 = mongoProperties19.getHost();
        mongoProperties19.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.description("");
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder35.build();
        int int39 = mongoClientOptions38.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder40 = mongoProperties19.builder(mongoClientOptions38);
        int int41 = mongoClientOptions38.getMaxConnectionIdleTime();
        int int42 = mongoClientOptions38.getConnectionsPerHost();
        com.mongodb.ReadPreference readPreference43 = mongoClientOptions38.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder44 = builder18.readPreference(readPreference43);
        com.mongodb.MongoClientOptions.Builder builder45 = builder12.readPreference(readPreference43);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 20000 + "'", int39 == 20000);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertNotNull(readPreference43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test4160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4160");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions13.getDbDecoderFactory();
        int int16 = mongoClientOptions13.getMaxConnectionIdleTime();
        boolean boolean17 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        java.lang.String str18 = mongoClientOptions13.getDescription();
        int int19 = mongoClientOptions13.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern20 = mongoClientOptions13.getWriteConcern();
        int int21 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions13.getReadConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(writeConcern20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(readConcern23);
    }

    @Test
    public void test4161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4161");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions27, environment29);
        mongoProperties0.database = "hi!";
        java.lang.String str33 = mongoProperties0.database;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties34 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties34.database = "";
        java.lang.String str37 = mongoProperties34.getUsername();
        mongoProperties34.setUri("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties40 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties40.database = "";
        java.lang.String str43 = mongoProperties40.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions44 = null;
        com.mongodb.MongoClientOptions.Builder builder45 = mongoProperties40.builder(mongoClientOptions44);
        char[] charArray46 = mongoProperties40.getPassword();
        com.mongodb.MongoClientOptions mongoClientOptions47 = null;
        org.springframework.core.env.Environment environment48 = null;
        com.mongodb.MongoClient mongoClient49 = mongoProperties40.createMongoClient(mongoClientOptions47, environment48);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties50 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties50.database = "";
        java.lang.String str53 = mongoProperties50.getDatabase();
        java.lang.String str54 = mongoProperties50.getUri();
        java.lang.Integer int55 = mongoProperties50.getPort();
        char[] charArray59 = new char[] { ' ', ' ', '4' };
        mongoProperties50.setPassword(charArray59);
        mongoProperties40.password = charArray59;
        mongoProperties34.password = charArray59;
        mongoProperties0.setPassword(charArray59);
        java.lang.Class<?> wildcardClass64 = charArray59.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(charArray46);
        org.junit.Assert.assertNotNull(mongoClient49);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "mongodb://localhost/test" + "'", str54, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int55);
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "  4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "  4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[ ,  , 4]");
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test4162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4162");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        mongoProperties0.gridFsDatabase = "test";
        mongoProperties0.port = 500;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.host = "";
        java.lang.String str9 = mongoProperties6.getHost();
        char[] charArray11 = new char[] { ' ' };
        mongoProperties6.setPassword(charArray11);
        char[] charArray16 = new char[] { '4', '4', '#' };
        mongoProperties6.password = charArray16;
        mongoProperties6.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.description("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.build();
        int int34 = mongoClientOptions33.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment35 = null;
        com.mongodb.MongoClient mongoClient36 = mongoProperties6.createMongoClient(mongoClientOptions33, environment35);
        java.util.List<com.mongodb.event.CommandListener> commandListenerList37 = mongoClientOptions33.getCommandListeners();
        boolean boolean38 = mongoClientOptions33.isSslEnabled();
        org.springframework.core.env.Environment environment39 = null;
        com.mongodb.MongoClient mongoClient40 = mongoProperties0.createMongoClient(mongoClientOptions33, environment39);
        java.lang.String str41 = mongoProperties0.getGridFsDatabase();
        java.lang.String str42 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str43 = mongoProperties0.gridFsDatabase;
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[ ]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10000 + "'", int34 == 10000);
        org.junit.Assert.assertNotNull(mongoClient36);
        org.junit.Assert.assertNotNull(commandListenerList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mongoClient40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "test" + "'", str41, "test");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "test" + "'", str43, "test");
    }

    @Test
    public void test4163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4163");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        int int25 = mongoClientOptions24.getHeartbeatConnectTimeout();
        int int26 = mongoClientOptions24.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions24.getReadPreference();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions24.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder29 = builder10.readPreference(readPreference28);
        com.mongodb.MongoClientOptions.Builder builder30 = builder29.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.description("");
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.heartbeatSocketTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.maxConnectionLifeTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.description("");
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions65 = builder62.build();
        int int66 = mongoClientOptions65.getHeartbeatConnectTimeout();
        int int67 = mongoClientOptions65.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry68 = mongoClientOptions65.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry69 = mongoClientOptions65.getCodecRegistry();
        com.mongodb.WriteConcern writeConcern70 = mongoClientOptions65.getWriteConcern();
        com.mongodb.DBDecoderFactory dBDecoderFactory71 = mongoClientOptions65.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern72 = mongoClientOptions65.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder73 = builder49.writeConcern(writeConcern72);
        com.mongodb.MongoClientOptions.Builder builder74 = builder30.writeConcern(writeConcern72);
        com.mongodb.MongoClientOptions mongoClientOptions75 = builder30.build();
        com.mongodb.MongoClientOptions.Builder builder77 = builder30.heartbeatConnectTimeout(1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(mongoClientOptions65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 20000 + "'", int66 == 20000);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertNotNull(codecRegistry68);
        org.junit.Assert.assertNotNull(codecRegistry69);
        org.junit.Assert.assertNotNull(writeConcern70);
        org.junit.Assert.assertNotNull(dBDecoderFactory71);
        org.junit.Assert.assertNotNull(writeConcern72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(mongoClientOptions75);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test4164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4164");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency(30000);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.cursorFinalizerEnabled(true);
        com.mongodb.event.CommandListener commandListener13 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder14 = builder12.addCommandListener(commandListener13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test4165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4165");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClientOptions.Builder builder5 = mongoProperties0.builder(mongoClientOptions4);
        char[] charArray6 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getHost();
        mongoProperties0.setHost("mongodb://localhost/test");
        mongoProperties0.setAuthenticationDatabase("");
        org.springframework.core.env.Environment environment15 = null;
        int int16 = mongoProperties0.determinePort(environment15);
        boolean boolean17 = mongoProperties0.hasCustomCredentials();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 27017 + "'", int16 == 27017);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test4166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4166");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.username;
        org.springframework.core.env.Environment environment4 = null;
        int int5 = mongoProperties0.determinePort(environment4);
        java.lang.String str6 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.uri = "hi!";
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        int int23 = mongoClientOptions22.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry24 = mongoClientOptions22.getCodecRegistry();
        int int25 = mongoClientOptions22.getMinConnectionsPerHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties26 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties26.setAuthenticationDatabase("hi!");
        java.lang.String str29 = mongoProperties26.getHost();
        mongoProperties26.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.description("");
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder42.build();
        int int46 = mongoClientOptions45.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder47 = mongoProperties26.builder(mongoClientOptions45);
        boolean boolean48 = mongoClientOptions22.equals((java.lang.Object) mongoClientOptions45);
        int int49 = mongoClientOptions22.getHeartbeatConnectTimeout();
        java.lang.String str50 = mongoClientOptions22.getDescription();
        com.mongodb.MongoClientOptions.Builder builder51 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions22);
        int int52 = mongoClientOptions22.getHeartbeatConnectTimeout();
        boolean boolean53 = mongoClientOptions22.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder54 = mongoProperties0.builder(mongoClientOptions22);
        int int55 = mongoClientOptions22.getMinHeartbeatFrequency();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 27017 + "'", int5 == 27017);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 20000 + "'", int46 == 20000);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 20000 + "'", int49 == 20000);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 20000 + "'", int52 == 20000);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 500 + "'", int55 == 500);
    }

    @Test
    public void test4167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4167");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        int int18 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties19.host = "";
        mongoProperties19.username = "";
        boolean boolean24 = mongoClientOptions13.equals((java.lang.Object) mongoProperties19);
        mongoProperties19.gridFsDatabase = "";
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.description("");
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder37.build();
        int int41 = mongoClientOptions40.getHeartbeatConnectTimeout();
        int int42 = mongoClientOptions40.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference43 = mongoClientOptions40.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList44 = mongoClientOptions40.getCommandListeners();
        int int45 = mongoClientOptions40.getLocalThreshold();
        int int46 = mongoClientOptions40.getConnectionsPerHost();
        int int47 = mongoClientOptions40.getHeartbeatFrequency();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties48 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties48.setAuthenticationDatabase("hi!");
        java.lang.String str51 = mongoProperties48.getHost();
        mongoProperties48.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder54 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.description("");
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions67 = builder64.build();
        int int68 = mongoClientOptions67.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder69 = mongoProperties48.builder(mongoClientOptions67);
        int int70 = mongoClientOptions67.getMaxConnectionIdleTime();
        int int71 = mongoClientOptions67.getConnectionsPerHost();
        int int72 = mongoClientOptions67.getSocketTimeout();
        int int73 = mongoClientOptions67.getMinHeartbeatFrequency();
        boolean boolean74 = mongoClientOptions67.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder75 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions67);
        com.mongodb.WriteConcern writeConcern76 = mongoClientOptions67.getWriteConcern();
        int int77 = mongoClientOptions67.getMaxConnectionIdleTime();
        boolean boolean78 = mongoClientOptions40.equals((java.lang.Object) int77);
        com.mongodb.DBEncoderFactory dBEncoderFactory79 = mongoClientOptions40.getDbEncoderFactory();
        org.springframework.core.env.Environment environment80 = null;
        com.mongodb.MongoClient mongoClient81 = mongoProperties19.createMongoClient(mongoClientOptions40, environment80);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20000 + "'", int41 == 20000);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNotNull(readPreference43);
        org.junit.Assert.assertNotNull(commandListenerList44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 15 + "'", int45 == 15);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10000 + "'", int47 == 10000);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(mongoClientOptions67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 20000 + "'", int68 == 20000);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 500 + "'", int73 == 500);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(writeConcern76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory79);
        org.junit.Assert.assertNotNull(mongoClient81);
    }

    @Test
    public void test4168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4168");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatConnectTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.minConnectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxWaitTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("test");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties19.host = "";
        java.lang.String str22 = mongoProperties19.getHost();
        char[] charArray24 = new char[] { ' ' };
        mongoProperties19.setPassword(charArray24);
        char[] charArray29 = new char[] { '4', '4', '#' };
        mongoProperties19.password = charArray29;
        mongoProperties19.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.description("");
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder43.build();
        int int47 = mongoClientOptions46.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment48 = null;
        com.mongodb.MongoClient mongoClient49 = mongoProperties19.createMongoClient(mongoClientOptions46, environment48);
        boolean boolean50 = mongoClientOptions46.isSslEnabled();
        boolean boolean51 = mongoClientOptions46.isAlwaysUseMBeans();
        int int52 = mongoClientOptions46.getConnectTimeout();
        javax.net.SocketFactory socketFactory53 = mongoClientOptions46.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder54 = builder16.socketFactory(socketFactory53);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.maxConnectionIdleTime((int) (byte) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ ]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10000 + "'", int47 == 10000);
        org.junit.Assert.assertNotNull(mongoClient49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10000 + "'", int52 == 10000);
        org.junit.Assert.assertNotNull(socketFactory53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test4169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4169");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        mongoProperties0.setGridFsDatabase("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setAuthenticationDatabase("hi!");
        java.lang.String str12 = mongoProperties9.getHost();
        mongoProperties9.authenticationDatabase = "hi!";
        org.springframework.core.env.Environment environment15 = null;
        int int16 = mongoProperties9.determinePort(environment15);
        mongoProperties9.authenticationDatabase = "";
        char[] charArray19 = mongoProperties9.password;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties20 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties20.database = "";
        java.lang.String str23 = mongoProperties20.getUsername();
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass29 = builder28.getClass();
        mongoProperties20.fieldNamingStrategy = wildcardClass29;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties31 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties31.database = "";
        java.lang.String str34 = mongoProperties31.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties35.host = "";
        java.lang.String str38 = mongoProperties35.getHost();
        char[] charArray40 = new char[] { ' ' };
        mongoProperties35.setPassword(charArray40);
        char[] charArray45 = new char[] { '4', '4', '#' };
        mongoProperties35.password = charArray45;
        mongoProperties31.setPassword(charArray45);
        mongoProperties20.password = charArray45;
        mongoProperties9.setPassword(charArray45);
        mongoProperties0.setPassword(charArray45);
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass52 = mongoProperties0.fieldNamingStrategy;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 27017 + "'", int16 == 27017);
        org.junit.Assert.assertNull(charArray19);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ ]");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[\000, \000, \000]");
        org.junit.Assert.assertNull(wildcardClass52);
    }

    @Test
    public void test4170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4170");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getHeartbeatSocketTimeout();
        com.mongodb.ReadConcern readConcern25 = mongoClientOptions19.getReadConcern();
        int int26 = mongoClientOptions19.getServerSelectionTimeout();
        int int27 = mongoClientOptions19.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern28 = mongoClientOptions19.getReadConcern();
        int int29 = mongoClientOptions19.getThreadsAllowedToBlockForConnectionMultiplier();
        javax.net.SocketFactory socketFactory30 = mongoClientOptions19.getSocketFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList31 = mongoClientOptions19.getCommandListeners();
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.serverSelectionTimeout((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatFrequency((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: heartbeatFrequency must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertNotNull(readConcern25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 30000 + "'", int26 == 30000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10000 + "'", int27 == 10000);
        org.junit.Assert.assertNotNull(readConcern28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertNotNull(socketFactory30);
        org.junit.Assert.assertNotNull(commandListenerList31);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test4171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4171");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        java.lang.String str6 = mongoProperties0.getUsername();
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setDatabase("");
        java.lang.String str10 = mongoProperties0.authenticationDatabase;
        java.lang.Integer int11 = mongoProperties0.getPort();
        java.lang.Integer int12 = mongoProperties0.port;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "test" + "'", str7, "test");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(int12);
    }

    @Test
    public void test4172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4172");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder28.build();
        int int32 = mongoClientOptions31.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern33 = mongoClientOptions31.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder34 = builder21.readConcern(readConcern33);
        com.mongodb.MongoClientOptions.Builder builder35 = builder6.readConcern(readConcern33);
        com.mongodb.MongoClientOptions.Builder builder37 = builder6.heartbeatFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder39 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxConnectionLifeTime((int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(readConcern33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test4173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4173");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList17 = mongoClientOptions13.getCommandListeners();
        org.bson.codecs.configuration.CodecRegistry codecRegistry18 = mongoClientOptions13.getCodecRegistry();
        javax.net.SocketFactory socketFactory19 = mongoClientOptions13.getSocketFactory();
        int int20 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int21 = mongoClientOptions13.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern22 = mongoClientOptions13.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(commandListenerList17);
        org.junit.Assert.assertNotNull(codecRegistry18);
        org.junit.Assert.assertNotNull(socketFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 500 + "'", int21 == 500);
        org.junit.Assert.assertNotNull(writeConcern22);
    }

    @Test
    public void test4174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4174");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass9 = builder8.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass9;
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        boolean boolean15 = mongoProperties0.hasCustomCredentials();
        java.lang.Integer int16 = mongoProperties0.getPort();
        mongoProperties0.database = "test";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(int16);
    }

    @Test
    public void test4175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4175");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        java.lang.Object obj14 = null;
        boolean boolean15 = mongoClientOptions13.equals(obj14);
        int int16 = mongoClientOptions13.getHeartbeatConnectTimeout();
        boolean boolean17 = mongoClientOptions13.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        boolean boolean19 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        boolean boolean20 = mongoClientOptions13.isSocketKeepAlive();
        java.lang.String str21 = mongoClientOptions13.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test4176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4176");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.connectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder10 = builder0.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder0.minHeartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder0.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatConnectTimeout((int) (short) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test4177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4177");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.username;
        java.lang.String str4 = mongoProperties0.authenticationDatabase;
        java.lang.String str5 = mongoProperties0.database;
        java.lang.String str6 = mongoProperties0.database;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test4178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4178");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getUri();
        mongoProperties0.gridFsDatabase = "";
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str9 = mongoProperties0.host;
        org.springframework.core.env.Environment environment10 = null;
        int int11 = mongoProperties0.determinePort(environment10);
        mongoProperties0.setGridFsDatabase("");
        char[] charArray14 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 27017 + "'", int11 == 27017);
        org.junit.Assert.assertNull(charArray14);
    }

    @Test
    public void test4179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4179");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions19.getReadConcern();
        int int24 = mongoClientOptions19.getMaxConnectionIdleTime();
        boolean boolean25 = mongoClientOptions19.isSslInvalidHostNameAllowed();
        int int26 = mongoClientOptions19.getSocketTimeout();
        int int27 = mongoClientOptions19.getConnectionsPerHost();
        int int28 = mongoClientOptions19.getMinHeartbeatFrequency();
        boolean boolean29 = mongoClientOptions19.isSocketKeepAlive();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(readConcern23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 500 + "'", int28 == 500);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test4180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4180");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.description("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.build();
        int int34 = mongoClientOptions33.getHeartbeatConnectTimeout();
        int int35 = mongoClientOptions33.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference36 = mongoClientOptions33.getReadPreference();
        com.mongodb.ReadPreference readPreference37 = mongoClientOptions33.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder38 = builder19.readPreference(readPreference37);
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder46.build();
        java.lang.String str50 = mongoClientOptions49.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory51 = mongoClientOptions49.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder52 = builder39.dbEncoderFactory(dBEncoderFactory51);
        com.mongodb.MongoClientOptions.Builder builder53 = builder19.dbEncoderFactory(dBEncoderFactory51);
        com.mongodb.MongoClientOptions.Builder builder54 = builder8.dbEncoderFactory(dBEncoderFactory51);
        com.mongodb.MongoClientOptions mongoClientOptions55 = builder54.build();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties56 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties56.setAuthenticationDatabase("hi!");
        java.lang.String str59 = mongoProperties56.getHost();
        mongoProperties56.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder62 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.description("");
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions75 = builder72.build();
        int int76 = mongoClientOptions75.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder77 = mongoProperties56.builder(mongoClientOptions75);
        int int78 = mongoClientOptions75.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern79 = mongoClientOptions75.getReadConcern();
        int int80 = mongoClientOptions75.getMaxConnectionIdleTime();
        int int81 = mongoClientOptions75.getHeartbeatConnectTimeout();
        boolean boolean82 = mongoClientOptions75.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory83 = mongoClientOptions75.getDbEncoderFactory();
        javax.net.SocketFactory socketFactory84 = mongoClientOptions75.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder85 = builder54.socketFactory(socketFactory84);
        com.mongodb.MongoClientOptions.Builder builder87 = builder85.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder89 = builder85.heartbeatConnectTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder91 = builder85.connectTimeout(10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20000 + "'", int34 == 20000);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(readPreference36);
        org.junit.Assert.assertNotNull(readPreference37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(dBEncoderFactory51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(mongoClientOptions55);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(mongoClientOptions75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 20000 + "'", int76 == 20000);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertNotNull(readConcern79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 20000 + "'", int81 == 20000);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory83);
        org.junit.Assert.assertNotNull(socketFactory84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test4181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4181");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isAlwaysUseMBeans();
        int int9 = mongoClientOptions7.getConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory10 = mongoClientOptions7.getDbEncoderFactory();
        int int11 = mongoClientOptions7.getLocalThreshold();
        boolean boolean12 = mongoClientOptions7.isCursorFinalizerEnabled();
        boolean boolean13 = mongoClientOptions7.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertNotNull(dBEncoderFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 15 + "'", int11 == 15);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test4182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4182");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder13 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder15 = builder10.maxConnectionIdleTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder10.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder10.minConnectionsPerHost((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.connectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder28.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder33 = builder28.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.minHeartbeatFrequency(500);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties36 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties36.database = "";
        java.lang.String str39 = mongoProperties36.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions40 = null;
        com.mongodb.MongoClientOptions.Builder builder41 = mongoProperties36.builder(mongoClientOptions40);
        char[] charArray42 = mongoProperties36.getPassword();
        mongoProperties36.setHost("hi!");
        com.mongodb.MongoClientOptions.Builder builder45 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.description("");
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder55.build();
        int int59 = mongoClientOptions58.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment60 = null;
        com.mongodb.MongoClient mongoClient61 = mongoProperties36.createMongoClient(mongoClientOptions58, environment60);
        int int62 = mongoClientOptions58.getMaxConnectionLifeTime();
        boolean boolean63 = mongoClientOptions58.isSslEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory64 = mongoClientOptions58.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder65 = builder33.dbEncoderFactory(dBEncoderFactory64);
        com.mongodb.MongoClientOptions.Builder builder66 = builder21.dbEncoderFactory(dBEncoderFactory64);
        com.mongodb.MongoClientOptions.Builder builder67 = builder5.dbEncoderFactory(dBEncoderFactory64);
        com.mongodb.MongoClientOptions.Builder builder69 = builder5.minConnectionsPerHost((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder70 = builder69.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder71 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder77 = builder75.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder79 = builder77.description("");
        com.mongodb.MongoClientOptions.Builder builder81 = builder79.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder83 = builder81.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions84 = builder81.build();
        int int85 = mongoClientOptions84.getHeartbeatConnectTimeout();
        int int86 = mongoClientOptions84.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry87 = mongoClientOptions84.getCodecRegistry();
        com.mongodb.ReadConcern readConcern88 = mongoClientOptions84.getReadConcern();
        boolean boolean89 = mongoClientOptions84.isSocketKeepAlive();
        boolean boolean90 = mongoClientOptions84.isAlwaysUseMBeans();
        org.bson.codecs.configuration.CodecRegistry codecRegistry91 = mongoClientOptions84.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder92 = builder69.codecRegistry(codecRegistry91);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(charArray42);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10000 + "'", int59 == 10000);
        org.junit.Assert.assertNotNull(mongoClient61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(mongoClientOptions84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 20000 + "'", int85 == 20000);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10 + "'", int86 == 10);
        org.junit.Assert.assertNotNull(codecRegistry87);
        org.junit.Assert.assertNotNull(readConcern88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(codecRegistry91);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test4183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4183");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClientOptions.Builder builder5 = mongoProperties0.builder(mongoClientOptions4);
        char[] charArray6 = mongoProperties0.getPassword();
        mongoProperties0.setHost("hi!");
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        int int23 = mongoClientOptions22.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions22, environment24);
        int int26 = mongoClientOptions22.getMaxConnectionLifeTime();
        int int27 = mongoClientOptions22.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean28 = mongoClientOptions22.isSslInvalidHostNameAllowed();
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions22);
        boolean boolean30 = mongoClientOptions22.isCursorFinalizerEnabled();
        int int31 = mongoClientOptions22.getMaxWaitTime();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10000 + "'", int23 == 10000);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 120000 + "'", int31 == 120000);
    }

    @Test
    public void test4184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4184");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionLifeTime((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("");
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder43.build();
        int int47 = mongoClientOptions46.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern48 = mongoClientOptions46.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder49 = builder36.readConcern(readConcern48);
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.description("");
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder60.build();
        int int64 = mongoClientOptions63.getHeartbeatConnectTimeout();
        int int65 = mongoClientOptions63.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory66 = mongoClientOptions63.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder67 = builder36.dbDecoderFactory(dBDecoderFactory66);
        com.mongodb.MongoClientOptions.Builder builder68 = builder21.dbDecoderFactory(dBDecoderFactory66);
        com.mongodb.MongoClientOptions.Builder builder69 = builder12.dbDecoderFactory(dBDecoderFactory66);
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.maxConnectionLifeTime(32);
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(readConcern48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoClientOptions63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 20000 + "'", int64 == 20000);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test4185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4185");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        char[] charArray4 = new char[] { '4' };
        mongoProperties0.setPassword(charArray4);
        java.lang.String str6 = mongoProperties0.authenticationDatabase;
        mongoProperties0.uri = "mongodb://localhost/test";
        boolean boolean9 = mongoProperties0.hasCustomCredentials();
        java.lang.Class<?> wildcardClass10 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4]");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardClass10);
    }

    @Test
    public void test4186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4186");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getHost();
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        mongoProperties0.setPort((java.lang.Integer) 5);
        mongoProperties0.clearPassword();
        mongoProperties0.setUsername("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties12.host = "";
        java.lang.String str15 = mongoProperties12.getHost();
        char[] charArray17 = new char[] { ' ' };
        mongoProperties12.setPassword(charArray17);
        char[] charArray22 = new char[] { '4', '4', '#' };
        mongoProperties12.password = charArray22;
        mongoProperties12.setAuthenticationDatabase("");
        java.lang.String str26 = mongoProperties12.getUri();
        java.lang.String str27 = mongoProperties12.getUsername();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder38.build();
        int int42 = mongoClientOptions41.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry43 = mongoClientOptions41.getCodecRegistry();
        boolean boolean44 = mongoClientOptions41.isSocketKeepAlive();
        boolean boolean45 = mongoClientOptions41.isSocketKeepAlive();
        int int46 = mongoClientOptions41.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder47 = mongoProperties12.builder(mongoClientOptions41);
        com.mongodb.MongoClientOptions.Builder builder48 = mongoProperties0.builder(mongoClientOptions41);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties49 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str50 = mongoProperties49.getGridFsDatabase();
        boolean boolean51 = mongoClientOptions41.equals((java.lang.Object) str50);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ ]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[4, 4, #]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "mongodb://localhost/test" + "'", str26, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20000 + "'", int42 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test4187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4187");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder2.build();
        java.lang.String str6 = mongoClientOptions5.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions5.getDbEncoderFactory();
        boolean boolean8 = mongoClientOptions5.isSslInvalidHostNameAllowed();
        int int9 = mongoClientOptions5.getConnectionsPerHost();
        int int10 = mongoClientOptions5.getLocalThreshold();
        int int11 = mongoClientOptions5.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions5.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(readPreference12);
    }

    @Test
    public void test4188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4188");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Class<?> wildcardClass5 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.setPort((java.lang.Integer) 120000);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties8.host = "";
        java.lang.String str11 = mongoProperties8.getHost();
        char[] charArray13 = new char[] { ' ' };
        mongoProperties8.setPassword(charArray13);
        mongoProperties0.password = charArray13;
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        int int30 = mongoClientOptions29.getHeartbeatConnectTimeout();
        int int31 = mongoClientOptions29.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference32 = mongoClientOptions29.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList33 = mongoClientOptions29.getCommandListeners();
        int int34 = mongoClientOptions29.getThreadsAllowedToBlockForConnectionMultiplier();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties35.database = "";
        java.lang.String str38 = mongoProperties35.getDatabase();
        java.lang.String str39 = mongoProperties35.getUri();
        java.lang.Integer int40 = mongoProperties35.getPort();
        java.lang.String str41 = mongoProperties35.uri;
        mongoProperties35.host = "";
        mongoProperties35.username = "hi!";
        org.springframework.core.env.Environment environment46 = null;
        int int47 = mongoProperties35.determinePort(environment46);
        boolean boolean48 = mongoClientOptions29.equals((java.lang.Object) environment46);
        org.springframework.core.env.Environment environment49 = null;
        com.mongodb.MongoClient mongoClient50 = mongoProperties0.createMongoClient(mongoClientOptions29, environment49);
        int int51 = mongoClientOptions29.getMinHeartbeatFrequency();
        int int52 = mongoClientOptions29.getMaxWaitTime();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[\000]");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(readPreference32);
        org.junit.Assert.assertNotNull(commandListenerList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "mongodb://localhost/test" + "'", str39, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "mongodb://localhost/test" + "'", str41, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 27017 + "'", int47 == 27017);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mongoClient50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 500 + "'", int51 == 500);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 120000 + "'", int52 == 120000);
    }

    @Test
    public void test4189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4189");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions27, environment29);
        boolean boolean31 = mongoClientOptions27.isSslEnabled();
        boolean boolean32 = mongoClientOptions27.isAlwaysUseMBeans();
        int int33 = mongoClientOptions27.getMinConnectionsPerHost();
        javax.net.SocketFactory socketFactory34 = mongoClientOptions27.getSocketFactory();
        com.mongodb.ReadConcern readConcern35 = mongoClientOptions27.getReadConcern();
        com.mongodb.ReadConcern readConcern36 = mongoClientOptions27.getReadConcern();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(socketFactory34);
        org.junit.Assert.assertNotNull(readConcern35);
        org.junit.Assert.assertNotNull(readConcern36);
    }

    @Test
    public void test4190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4190");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        mongoProperties0.database = "";
        mongoProperties0.port = 500;
        java.lang.String str10 = mongoProperties0.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.database = "";
        java.lang.String str14 = mongoProperties11.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties15.host = "";
        java.lang.String str18 = mongoProperties15.getHost();
        char[] charArray20 = new char[] { ' ' };
        mongoProperties15.setPassword(charArray20);
        char[] charArray25 = new char[] { '4', '4', '#' };
        mongoProperties15.password = charArray25;
        mongoProperties11.setPassword(charArray25);
        mongoProperties0.password = charArray25;
        mongoProperties0.setPort((java.lang.Integer) (-1));
        java.lang.String str31 = mongoProperties0.database;
        mongoProperties0.clearPassword();
        mongoProperties0.uri = "";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb://localhost/test" + "'", str10, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[ ]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000, \000, \000]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test4191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4191");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder7.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minHeartbeatFrequency(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        com.mongodb.ReadConcern readConcern14 = mongoClientOptions13.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder15 = builder0.readConcern(readConcern14);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.description("");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder31.build();
        int int35 = mongoClientOptions34.getHeartbeatConnectTimeout();
        int int36 = mongoClientOptions34.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry37 = mongoClientOptions34.getCodecRegistry();
        int int38 = mongoClientOptions34.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference39 = mongoClientOptions34.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList40 = mongoClientOptions34.getCommandListeners();
        int int41 = mongoClientOptions34.getSocketTimeout();
        javax.net.SocketFactory socketFactory42 = mongoClientOptions34.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder43 = builder18.socketFactory(socketFactory42);
        com.mongodb.MongoClientOptions.Builder builder44 = builder0.socketFactory(socketFactory42);
        com.mongodb.MongoClientOptions.Builder builder46 = builder0.maxConnectionLifeTime(1);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.socketTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder51 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.description("");
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions64 = builder61.build();
        int int65 = mongoClientOptions64.getHeartbeatConnectTimeout();
        int int66 = mongoClientOptions64.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry67 = mongoClientOptions64.getCodecRegistry();
        int int68 = mongoClientOptions64.getServerSelectionTimeout();
        boolean boolean69 = mongoClientOptions64.isAlwaysUseMBeans();
        int int70 = mongoClientOptions64.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern71 = mongoClientOptions64.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder72 = builder48.writeConcern(writeConcern71);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(readConcern14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20000 + "'", int35 == 20000);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(codecRegistry37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 30000 + "'", int38 == 30000);
        org.junit.Assert.assertNotNull(readPreference39);
        org.junit.Assert.assertNotNull(commandListenerList40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(socketFactory42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(mongoClientOptions64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 20000 + "'", int65 == 20000);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNotNull(codecRegistry67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 30000 + "'", int68 == 30000);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(writeConcern71);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test4192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4192");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        mongoProperties0.port = (-1);
        char[] charArray7 = mongoProperties0.getPassword();
        mongoProperties0.port = 20000;
        java.lang.Class<?> wildcardClass10 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.clearPassword();
        java.lang.String str14 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test4193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4193");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatConnectTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.minConnectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.minHeartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder20 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder32.build();
        int int36 = mongoClientOptions35.getHeartbeatConnectTimeout();
        int int37 = mongoClientOptions35.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory38 = mongoClientOptions35.getDbDecoderFactory();
        int int39 = mongoClientOptions35.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference40 = mongoClientOptions35.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder41 = builder17.readPreference(readPreference40);
        com.mongodb.MongoClientOptions.Builder builder42 = builder12.readPreference(readPreference40);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20000 + "'", int36 == 20000);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10000 + "'", int39 == 10000);
        org.junit.Assert.assertNotNull(readPreference40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test4194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4194");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.uri;
        mongoProperties0.host = "";
        mongoProperties0.username = "hi!";
        mongoProperties0.uri = "test";
        char[] charArray13 = mongoProperties0.password;
        char[] charArray14 = mongoProperties0.password;
        java.lang.String str15 = mongoProperties0.username;
        mongoProperties0.database = "";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray13);
        org.junit.Assert.assertNull(charArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test4195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4195");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions27, environment29);
        boolean boolean31 = mongoClientOptions27.isSslEnabled();
        boolean boolean32 = mongoClientOptions27.isAlwaysUseMBeans();
        int int33 = mongoClientOptions27.getMinConnectionsPerHost();
        javax.net.SocketFactory socketFactory34 = mongoClientOptions27.getSocketFactory();
        int int35 = mongoClientOptions27.getMaxConnectionLifeTime();
        boolean boolean36 = mongoClientOptions27.isCursorFinalizerEnabled();
        int int37 = mongoClientOptions27.getMinConnectionsPerHost();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(socketFactory34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test4196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4196");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.authenticationDatabase = "hi!";
        boolean boolean25 = mongoProperties0.hasCustomCredentials();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 27017 + "'", int22 == 27017);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test4197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4197");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.uri = "hi!";
        java.lang.String str9 = mongoProperties0.uri;
        mongoProperties0.setPort((java.lang.Integer) 5);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test4198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4198");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList19 = mongoClientOptions13.getCommandListeners();
        int int20 = mongoClientOptions13.getSocketTimeout();
        javax.net.SocketFactory socketFactory21 = mongoClientOptions13.getSocketFactory();
        java.lang.String str22 = mongoClientOptions13.getRequiredReplicaSetName();
        int int23 = mongoClientOptions13.getSocketTimeout();
        boolean boolean24 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        int int25 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.WriteConcern writeConcern26 = mongoClientOptions13.getWriteConcern();
        int int27 = mongoClientOptions13.getMaxConnectionLifeTime();
        boolean boolean28 = mongoClientOptions13.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(commandListenerList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(writeConcern26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test4199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4199");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getMinConnectionsPerHost();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions13.getReadPreference();
        int int16 = mongoClientOptions13.getSocketTimeout();
        boolean boolean17 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test4200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4200");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.username;
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        mongoProperties0.setUri("");
        java.lang.String str8 = mongoProperties0.getDatabase();
        java.lang.String str9 = mongoProperties0.username;
        mongoProperties0.setUsername("hi!");
        mongoProperties0.database = "hi!";
        mongoProperties0.database = "";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test4201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4201");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.setAuthenticationDatabase("hi!");
        java.lang.String str9 = mongoProperties6.getHost();
        mongoProperties6.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        int int26 = mongoClientOptions25.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder27 = mongoProperties6.builder(mongoClientOptions25);
        int int28 = mongoClientOptions25.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern29 = mongoClientOptions25.getReadConcern();
        boolean boolean30 = mongoClientOptions25.isSslInvalidHostNameAllowed();
        boolean boolean31 = mongoClientOptions25.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder32 = mongoProperties0.builder(mongoClientOptions25);
        com.mongodb.DBEncoderFactory dBEncoderFactory33 = mongoClientOptions25.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern34 = mongoClientOptions25.getWriteConcern();
        int int35 = mongoClientOptions25.getHeartbeatFrequency();
        org.bson.codecs.configuration.CodecRegistry codecRegistry36 = mongoClientOptions25.getCodecRegistry();
        java.lang.String str37 = mongoClientOptions25.getDescription();
        int int38 = mongoClientOptions25.getSocketTimeout();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(readConcern29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(dBEncoderFactory33);
        org.junit.Assert.assertNotNull(writeConcern34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10000 + "'", int35 == 10000);
        org.junit.Assert.assertNotNull(codecRegistry36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test4202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4202");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.connectTimeout(10);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder14 = builder8.connectionsPerHost((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: connectionPerHost must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test4203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4203");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder2.build();
        java.lang.String str6 = mongoClientOptions5.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions5.getDbEncoderFactory();
        int int8 = mongoClientOptions5.getServerSelectionTimeout();
        com.mongodb.ReadConcern readConcern9 = mongoClientOptions5.getReadConcern();
        int int10 = mongoClientOptions5.getMinConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions5.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(readConcern9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
    }

    @Test
    public void test4204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4204");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder11 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.minHeartbeatFrequency(500);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions14.getSocketFactory();
        int int16 = mongoClientOptions14.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder(mongoClientOptions14);
        int int18 = mongoClientOptions14.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
    }

    @Test
    public void test4205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4205");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionLifeTime(0);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder29.build();
        java.lang.String str33 = mongoClientOptions32.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory34 = mongoClientOptions32.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder22.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder36 = builder19.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder37 = builder18.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.heartbeatSocketTimeout((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(dBEncoderFactory34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test4206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4206");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        org.springframework.core.env.Environment environment6 = null;
        int int7 = mongoProperties0.determinePort(environment6);
        mongoProperties0.authenticationDatabase = "";
        char[] charArray10 = mongoProperties0.password;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.database = "";
        java.lang.String str14 = mongoProperties11.getUsername();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass20 = builder19.getClass();
        mongoProperties11.fieldNamingStrategy = wildcardClass20;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties22.database = "";
        java.lang.String str25 = mongoProperties22.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties26 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties26.host = "";
        java.lang.String str29 = mongoProperties26.getHost();
        char[] charArray31 = new char[] { ' ' };
        mongoProperties26.setPassword(charArray31);
        char[] charArray36 = new char[] { '4', '4', '#' };
        mongoProperties26.password = charArray36;
        mongoProperties22.setPassword(charArray36);
        mongoProperties11.password = charArray36;
        mongoProperties0.setPassword(charArray36);
        java.lang.Class<?> wildcardClass41 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str42 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass43 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(charArray10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ ]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[\000, \000, \000]");
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(wildcardClass43);
    }

    @Test
    public void test4207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4207");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        boolean boolean16 = mongoClientOptions13.isCursorFinalizerEnabled();
        int int17 = mongoClientOptions13.getMaxConnectionIdleTime();
        java.lang.String str18 = mongoClientOptions13.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test4208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4208");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions19.getReadPreference();
        com.mongodb.WriteConcern writeConcern25 = mongoClientOptions19.getWriteConcern();
        boolean boolean26 = mongoClientOptions19.isAlwaysUseMBeans();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertNotNull(writeConcern25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test4209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4209");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.uri;
        java.lang.String str7 = mongoProperties0.uri;
        char[] charArray8 = mongoProperties0.password;
        mongoProperties0.uri = "test";
        java.lang.Integer int11 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray8);
        org.junit.Assert.assertNull(int11);
    }

    @Test
    public void test4210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4210");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.database;
        java.lang.String str5 = mongoProperties0.authenticationDatabase;
        mongoProperties0.setGridFsDatabase("test");
        int int8 = mongoProperties0.getDEFAULT_PORT();
        int int9 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 27017 + "'", int8 == 27017);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27017 + "'", int9 == 27017);
    }

    @Test
    public void test4211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4211");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions27, environment29);
        boolean boolean31 = mongoClientOptions27.isSslEnabled();
        boolean boolean32 = mongoClientOptions27.isAlwaysUseMBeans();
        int int33 = mongoClientOptions27.getMinConnectionsPerHost();
        int int34 = mongoClientOptions27.getHeartbeatSocketTimeout();
        int int35 = mongoClientOptions27.getHeartbeatConnectTimeout();
        int int36 = mongoClientOptions27.getConnectionsPerHost();
        java.lang.String str37 = mongoClientOptions27.getRequiredReplicaSetName();
        int int38 = mongoClientOptions27.getConnectTimeout();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20000 + "'", int34 == 20000);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20000 + "'", int35 == 20000);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10000 + "'", int38 == 10000);
    }

    @Test
    public void test4212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4212");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str7 = mongoProperties0.username;
        java.lang.String str8 = mongoProperties0.getHost();
        mongoProperties0.gridFsDatabase = "test";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test4213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4213");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getUri();
        mongoProperties0.gridFsDatabase = "";
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        int int9 = mongoProperties0.getDEFAULT_PORT();
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.clearPassword();
        boolean boolean12 = mongoProperties0.hasCustomAddress();
        java.lang.String str13 = mongoProperties0.authenticationDatabase;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27017 + "'", int9 == 27017);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb://localhost/test" + "'", str10, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
    }

    @Test
    public void test4214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4214");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions13.getDbDecoderFactory();
        int int17 = mongoClientOptions13.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions13.getReadPreference();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions13.getWriteConcern();
        com.mongodb.WriteConcern writeConcern20 = mongoClientOptions13.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertNotNull(writeConcern20);
    }

    @Test
    public void test4215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4215");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        java.lang.String str11 = mongoClientOptions10.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions10.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder13 = builder0.dbEncoderFactory(dBEncoderFactory12);
        com.mongodb.MongoClientOptions.Builder builder15 = builder0.maxConnectionIdleTime(15);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties16.setAuthenticationDatabase("hi!");
        java.lang.String str19 = mongoProperties16.getHost();
        mongoProperties16.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder32.build();
        int int36 = mongoClientOptions35.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder37 = mongoProperties16.builder(mongoClientOptions35);
        int int38 = mongoClientOptions35.getMaxConnectionIdleTime();
        int int39 = mongoClientOptions35.getConnectionsPerHost();
        int int40 = mongoClientOptions35.getSocketTimeout();
        int int41 = mongoClientOptions35.getMinHeartbeatFrequency();
        boolean boolean42 = mongoClientOptions35.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions35);
        com.mongodb.WriteConcern writeConcern44 = mongoClientOptions35.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder45 = builder0.writeConcern(writeConcern44);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder48 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder52 = builder48.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder53 = builder52.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.minHeartbeatFrequency(27017);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder57.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory59 = mongoClientOptions58.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder60 = builder45.dbDecoderFactory(dBDecoderFactory59);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.requiredReplicaSetName("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20000 + "'", int36 == 20000);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 500 + "'", int41 == 500);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(writeConcern44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertNotNull(dBDecoderFactory59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test4216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4216");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions19.getReadConcern();
        int int24 = mongoClientOptions19.getMaxConnectionIdleTime();
        boolean boolean25 = mongoClientOptions19.isSslInvalidHostNameAllowed();
        int int26 = mongoClientOptions19.getSocketTimeout();
        int int27 = mongoClientOptions19.getConnectionsPerHost();
        int int28 = mongoClientOptions19.getMaxConnectionLifeTime();
        boolean boolean29 = mongoClientOptions19.isSslInvalidHostNameAllowed();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(readConcern23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test4217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4217");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder4.maxConnectionIdleTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder4.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder31 = builder28.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder33 = builder28.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.heartbeatConnectTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder39 = builder33.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder44.build();
        int int48 = mongoClientOptions47.getHeartbeatConnectTimeout();
        int int49 = mongoClientOptions47.getMaxWaitTime();
        com.mongodb.ReadConcern readConcern50 = mongoClientOptions47.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder51 = builder39.readConcern(readConcern50);
        com.mongodb.MongoClientOptions.Builder builder52 = builder23.readConcern(readConcern50);
        com.mongodb.MongoClientOptions.Builder builder53 = builder4.readConcern(readConcern50);
        com.mongodb.MongoClientOptions.Builder builder55 = builder4.socketTimeout(32);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(mongoClientOptions47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 20000 + "'", int48 == 20000);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 120000 + "'", int49 == 120000);
        org.junit.Assert.assertNotNull(readConcern50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test4218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4218");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        java.lang.String str11 = mongoClientOptions10.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions10.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder13 = builder0.dbEncoderFactory(dBEncoderFactory12);
        com.mongodb.MongoClientOptions.Builder builder15 = builder0.maxConnectionIdleTime(15);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder22.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.minHeartbeatFrequency(27017);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder25.build();
        com.mongodb.ReadConcern readConcern29 = mongoClientOptions28.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder30 = builder15.readConcern(readConcern29);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatConnectTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.description("");
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder48 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder55 = builder52.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder56 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions61 = builder58.build();
        java.lang.String str62 = mongoClientOptions61.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory63 = mongoClientOptions61.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder64 = builder52.dbEncoderFactory(dBEncoderFactory63);
        com.mongodb.MongoClientOptions.Builder builder65 = builder45.dbEncoderFactory(dBEncoderFactory63);
        com.mongodb.MongoClientOptions.Builder builder66 = builder32.dbEncoderFactory(dBEncoderFactory63);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder70 = builder66.localThreshold(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(readConcern29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(mongoClientOptions61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(dBEncoderFactory63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test4219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4219");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClientOptions.Builder builder5 = mongoProperties0.builder(mongoClientOptions4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        char[] charArray8 = mongoProperties0.getPassword();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(charArray8);
    }

    @Test
    public void test4220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4220");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder11 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder6.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.localThreshold((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.connectionsPerHost((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test4221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4221");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        mongoProperties0.clearPassword();
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 20000);
        java.lang.String str11 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        int int26 = mongoClientOptions25.getHeartbeatConnectTimeout();
        int int27 = mongoClientOptions25.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry28 = mongoClientOptions25.getCodecRegistry();
        int int29 = mongoClientOptions25.getServerSelectionTimeout();
        boolean boolean30 = mongoClientOptions25.isAlwaysUseMBeans();
        int int31 = mongoClientOptions25.getConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory32 = mongoClientOptions25.getDbEncoderFactory();
        int int33 = mongoClientOptions25.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder34 = mongoProperties0.builder(mongoClientOptions25);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000]");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(codecRegistry28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 30000 + "'", int29 == 30000);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10000 + "'", int33 == 10000);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test4222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4222");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.description("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.setAuthenticationDatabase("hi!");
        java.lang.String str10 = mongoProperties7.getHost();
        mongoProperties7.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        int int27 = mongoClientOptions26.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder28 = mongoProperties7.builder(mongoClientOptions26);
        int int29 = mongoClientOptions26.getMaxConnectionIdleTime();
        int int30 = mongoClientOptions26.getConnectionsPerHost();
        int int31 = mongoClientOptions26.getSocketTimeout();
        int int32 = mongoClientOptions26.getMinHeartbeatFrequency();
        boolean boolean33 = mongoClientOptions26.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions26);
        com.mongodb.WriteConcern writeConcern35 = mongoClientOptions26.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder36 = builder6.writeConcern(writeConcern35);
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.description("");
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder47.build();
        int int51 = mongoClientOptions50.getHeartbeatConnectTimeout();
        int int52 = mongoClientOptions50.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry53 = mongoClientOptions50.getCodecRegistry();
        int int54 = mongoClientOptions50.getServerSelectionTimeout();
        int int55 = mongoClientOptions50.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern56 = mongoClientOptions50.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder57 = builder6.writeConcern(writeConcern56);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.heartbeatSocketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder61 = builder57.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder63 = builder57.heartbeatSocketTimeout((int) (byte) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 500 + "'", int32 == 500);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(writeConcern35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 20000 + "'", int51 == 20000);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(codecRegistry53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 30000 + "'", int54 == 30000);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertNotNull(writeConcern56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test4223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4223");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.uri;
        mongoProperties0.host = "";
        mongoProperties0.username = "hi!";
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        int int25 = mongoClientOptions24.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions24.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder27 = mongoProperties0.builder(mongoClientOptions24);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties28 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties28.host = "";
        mongoProperties28.username = "";
        mongoProperties28.clearPassword();
        java.lang.String str34 = mongoProperties28.gridFsDatabase;
        mongoProperties28.setHost("hi!");
        mongoProperties28.gridFsDatabase = "test";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties39 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties39.database = "";
        java.lang.String str42 = mongoProperties39.getDatabase();
        java.lang.String str43 = mongoProperties39.getUri();
        java.lang.Integer int44 = mongoProperties39.getPort();
        java.lang.String str45 = mongoProperties39.uri;
        java.lang.Integer int46 = mongoProperties39.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties47 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties47.database = "";
        java.lang.String str50 = mongoProperties47.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions51 = null;
        com.mongodb.MongoClientOptions.Builder builder52 = mongoProperties47.builder(mongoClientOptions51);
        char[] charArray53 = mongoProperties47.getPassword();
        com.mongodb.MongoClientOptions mongoClientOptions54 = null;
        org.springframework.core.env.Environment environment55 = null;
        com.mongodb.MongoClient mongoClient56 = mongoProperties47.createMongoClient(mongoClientOptions54, environment55);
        java.lang.String str57 = mongoProperties47.host;
        java.lang.String str58 = mongoProperties47.getHost();
        java.lang.String str59 = mongoProperties47.uri;
        java.lang.Class<?> wildcardClass60 = mongoProperties47.getFieldNamingStrategy();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties61 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties61.clearPassword();
        char[] charArray63 = mongoProperties61.getPassword();
        mongoProperties61.authenticationDatabase = "";
        java.lang.String str66 = mongoProperties61.authenticationDatabase;
        java.lang.String str67 = mongoProperties61.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties68 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties68.database = "";
        java.lang.String str71 = mongoProperties68.getUsername();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties72 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties72.host = "";
        char[] charArray76 = new char[] { '4' };
        mongoProperties72.setPassword(charArray76);
        mongoProperties68.password = charArray76;
        mongoProperties61.setPassword(charArray76);
        mongoProperties47.password = charArray76;
        mongoProperties39.setPassword(charArray76);
        mongoProperties28.password = charArray76;
        mongoProperties0.setPassword(charArray76);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "mongodb://localhost/test" + "'", str43, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "mongodb://localhost/test" + "'", str45, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(charArray53);
        org.junit.Assert.assertNotNull(mongoClient56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "mongodb://localhost/test" + "'", str59, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass60);
        org.junit.Assert.assertNull(charArray63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "test" + "'", str67, "test");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray76), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray76), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray76), "[4]");
    }

    @Test
    public void test4224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4224");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isAlwaysUseMBeans();
        int int9 = mongoClientOptions7.getConnectTimeout();
        int int10 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        java.lang.String str17 = mongoClientOptions16.getDescription();
        int int18 = mongoClientOptions16.getMaxWaitTime();
        boolean boolean19 = mongoClientOptions7.equals((java.lang.Object) mongoClientOptions16);
        java.lang.String str20 = mongoClientOptions16.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120000 + "'", int18 == 120000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test4225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4225");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.serverSelectionTimeout(10000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test4226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4226");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList17 = mongoClientOptions13.getCommandListeners();
        int int18 = mongoClientOptions13.getLocalThreshold();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        int int20 = mongoClientOptions13.getHeartbeatFrequency();
        int int21 = mongoClientOptions13.getServerSelectionTimeout();
        int int22 = mongoClientOptions13.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(commandListenerList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 30000 + "'", int21 == 30000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test4227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4227");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.heartbeatSocketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        int int26 = mongoClientOptions25.getHeartbeatConnectTimeout();
        int int27 = mongoClientOptions25.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry28 = mongoClientOptions25.getCodecRegistry();
        int int29 = mongoClientOptions25.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions25.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList31 = mongoClientOptions25.getCommandListeners();
        int int32 = mongoClientOptions25.getSocketTimeout();
        javax.net.SocketFactory socketFactory33 = mongoClientOptions25.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder11.socketFactory(socketFactory33);
        com.mongodb.MongoClientOptions.Builder builder35 = builder2.socketFactory(socketFactory33);
        com.mongodb.MongoClientOptions.Builder builder37 = builder2.connectTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder39 = builder2.heartbeatFrequency(500);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(codecRegistry28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 30000 + "'", int29 == 30000);
        org.junit.Assert.assertNotNull(readPreference30);
        org.junit.Assert.assertNotNull(commandListenerList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(socketFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test4228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4228");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions27, environment29);
        java.util.List<com.mongodb.event.CommandListener> commandListenerList31 = mongoClientOptions27.getCommandListeners();
        boolean boolean32 = mongoClientOptions27.isSslEnabled();
        int int33 = mongoClientOptions27.getHeartbeatSocketTimeout();
        int int34 = mongoClientOptions27.getHeartbeatSocketTimeout();
        int int35 = mongoClientOptions27.getMaxConnectionLifeTime();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertNotNull(commandListenerList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20000 + "'", int33 == 20000);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20000 + "'", int34 == 20000);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test4229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4229");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getSocketTimeout();
        int int25 = mongoClientOptions19.getMinHeartbeatFrequency();
        boolean boolean26 = mongoClientOptions19.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        int int28 = mongoClientOptions19.getHeartbeatFrequency();
        int int29 = mongoClientOptions19.getMinConnectionsPerHost();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 500 + "'", int25 == 500);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test4230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4230");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties18.setAuthenticationDatabase("hi!");
        java.lang.String str21 = mongoProperties18.getHost();
        mongoProperties18.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder34.build();
        int int38 = mongoClientOptions37.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder39 = mongoProperties18.builder(mongoClientOptions37);
        int int40 = mongoClientOptions37.getMaxConnectionIdleTime();
        int int41 = mongoClientOptions37.getConnectionsPerHost();
        com.mongodb.ReadPreference readPreference42 = mongoClientOptions37.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder43 = builder17.readPreference(readPreference42);
        com.mongodb.MongoClientOptions.Builder builder44 = builder10.readPreference(readPreference42);
        com.mongodb.MongoClientOptions.Builder builder46 = builder10.maxConnectionLifeTime(20000);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.minConnectionsPerHost(500);
        com.mongodb.MongoClientOptions.Builder builder52 = builder46.socketTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.heartbeatFrequency(500);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.connectionsPerHost(15);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertNotNull(readPreference42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test4231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4231");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder38.build();
        int int42 = mongoClientOptions41.getHeartbeatConnectTimeout();
        int int43 = mongoClientOptions41.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference44 = mongoClientOptions41.getReadPreference();
        com.mongodb.ReadPreference readPreference45 = mongoClientOptions41.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder46 = builder27.readPreference(readPreference45);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.requiredReplicaSetName("mongodb://localhost/test");
        boolean boolean49 = mongoClientOptions13.equals((java.lang.Object) builder46);
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.description("");
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder60.build();
        int int64 = mongoClientOptions63.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory65 = mongoClientOptions63.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder66 = builder46.dbDecoderFactory(dBDecoderFactory65);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.description("");
        com.mongodb.MongoClientOptions.Builder builder70 = builder66.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20000 + "'", int42 == 20000);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(readPreference44);
        org.junit.Assert.assertNotNull(readPreference45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoClientOptions63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 20000 + "'", int64 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test4232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4232");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder5 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.minHeartbeatFrequency(27017);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder7.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry29 = mongoClientOptions27.getCodecRegistry();
        int int30 = mongoClientOptions27.getMinConnectionsPerHost();
        java.lang.String str31 = mongoClientOptions27.getRequiredReplicaSetName();
        int int32 = mongoClientOptions27.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern33 = mongoClientOptions27.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder34 = builder13.writeConcern(writeConcern33);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 500 + "'", int32 == 500);
        org.junit.Assert.assertNotNull(writeConcern33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test4233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4233");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        mongoProperties0.uri = "mongodb://localhost/test";
        mongoProperties0.authenticationDatabase = "";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test4234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4234");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getHeartbeatSocketTimeout();
        com.mongodb.ReadConcern readConcern25 = mongoClientOptions19.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder26 = com.mongodb.MongoClientOptions.builder(mongoClientOptions19);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.description("test");
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.serverSelectionTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder32 = builder26.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.sslEnabled(true);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertNotNull(readConcern25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test4235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4235");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions27, environment29);
        boolean boolean31 = mongoClientOptions27.isSslEnabled();
        boolean boolean32 = mongoClientOptions27.isAlwaysUseMBeans();
        int int33 = mongoClientOptions27.getMinConnectionsPerHost();
        int int34 = mongoClientOptions27.getHeartbeatSocketTimeout();
        int int35 = mongoClientOptions27.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder36 = com.mongodb.MongoClientOptions.builder(mongoClientOptions27);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.heartbeatFrequency(30000);
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder47 = builder43.heartbeatConnectTimeout((int) (short) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties48 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties48.setAuthenticationDatabase("hi!");
        java.lang.String str51 = mongoProperties48.getHost();
        mongoProperties48.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder54 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.description("");
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions67 = builder64.build();
        int int68 = mongoClientOptions67.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder69 = mongoProperties48.builder(mongoClientOptions67);
        int int70 = mongoClientOptions67.getMaxConnectionIdleTime();
        int int71 = mongoClientOptions67.getConnectionsPerHost();
        int int72 = mongoClientOptions67.getHeartbeatSocketTimeout();
        com.mongodb.ReadConcern readConcern73 = mongoClientOptions67.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder74 = builder47.readConcern(readConcern73);
        com.mongodb.MongoClientOptions.Builder builder75 = builder40.readConcern(readConcern73);
        com.mongodb.MongoClientOptions.Builder builder77 = builder40.sslEnabled(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder79 = builder40.localThreshold((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: localThreshold must be >= 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20000 + "'", int34 == 20000);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(mongoClientOptions67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 20000 + "'", int68 == 20000);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 20000 + "'", int72 == 20000);
        org.junit.Assert.assertNotNull(readConcern73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test4236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4236");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getSocketTimeout();
        int int25 = mongoClientOptions19.getMinHeartbeatFrequency();
        boolean boolean26 = mongoClientOptions19.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder32.build();
        java.lang.String str36 = mongoClientOptions35.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory37 = mongoClientOptions35.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference38 = mongoClientOptions35.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder39 = builder29.readPreference(readPreference38);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.minHeartbeatFrequency(20000);
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.description("");
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions55 = builder52.build();
        int int56 = mongoClientOptions55.getHeartbeatConnectTimeout();
        int int57 = mongoClientOptions55.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference58 = mongoClientOptions55.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList59 = mongoClientOptions55.getCommandListeners();
        int int60 = mongoClientOptions55.getLocalThreshold();
        int int61 = mongoClientOptions55.getConnectionsPerHost();
        java.lang.String str62 = mongoClientOptions55.getRequiredReplicaSetName();
        com.mongodb.DBEncoderFactory dBEncoderFactory63 = mongoClientOptions55.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference64 = mongoClientOptions55.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder65 = builder41.readPreference(readPreference64);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 500 + "'", int25 == 500);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(dBEncoderFactory37);
        org.junit.Assert.assertNotNull(readPreference38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(mongoClientOptions55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 20000 + "'", int56 == 20000);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(readPreference58);
        org.junit.Assert.assertNotNull(commandListenerList59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 15 + "'", int60 == 15);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(dBEncoderFactory63);
        org.junit.Assert.assertNotNull(readPreference64);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test4237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4237");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        int int25 = mongoClientOptions24.getHeartbeatConnectTimeout();
        int int26 = mongoClientOptions24.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions24.getReadPreference();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions24.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder29 = builder10.readPreference(readPreference28);
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder37.build();
        java.lang.String str41 = mongoClientOptions40.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory42 = mongoClientOptions40.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder43 = builder30.dbEncoderFactory(dBEncoderFactory42);
        com.mongodb.MongoClientOptions.Builder builder44 = builder10.dbEncoderFactory(dBEncoderFactory42);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.maxWaitTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.socketTimeout(30000);
        com.mongodb.MongoClientOptions.Builder builder50 = builder44.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.socketTimeout((-1));
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(dBEncoderFactory42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test4238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4238");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        mongoProperties0.clearPassword();
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        int int23 = mongoClientOptions22.getHeartbeatConnectTimeout();
        int int24 = mongoClientOptions22.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference25 = mongoClientOptions22.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList26 = mongoClientOptions22.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory27 = mongoClientOptions22.getDbDecoderFactory();
        boolean boolean28 = mongoClientOptions22.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions22, environment29);
        mongoProperties0.database = "test";
        int int33 = mongoProperties0.getDEFAULT_PORT();
        java.lang.String str34 = mongoProperties0.getHost();
        mongoProperties0.setPort((java.lang.Integer) 5);
        mongoProperties0.setUri("test");
        mongoProperties0.setHost("hi!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000]");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(readPreference25);
        org.junit.Assert.assertNotNull(commandListenerList26);
        org.junit.Assert.assertNotNull(dBDecoderFactory27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 27017 + "'", int33 == 27017);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test4239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4239");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.Class<?> wildcardClass3 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass9 = builder8.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass9;
        mongoProperties0.setAuthenticationDatabase("test");
        mongoProperties0.setUri("test");
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder25.build();
        int int29 = mongoClientOptions28.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry30 = mongoClientOptions28.getCodecRegistry();
        int int31 = mongoClientOptions28.getMinConnectionsPerHost();
        java.lang.String str32 = mongoClientOptions28.getRequiredReplicaSetName();
        int int33 = mongoClientOptions28.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder34 = mongoProperties0.builder(mongoClientOptions28);
        mongoProperties0.setHost("");
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 500 + "'", int33 == 500);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test4240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4240");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getLocalThreshold();
        boolean boolean15 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        int int30 = mongoClientOptions29.getHeartbeatConnectTimeout();
        int int31 = mongoClientOptions29.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry32 = mongoClientOptions29.getCodecRegistry();
        int int33 = mongoClientOptions29.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference34 = mongoClientOptions29.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList35 = mongoClientOptions29.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory36 = mongoClientOptions29.getDbDecoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList37 = mongoClientOptions29.getCommandListeners();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList38 = mongoClientOptions29.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory39 = mongoClientOptions29.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder40 = com.mongodb.MongoClientOptions.builder(mongoClientOptions29);
        int int41 = mongoClientOptions29.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference42 = mongoClientOptions29.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory43 = mongoClientOptions29.getDbEncoderFactory();
        boolean boolean44 = mongoClientOptions13.equals((java.lang.Object) mongoClientOptions29);
        int int45 = mongoClientOptions13.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(codecRegistry32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 30000 + "'", int33 == 30000);
        org.junit.Assert.assertNotNull(readPreference34);
        org.junit.Assert.assertNotNull(commandListenerList35);
        org.junit.Assert.assertNotNull(dBDecoderFactory36);
        org.junit.Assert.assertNotNull(commandListenerList37);
        org.junit.Assert.assertNotNull(commandListenerList38);
        org.junit.Assert.assertNotNull(dBDecoderFactory39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10000 + "'", int41 == 10000);
        org.junit.Assert.assertNotNull(readPreference42);
        org.junit.Assert.assertNotNull(dBEncoderFactory43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test4241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4241");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str5 = mongoProperties0.getHost();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str7 = mongoProperties0.getUri();
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Integer int9 = mongoProperties0.getPort();
        java.lang.String str10 = mongoProperties0.getGridFsDatabase();
        java.lang.String str11 = mongoProperties0.host;
        java.lang.String str12 = mongoProperties0.uri;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
    }

    @Test
    public void test4242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4242");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.database;
        java.lang.String str5 = mongoProperties0.authenticationDatabase;
        mongoProperties0.username = "mongodb://localhost/test";
        mongoProperties0.authenticationDatabase = "test";
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.database;
        int int12 = mongoProperties0.getDEFAULT_PORT();
        java.lang.String str13 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 27017 + "'", int12 == 27017);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test4243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4243");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.threadsAllowedToBlockForConnectionMultiplier(30000);
        com.mongodb.MongoClientOptions.Builder builder7 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder0.heartbeatSocketTimeout(120000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test4244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4244");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        mongoProperties0.port = (-1);
        java.lang.String str7 = mongoProperties0.authenticationDatabase;
        mongoProperties0.setAuthenticationDatabase("");
        boolean boolean10 = mongoProperties0.hasCustomAddress();
        java.lang.String str11 = mongoProperties0.getDatabase();
        int int12 = mongoProperties0.getDEFAULT_PORT();
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 27017 + "'", int12 == 27017);
    }

    @Test
    public void test4245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4245");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.setAuthenticationDatabase("hi!");
        java.lang.String str10 = mongoProperties7.getHost();
        mongoProperties7.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        int int27 = mongoClientOptions26.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder28 = mongoProperties7.builder(mongoClientOptions26);
        int int29 = mongoClientOptions26.getMaxConnectionIdleTime();
        int int30 = mongoClientOptions26.getConnectionsPerHost();
        int int31 = mongoClientOptions26.getSocketTimeout();
        int int32 = mongoClientOptions26.getMinHeartbeatFrequency();
        boolean boolean33 = mongoClientOptions26.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder34 = mongoProperties0.builder(mongoClientOptions26);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.description("");
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder48 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.description("");
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions61 = builder58.build();
        int int62 = mongoClientOptions61.getHeartbeatConnectTimeout();
        int int63 = mongoClientOptions61.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference64 = mongoClientOptions61.getReadPreference();
        com.mongodb.ReadPreference readPreference65 = mongoClientOptions61.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder66 = builder47.readPreference(readPreference65);
        com.mongodb.MongoClientOptions.Builder builder67 = builder34.readPreference(readPreference65);
        com.mongodb.MongoClientOptions.Builder builder69 = builder34.maxConnectionLifeTime(30000);
        com.mongodb.MongoClientOptions.Builder builder71 = builder34.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.sslEnabled(false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 500 + "'", int32 == 500);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(mongoClientOptions61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 20000 + "'", int62 == 20000);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(readPreference64);
        org.junit.Assert.assertNotNull(readPreference65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test4246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4246");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        org.springframework.core.env.Environment environment6 = null;
        int int7 = mongoProperties0.determinePort(environment6);
        mongoProperties0.authenticationDatabase = "";
        char[] charArray10 = mongoProperties0.password;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.database = "";
        java.lang.String str14 = mongoProperties11.getUsername();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass20 = builder19.getClass();
        mongoProperties11.fieldNamingStrategy = wildcardClass20;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties22.database = "";
        java.lang.String str25 = mongoProperties22.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties26 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties26.host = "";
        java.lang.String str29 = mongoProperties26.getHost();
        char[] charArray31 = new char[] { ' ' };
        mongoProperties26.setPassword(charArray31);
        char[] charArray36 = new char[] { '4', '4', '#' };
        mongoProperties26.password = charArray36;
        mongoProperties22.setPassword(charArray36);
        mongoProperties11.password = charArray36;
        mongoProperties0.setPassword(charArray36);
        java.lang.Class<?> wildcardClass41 = mongoProperties0.fieldNamingStrategy;
        int int42 = mongoProperties0.getDEFAULT_PORT();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(charArray10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ ]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[4, 4, #]");
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 27017 + "'", int42 == 27017);
    }

    @Test
    public void test4247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4247");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions19.getReadPreference();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties25 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str26 = mongoProperties25.username;
        boolean boolean27 = mongoClientOptions19.equals((java.lang.Object) mongoProperties25);
        boolean boolean28 = mongoProperties25.hasCustomAddress();
        java.lang.String str29 = mongoProperties25.getDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test4248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4248");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getUri();
        mongoProperties0.gridFsDatabase = "";
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str9 = mongoProperties0.host;
        org.springframework.core.env.Environment environment10 = null;
        int int11 = mongoProperties0.determinePort(environment10);
        mongoProperties0.setGridFsDatabase("");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatConnectTimeout();
        int int29 = mongoClientOptions27.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions27.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.description("");
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.description("");
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions55 = builder52.build();
        int int56 = mongoClientOptions55.getHeartbeatConnectTimeout();
        int int57 = mongoClientOptions55.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference58 = mongoClientOptions55.getReadPreference();
        com.mongodb.ReadPreference readPreference59 = mongoClientOptions55.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder60 = builder41.readPreference(readPreference59);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.requiredReplicaSetName("mongodb://localhost/test");
        boolean boolean63 = mongoClientOptions27.equals((java.lang.Object) builder60);
        java.lang.String str64 = mongoClientOptions27.getRequiredReplicaSetName();
        int int65 = mongoClientOptions27.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder66 = mongoProperties0.builder(mongoClientOptions27);
        int int67 = mongoClientOptions27.getMinConnectionsPerHost();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList68 = mongoClientOptions27.getCommandListeners();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 27017 + "'", int11 == 27017);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(readPreference30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(mongoClientOptions55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 20000 + "'", int56 == 20000);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(readPreference58);
        org.junit.Assert.assertNotNull(readPreference59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10000 + "'", int65 == 10000);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(commandListenerList68);
    }

    @Test
    public void test4249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4249");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        char[] charArray4 = new char[] { '4' };
        mongoProperties0.setPassword(charArray4);
        java.lang.String str6 = mongoProperties0.username;
        java.lang.String str7 = mongoProperties0.database;
        java.lang.String str8 = mongoProperties0.username;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.database = "";
        java.lang.String str12 = mongoProperties9.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties13.host = "";
        java.lang.String str16 = mongoProperties13.getHost();
        char[] charArray18 = new char[] { ' ' };
        mongoProperties13.setPassword(charArray18);
        char[] charArray23 = new char[] { '4', '4', '#' };
        mongoProperties13.password = charArray23;
        mongoProperties9.setPassword(charArray23);
        java.lang.Class<?> wildcardClass26 = mongoProperties9.getFieldNamingStrategy();
        mongoProperties9.port = 30000;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties29 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties29.database = "";
        java.lang.String str32 = mongoProperties29.getUsername();
        java.lang.Integer int33 = mongoProperties29.getPort();
        mongoProperties29.setUsername("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties36 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties36.database = "";
        java.lang.String str39 = mongoProperties36.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties40 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties40.host = "";
        java.lang.String str43 = mongoProperties40.getHost();
        char[] charArray45 = new char[] { ' ' };
        mongoProperties40.setPassword(charArray45);
        char[] charArray50 = new char[] { '4', '4', '#' };
        mongoProperties40.password = charArray50;
        mongoProperties36.setPassword(charArray50);
        mongoProperties29.password = charArray50;
        mongoProperties9.password = charArray50;
        char[] charArray55 = mongoProperties9.password;
        mongoProperties0.password = charArray55;
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4]");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[ ]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, 4, #]");
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[ ]");
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[4, 4, #]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[4, 4, #]");
    }

    @Test
    public void test4250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4250");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClientOptions.Builder builder5 = mongoProperties0.builder(mongoClientOptions4);
        char[] charArray6 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        mongoProperties0.clearPassword();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        java.lang.String str13 = mongoProperties0.gridFsDatabase;
        char[] charArray14 = mongoProperties0.password;
        java.lang.String str15 = mongoProperties0.host;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties16.host = "";
        mongoProperties16.username = "";
        mongoProperties16.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder32.build();
        java.lang.Object obj36 = null;
        boolean boolean37 = mongoClientOptions35.equals(obj36);
        int int38 = mongoClientOptions35.getHeartbeatConnectTimeout();
        org.springframework.core.env.Environment environment39 = null;
        com.mongodb.MongoClient mongoClient40 = mongoProperties16.createMongoClient(mongoClientOptions35, environment39);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties41 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties41.setAuthenticationDatabase("hi!");
        java.lang.String str44 = mongoProperties41.getHost();
        mongoProperties41.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder47 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.description("");
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions60 = builder57.build();
        int int61 = mongoClientOptions60.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder62 = mongoProperties41.builder(mongoClientOptions60);
        int int63 = mongoClientOptions60.getMaxConnectionIdleTime();
        int int64 = mongoClientOptions60.getConnectionsPerHost();
        int int65 = mongoClientOptions60.getSocketTimeout();
        int int66 = mongoClientOptions60.getMinHeartbeatFrequency();
        boolean boolean67 = mongoClientOptions60.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder68 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions60);
        boolean boolean69 = mongoClientOptions35.equals((java.lang.Object) mongoClientOptions60);
        org.springframework.core.env.Environment environment70 = null;
        com.mongodb.MongoClient mongoClient71 = mongoProperties0.createMongoClient(mongoClientOptions60, environment70);
        com.mongodb.DBEncoderFactory dBEncoderFactory72 = mongoClientOptions60.getDbEncoderFactory();
        java.lang.String str73 = mongoClientOptions60.getRequiredReplicaSetName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertNotNull(mongoClient40);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(mongoClientOptions60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 20000 + "'", int61 == 20000);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 500 + "'", int66 == 500);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(mongoClient71);
        org.junit.Assert.assertNotNull(dBEncoderFactory72);
        org.junit.Assert.assertNull(str73);
    }

    @Test
    public void test4251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4251");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getConnectionsPerHost();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList10 = mongoClientOptions7.getCommandListeners();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList11 = mongoClientOptions7.getCommandListeners();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(commandListenerList10);
        org.junit.Assert.assertNotNull(commandListenerList11);
    }

    @Test
    public void test4252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4252");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.socketTimeout(32);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder15.build();
        int int19 = mongoClientOptions18.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry20 = mongoClientOptions18.getCodecRegistry();
        int int21 = mongoClientOptions18.getMinConnectionsPerHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties22.setAuthenticationDatabase("hi!");
        java.lang.String str25 = mongoProperties22.getHost();
        mongoProperties22.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder38.build();
        int int42 = mongoClientOptions41.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder43 = mongoProperties22.builder(mongoClientOptions41);
        boolean boolean44 = mongoClientOptions18.equals((java.lang.Object) mongoClientOptions41);
        int int45 = mongoClientOptions18.getHeartbeatConnectTimeout();
        boolean boolean46 = mongoClientOptions18.isSslEnabled();
        java.lang.String str47 = mongoClientOptions18.getDescription();
        com.mongodb.DBDecoderFactory dBDecoderFactory48 = mongoClientOptions18.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder49 = builder4.dbDecoderFactory(dBDecoderFactory48);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20000 + "'", int42 == 20000);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 20000 + "'", int45 == 20000);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(dBDecoderFactory48);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test4253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4253");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        int int25 = mongoClientOptions24.getHeartbeatConnectTimeout();
        int int26 = mongoClientOptions24.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions24.getReadPreference();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions24.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder29 = builder10.readPreference(readPreference28);
        com.mongodb.MongoClientOptions.Builder builder30 = builder29.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder31 = builder30.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder33 = builder30.sslEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test4254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4254");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder12.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test4255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4255");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatConnectTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.minConnectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxWaitTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("test");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties19.host = "";
        java.lang.String str22 = mongoProperties19.getHost();
        char[] charArray24 = new char[] { ' ' };
        mongoProperties19.setPassword(charArray24);
        char[] charArray29 = new char[] { '4', '4', '#' };
        mongoProperties19.password = charArray29;
        mongoProperties19.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.description("");
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder43.build();
        int int47 = mongoClientOptions46.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment48 = null;
        com.mongodb.MongoClient mongoClient49 = mongoProperties19.createMongoClient(mongoClientOptions46, environment48);
        boolean boolean50 = mongoClientOptions46.isSslEnabled();
        boolean boolean51 = mongoClientOptions46.isAlwaysUseMBeans();
        int int52 = mongoClientOptions46.getConnectTimeout();
        javax.net.SocketFactory socketFactory53 = mongoClientOptions46.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder54 = builder16.socketFactory(socketFactory53);
        com.mongodb.MongoClientOptions.Builder builder56 = builder16.serverSelectionTimeout((int) '#');
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties57 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties57.database = "";
        java.lang.String str60 = mongoProperties57.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions61 = null;
        com.mongodb.MongoClientOptions.Builder builder62 = mongoProperties57.builder(mongoClientOptions61);
        char[] charArray63 = mongoProperties57.getPassword();
        mongoProperties57.setHost("hi!");
        com.mongodb.MongoClientOptions.Builder builder66 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.description("");
        com.mongodb.MongoClientOptions.Builder builder76 = builder74.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder78 = builder76.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions79 = builder76.build();
        int int80 = mongoClientOptions79.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment81 = null;
        com.mongodb.MongoClient mongoClient82 = mongoProperties57.createMongoClient(mongoClientOptions79, environment81);
        int int83 = mongoClientOptions79.getMaxConnectionLifeTime();
        boolean boolean84 = mongoClientOptions79.isSslEnabled();
        java.lang.String str85 = mongoClientOptions79.getRequiredReplicaSetName();
        javax.net.SocketFactory socketFactory86 = mongoClientOptions79.getSocketFactory();
        boolean boolean87 = mongoClientOptions79.isSslEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory88 = mongoClientOptions79.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder89 = builder16.dbEncoderFactory(dBEncoderFactory88);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ ]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10000 + "'", int47 == 10000);
        org.junit.Assert.assertNotNull(mongoClient49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10000 + "'", int52 == 10000);
        org.junit.Assert.assertNotNull(socketFactory53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(charArray63);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(mongoClientOptions79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10000 + "'", int80 == 10000);
        org.junit.Assert.assertNotNull(mongoClient82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(socketFactory86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory88);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test4256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4256");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str5 = mongoProperties0.host;
        java.lang.String str6 = mongoProperties0.getGridFsDatabase();
        int int7 = mongoProperties0.getDEFAULT_PORT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
    }

    @Test
    public void test4257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4257");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.database;
        java.lang.String str5 = mongoProperties0.gridFsDatabase;
        java.lang.String str6 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.clearPassword();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.uri = "";
        java.lang.String str12 = mongoProperties0.authenticationDatabase;
        java.lang.String str13 = mongoProperties0.getDatabase();
        mongoProperties0.uri = "";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test4258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4258");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        java.lang.String str12 = mongoProperties0.username;
        char[] charArray13 = new char[] {};
        mongoProperties0.setPassword(charArray13);
        mongoProperties0.setPort((java.lang.Integer) 500);
        java.lang.String str17 = mongoProperties0.uri;
        mongoProperties0.gridFsDatabase = "test";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, 4, #]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "mongodb://localhost/test" + "'", str17, "mongodb://localhost/test");
    }

    @Test
    public void test4259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4259");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties4 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties4.host = "";
        char[] charArray8 = new char[] { '4' };
        mongoProperties4.setPassword(charArray8);
        mongoProperties0.password = charArray8;
        mongoProperties0.setUsername("");
        java.lang.String str13 = mongoProperties0.database;
        java.lang.String str14 = mongoProperties0.authenticationDatabase;
        mongoProperties0.setDatabase("hi!");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test4260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4260");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder2.build();
        java.lang.String str6 = mongoClientOptions5.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions5.getDbEncoderFactory();
        int int8 = mongoClientOptions5.getServerSelectionTimeout();
        com.mongodb.ReadConcern readConcern9 = mongoClientOptions5.getReadConcern();
        int int10 = mongoClientOptions5.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions5.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(readConcern9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(writeConcern11);
    }

    @Test
    public void test4261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4261");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList19 = mongoClientOptions13.getCommandListeners();
        java.lang.String str20 = mongoClientOptions13.getDescription();
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.description("");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder31.build();
        int int35 = mongoClientOptions34.getHeartbeatConnectTimeout();
        int int36 = mongoClientOptions34.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry37 = mongoClientOptions34.getCodecRegistry();
        int int38 = mongoClientOptions34.getServerSelectionTimeout();
        boolean boolean39 = mongoClientOptions34.isAlwaysUseMBeans();
        boolean boolean40 = mongoClientOptions13.equals((java.lang.Object) boolean39);
        com.mongodb.MongoClientOptions.Builder builder41 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int42 = mongoClientOptions13.getServerSelectionTimeout();
        int int43 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int44 = mongoClientOptions13.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(commandListenerList19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20000 + "'", int35 == 20000);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(codecRegistry37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 30000 + "'", int38 == 30000);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 30000 + "'", int42 == 30000);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20000 + "'", int43 == 20000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test4262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4262");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        org.springframework.core.env.Environment environment6 = null;
        int int7 = mongoProperties0.determinePort(environment6);
        mongoProperties0.authenticationDatabase = "";
        mongoProperties0.setDatabase("");
        int int12 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.port = 10000;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 27017 + "'", int12 == 27017);
    }

    @Test
    public void test4263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4263");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost(10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.serverSelectionTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder23.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder24.heartbeatSocketTimeout(27017);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties31 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties31.setAuthenticationDatabase("hi!");
        java.lang.String str34 = mongoProperties31.getHost();
        mongoProperties31.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.description("");
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder47.build();
        int int51 = mongoClientOptions50.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder52 = mongoProperties31.builder(mongoClientOptions50);
        int int53 = mongoClientOptions50.getMaxConnectionIdleTime();
        int int54 = mongoClientOptions50.getConnectionsPerHost();
        int int55 = mongoClientOptions50.getSocketTimeout();
        int int56 = mongoClientOptions50.getMaxConnectionLifeTime();
        int int57 = mongoClientOptions50.getMaxConnectionLifeTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry58 = mongoClientOptions50.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder59 = builder30.codecRegistry(codecRegistry58);
        com.mongodb.MongoClientOptions.Builder builder60 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.maxConnectionIdleTime((int) (short) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties65 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties65.setAuthenticationDatabase("hi!");
        java.lang.String str68 = mongoProperties65.getHost();
        mongoProperties65.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder71 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder77 = builder75.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder79 = builder77.description("");
        com.mongodb.MongoClientOptions.Builder builder81 = builder79.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder83 = builder81.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions84 = builder81.build();
        int int85 = mongoClientOptions84.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder86 = mongoProperties65.builder(mongoClientOptions84);
        int int87 = mongoClientOptions84.getMaxConnectionIdleTime();
        int int88 = mongoClientOptions84.getConnectionsPerHost();
        com.mongodb.ReadPreference readPreference89 = mongoClientOptions84.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder90 = builder64.readPreference(readPreference89);
        com.mongodb.MongoClientOptions.Builder builder91 = builder59.readPreference(readPreference89);
        com.mongodb.MongoClientOptions.Builder builder92 = builder14.readPreference(readPreference89);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 20000 + "'", int51 == 20000);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(codecRegistry58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(mongoClientOptions84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 20000 + "'", int85 == 20000);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 10 + "'", int87 == 10);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 100 + "'", int88 == 100);
        org.junit.Assert.assertNotNull(readPreference89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test4264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4264");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        mongoProperties0.port = (-1);
        char[] charArray7 = mongoProperties0.getPassword();
        java.lang.String str8 = mongoProperties0.gridFsDatabase;
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("test");
        java.lang.String str12 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "test" + "'", str12, "test");
    }

    @Test
    public void test4265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4265");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isAlwaysUseMBeans();
        int int9 = mongoClientOptions7.getConnectTimeout();
        int int10 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        java.lang.String str17 = mongoClientOptions16.getDescription();
        int int18 = mongoClientOptions16.getMaxWaitTime();
        boolean boolean19 = mongoClientOptions7.equals((java.lang.Object) mongoClientOptions16);
        java.util.List<com.mongodb.event.CommandListener> commandListenerList20 = mongoClientOptions7.getCommandListeners();
        com.mongodb.WriteConcern writeConcern21 = mongoClientOptions7.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120000 + "'", int18 == 120000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(commandListenerList20);
        org.junit.Assert.assertNotNull(writeConcern21);
    }

    @Test
    public void test4266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4266");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test4267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4267");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.description("test");
        com.mongodb.MongoClientOptions.Builder builder12 = builder4.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        int int16 = mongoClientOptions15.getHeartbeatConnectTimeout();
        int int17 = mongoClientOptions15.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 120000 + "'", int17 == 120000);
    }

    @Test
    public void test4268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4268");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        int int18 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        org.bson.codecs.configuration.CodecRegistry codecRegistry19 = mongoClientOptions13.getCodecRegistry();
        boolean boolean20 = mongoClientOptions13.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(codecRegistry19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test4269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4269");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        int int10 = mongoClientOptions7.getLocalThreshold();
        int int11 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int12 = mongoClientOptions7.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test4270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4270");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions13.getDbDecoderFactory();
        java.lang.Object obj16 = null;
        boolean boolean17 = mongoClientOptions13.equals(obj16);
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions13.getReadPreference();
        int int20 = mongoClientOptions13.getServerSelectionTimeout();
        java.lang.String str21 = mongoClientOptions13.getDescription();
        int int22 = mongoClientOptions13.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(readPreference19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 30000 + "'", int20 == 30000);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test4271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4271");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        int int25 = mongoClientOptions24.getHeartbeatConnectTimeout();
        int int26 = mongoClientOptions24.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions24.getReadPreference();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions24.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder29 = builder10.readPreference(readPreference28);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.description("");
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder42.build();
        int int46 = mongoClientOptions45.getHeartbeatConnectTimeout();
        int int47 = mongoClientOptions45.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry48 = mongoClientOptions45.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry49 = mongoClientOptions45.getCodecRegistry();
        com.mongodb.WriteConcern writeConcern50 = mongoClientOptions45.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder51 = builder29.writeConcern(writeConcern50);
        com.mongodb.MongoClientOptions mongoClientOptions52 = builder51.build();
        com.mongodb.MongoClientOptions.Builder builder54 = builder51.threadsAllowedToBlockForConnectionMultiplier((int) '#');
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.localThreshold(20000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 20000 + "'", int46 == 20000);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(codecRegistry48);
        org.junit.Assert.assertNotNull(codecRegistry49);
        org.junit.Assert.assertNotNull(writeConcern50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(mongoClientOptions52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test4272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4272");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str5 = mongoProperties0.getHost();
        java.lang.String str6 = mongoProperties0.username;
        mongoProperties0.host = "mongodb://localhost/test";
        java.lang.String str9 = mongoProperties0.uri;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
    }

    @Test
    public void test4273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4273");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getUri();
        mongoProperties0.gridFsDatabase = "";
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str9 = mongoProperties0.getGridFsDatabase();
        int int10 = mongoProperties0.getDEFAULT_PORT();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
    }

    @Test
    public void test4274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4274");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.database;
        java.lang.String str5 = mongoProperties0.authenticationDatabase;
        mongoProperties0.setGridFsDatabase("test");
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        boolean boolean9 = mongoProperties0.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.build();
        int int24 = mongoClientOptions23.getHeartbeatConnectTimeout();
        int int25 = mongoClientOptions23.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions23.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder27 = com.mongodb.MongoClientOptions.builder(mongoClientOptions23);
        com.mongodb.DBDecoderFactory dBDecoderFactory28 = mongoClientOptions23.getDbDecoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory29 = mongoClientOptions23.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder30 = mongoProperties0.builder(mongoClientOptions23);
        mongoProperties0.setUsername("hi!");
        java.lang.String str33 = mongoProperties0.uri;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(readPreference26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(dBDecoderFactory28);
        org.junit.Assert.assertNotNull(dBDecoderFactory29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "mongodb://localhost/test" + "'", str33, "mongodb://localhost/test");
    }

    @Test
    public void test4275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4275");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        java.lang.String str9 = mongoClientOptions7.getRequiredReplicaSetName();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList10 = mongoClientOptions7.getCommandListeners();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setAuthenticationDatabase("hi!");
        java.lang.Integer int14 = mongoProperties11.port;
        java.lang.String str15 = mongoProperties11.getGridFsDatabase();
        mongoProperties11.setUsername("hi!");
        boolean boolean18 = mongoClientOptions7.equals((java.lang.Object) mongoProperties11);
        int int19 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(commandListenerList10);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
    }

    @Test
    public void test4276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4276");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getDatabase();
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        mongoProperties0.setPort((java.lang.Integer) 20000);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setAuthenticationDatabase("hi!");
        java.lang.String str14 = mongoProperties11.getHost();
        mongoProperties11.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder27.build();
        int int31 = mongoClientOptions30.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder32 = mongoProperties11.builder(mongoClientOptions30);
        mongoProperties11.authenticationDatabase = "test";
        char[] charArray35 = mongoProperties11.getPassword();
        mongoProperties11.setUsername("mongodb://localhost/test");
        java.lang.String str38 = mongoProperties11.host;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties39 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties39.setAuthenticationDatabase("hi!");
        java.lang.String str42 = mongoProperties39.getHost();
        java.lang.String str43 = mongoProperties39.getUri();
        mongoProperties39.gridFsDatabase = "";
        mongoProperties39.setUri("mongodb://localhost/test");
        mongoProperties39.host = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties50 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties50.host = "";
        java.lang.String str53 = mongoProperties50.getHost();
        char[] charArray55 = new char[] { ' ' };
        mongoProperties50.setPassword(charArray55);
        char[] charArray60 = new char[] { '4', '4', '#' };
        mongoProperties50.password = charArray60;
        mongoProperties39.password = charArray60;
        mongoProperties11.password = charArray60;
        mongoProperties0.password = charArray60;
        org.springframework.core.env.Environment environment65 = null;
        int int66 = mongoProperties0.determinePort(environment65);
        char[] charArray67 = mongoProperties0.getPassword();
        mongoProperties0.host = "test";
        java.lang.String str70 = mongoProperties0.getDatabase();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20000 + "'", int31 == 20000);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(charArray35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "mongodb://localhost/test" + "'", str43, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[ ]");
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[4, 4, #]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 20000 + "'", int66 == 20000);
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[4, 4, #]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
    }

    @Test
    public void test4277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4277");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str5 = mongoProperties0.getUsername();
        mongoProperties0.database = "";
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder18.build();
        int int22 = mongoClientOptions21.getHeartbeatConnectTimeout();
        int int23 = mongoClientOptions21.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory24 = mongoClientOptions21.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = mongoProperties0.builder(mongoClientOptions21);
        boolean boolean26 = mongoProperties0.hasCustomAddress();
        java.lang.String str27 = mongoProperties0.database;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties28 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties28.host = "";
        java.lang.String str31 = mongoProperties28.getHost();
        char[] charArray33 = new char[] { ' ' };
        mongoProperties28.setPassword(charArray33);
        char[] charArray38 = new char[] { '4', '4', '#' };
        mongoProperties28.password = charArray38;
        mongoProperties28.setAuthenticationDatabase("");
        java.lang.String str42 = mongoProperties28.getUri();
        java.lang.String str43 = mongoProperties28.authenticationDatabase;
        char[] charArray44 = mongoProperties28.password;
        mongoProperties0.password = charArray44;
        java.lang.String str46 = mongoProperties0.uri;
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[ ]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[4, 4, #]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "mongodb://localhost/test" + "'", str42, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[4, 4, #]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "mongodb://localhost/test" + "'", str46, "mongodb://localhost/test");
    }

    @Test
    public void test4278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4278");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList17 = mongoClientOptions13.getCommandListeners();
        int int18 = mongoClientOptions13.getLocalThreshold();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        java.lang.String str20 = mongoClientOptions13.getRequiredReplicaSetName();
        int int21 = mongoClientOptions13.getConnectTimeout();
        boolean boolean22 = mongoClientOptions13.isSslEnabled();
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions13.getReadConcern();
        int int24 = mongoClientOptions13.getMinConnectionsPerHost();
        int int25 = mongoClientOptions13.getConnectionsPerHost();
        int int26 = mongoClientOptions13.getMaxConnectionLifeTime();
        int int27 = mongoClientOptions13.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(commandListenerList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readConcern23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test4279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4279");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.port = 100;
        java.lang.String str7 = mongoProperties0.database;
        mongoProperties0.setUsername("");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test4280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4280");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getSocketTimeout();
        int int25 = mongoClientOptions19.getMaxConnectionLifeTime();
        int int26 = mongoClientOptions19.getMaxConnectionLifeTime();
        java.lang.String str27 = mongoClientOptions19.getDescription();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties28 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties28.database = "";
        java.lang.String str31 = mongoProperties28.getUsername();
        mongoProperties28.uri = "";
        java.lang.String str34 = mongoProperties28.uri;
        boolean boolean35 = mongoClientOptions19.equals((java.lang.Object) mongoProperties28);
        java.lang.String str36 = mongoProperties28.getGridFsDatabase();
        mongoProperties28.setDatabase("hi!");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test4281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4281");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.uri;
        mongoProperties0.host = "";
        mongoProperties0.username = "hi!";
        mongoProperties0.uri = "test";
        java.lang.String str13 = mongoProperties0.uri;
        mongoProperties0.setUri("hi!");
        int int16 = mongoProperties0.getDEFAULT_PORT();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "test" + "'", str13, "test");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 27017 + "'", int16 == 27017);
    }

    @Test
    public void test4282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4282");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.uri = "";
        java.lang.String str6 = mongoProperties0.uri;
        java.lang.Integer int7 = mongoProperties0.getPort();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        java.lang.String str9 = mongoProperties0.database;
        java.lang.String str10 = mongoProperties0.username;
        mongoProperties0.username = "test";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test4283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4283");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getMinConnectionsPerHost();
        int int17 = mongoClientOptions13.getLocalThreshold();
        int int18 = mongoClientOptions13.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionLifeTime(5);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.maxWaitTime(0);
        boolean boolean28 = mongoClientOptions13.equals((java.lang.Object) builder27);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties29 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties29.setAuthenticationDatabase("hi!");
        java.lang.String str32 = mongoProperties29.getHost();
        java.lang.String str33 = mongoProperties29.getUri();
        mongoProperties29.gridFsDatabase = "";
        mongoProperties29.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str38 = mongoProperties29.host;
        mongoProperties29.gridFsDatabase = "mongodb://localhost/test";
        boolean boolean41 = mongoProperties29.hasCustomAddress();
        mongoProperties29.setDatabase("mongodb://localhost/test");
        boolean boolean44 = mongoClientOptions13.equals((java.lang.Object) "mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder45 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int46 = mongoClientOptions13.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 15 + "'", int17 == 15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "mongodb://localhost/test" + "'", str33, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test4284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4284");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.uri = "";
        java.lang.String str6 = mongoProperties0.gridFsDatabase;
        java.lang.String str7 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test4285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4285");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.connectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder10 = builder0.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder0.minHeartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder0.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatFrequency(27017);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout(500);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test4286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4286");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder38.build();
        int int42 = mongoClientOptions41.getHeartbeatConnectTimeout();
        int int43 = mongoClientOptions41.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference44 = mongoClientOptions41.getReadPreference();
        com.mongodb.ReadPreference readPreference45 = mongoClientOptions41.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder46 = builder27.readPreference(readPreference45);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.requiredReplicaSetName("mongodb://localhost/test");
        boolean boolean49 = mongoClientOptions13.equals((java.lang.Object) builder46);
        int int50 = mongoClientOptions13.getHeartbeatFrequency();
        boolean boolean51 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20000 + "'", int42 == 20000);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(readPreference44);
        org.junit.Assert.assertNotNull(readPreference45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10000 + "'", int50 == 10000);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test4287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4287");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClientOptions.Builder builder5 = mongoProperties0.builder(mongoClientOptions4);
        char[] charArray6 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getHost();
        mongoProperties0.setHost("mongodb://localhost/test");
        mongoProperties0.setAuthenticationDatabase("");
        org.springframework.core.env.Environment environment15 = null;
        int int16 = mongoProperties0.determinePort(environment15);
        mongoProperties0.username = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties19.host = "";
        mongoProperties19.setUsername("hi!");
        char[] charArray24 = mongoProperties19.getPassword();
        java.lang.String str25 = mongoProperties19.uri;
        java.lang.String str26 = mongoProperties19.uri;
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.requiredReplicaSetName("hi!");
        java.lang.Class<?> wildcardClass32 = builder31.getClass();
        mongoProperties19.fieldNamingStrategy = wildcardClass32;
        java.lang.String str34 = mongoProperties19.gridFsDatabase;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties35.database = "";
        java.lang.Class<?> wildcardClass38 = mongoProperties35.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass44 = builder43.getClass();
        mongoProperties35.fieldNamingStrategy = wildcardClass44;
        mongoProperties19.fieldNamingStrategy = wildcardClass44;
        mongoProperties0.fieldNamingStrategy = wildcardClass44;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 27017 + "'", int16 == 27017);
        org.junit.Assert.assertNull(charArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "mongodb://localhost/test" + "'", str25, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "mongodb://localhost/test" + "'", str26, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test4288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4288");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        mongoProperties0.uri = "test";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setAuthenticationDatabase("hi!");
        java.lang.String str12 = mongoProperties9.getHost();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder15.build();
        org.springframework.core.env.Environment environment19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties9.createMongoClient(mongoClientOptions18, environment19);
        int int21 = mongoClientOptions18.getConnectionsPerHost();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions18.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.description("");
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.heartbeatConnectTimeout((int) (short) 100);
        boolean boolean34 = mongoClientOptions18.equals((java.lang.Object) builder29);
        int int35 = mongoClientOptions18.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder36 = mongoProperties0.builder(mongoClientOptions18);
        java.lang.String str37 = mongoProperties0.database;
        java.lang.String str38 = mongoProperties0.host;
        java.lang.String str39 = mongoProperties0.uri;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "test" + "'", str39, "test");
    }

    @Test
    public void test4289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4289");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getSocketTimeout();
        int int25 = mongoClientOptions19.getMaxConnectionLifeTime();
        int int26 = mongoClientOptions19.getMaxConnectionLifeTime();
        int int27 = mongoClientOptions19.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        org.bson.codecs.configuration.CodecRegistry codecRegistry29 = mongoClientOptions19.getCodecRegistry();
        java.lang.String str30 = mongoClientOptions19.getRequiredReplicaSetName();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 500 + "'", int27 == 500);
        org.junit.Assert.assertNotNull(codecRegistry29);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test4290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4290");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder5 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.minHeartbeatFrequency(27017);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder32.build();
        int int36 = mongoClientOptions35.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory37 = mongoClientOptions35.getDbDecoderFactory();
        java.lang.Object obj38 = null;
        boolean boolean39 = mongoClientOptions35.equals(obj38);
        com.mongodb.MongoClientOptions.Builder builder40 = com.mongodb.MongoClientOptions.builder(mongoClientOptions35);
        com.mongodb.ReadPreference readPreference41 = mongoClientOptions35.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder42 = builder15.readPreference(readPreference41);
        boolean boolean43 = mongoClientOptions10.equals((java.lang.Object) readPreference41);
        boolean boolean44 = mongoClientOptions10.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20000 + "'", int36 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(readPreference41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test4291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4291");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.uri;
        mongoProperties0.host = "";
        mongoProperties0.username = "hi!";
        mongoProperties0.uri = "test";
        char[] charArray13 = mongoProperties0.password;
        org.springframework.core.env.Environment environment14 = null;
        int int15 = mongoProperties0.determinePort(environment14);
        java.lang.String str16 = mongoProperties0.getGridFsDatabase();
        java.lang.Class<?> wildcardClass17 = mongoProperties0.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 27017 + "'", int15 == 27017);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test4292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4292");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        char[] charArray4 = new char[] { '4' };
        mongoProperties0.setPassword(charArray4);
        java.lang.String str6 = mongoProperties0.username;
        mongoProperties0.username = "mongodb://localhost/test";
        mongoProperties0.gridFsDatabase = "hi!";
        mongoProperties0.database = "";
        mongoProperties0.setDatabase("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties15.host = "";
        java.lang.String str18 = mongoProperties15.getHost();
        char[] charArray20 = new char[] { ' ' };
        mongoProperties15.setPassword(charArray20);
        mongoProperties15.clearPassword();
        java.lang.String str23 = mongoProperties15.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder34.build();
        int int38 = mongoClientOptions37.getHeartbeatConnectTimeout();
        int int39 = mongoClientOptions37.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference40 = mongoClientOptions37.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList41 = mongoClientOptions37.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory42 = mongoClientOptions37.getDbDecoderFactory();
        boolean boolean43 = mongoClientOptions37.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment44 = null;
        com.mongodb.MongoClient mongoClient45 = mongoProperties15.createMongoClient(mongoClientOptions37, environment44);
        java.lang.String str46 = mongoProperties15.database;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties47 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties47.host = "";
        mongoProperties47.setUsername("hi!");
        char[] charArray52 = mongoProperties47.getPassword();
        java.lang.String str53 = mongoProperties47.uri;
        java.lang.String str54 = mongoProperties47.uri;
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.requiredReplicaSetName("hi!");
        java.lang.Class<?> wildcardClass60 = builder59.getClass();
        mongoProperties47.fieldNamingStrategy = wildcardClass60;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties62 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties62.host = "";
        mongoProperties62.setUsername("hi!");
        char[] charArray67 = mongoProperties62.getPassword();
        java.lang.String str68 = mongoProperties62.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties69 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties69.database = "";
        java.lang.String str72 = mongoProperties69.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties73 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties73.host = "";
        java.lang.String str76 = mongoProperties73.getHost();
        char[] charArray78 = new char[] { ' ' };
        mongoProperties73.setPassword(charArray78);
        char[] charArray83 = new char[] { '4', '4', '#' };
        mongoProperties73.password = charArray83;
        mongoProperties69.setPassword(charArray83);
        mongoProperties62.password = charArray83;
        mongoProperties47.setPassword(charArray83);
        mongoProperties15.setPassword(charArray83);
        mongoProperties0.setPassword(charArray83);
        java.lang.Class<?> wildcardClass90 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.username = "";
        java.lang.Integer int93 = mongoProperties0.port;
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4]");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000]");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(readPreference40);
        org.junit.Assert.assertNotNull(commandListenerList41);
        org.junit.Assert.assertNotNull(dBDecoderFactory42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(mongoClient45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(charArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "mongodb://localhost/test" + "'", str53, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "mongodb://localhost/test" + "'", str54, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNull(charArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "mongodb://localhost/test" + "'", str68, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[ ]");
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[4, 4, #]");
        org.junit.Assert.assertNull(wildcardClass90);
        org.junit.Assert.assertNull(int93);
    }

    @Test
    public void test4293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4293");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions19.getReadConcern();
        javax.net.SocketFactory socketFactory24 = mongoClientOptions19.getSocketFactory();
        int int25 = mongoClientOptions19.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions19.getDbDecoderFactory();
        int int27 = mongoClientOptions19.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory28 = mongoClientOptions19.getDbEncoderFactory();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(readConcern23);
        org.junit.Assert.assertNotNull(socketFactory24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10000 + "'", int25 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 120000 + "'", int27 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory28);
    }

    @Test
    public void test4294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4294");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        int int18 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions13.getWriteConcern();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions13.getReadPreference();
        org.bson.codecs.configuration.CodecRegistry codecRegistry21 = mongoClientOptions13.getCodecRegistry();
        boolean boolean22 = mongoClientOptions13.isSslEnabled();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList23 = mongoClientOptions13.getCommandListeners();
        java.lang.String str24 = mongoClientOptions13.getDescription();
        int int25 = mongoClientOptions13.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertNotNull(codecRegistry21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(commandListenerList23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test4295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4295");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectTimeout((int) (short) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties15.setAuthenticationDatabase("hi!");
        java.lang.String str18 = mongoProperties15.getHost();
        mongoProperties15.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.description("");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder31.build();
        int int35 = mongoClientOptions34.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder36 = mongoProperties15.builder(mongoClientOptions34);
        int int37 = mongoClientOptions34.getMaxConnectionIdleTime();
        int int38 = mongoClientOptions34.getConnectionsPerHost();
        int int39 = mongoClientOptions34.getHeartbeatSocketTimeout();
        com.mongodb.ReadConcern readConcern40 = mongoClientOptions34.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder41 = builder14.readConcern(readConcern40);
        com.mongodb.MongoClientOptions.Builder builder42 = builder6.readConcern(readConcern40);
        com.mongodb.MongoClientOptions.Builder builder44 = builder6.threadsAllowedToBlockForConnectionMultiplier(30000);
        com.mongodb.MongoClientOptions.Builder builder45 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.description("");
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder55.build();
        int int59 = mongoClientOptions58.getHeartbeatConnectTimeout();
        int int60 = mongoClientOptions58.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry61 = mongoClientOptions58.getCodecRegistry();
        int int62 = mongoClientOptions58.getServerSelectionTimeout();
        int int63 = mongoClientOptions58.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern64 = mongoClientOptions58.getWriteConcern();
        com.mongodb.ReadPreference readPreference65 = mongoClientOptions58.getReadPreference();
        org.bson.codecs.configuration.CodecRegistry codecRegistry66 = mongoClientOptions58.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry67 = mongoClientOptions58.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder68 = builder44.codecRegistry(codecRegistry67);
        com.mongodb.MongoClientOptions mongoClientOptions69 = builder68.build();
        com.mongodb.MongoClientOptions.Builder builder71 = builder68.maxWaitTime((int) (short) -1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20000 + "'", int35 == 20000);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 20000 + "'", int39 == 20000);
        org.junit.Assert.assertNotNull(readConcern40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 20000 + "'", int59 == 20000);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertNotNull(codecRegistry61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 30000 + "'", int62 == 30000);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
        org.junit.Assert.assertNotNull(writeConcern64);
        org.junit.Assert.assertNotNull(readPreference65);
        org.junit.Assert.assertNotNull(codecRegistry66);
        org.junit.Assert.assertNotNull(codecRegistry67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(mongoClientOptions69);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test4296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4296");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.host;
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        mongoProperties0.setUri("");
        java.lang.String str10 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test4297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4297");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getMinConnectionsPerHost();
        java.lang.String str17 = mongoClientOptions13.getRequiredReplicaSetName();
        int int18 = mongoClientOptions13.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions13.getWriteConcern();
        int int20 = mongoClientOptions13.getHeartbeatFrequency();
        java.lang.Class<?> wildcardClass21 = mongoClientOptions13.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 500 + "'", int18 == 500);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test4298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4298");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getHost();
        char[] charArray5 = mongoProperties0.password;
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        int int21 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int22 = mongoClientOptions19.getLocalThreshold();
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions19.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder34.build();
        int int38 = mongoClientOptions37.getHeartbeatConnectTimeout();
        int int39 = mongoClientOptions37.getMaxConnectionIdleTime();
        boolean boolean40 = mongoClientOptions37.isCursorFinalizerEnabled();
        boolean boolean41 = mongoClientOptions19.equals((java.lang.Object) mongoClientOptions37);
        com.mongodb.MongoClientOptions.Builder builder42 = com.mongodb.MongoClientOptions.builder(mongoClientOptions37);
        com.mongodb.MongoClientOptions.Builder builder43 = mongoProperties0.builder(mongoClientOptions37);
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder46.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory50 = mongoClientOptions49.getDbEncoderFactory();
        int int51 = mongoClientOptions49.getHeartbeatConnectTimeout();
        com.mongodb.WriteConcern writeConcern52 = mongoClientOptions49.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder53 = builder43.writeConcern(writeConcern52);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertNotNull(readConcern23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertNotNull(dBEncoderFactory50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 20000 + "'", int51 == 20000);
        org.junit.Assert.assertNotNull(writeConcern52);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test4299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4299");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getDatabase();
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        mongoProperties0.setPort((java.lang.Integer) 20000);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setAuthenticationDatabase("hi!");
        java.lang.String str14 = mongoProperties11.getHost();
        mongoProperties11.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder27.build();
        int int31 = mongoClientOptions30.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder32 = mongoProperties11.builder(mongoClientOptions30);
        mongoProperties11.authenticationDatabase = "test";
        char[] charArray35 = mongoProperties11.getPassword();
        mongoProperties11.setUsername("mongodb://localhost/test");
        java.lang.String str38 = mongoProperties11.host;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties39 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties39.setAuthenticationDatabase("hi!");
        java.lang.String str42 = mongoProperties39.getHost();
        java.lang.String str43 = mongoProperties39.getUri();
        mongoProperties39.gridFsDatabase = "";
        mongoProperties39.setUri("mongodb://localhost/test");
        mongoProperties39.host = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties50 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties50.host = "";
        java.lang.String str53 = mongoProperties50.getHost();
        char[] charArray55 = new char[] { ' ' };
        mongoProperties50.setPassword(charArray55);
        char[] charArray60 = new char[] { '4', '4', '#' };
        mongoProperties50.password = charArray60;
        mongoProperties39.password = charArray60;
        mongoProperties11.password = charArray60;
        mongoProperties0.password = charArray60;
        org.springframework.core.env.Environment environment65 = null;
        int int66 = mongoProperties0.determinePort(environment65);
        mongoProperties0.setHost("");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20000 + "'", int31 == 20000);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(charArray35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "mongodb://localhost/test" + "'", str43, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[ ]");
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[4, 4, #]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 20000 + "'", int66 == 20000);
    }

    @Test
    public void test4300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4300");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.minHeartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.connectTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.connectTimeout(27017);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test4301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4301");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("");
        mongoProperties0.uri = "hi!";
        java.lang.String str9 = mongoProperties0.uri;
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.build();
        int int24 = mongoClientOptions23.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions23.getDbDecoderFactory();
        java.lang.Object obj26 = null;
        boolean boolean27 = mongoClientOptions23.equals(obj26);
        com.mongodb.MongoClientOptions.Builder builder28 = com.mongodb.MongoClientOptions.builder(mongoClientOptions23);
        com.mongodb.ReadPreference readPreference29 = mongoClientOptions23.getReadPreference();
        int int30 = mongoClientOptions23.getServerSelectionTimeout();
        int int31 = mongoClientOptions23.getThreadsAllowedToBlockForConnectionMultiplier();
        int int32 = mongoClientOptions23.getConnectionsPerHost();
        int int33 = mongoClientOptions23.getMaxWaitTime();
        org.springframework.core.env.Environment environment34 = null;
        com.mongodb.MongoClient mongoClient35 = mongoProperties0.createMongoClient(mongoClientOptions23, environment34);
        int int36 = mongoClientOptions23.getMaxConnectionIdleTime();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(readPreference29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 30000 + "'", int30 == 30000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 120000 + "'", int33 == 120000);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
    }

    @Test
    public void test4302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4302");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions27, environment29);
        boolean boolean31 = mongoClientOptions27.isSslEnabled();
        boolean boolean32 = mongoClientOptions27.isAlwaysUseMBeans();
        int int33 = mongoClientOptions27.getSocketTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory34 = mongoClientOptions27.getDbDecoderFactory();
        java.lang.Class<?> wildcardClass35 = dBDecoderFactory34.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test4303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4303");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions13.getDbDecoderFactory();
        int int16 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int17 = mongoClientOptions13.getHeartbeatSocketTimeout();
        boolean boolean18 = mongoClientOptions13.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test4304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4304");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatConnectTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.minConnectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.description("");
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder43.build();
        int int47 = mongoClientOptions46.getHeartbeatConnectTimeout();
        int int48 = mongoClientOptions46.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference49 = mongoClientOptions46.getReadPreference();
        com.mongodb.ReadPreference readPreference50 = mongoClientOptions46.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder51 = builder32.readPreference(readPreference50);
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder56 = builder52.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder57 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions62 = builder59.build();
        java.lang.String str63 = mongoClientOptions62.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory64 = mongoClientOptions62.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder65 = builder52.dbEncoderFactory(dBEncoderFactory64);
        com.mongodb.MongoClientOptions.Builder builder66 = builder32.dbEncoderFactory(dBEncoderFactory64);
        com.mongodb.MongoClientOptions.Builder builder67 = builder21.dbEncoderFactory(dBEncoderFactory64);
        com.mongodb.MongoClientOptions.Builder builder68 = builder12.dbEncoderFactory(dBEncoderFactory64);
        com.mongodb.MongoClientOptions.Builder builder69 = builder68.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder73 = builder69.maxWaitTime((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 20000 + "'", int47 == 20000);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(readPreference49);
        org.junit.Assert.assertNotNull(readPreference50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(mongoClientOptions62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(dBEncoderFactory64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test4305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4305");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.host = "";
        java.lang.String str10 = mongoProperties7.getHost();
        char[] charArray12 = new char[] { ' ' };
        mongoProperties7.setPassword(charArray12);
        char[] charArray17 = new char[] { '4', '4', '#' };
        mongoProperties7.password = charArray17;
        java.lang.String str19 = mongoProperties7.username;
        char[] charArray20 = new char[] {};
        mongoProperties7.setPassword(charArray20);
        mongoProperties0.password = charArray20;
        mongoProperties0.setHost("hi!");
        boolean boolean25 = mongoProperties0.hasCustomAddress();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[ ]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4, 4, #]");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test4306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4306");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions27, environment29);
        mongoProperties0.database = "hi!";
        java.lang.String str33 = mongoProperties0.database;
        boolean boolean34 = mongoProperties0.hasCustomAddress();
        java.lang.String str35 = mongoProperties0.host;
        java.lang.String str36 = mongoProperties0.getUri();
        java.lang.String str37 = mongoProperties0.database;
        mongoProperties0.setDatabase("");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "mongodb://localhost/test" + "'", str36, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
    }

    @Test
    public void test4307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4307");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.setAuthenticationDatabase("hi!");
        java.lang.String str10 = mongoProperties7.getHost();
        mongoProperties7.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        int int27 = mongoClientOptions26.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder28 = mongoProperties7.builder(mongoClientOptions26);
        int int29 = mongoClientOptions26.getMaxConnectionIdleTime();
        int int30 = mongoClientOptions26.getConnectionsPerHost();
        int int31 = mongoClientOptions26.getSocketTimeout();
        int int32 = mongoClientOptions26.getMinHeartbeatFrequency();
        boolean boolean33 = mongoClientOptions26.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder34 = mongoProperties0.builder(mongoClientOptions26);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.sslEnabled(true);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties39 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties39.setAuthenticationDatabase("hi!");
        java.lang.String str42 = mongoProperties39.getHost();
        mongoProperties39.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder45 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.description("");
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder55.build();
        int int59 = mongoClientOptions58.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder60 = mongoProperties39.builder(mongoClientOptions58);
        int int61 = mongoClientOptions58.getMaxConnectionIdleTime();
        int int62 = mongoClientOptions58.getConnectionsPerHost();
        com.mongodb.ReadPreference readPreference63 = mongoClientOptions58.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder64 = builder36.readPreference(readPreference63);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.maxConnectionLifeTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.sslInvalidHostNameAllowed(false);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties69 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties69.setAuthenticationDatabase("hi!");
        java.lang.String str72 = mongoProperties69.getHost();
        mongoProperties69.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder75 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder77 = builder75.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder79 = builder77.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder81 = builder79.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder83 = builder81.description("");
        com.mongodb.MongoClientOptions.Builder builder85 = builder83.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder87 = builder85.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions88 = builder85.build();
        int int89 = mongoClientOptions88.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder90 = mongoProperties69.builder(mongoClientOptions88);
        int int91 = mongoClientOptions88.getMinConnectionsPerHost();
        boolean boolean92 = mongoClientOptions88.isSocketKeepAlive();
        com.mongodb.DBDecoderFactory dBDecoderFactory93 = mongoClientOptions88.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder94 = builder66.dbDecoderFactory(dBDecoderFactory93);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder96 = builder94.connectionsPerHost((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: connectionPerHost must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 500 + "'", int32 == 500);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 20000 + "'", int59 == 20000);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertNotNull(readPreference63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(mongoClientOptions88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 20000 + "'", int89 == 20000);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(dBDecoderFactory93);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test4308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4308");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder11 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.requiredReplicaSetName("test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4309");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getHost();
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        mongoProperties0.setHost("mongodb://localhost/test");
        java.lang.Integer int9 = mongoProperties0.getPort();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(int9);
    }

    @Test
    public void test4310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4310");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList17 = mongoClientOptions13.getCommandListeners();
        int int18 = mongoClientOptions13.getLocalThreshold();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        java.lang.String str20 = mongoClientOptions13.getRequiredReplicaSetName();
        int int21 = mongoClientOptions13.getConnectTimeout();
        boolean boolean22 = mongoClientOptions13.isSslEnabled();
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions13.getReadConcern();
        com.mongodb.WriteConcern writeConcern24 = mongoClientOptions13.getWriteConcern();
        java.lang.String str25 = mongoClientOptions13.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(commandListenerList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readConcern23);
        org.junit.Assert.assertNotNull(writeConcern24);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test4311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4311");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClientOptions.Builder builder5 = mongoProperties0.builder(mongoClientOptions4);
        char[] charArray6 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        mongoProperties0.clearPassword();
        java.lang.String str11 = mongoProperties0.authenticationDatabase;
        java.lang.String str12 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test4312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4312");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        java.lang.String str5 = mongoProperties0.database;
        org.springframework.core.env.Environment environment6 = null;
        int int7 = mongoProperties0.determinePort(environment6);
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        java.lang.String str9 = mongoProperties0.authenticationDatabase;
        org.springframework.core.env.Environment environment10 = null;
        int int11 = mongoProperties0.determinePort(environment10);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 27017 + "'", int11 == 27017);
    }

    @Test
    public void test4313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4313");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str5 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        int int21 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions19.getReadPreference();
        boolean boolean23 = mongoClientOptions19.isAlwaysUseMBeans();
        boolean boolean24 = mongoClientOptions19.isCursorFinalizerEnabled();
        int int25 = mongoClientOptions19.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        org.springframework.core.env.Environment environment27 = null;
        com.mongodb.MongoClient mongoClient28 = mongoProperties0.createMongoClient(mongoClientOptions19, environment27);
        com.mongodb.DBEncoderFactory dBEncoderFactory29 = mongoClientOptions19.getDbEncoderFactory();
        int int30 = mongoClientOptions19.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertNotNull(dBEncoderFactory29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
    }

    @Test
    public void test4314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4314");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder22 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.minHeartbeatFrequency(500);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions25.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder27 = builder10.socketFactory(socketFactory26);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.serverSelectionTimeout(100);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties32 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties32.setAuthenticationDatabase("hi!");
        java.lang.String str35 = mongoProperties32.getHost();
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder38.build();
        org.springframework.core.env.Environment environment42 = null;
        com.mongodb.MongoClient mongoClient43 = mongoProperties32.createMongoClient(mongoClientOptions41, environment42);
        int int44 = mongoClientOptions41.getConnectionsPerHost();
        com.mongodb.DBDecoderFactory dBDecoderFactory45 = mongoClientOptions41.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder46 = builder29.dbDecoderFactory(dBDecoderFactory45);
        com.mongodb.MongoClientOptions.Builder builder48 = builder29.maxConnectionLifeTime((int) '4');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertNotNull(mongoClient43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(dBDecoderFactory45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test4315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4315");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getUri();
        mongoProperties0.gridFsDatabase = "";
        mongoProperties0.clearPassword();
        java.lang.String str8 = mongoProperties0.uri;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.host = "";
        java.lang.String str12 = mongoProperties9.getHost();
        java.lang.String str13 = mongoProperties9.getHost();
        mongoProperties9.gridFsDatabase = "mongodb://localhost/test";
        mongoProperties9.setHost("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties18.host = "";
        mongoProperties18.setUsername("hi!");
        mongoProperties18.port = (-1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties25 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties25.host = "";
        java.lang.String str28 = mongoProperties25.getHost();
        char[] charArray30 = new char[] { ' ' };
        mongoProperties25.setPassword(charArray30);
        char[] charArray35 = new char[] { '4', '4', '#' };
        mongoProperties25.password = charArray35;
        mongoProperties18.password = charArray35;
        mongoProperties9.setPassword(charArray35);
        mongoProperties0.password = charArray35;
        java.lang.String str40 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ ]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[4, 4, #]");
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test4316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4316");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getGridFsDatabase();
        java.lang.String str7 = mongoProperties0.getDatabase();
        mongoProperties0.setHost("");
        java.lang.String str10 = mongoProperties0.getUsername();
        mongoProperties0.authenticationDatabase = "mongodb://localhost/test";
        org.springframework.core.env.Environment environment13 = null;
        int int14 = mongoProperties0.determinePort(environment13);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 27017 + "'", int14 == 27017);
    }

    @Test
    public void test4317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4317");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getSocketTimeout();
        int int25 = mongoClientOptions19.getMaxConnectionLifeTime();
        int int26 = mongoClientOptions19.getMaxConnectionLifeTime();
        boolean boolean27 = mongoClientOptions19.isAlwaysUseMBeans();
        int int28 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.MongoClientOptions.Builder builder29 = com.mongodb.MongoClientOptions.builder(mongoClientOptions19);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.requiredReplicaSetName("hi!");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test4318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4318");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatFrequency(10000);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.requiredReplicaSetName("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test4319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4319");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("");
        mongoProperties0.port = 10000;
        java.lang.String str9 = mongoProperties0.getGridFsDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties10.host = "";
        mongoProperties10.username = "";
        java.lang.String str15 = mongoProperties10.getHost();
        mongoProperties10.port = 1;
        mongoProperties10.setUsername("test");
        mongoProperties10.setUri("");
        int int22 = mongoProperties10.getDEFAULT_PORT();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties23.host = "";
        java.lang.String str26 = mongoProperties23.getHost();
        char[] charArray28 = new char[] { ' ' };
        mongoProperties23.setPassword(charArray28);
        char[] charArray33 = new char[] { '4', '4', '#' };
        mongoProperties23.password = charArray33;
        mongoProperties23.setAuthenticationDatabase("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties37 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties37.database = "";
        java.lang.String str40 = mongoProperties37.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties41 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties41.host = "";
        java.lang.String str44 = mongoProperties41.getHost();
        char[] charArray46 = new char[] { ' ' };
        mongoProperties41.setPassword(charArray46);
        char[] charArray51 = new char[] { '4', '4', '#' };
        mongoProperties41.password = charArray51;
        mongoProperties37.setPassword(charArray51);
        mongoProperties23.password = charArray51;
        mongoProperties10.password = charArray51;
        mongoProperties0.password = charArray51;
        java.lang.String str57 = mongoProperties0.authenticationDatabase;
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 27017 + "'", int22 == 27017);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ ]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[4, 4, #]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[ ]");
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[4, 4, #]");
        org.junit.Assert.assertNull(str57);
    }

    @Test
    public void test4320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4320");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder5.build();
        java.lang.String str9 = mongoClientOptions8.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory10 = mongoClientOptions8.getDbEncoderFactory();
        int int11 = mongoClientOptions8.getServerSelectionTimeout();
        com.mongodb.ReadConcern readConcern12 = mongoClientOptions8.getReadConcern();
        boolean boolean13 = mongoClientOptions8.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder14 = mongoProperties0.builder(mongoClientOptions8);
        java.lang.Integer int15 = mongoProperties0.port;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(dBEncoderFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(readConcern12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(int15);
    }

    @Test
    public void test4321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4321");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        java.lang.Object obj20 = null;
        boolean boolean21 = mongoClientOptions19.equals(obj20);
        int int22 = mongoClientOptions19.getHeartbeatConnectTimeout();
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions19, environment23);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties25 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties25.setAuthenticationDatabase("hi!");
        java.lang.String str28 = mongoProperties25.getHost();
        mongoProperties25.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.description("");
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder41.build();
        int int45 = mongoClientOptions44.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder46 = mongoProperties25.builder(mongoClientOptions44);
        int int47 = mongoClientOptions44.getMaxConnectionIdleTime();
        int int48 = mongoClientOptions44.getConnectionsPerHost();
        int int49 = mongoClientOptions44.getSocketTimeout();
        int int50 = mongoClientOptions44.getMinHeartbeatFrequency();
        boolean boolean51 = mongoClientOptions44.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions44);
        boolean boolean53 = mongoClientOptions19.equals((java.lang.Object) mongoClientOptions44);
        int int54 = mongoClientOptions44.getMaxConnectionIdleTime();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList55 = mongoClientOptions44.getCommandListeners();
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 20000 + "'", int45 == 20000);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 500 + "'", int50 == 500);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(commandListenerList55);
    }

    @Test
    public void test4322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4322");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        int int25 = mongoClientOptions24.getHeartbeatConnectTimeout();
        int int26 = mongoClientOptions24.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions24.getReadPreference();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions24.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder29 = builder10.readPreference(readPreference28);
        com.mongodb.MongoClientOptions.Builder builder30 = builder29.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.description("");
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.heartbeatSocketTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.maxConnectionLifeTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.description("");
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions65 = builder62.build();
        int int66 = mongoClientOptions65.getHeartbeatConnectTimeout();
        int int67 = mongoClientOptions65.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry68 = mongoClientOptions65.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry69 = mongoClientOptions65.getCodecRegistry();
        com.mongodb.WriteConcern writeConcern70 = mongoClientOptions65.getWriteConcern();
        com.mongodb.DBDecoderFactory dBDecoderFactory71 = mongoClientOptions65.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern72 = mongoClientOptions65.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder73 = builder49.writeConcern(writeConcern72);
        com.mongodb.MongoClientOptions.Builder builder74 = builder30.writeConcern(writeConcern72);
        com.mongodb.MongoClientOptions mongoClientOptions75 = builder74.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(mongoClientOptions65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 20000 + "'", int66 == 20000);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertNotNull(codecRegistry68);
        org.junit.Assert.assertNotNull(codecRegistry69);
        org.junit.Assert.assertNotNull(writeConcern70);
        org.junit.Assert.assertNotNull(dBDecoderFactory71);
        org.junit.Assert.assertNotNull(writeConcern72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(mongoClientOptions75);
    }

    @Test
    public void test4323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4323");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getSocketTimeout();
        int int25 = mongoClientOptions19.getMaxConnectionLifeTime();
        int int26 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions19.getDbEncoderFactory();
        int int28 = mongoClientOptions19.getLocalThreshold();
        int int29 = mongoClientOptions19.getConnectionsPerHost();
        int int30 = mongoClientOptions19.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 15 + "'", int28 == 15);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
    }

    @Test
    public void test4324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4324");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        java.lang.String str6 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str8 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.username = "";
        java.lang.Class<?> wildcardClass11 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass12 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(wildcardClass12);
    }

    @Test
    public void test4325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4325");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketTimeout((int) (short) 10);
        com.mongodb.event.CommandListener commandListener14 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder15 = builder13.addCommandListener(commandListener14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test4326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4326");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        mongoProperties0.authenticationDatabase = "test";
        char[] charArray24 = mongoProperties0.getPassword();
        mongoProperties0.setUsername("mongodb://localhost/test");
        java.lang.String str27 = mongoProperties0.host;
        java.lang.String str28 = mongoProperties0.getUsername();
        org.springframework.core.env.Environment environment29 = null;
        int int30 = mongoProperties0.determinePort(environment29);
        mongoProperties0.gridFsDatabase = "hi!";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(charArray24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "mongodb://localhost/test" + "'", str28, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 27017 + "'", int30 == 27017);
    }

    @Test
    public void test4327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4327");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        java.lang.String str5 = mongoProperties0.getHost();
        mongoProperties0.port = 1;
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        java.lang.String str9 = mongoProperties0.gridFsDatabase;
        java.lang.String str10 = mongoProperties0.getUsername();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test4328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4328");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        char[] charArray5 = mongoProperties0.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.setAuthenticationDatabase("hi!");
        java.lang.String str9 = mongoProperties6.getHost();
        mongoProperties6.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        int int26 = mongoClientOptions25.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder27 = mongoProperties6.builder(mongoClientOptions25);
        int int28 = mongoClientOptions25.getMaxConnectionIdleTime();
        int int29 = mongoClientOptions25.getConnectionsPerHost();
        int int30 = mongoClientOptions25.getSocketTimeout();
        int int31 = mongoClientOptions25.getMaxConnectionLifeTime();
        int int32 = mongoClientOptions25.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder33 = mongoProperties0.builder(mongoClientOptions25);
        char[] charArray34 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(charArray34);
    }

    @Test
    public void test4329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4329");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.gridFsDatabase = "";
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.username = "test";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(wildcardClass2);
    }

    @Test
    public void test4330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4330");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.serverSelectionTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder12.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
    }

    @Test
    public void test4331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4331");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        mongoProperties0.uri = "test";
        mongoProperties0.setDatabase("");
        mongoProperties0.gridFsDatabase = "";
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str15 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test4332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4332");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.serverSelectionTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.minConnectionsPerHost(97);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4333");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.connectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        int int23 = mongoClientOptions22.getHeartbeatConnectTimeout();
        int int24 = mongoClientOptions22.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference25 = mongoClientOptions22.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList26 = mongoClientOptions22.getCommandListeners();
        org.bson.codecs.configuration.CodecRegistry codecRegistry27 = mongoClientOptions22.getCodecRegistry();
        javax.net.SocketFactory socketFactory28 = mongoClientOptions22.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder29 = builder6.socketFactory(socketFactory28);
        com.mongodb.MongoClientOptions.Builder builder31 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder6.localThreshold(97);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(readPreference25);
        org.junit.Assert.assertNotNull(commandListenerList26);
        org.junit.Assert.assertNotNull(codecRegistry27);
        org.junit.Assert.assertNotNull(socketFactory28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test4334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4334");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.socketKeepAlive(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder14 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: threadsAllowedToBlockForConnectionMultiplier must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test4335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4335");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder5 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.minHeartbeatFrequency(27017);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        com.mongodb.MongoClientOptions.Builder builder12 = builder7.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("test");
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatSocketTimeout((int) (byte) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties17.setAuthenticationDatabase("hi!");
        java.lang.String str20 = mongoProperties17.getHost();
        mongoProperties17.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.description("");
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder33.build();
        int int37 = mongoClientOptions36.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder38 = mongoProperties17.builder(mongoClientOptions36);
        int int39 = mongoClientOptions36.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern40 = mongoClientOptions36.getReadConcern();
        int int41 = mongoClientOptions36.getMaxConnectionIdleTime();
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions36);
        int int43 = mongoClientOptions36.getMaxConnectionIdleTime();
        com.mongodb.WriteConcern writeConcern44 = mongoClientOptions36.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder45 = builder12.writeConcern(writeConcern44);
        com.mongodb.MongoClientOptions.Builder builder47 = builder12.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder51 = builder47.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder53 = builder47.maxConnectionIdleTime(10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 20000 + "'", int37 == 20000);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(readConcern40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(writeConcern44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test4336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4336");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass9 = builder8.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass9;
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str13 = mongoProperties0.getMongoClientDatabase();
        char[] charArray14 = mongoProperties0.password;
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        int int23 = mongoClientOptions22.getHeartbeatConnectTimeout();
        int int24 = mongoClientOptions22.getMaxWaitTime();
        com.mongodb.ReadConcern readConcern25 = mongoClientOptions22.getReadConcern();
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties0.createMongoClient(mongoClientOptions22, environment26);
        java.lang.String str28 = mongoProperties0.getUri();
        char[] charArray29 = mongoProperties0.password;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(charArray14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 120000 + "'", int24 == 120000);
        org.junit.Assert.assertNotNull(readConcern25);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "mongodb://localhost/test" + "'", str28, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray29);
    }

    @Test
    public void test4337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4337");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.setAuthenticationDatabase("hi!");
        java.lang.String str10 = mongoProperties7.getHost();
        mongoProperties7.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        int int27 = mongoClientOptions26.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder28 = mongoProperties7.builder(mongoClientOptions26);
        int int29 = mongoClientOptions26.getMaxConnectionIdleTime();
        int int30 = mongoClientOptions26.getConnectionsPerHost();
        int int31 = mongoClientOptions26.getSocketTimeout();
        int int32 = mongoClientOptions26.getMinHeartbeatFrequency();
        boolean boolean33 = mongoClientOptions26.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder34 = mongoProperties0.builder(mongoClientOptions26);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.sslInvalidHostNameAllowed(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder40 = builder38.threadsAllowedToBlockForConnectionMultiplier((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: threadsAllowedToBlockForConnectionMultiplier must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 500 + "'", int32 == 500);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test4338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4338");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.getUri();
        char[] charArray7 = mongoProperties0.password;
        mongoProperties0.username = "test";
        boolean boolean10 = mongoProperties0.hasCustomAddress();
        java.lang.Integer int11 = mongoProperties0.port;
        mongoProperties0.database = "";
        java.lang.Class<?> wildcardClass14 = mongoProperties0.fieldNamingStrategy;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(wildcardClass14);
    }

    @Test
    public void test4339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4339");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getHost();
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        char[] charArray7 = mongoProperties0.password;
        java.lang.String str8 = mongoProperties0.gridFsDatabase;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
    }

    @Test
    public void test4340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4340");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        mongoProperties0.gridFsDatabase = "test";
        mongoProperties0.port = 500;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.host = "";
        java.lang.String str9 = mongoProperties6.getHost();
        char[] charArray11 = new char[] { ' ' };
        mongoProperties6.setPassword(charArray11);
        char[] charArray16 = new char[] { '4', '4', '#' };
        mongoProperties6.password = charArray16;
        mongoProperties6.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.description("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.build();
        int int34 = mongoClientOptions33.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment35 = null;
        com.mongodb.MongoClient mongoClient36 = mongoProperties6.createMongoClient(mongoClientOptions33, environment35);
        java.util.List<com.mongodb.event.CommandListener> commandListenerList37 = mongoClientOptions33.getCommandListeners();
        boolean boolean38 = mongoClientOptions33.isSslEnabled();
        org.springframework.core.env.Environment environment39 = null;
        com.mongodb.MongoClient mongoClient40 = mongoProperties0.createMongoClient(mongoClientOptions33, environment39);
        java.lang.String str41 = mongoProperties0.getGridFsDatabase();
        java.lang.String str42 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setUri("hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[ ]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10000 + "'", int34 == 10000);
        org.junit.Assert.assertNotNull(mongoClient36);
        org.junit.Assert.assertNotNull(commandListenerList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mongoClient40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "test" + "'", str41, "test");
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test4341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4341");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties4 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties4.host = "";
        java.lang.String str7 = mongoProperties4.getHost();
        char[] charArray9 = new char[] { ' ' };
        mongoProperties4.setPassword(charArray9);
        char[] charArray14 = new char[] { '4', '4', '#' };
        mongoProperties4.password = charArray14;
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.authenticationDatabase = "";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[ ]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, 4, #]");
    }

    @Test
    public void test4342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4342");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder5 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder5.build();
        int int7 = mongoClientOptions6.getConnectionsPerHost();
        int int8 = mongoClientOptions6.getConnectionsPerHost();
        int int9 = mongoClientOptions6.getServerSelectionTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 30000 + "'", int9 == 30000);
    }

    @Test
    public void test4343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4343");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder13 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder15 = builder10.maxConnectionIdleTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder10.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder10.minConnectionsPerHost((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.connectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder28.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder33 = builder28.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.minHeartbeatFrequency(500);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties36 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties36.database = "";
        java.lang.String str39 = mongoProperties36.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions40 = null;
        com.mongodb.MongoClientOptions.Builder builder41 = mongoProperties36.builder(mongoClientOptions40);
        char[] charArray42 = mongoProperties36.getPassword();
        mongoProperties36.setHost("hi!");
        com.mongodb.MongoClientOptions.Builder builder45 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.description("");
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder55.build();
        int int59 = mongoClientOptions58.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment60 = null;
        com.mongodb.MongoClient mongoClient61 = mongoProperties36.createMongoClient(mongoClientOptions58, environment60);
        int int62 = mongoClientOptions58.getMaxConnectionLifeTime();
        boolean boolean63 = mongoClientOptions58.isSslEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory64 = mongoClientOptions58.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder65 = builder33.dbEncoderFactory(dBEncoderFactory64);
        com.mongodb.MongoClientOptions.Builder builder66 = builder21.dbEncoderFactory(dBEncoderFactory64);
        com.mongodb.MongoClientOptions.Builder builder67 = builder5.dbEncoderFactory(dBEncoderFactory64);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.localThreshold((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(charArray42);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10000 + "'", int59 == 10000);
        org.junit.Assert.assertNotNull(mongoClient61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test4344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4344");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("");
        mongoProperties0.port = 10000;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.host = "";
        mongoProperties9.setUsername("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties14.host = "";
        java.lang.String str17 = mongoProperties14.getHost();
        java.lang.String str18 = mongoProperties14.username;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties19.database = "";
        java.lang.String str22 = mongoProperties19.getUsername();
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass28 = builder27.getClass();
        mongoProperties19.fieldNamingStrategy = wildcardClass28;
        mongoProperties14.fieldNamingStrategy = wildcardClass28;
        mongoProperties9.fieldNamingStrategy = wildcardClass28;
        mongoProperties0.fieldNamingStrategy = wildcardClass28;
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.Class<?> wildcardClass35 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str36 = mongoProperties0.getGridFsDatabase();
        java.lang.String str37 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str38 = mongoProperties0.username;
        java.lang.String str39 = mongoProperties0.database;
        boolean boolean40 = mongoProperties0.hasCustomAddress();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "mongodb://localhost/test" + "'", str37, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test4345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4345");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getUri();
        mongoProperties0.gridFsDatabase = "";
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.Integer int9 = mongoProperties0.port;
        java.lang.String str10 = mongoProperties0.database;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.host = "";
        java.lang.String str14 = mongoProperties11.getHost();
        char[] charArray16 = new char[] { ' ' };
        mongoProperties11.setPassword(charArray16);
        mongoProperties11.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties19.database = "";
        java.lang.String str22 = mongoProperties19.getUsername();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties23.host = "";
        char[] charArray27 = new char[] { '4' };
        mongoProperties23.setPassword(charArray27);
        mongoProperties19.password = charArray27;
        mongoProperties11.setPassword(charArray27);
        mongoProperties0.password = charArray27;
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[\000]");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[\000]");
    }

    @Test
    public void test4346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4346");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder12.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder17 = builder12.maxConnectionIdleTime((int) (short) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties18.setAuthenticationDatabase("hi!");
        java.lang.String str21 = mongoProperties18.getHost();
        mongoProperties18.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder34.build();
        int int38 = mongoClientOptions37.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder39 = mongoProperties18.builder(mongoClientOptions37);
        int int40 = mongoClientOptions37.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern41 = mongoClientOptions37.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder42 = builder12.readConcern(readConcern41);
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.description("");
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions56 = builder53.build();
        int int57 = mongoClientOptions56.getHeartbeatConnectTimeout();
        int int58 = mongoClientOptions56.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference59 = mongoClientOptions56.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList60 = mongoClientOptions56.getCommandListeners();
        org.bson.codecs.configuration.CodecRegistry codecRegistry61 = mongoClientOptions56.getCodecRegistry();
        javax.net.SocketFactory socketFactory62 = mongoClientOptions56.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder63 = builder42.socketFactory(socketFactory62);
        com.mongodb.MongoClientOptions.Builder builder64 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder68 = builder64.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.socketTimeout((int) (short) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties71 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties71.setAuthenticationDatabase("hi!");
        java.lang.String str74 = mongoProperties71.getHost();
        mongoProperties71.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder77 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder79 = builder77.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder81 = builder79.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder83 = builder81.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder85 = builder83.description("");
        com.mongodb.MongoClientOptions.Builder builder87 = builder85.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder89 = builder87.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions90 = builder87.build();
        int int91 = mongoClientOptions90.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder92 = mongoProperties71.builder(mongoClientOptions90);
        javax.net.SocketFactory socketFactory93 = mongoClientOptions90.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder94 = builder70.socketFactory(socketFactory93);
        com.mongodb.MongoClientOptions.Builder builder95 = builder42.socketFactory(socketFactory93);
        com.mongodb.MongoClientOptions.Builder builder96 = builder7.socketFactory(socketFactory93);
        com.mongodb.MongoClientOptions.Builder builder98 = builder7.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder99 = builder98.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(readConcern41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoClientOptions56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 20000 + "'", int57 == 20000);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertNotNull(readPreference59);
        org.junit.Assert.assertNotNull(commandListenerList60);
        org.junit.Assert.assertNotNull(codecRegistry61);
        org.junit.Assert.assertNotNull(socketFactory62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(mongoClientOptions90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 20000 + "'", int91 == 20000);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(socketFactory93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test4347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4347");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.setAuthenticationDatabase("hi!");
        java.lang.String str9 = mongoProperties6.getHost();
        mongoProperties6.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        int int26 = mongoClientOptions25.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder27 = mongoProperties6.builder(mongoClientOptions25);
        int int28 = mongoClientOptions25.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern29 = mongoClientOptions25.getReadConcern();
        boolean boolean30 = mongoClientOptions25.isSslInvalidHostNameAllowed();
        boolean boolean31 = mongoClientOptions25.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder32 = mongoProperties0.builder(mongoClientOptions25);
        int int33 = mongoClientOptions25.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean34 = mongoClientOptions25.isSocketKeepAlive();
        boolean boolean35 = mongoClientOptions25.isCursorFinalizerEnabled();
        boolean boolean36 = mongoClientOptions25.isSslEnabled();
        int int37 = mongoClientOptions25.getMaxConnectionLifeTime();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(readConcern29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test4348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4348");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        boolean boolean18 = mongoClientOptions13.isCursorFinalizerEnabled();
        int int19 = mongoClientOptions13.getMinConnectionsPerHost();
        boolean boolean20 = mongoClientOptions13.isCursorFinalizerEnabled();
        int int21 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
    }

    @Test
    public void test4349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4349");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str5 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        int int21 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions19.getReadPreference();
        boolean boolean23 = mongoClientOptions19.isAlwaysUseMBeans();
        boolean boolean24 = mongoClientOptions19.isCursorFinalizerEnabled();
        int int25 = mongoClientOptions19.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        org.springframework.core.env.Environment environment27 = null;
        com.mongodb.MongoClient mongoClient28 = mongoProperties0.createMongoClient(mongoClientOptions19, environment27);
        com.mongodb.DBDecoderFactory dBDecoderFactory29 = mongoClientOptions19.getDbDecoderFactory();
        boolean boolean30 = mongoClientOptions19.isSocketKeepAlive();
        boolean boolean31 = mongoClientOptions19.isSslInvalidHostNameAllowed();
        int int32 = mongoClientOptions19.getMaxConnectionLifeTime();
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertNotNull(dBDecoderFactory29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test4350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4350");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        char[] charArray4 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions mongoClientOptions5 = null;
        org.springframework.core.env.Environment environment6 = null;
        com.mongodb.MongoClient mongoClient7 = mongoProperties0.createMongoClient(mongoClientOptions5, environment6);
        mongoProperties0.setUsername("");
        org.springframework.core.env.Environment environment10 = null;
        int int11 = mongoProperties0.determinePort(environment10);
        mongoProperties0.setUsername("");
        java.lang.String str14 = mongoProperties0.gridFsDatabase;
        boolean boolean15 = mongoProperties0.hasCustomCredentials();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(charArray4);
        org.junit.Assert.assertNotNull(mongoClient7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 27017 + "'", int11 == 27017);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test4351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4351");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.database = "";
        java.lang.String str10 = mongoProperties7.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.host = "";
        java.lang.String str14 = mongoProperties11.getHost();
        char[] charArray16 = new char[] { ' ' };
        mongoProperties11.setPassword(charArray16);
        char[] charArray21 = new char[] { '4', '4', '#' };
        mongoProperties11.password = charArray21;
        mongoProperties7.setPassword(charArray21);
        mongoProperties0.password = charArray21;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties25 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties25.database = "";
        java.lang.String str28 = mongoProperties25.getUsername();
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass34 = builder33.getClass();
        mongoProperties25.fieldNamingStrategy = wildcardClass34;
        mongoProperties0.fieldNamingStrategy = wildcardClass34;
        java.lang.Class<?> wildcardClass37 = mongoProperties0.fieldNamingStrategy;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties38 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties38.clearPassword();
        char[] charArray40 = mongoProperties38.getPassword();
        mongoProperties38.port = 0;
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.description("");
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions56 = builder53.build();
        int int57 = mongoClientOptions56.getMinConnectionsPerHost();
        com.mongodb.ReadPreference readPreference58 = mongoClientOptions56.getReadPreference();
        int int59 = mongoClientOptions56.getMinConnectionsPerHost();
        int int60 = mongoClientOptions56.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder61 = mongoProperties38.builder(mongoClientOptions56);
        org.springframework.core.env.Environment environment62 = null;
        com.mongodb.MongoClient mongoClient63 = mongoProperties0.createMongoClient(mongoClientOptions56, environment62);
        java.lang.Class<?> wildcardClass64 = mongoClient63.getClass();
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[ ]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[\000, \000, \000]");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNull(charArray40);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoClientOptions56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(readPreference58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10000 + "'", int60 == 10000);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(mongoClient63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test4352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4352");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        mongoProperties0.database = "";
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        java.lang.String str14 = mongoClientOptions13.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        int int16 = mongoClientOptions13.getServerSelectionTimeout();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions13, environment17);
        java.lang.String str19 = mongoProperties0.uri;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "mongodb://localhost/test" + "'", str19, "mongodb://localhost/test");
    }

    @Test
    public void test4353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4353");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        int int21 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions19.getReadPreference();
        boolean boolean23 = mongoClientOptions19.isAlwaysUseMBeans();
        boolean boolean24 = mongoClientOptions19.isCursorFinalizerEnabled();
        int int25 = mongoClientOptions19.getConnectionsPerHost();
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties0.createMongoClient(mongoClientOptions19, environment26);
        int int28 = mongoClientOptions19.getMaxConnectionLifeTime();
        int int29 = mongoClientOptions19.getMaxWaitTime();
        java.lang.Object obj30 = null;
        boolean boolean31 = mongoClientOptions19.equals(obj30);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 120000 + "'", int29 == 120000);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test4354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4354");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions27, environment29);
        java.util.List<com.mongodb.event.CommandListener> commandListenerList31 = mongoClientOptions27.getCommandListeners();
        boolean boolean32 = mongoClientOptions27.isSslEnabled();
        boolean boolean33 = mongoClientOptions27.isAlwaysUseMBeans();
        int int34 = mongoClientOptions27.getHeartbeatConnectTimeout();
        int int35 = mongoClientOptions27.getMinHeartbeatFrequency();
        int int36 = mongoClientOptions27.getHeartbeatSocketTimeout();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList37 = mongoClientOptions27.getCommandListeners();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertNotNull(commandListenerList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20000 + "'", int34 == 20000);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 500 + "'", int35 == 500);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20000 + "'", int36 == 20000);
        org.junit.Assert.assertNotNull(commandListenerList37);
    }

    @Test
    public void test4355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4355");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        java.lang.String str5 = mongoProperties0.getHost();
        mongoProperties0.port = 1;
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        java.lang.String str9 = mongoProperties0.uri;
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.host = "hi!";
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "test" + "'", str10, "test");
    }

    @Test
    public void test4356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4356");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        char[] charArray10 = new char[] { '4', '4', '#' };
        mongoProperties0.password = charArray10;
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions27, environment29);
        boolean boolean31 = mongoClientOptions27.isSslEnabled();
        boolean boolean32 = mongoClientOptions27.isAlwaysUseMBeans();
        com.mongodb.ReadConcern readConcern33 = mongoClientOptions27.getReadConcern();
        boolean boolean34 = mongoClientOptions27.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory35 = mongoClientOptions27.getDbEncoderFactory();
        java.lang.String str36 = mongoClientOptions27.getRequiredReplicaSetName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ ]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(readConcern33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory35);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test4357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4357");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory6 = mongoClientOptions5.getDbEncoderFactory();
        int int7 = mongoClientOptions5.getHeartbeatConnectTimeout();
        int int8 = mongoClientOptions5.getMinConnectionsPerHost();
        int int9 = mongoClientOptions5.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern10 = mongoClientOptions5.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertNotNull(dBEncoderFactory6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20000 + "'", int7 == 20000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(writeConcern10);
    }

    @Test
    public void test4358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4358");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getMinConnectionsPerHost();
        java.lang.String str17 = mongoClientOptions13.getRequiredReplicaSetName();
        int int18 = mongoClientOptions13.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions13.getWriteConcern();
        int int20 = mongoClientOptions13.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 500 + "'", int18 == 500);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
    }

    @Test
    public void test4359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4359");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        org.springframework.core.env.Environment environment6 = null;
        int int7 = mongoProperties0.determinePort(environment6);
        mongoProperties0.authenticationDatabase = "";
        mongoProperties0.setDatabase("");
        boolean boolean12 = mongoProperties0.hasCustomAddress();
        char[] charArray13 = mongoProperties0.password;
        java.lang.String str14 = mongoProperties0.getDatabase();
        java.lang.String str15 = mongoProperties0.database;
        mongoProperties0.setAuthenticationDatabase("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(charArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test4360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4360");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.uri;
        java.lang.String str7 = mongoProperties0.uri;
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("hi!");
        java.lang.Class<?> wildcardClass13 = builder12.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass13;
        java.lang.String str15 = mongoProperties0.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties16.database = "";
        java.lang.String str19 = mongoProperties16.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties20 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties20.host = "";
        java.lang.String str23 = mongoProperties20.getHost();
        char[] charArray25 = new char[] { ' ' };
        mongoProperties20.setPassword(charArray25);
        char[] charArray30 = new char[] { '4', '4', '#' };
        mongoProperties20.password = charArray30;
        mongoProperties16.setPassword(charArray30);
        mongoProperties0.setPassword(charArray30);
        java.lang.Class<?> wildcardClass34 = mongoProperties0.getClass();
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "test" + "'", str15, "test");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ ]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[4, 4, #]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test4361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4361");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.description("");
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.description("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties31 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties31.setAuthenticationDatabase("hi!");
        java.lang.String str34 = mongoProperties31.getHost();
        mongoProperties31.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.description("");
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder47.build();
        int int51 = mongoClientOptions50.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder52 = mongoProperties31.builder(mongoClientOptions50);
        int int53 = mongoClientOptions50.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern54 = mongoClientOptions50.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder55 = builder26.readConcern(readConcern54);
        com.mongodb.MongoClientOptions.Builder builder56 = builder23.readConcern(readConcern54);
        com.mongodb.MongoClientOptions.Builder builder57 = builder4.readConcern(readConcern54);
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder4.build();
        com.mongodb.WriteConcern writeConcern59 = mongoClientOptions58.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 20000 + "'", int51 == 20000);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(readConcern54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertNotNull(writeConcern59);
    }

    @Test
    public void test4362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4362");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.connectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder10 = builder0.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder0.minHeartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder0.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxWaitTime(30000);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxWaitTime((int) ' ');
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties21.host = "";
        java.lang.String str24 = mongoProperties21.getHost();
        char[] charArray26 = new char[] { ' ' };
        mongoProperties21.setPassword(charArray26);
        char[] charArray31 = new char[] { '4', '4', '#' };
        mongoProperties21.password = charArray31;
        mongoProperties21.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.description("");
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder45.build();
        int int49 = mongoClientOptions48.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment50 = null;
        com.mongodb.MongoClient mongoClient51 = mongoProperties21.createMongoClient(mongoClientOptions48, environment50);
        java.util.List<com.mongodb.event.CommandListener> commandListenerList52 = mongoClientOptions48.getCommandListeners();
        boolean boolean53 = mongoClientOptions48.isSslEnabled();
        com.mongodb.ReadPreference readPreference54 = mongoClientOptions48.getReadPreference();
        javax.net.SocketFactory socketFactory55 = mongoClientOptions48.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory56 = mongoClientOptions48.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder57 = builder18.dbEncoderFactory(dBEncoderFactory56);
        com.mongodb.MongoClientOptions.Builder builder58 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.description("");
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.connectionsPerHost(500);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties67 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties67.setAuthenticationDatabase("hi!");
        java.lang.String str70 = mongoProperties67.getHost();
        mongoProperties67.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder73 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder77 = builder75.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder79 = builder77.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder81 = builder79.description("");
        com.mongodb.MongoClientOptions.Builder builder83 = builder81.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder85 = builder83.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions86 = builder83.build();
        int int87 = mongoClientOptions86.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder88 = mongoProperties67.builder(mongoClientOptions86);
        int int89 = mongoClientOptions86.getMaxConnectionIdleTime();
        int int90 = mongoClientOptions86.getConnectionsPerHost();
        int int91 = mongoClientOptions86.getSocketTimeout();
        int int92 = mongoClientOptions86.getMaxConnectionLifeTime();
        int int93 = mongoClientOptions86.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry94 = mongoClientOptions86.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder95 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions86);
        com.mongodb.DBEncoderFactory dBEncoderFactory96 = mongoClientOptions86.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder97 = builder64.dbEncoderFactory(dBEncoderFactory96);
        com.mongodb.MongoClientOptions.Builder builder98 = builder57.dbEncoderFactory(dBEncoderFactory96);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ ]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10000 + "'", int49 == 10000);
        org.junit.Assert.assertNotNull(mongoClient51);
        org.junit.Assert.assertNotNull(commandListenerList52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(readPreference54);
        org.junit.Assert.assertNotNull(socketFactory55);
        org.junit.Assert.assertNotNull(dBEncoderFactory56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(mongoClientOptions86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 20000 + "'", int87 == 20000);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 100 + "'", int90 == 100);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 20000 + "'", int93 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry94);
        org.junit.Assert.assertNotNull(dBEncoderFactory96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test4363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4363");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder32.build();
        int int36 = mongoClientOptions35.getHeartbeatConnectTimeout();
        int int37 = mongoClientOptions35.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry38 = mongoClientOptions35.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder39 = builder17.codecRegistry(codecRegistry38);
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder42.build();
        java.lang.String str46 = mongoClientOptions45.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory47 = mongoClientOptions45.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder48 = builder17.dbEncoderFactory(dBEncoderFactory47);
        com.mongodb.MongoClientOptions.Builder builder49 = builder12.dbEncoderFactory(dBEncoderFactory47);
        com.mongodb.MongoClientOptions.Builder builder50 = builder4.dbEncoderFactory(dBEncoderFactory47);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.heartbeatConnectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder53 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder57 = builder53.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions60 = builder57.build();
        boolean boolean61 = mongoClientOptions60.isAlwaysUseMBeans();
        int int62 = mongoClientOptions60.getConnectTimeout();
        int int63 = mongoClientOptions60.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder64 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions69 = builder66.build();
        java.lang.String str70 = mongoClientOptions69.getDescription();
        int int71 = mongoClientOptions69.getMaxWaitTime();
        boolean boolean72 = mongoClientOptions60.equals((java.lang.Object) mongoClientOptions69);
        int int73 = mongoClientOptions60.getMinHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference74 = mongoClientOptions60.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder75 = builder50.readPreference(readPreference74);
        com.mongodb.MongoClientOptions.Builder builder76 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder78 = builder76.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder82 = builder78.heartbeatSocketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder84 = builder82.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions mongoClientOptions85 = builder84.build();
        com.mongodb.ReadConcern readConcern86 = mongoClientOptions85.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder87 = builder50.readConcern(readConcern86);
        com.mongodb.MongoClientOptions.Builder builder89 = builder50.socketTimeout(10000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20000 + "'", int36 == 20000);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(codecRegistry38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(dBEncoderFactory47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(mongoClientOptions60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10000 + "'", int62 == 10000);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 20000 + "'", int63 == 20000);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(mongoClientOptions69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 120000 + "'", int71 == 120000);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 500 + "'", int73 == 500);
        org.junit.Assert.assertNotNull(readPreference74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(mongoClientOptions85);
        org.junit.Assert.assertNotNull(readConcern86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test4364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4364");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        java.lang.String str11 = mongoClientOptions10.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions10.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder13 = builder0.dbEncoderFactory(dBEncoderFactory12);
        com.mongodb.MongoClientOptions.Builder builder15 = builder0.minHeartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder0.minHeartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder19 = builder0.socketKeepAlive(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test4365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4365");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        javax.net.SocketFactory socketFactory22 = mongoClientOptions19.getSocketFactory();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties23.host = "";
        mongoProperties23.username = "";
        mongoProperties23.clearPassword();
        java.lang.String str29 = mongoProperties23.getDatabase();
        java.lang.String str30 = mongoProperties23.getGridFsDatabase();
        mongoProperties23.database = "test";
        boolean boolean33 = mongoClientOptions19.equals((java.lang.Object) mongoProperties23);
        com.mongodb.ReadPreference readPreference34 = mongoClientOptions19.getReadPreference();
        boolean boolean35 = mongoClientOptions19.isAlwaysUseMBeans();
        boolean boolean36 = mongoClientOptions19.isCursorFinalizerEnabled();
        int int37 = mongoClientOptions19.getLocalThreshold();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(socketFactory22);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(readPreference34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 15 + "'", int37 == 15);
    }

    @Test
    public void test4366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4366");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        int int23 = mongoClientOptions22.getHeartbeatConnectTimeout();
        int int24 = mongoClientOptions22.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry25 = mongoClientOptions22.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder26 = builder4.codecRegistry(codecRegistry25);
        com.mongodb.MongoClientOptions.Builder builder27 = builder4.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(codecRegistry25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test4367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4367");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.connectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.serverSelectionTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder18.heartbeatSocketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.description("");
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder35.build();
        int int39 = mongoClientOptions38.getHeartbeatConnectTimeout();
        int int40 = mongoClientOptions38.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry41 = mongoClientOptions38.getCodecRegistry();
        com.mongodb.ReadConcern readConcern42 = mongoClientOptions38.getReadConcern();
        javax.net.SocketFactory socketFactory43 = mongoClientOptions38.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder44 = builder18.socketFactory(socketFactory43);
        com.mongodb.MongoClientOptions.Builder builder45 = builder6.socketFactory(socketFactory43);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.sslEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder47.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory49 = mongoClientOptions48.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 20000 + "'", int39 == 20000);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(codecRegistry41);
        org.junit.Assert.assertNotNull(readConcern42);
        org.junit.Assert.assertNotNull(socketFactory43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertNotNull(dBDecoderFactory49);
    }

    @Test
    public void test4368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4368");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime(10000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxWaitTime(20000);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxConnectionLifeTime((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionLifeTime(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder26 = builder21.maxConnectionIdleTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder21.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.maxWaitTime((int) (short) -1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.description("");
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.requiredReplicaSetName("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties42 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties42.host = "";
        java.lang.String str45 = mongoProperties42.getHost();
        char[] charArray47 = new char[] { ' ' };
        mongoProperties42.setPassword(charArray47);
        char[] charArray52 = new char[] { '4', '4', '#' };
        mongoProperties42.password = charArray52;
        mongoProperties42.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder56 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.description("");
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions69 = builder66.build();
        int int70 = mongoClientOptions69.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment71 = null;
        com.mongodb.MongoClient mongoClient72 = mongoProperties42.createMongoClient(mongoClientOptions69, environment71);
        boolean boolean73 = mongoClientOptions69.isSslEnabled();
        boolean boolean74 = mongoClientOptions69.isAlwaysUseMBeans();
        int int75 = mongoClientOptions69.getSocketTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory76 = mongoClientOptions69.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder77 = builder41.dbDecoderFactory(dBDecoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder78 = builder28.dbDecoderFactory(dBDecoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder79 = builder14.dbDecoderFactory(dBDecoderFactory76);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[ ]");
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(mongoClientOptions69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10000 + "'", int70 == 10000);
        org.junit.Assert.assertNotNull(mongoClient72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test4369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4369");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions13.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test4370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4370");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.gridFsDatabase = "";
        java.lang.String str5 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        com.mongodb.MongoClientOptions.Builder builder7 = mongoProperties0.builder(mongoClientOptions6);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.connectionsPerHost(10000);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout((int) 'a');
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test4371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4371");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        boolean boolean8 = mongoClientOptions7.isAlwaysUseMBeans();
        int int9 = mongoClientOptions7.getConnectTimeout();
        int int10 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        java.lang.String str17 = mongoClientOptions16.getDescription();
        int int18 = mongoClientOptions16.getMaxWaitTime();
        boolean boolean19 = mongoClientOptions7.equals((java.lang.Object) mongoClientOptions16);
        int int20 = mongoClientOptions7.getMinHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference21 = mongoClientOptions7.getReadPreference();
        com.mongodb.WriteConcern writeConcern22 = mongoClientOptions7.getWriteConcern();
        com.mongodb.WriteConcern writeConcern23 = mongoClientOptions7.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120000 + "'", int18 == 120000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertNotNull(readPreference21);
        org.junit.Assert.assertNotNull(writeConcern22);
        org.junit.Assert.assertNotNull(writeConcern23);
    }

    @Test
    public void test4372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4372");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        char[] charArray4 = new char[] { '4' };
        mongoProperties0.setPassword(charArray4);
        java.lang.String str6 = mongoProperties0.username;
        mongoProperties0.username = "mongodb://localhost/test";
        java.lang.String str9 = mongoProperties0.username;
        java.lang.String str10 = mongoProperties0.getDatabase();
        java.lang.String str11 = mongoProperties0.host;
        mongoProperties0.setUri("");
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4]");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test4373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4373");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getMinConnectionsPerHost();
        java.lang.String str17 = mongoClientOptions13.getDescription();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList18 = mongoClientOptions13.getCommandListeners();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions13.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.description("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.connectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder36 = builder30.minHeartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder38 = builder30.connectTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder30.build();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties40 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties40.host = "";
        mongoProperties40.setUsername("hi!");
        char[] charArray45 = mongoProperties40.getPassword();
        mongoProperties40.database = "mongodb://localhost/test";
        boolean boolean48 = mongoClientOptions39.equals((java.lang.Object) mongoProperties40);
        int int49 = mongoClientOptions39.getConnectTimeout();
        com.mongodb.ReadPreference readPreference50 = mongoClientOptions39.getReadPreference();
        boolean boolean51 = mongoClientOptions13.equals((java.lang.Object) mongoClientOptions39);
        java.util.List<com.mongodb.event.CommandListener> commandListenerList52 = mongoClientOptions39.getCommandListeners();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(commandListenerList18);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertNull(charArray45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertNotNull(readPreference50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(commandListenerList52);
    }

    @Test
    public void test4374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4374");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        java.lang.String str11 = mongoClientOptions10.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions10.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder13 = builder0.dbEncoderFactory(dBEncoderFactory12);
        com.mongodb.MongoClientOptions.Builder builder15 = builder0.maxConnectionIdleTime(15);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder15.build();
        java.lang.String str19 = mongoClientOptions18.getRequiredReplicaSetName();
        int int20 = mongoClientOptions18.getServerSelectionTimeout();
        boolean boolean21 = mongoClientOptions18.isCursorFinalizerEnabled();
        int int22 = mongoClientOptions18.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder23 = com.mongodb.MongoClientOptions.builder(mongoClientOptions18);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder30.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder35 = builder30.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder37 = builder30.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxConnectionLifeTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder42 = builder39.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder47 = builder43.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder48 = builder47.legacyDefaults();
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder48.build();
        com.mongodb.MongoClientOptions.Builder builder51 = builder48.threadsAllowedToBlockForConnectionMultiplier(30000);
        com.mongodb.MongoClientOptions.Builder builder53 = builder48.maxWaitTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder54 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder58 = builder54.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.connectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder63 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.description("");
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions76 = builder73.build();
        int int77 = mongoClientOptions76.getHeartbeatConnectTimeout();
        int int78 = mongoClientOptions76.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference79 = mongoClientOptions76.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList80 = mongoClientOptions76.getCommandListeners();
        org.bson.codecs.configuration.CodecRegistry codecRegistry81 = mongoClientOptions76.getCodecRegistry();
        javax.net.SocketFactory socketFactory82 = mongoClientOptions76.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder83 = builder60.socketFactory(socketFactory82);
        com.mongodb.MongoClientOptions.Builder builder84 = builder48.socketFactory(socketFactory82);
        com.mongodb.MongoClientOptions.Builder builder85 = builder42.socketFactory(socketFactory82);
        com.mongodb.MongoClientOptions.Builder builder86 = builder23.socketFactory(socketFactory82);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 30000 + "'", int20 == 30000);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(mongoClientOptions76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 20000 + "'", int77 == 20000);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertNotNull(readPreference79);
        org.junit.Assert.assertNotNull(commandListenerList80);
        org.junit.Assert.assertNotNull(codecRegistry81);
        org.junit.Assert.assertNotNull(socketFactory82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test4375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4375");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.String str6 = mongoProperties0.host;
        java.lang.String str7 = mongoProperties0.host;
        mongoProperties0.setGridFsDatabase("");
        java.lang.Class<?> wildcardClass10 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str11 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test4376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4376");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.build();
        int int21 = mongoClientOptions20.getHeartbeatConnectTimeout();
        int int22 = mongoClientOptions20.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry23 = mongoClientOptions20.getCodecRegistry();
        int int24 = mongoClientOptions20.getServerSelectionTimeout();
        int int25 = mongoClientOptions20.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern26 = mongoClientOptions20.getWriteConcern();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions20.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder28 = builder6.readPreference(readPreference27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder6.socketTimeout((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder32 = builder6.connectionsPerHost((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: connectionPerHost must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(codecRegistry23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 30000 + "'", int24 == 30000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(writeConcern26);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test4377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4377");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionLifeTime((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        java.lang.String str26 = mongoClientOptions25.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions25.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder15.dbEncoderFactory(dBEncoderFactory27);
        com.mongodb.MongoClientOptions.Builder builder29 = builder14.dbEncoderFactory(dBEncoderFactory27);
        com.mongodb.MongoClientOptions.Builder builder31 = builder14.maxConnectionLifeTime(1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test4378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4378");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.description("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.setAuthenticationDatabase("hi!");
        java.lang.String str10 = mongoProperties7.getHost();
        mongoProperties7.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        int int27 = mongoClientOptions26.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder28 = mongoProperties7.builder(mongoClientOptions26);
        int int29 = mongoClientOptions26.getMaxConnectionIdleTime();
        int int30 = mongoClientOptions26.getConnectionsPerHost();
        int int31 = mongoClientOptions26.getSocketTimeout();
        int int32 = mongoClientOptions26.getMinHeartbeatFrequency();
        boolean boolean33 = mongoClientOptions26.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions26);
        com.mongodb.WriteConcern writeConcern35 = mongoClientOptions26.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder36 = builder6.writeConcern(writeConcern35);
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.description("");
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder47.build();
        int int51 = mongoClientOptions50.getHeartbeatConnectTimeout();
        int int52 = mongoClientOptions50.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry53 = mongoClientOptions50.getCodecRegistry();
        int int54 = mongoClientOptions50.getServerSelectionTimeout();
        int int55 = mongoClientOptions50.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern56 = mongoClientOptions50.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder57 = builder6.writeConcern(writeConcern56);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.heartbeatSocketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder61 = builder57.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 500 + "'", int32 == 500);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(writeConcern35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 20000 + "'", int51 == 20000);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(codecRegistry53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 30000 + "'", int54 == 30000);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertNotNull(writeConcern56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test4379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4379");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        mongoProperties0.gridFsDatabase = "test";
        mongoProperties0.port = 500;
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.host = "hi!";
        mongoProperties0.setHost("");
    }

    @Test
    public void test4380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4380");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions13.getReadPreference();
        com.mongodb.ReadConcern readConcern19 = mongoClientOptions13.getReadConcern();
        com.mongodb.ReadConcern readConcern20 = mongoClientOptions13.getReadConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(readConcern19);
        org.junit.Assert.assertNotNull(readConcern20);
    }

    @Test
    public void test4381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4381");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.getDatabase();
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        mongoProperties0.setPort((java.lang.Integer) 20000);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setAuthenticationDatabase("hi!");
        java.lang.String str14 = mongoProperties11.getHost();
        mongoProperties11.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder27.build();
        int int31 = mongoClientOptions30.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder32 = mongoProperties11.builder(mongoClientOptions30);
        mongoProperties11.authenticationDatabase = "test";
        char[] charArray35 = mongoProperties11.getPassword();
        mongoProperties11.setUsername("mongodb://localhost/test");
        java.lang.String str38 = mongoProperties11.host;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties39 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties39.setAuthenticationDatabase("hi!");
        java.lang.String str42 = mongoProperties39.getHost();
        java.lang.String str43 = mongoProperties39.getUri();
        mongoProperties39.gridFsDatabase = "";
        mongoProperties39.setUri("mongodb://localhost/test");
        mongoProperties39.host = "";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties50 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties50.host = "";
        java.lang.String str53 = mongoProperties50.getHost();
        char[] charArray55 = new char[] { ' ' };
        mongoProperties50.setPassword(charArray55);
        char[] charArray60 = new char[] { '4', '4', '#' };
        mongoProperties50.password = charArray60;
        mongoProperties39.password = charArray60;
        mongoProperties11.password = charArray60;
        mongoProperties0.password = charArray60;
        org.springframework.core.env.Environment environment65 = null;
        int int66 = mongoProperties0.determinePort(environment65);
        char[] charArray67 = mongoProperties0.getPassword();
        mongoProperties0.host = "test";
        boolean boolean70 = mongoProperties0.hasCustomAddress();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20000 + "'", int31 == 20000);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(charArray35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "mongodb://localhost/test" + "'", str43, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[ ]");
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[4, 4, #]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 20000 + "'", int66 == 20000);
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[4, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test4382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4382");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        mongoProperties0.clearPassword();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder20 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.minHeartbeatFrequency(500);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties23.database = "";
        java.lang.String str26 = mongoProperties23.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions27 = null;
        com.mongodb.MongoClientOptions.Builder builder28 = mongoProperties23.builder(mongoClientOptions27);
        char[] charArray29 = mongoProperties23.getPassword();
        mongoProperties23.setHost("hi!");
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.description("");
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder42.build();
        int int46 = mongoClientOptions45.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment47 = null;
        com.mongodb.MongoClient mongoClient48 = mongoProperties23.createMongoClient(mongoClientOptions45, environment47);
        int int49 = mongoClientOptions45.getMaxConnectionLifeTime();
        boolean boolean50 = mongoClientOptions45.isSslEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory51 = mongoClientOptions45.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder52 = builder20.dbEncoderFactory(dBEncoderFactory51);
        java.lang.Class<?> wildcardClass53 = builder20.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass53;
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.description("");
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions68 = builder65.build();
        int int69 = mongoClientOptions68.getHeartbeatConnectTimeout();
        int int70 = mongoClientOptions68.getMaxConnectionIdleTime();
        org.springframework.core.env.Environment environment71 = null;
        com.mongodb.MongoClient mongoClient72 = mongoProperties0.createMongoClient(mongoClientOptions68, environment71);
        mongoProperties0.setUri("mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(charArray29);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10000 + "'", int46 == 10000);
        org.junit.Assert.assertNotNull(mongoClient48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(mongoClientOptions68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 20000 + "'", int69 == 20000);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertNotNull(mongoClient72);
    }

    @Test
    public void test4383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4383");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry21 = mongoClientOptions19.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder22 = builder2.codecRegistry(codecRegistry21);
        com.mongodb.MongoClientOptions.Builder builder23 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder25 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder2.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
    }

    @Test
    public void test4384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4384");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(30000);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder25.build();
        int int29 = mongoClientOptions28.getHeartbeatConnectTimeout();
        int int30 = mongoClientOptions28.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry31 = mongoClientOptions28.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry32 = mongoClientOptions28.getCodecRegistry();
        com.mongodb.WriteConcern writeConcern33 = mongoClientOptions28.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder34 = builder14.writeConcern(writeConcern33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder14.maxWaitTime(5);
        com.mongodb.MongoClientOptions.Builder builder38 = builder14.minHeartbeatFrequency(500);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.sslInvalidHostNameAllowed(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(codecRegistry31);
        org.junit.Assert.assertNotNull(codecRegistry32);
        org.junit.Assert.assertNotNull(writeConcern33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test4385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4385");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        int int25 = mongoClientOptions24.getHeartbeatConnectTimeout();
        int int26 = mongoClientOptions24.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions24.getReadPreference();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions24.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder29 = builder10.readPreference(readPreference28);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.sslInvalidHostNameAllowed(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test4386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4386");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.String str6 = mongoProperties0.host;
        java.lang.String str7 = mongoProperties0.host;
        mongoProperties0.setGridFsDatabase("");
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.build();
        int int24 = mongoClientOptions23.getLocalThreshold();
        int int25 = mongoClientOptions23.getThreadsAllowedToBlockForConnectionMultiplier();
        int int26 = mongoClientOptions23.getSocketTimeout();
        org.springframework.core.env.Environment environment27 = null;
        com.mongodb.MongoClient mongoClient28 = mongoProperties0.createMongoClient(mongoClientOptions23, environment27);
        mongoProperties0.setUri("");
        boolean boolean31 = mongoProperties0.hasCustomAddress();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 15 + "'", int24 == 15);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test4387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4387");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions19.getReadConcern();
        int int24 = mongoClientOptions19.getMaxConnectionIdleTime();
        boolean boolean25 = mongoClientOptions19.isSslInvalidHostNameAllowed();
        int int26 = mongoClientOptions19.getSocketTimeout();
        int int27 = mongoClientOptions19.getConnectionsPerHost();
        int int28 = mongoClientOptions19.getMinHeartbeatFrequency();
        int int29 = mongoClientOptions19.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(readConcern23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 500 + "'", int28 == 500);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test4388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4388");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.connectionsPerHost(30000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test4389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4389");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str5 = mongoProperties0.authenticationDatabase;
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setPort((java.lang.Integer) (-1));
        java.lang.String str9 = mongoProperties0.getUri();
        mongoProperties0.database = "";
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "test" + "'", str6, "test");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
    }

    @Test
    public void test4390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4390");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.maxConnectionIdleTime((-1));
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectTimeout((int) '4');
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.clearPassword();
        char[] charArray13 = mongoProperties11.getPassword();
        mongoProperties11.setGridFsDatabase("");
        java.lang.String str16 = mongoProperties11.getUsername();
        mongoProperties11.database = "";
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder29.build();
        int int33 = mongoClientOptions32.getHeartbeatConnectTimeout();
        int int34 = mongoClientOptions32.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory35 = mongoClientOptions32.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder36 = mongoProperties11.builder(mongoClientOptions32);
        int int37 = mongoClientOptions32.getHeartbeatConnectTimeout();
        com.mongodb.ReadPreference readPreference38 = mongoClientOptions32.getReadPreference();
        javax.net.SocketFactory socketFactory39 = mongoClientOptions32.getSocketFactory();
        org.bson.codecs.configuration.CodecRegistry codecRegistry40 = mongoClientOptions32.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder41 = builder8.codecRegistry(codecRegistry40);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatFrequency(97);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(charArray13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20000 + "'", int33 == 20000);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 20000 + "'", int37 == 20000);
        org.junit.Assert.assertNotNull(readPreference38);
        org.junit.Assert.assertNotNull(socketFactory39);
        org.junit.Assert.assertNotNull(codecRegistry40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test4391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4391");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder(mongoClientOptions19);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.threadsAllowedToBlockForConnectionMultiplier(500);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.sslInvalidHostNameAllowed(false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test4392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4392");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder6.build();
        org.springframework.core.env.Environment environment10 = null;
        com.mongodb.MongoClient mongoClient11 = mongoProperties0.createMongoClient(mongoClientOptions9, environment10);
        java.lang.String str12 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties13.host = "";
        mongoProperties13.setUsername("hi!");
        java.lang.String str18 = mongoProperties13.getUsername();
        java.lang.Class<?> wildcardClass19 = mongoProperties13.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass19;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test4393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4393");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        int int17 = mongoClientOptions16.getHeartbeatConnectTimeout();
        int int18 = mongoClientOptions16.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions16.getReadPreference();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions16.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder21 = builder2.readPreference(readPreference20);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder34.build();
        int int38 = mongoClientOptions37.getHeartbeatConnectTimeout();
        int int39 = mongoClientOptions37.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry40 = mongoClientOptions37.getCodecRegistry();
        int int41 = mongoClientOptions37.getServerSelectionTimeout();
        int int42 = mongoClientOptions37.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern43 = mongoClientOptions37.getWriteConcern();
        com.mongodb.ReadPreference readPreference44 = mongoClientOptions37.getReadPreference();
        org.bson.codecs.configuration.CodecRegistry codecRegistry45 = mongoClientOptions37.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry46 = mongoClientOptions37.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder47 = builder21.codecRegistry(codecRegistry46);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.connectTimeout(0);
        com.mongodb.MongoClientOptions mongoClientOptions52 = builder49.build();
        int int53 = mongoClientOptions52.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(readPreference19);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(codecRegistry40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(writeConcern43);
        org.junit.Assert.assertNotNull(readPreference44);
        org.junit.Assert.assertNotNull(codecRegistry45);
        org.junit.Assert.assertNotNull(codecRegistry46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(mongoClientOptions52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
    }

    @Test
    public void test4394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4394");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getSocketTimeout();
        int int25 = mongoClientOptions19.getMaxConnectionLifeTime();
        int int26 = mongoClientOptions19.getMaxConnectionLifeTime();
        int int27 = mongoClientOptions19.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        int int29 = mongoClientOptions19.getThreadsAllowedToBlockForConnectionMultiplier();
        int int30 = mongoClientOptions19.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder38.build();
        java.lang.String str42 = mongoClientOptions41.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory43 = mongoClientOptions41.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder44 = builder31.dbEncoderFactory(dBEncoderFactory43);
        com.mongodb.MongoClientOptions.Builder builder46 = builder31.minHeartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder48 = builder31.cursorFinalizerEnabled(false);
        boolean boolean49 = mongoClientOptions19.equals((java.lang.Object) builder48);
        com.mongodb.MongoClientOptions.Builder builder51 = builder48.description("test");
        com.mongodb.MongoClientOptions.Builder builder53 = builder48.sslEnabled(true);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 500 + "'", int27 == 500);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 500 + "'", int30 == 500);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(dBEncoderFactory43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test4395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4395");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        mongoProperties0.username = "hi!";
        java.lang.String str5 = mongoProperties0.host;
        java.lang.String str6 = mongoProperties0.getUsername();
        int int7 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.setDatabase("");
        java.lang.Class<?> wildcardClass10 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.database = "test";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties13.host = "";
        mongoProperties13.setUsername("hi!");
        char[] charArray18 = mongoProperties13.getPassword();
        mongoProperties13.setGridFsDatabase("");
        mongoProperties13.setAuthenticationDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.description("");
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder33.build();
        int int37 = mongoClientOptions36.getHeartbeatConnectTimeout();
        int int38 = mongoClientOptions36.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference39 = mongoClientOptions36.getReadPreference();
        java.lang.String str40 = mongoClientOptions36.getRequiredReplicaSetName();
        boolean boolean41 = mongoClientOptions36.isSslInvalidHostNameAllowed();
        java.lang.String str42 = mongoClientOptions36.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory43 = mongoClientOptions36.getDbEncoderFactory();
        boolean boolean44 = mongoClientOptions36.isSslInvalidHostNameAllowed();
        com.mongodb.MongoClientOptions.Builder builder45 = mongoProperties13.builder(mongoClientOptions36);
        mongoProperties13.setUsername("hi!");
        java.lang.String str48 = mongoProperties13.getGridFsDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties49 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str50 = mongoProperties49.getDatabase();
        java.lang.Class<?> wildcardClass51 = mongoProperties49.getFieldNamingStrategy();
        mongoProperties49.setUri("mongodb://localhost/test");
        char[] charArray54 = null;
        mongoProperties49.setPassword(charArray54);
        java.lang.Integer int56 = mongoProperties49.port;
        com.mongodb.MongoClientOptions.Builder builder57 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.maxConnectionIdleTime(10000);
        java.lang.Class<?> wildcardClass66 = builder63.getClass();
        mongoProperties49.fieldNamingStrategy = wildcardClass66;
        mongoProperties13.fieldNamingStrategy = wildcardClass66;
        mongoProperties0.fieldNamingStrategy = wildcardClass66;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(charArray18);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 20000 + "'", int37 == 20000);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(readPreference39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(dBEncoderFactory43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(wildcardClass51);
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test4396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4396");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minHeartbeatFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(30000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.serverSelectionTimeout((int) (byte) -1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4397");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        java.lang.Object obj20 = null;
        boolean boolean21 = mongoClientOptions19.equals(obj20);
        int int22 = mongoClientOptions19.getHeartbeatConnectTimeout();
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions19, environment23);
        java.lang.String str25 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "test" + "'", str25, "test");
    }

    @Test
    public void test4398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4398");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.build();
        int int21 = mongoClientOptions20.getHeartbeatConnectTimeout();
        int int22 = mongoClientOptions20.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry23 = mongoClientOptions20.getCodecRegistry();
        int int24 = mongoClientOptions20.getServerSelectionTimeout();
        int int25 = mongoClientOptions20.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern26 = mongoClientOptions20.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder27 = builder4.writeConcern(writeConcern26);
        com.mongodb.MongoClientOptions.Builder builder29 = builder4.maxConnectionLifeTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder30 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatSocketTimeout(120000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(codecRegistry23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 30000 + "'", int24 == 30000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(writeConcern26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test4399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4399");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.connectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder10 = builder0.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder0.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.sslInvalidHostNameAllowed(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4400");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList15 = mongoClientOptions13.getCommandListeners();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions13.getDbEncoderFactory();
        int int17 = mongoClientOptions13.getHeartbeatSocketTimeout();
        int int18 = mongoClientOptions13.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(commandListenerList15);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test4401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4401");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder5 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.minHeartbeatFrequency(27017);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder5.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.minConnectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.localThreshold(120000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4402");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.username;
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        mongoProperties0.setUri("");
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str10 = mongoProperties0.getUsername();
        mongoProperties0.authenticationDatabase = "test";
        org.springframework.core.env.Environment environment13 = null;
        int int14 = mongoProperties0.determinePort(environment13);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 27017 + "'", int14 == 27017);
    }

    @Test
    public void test4403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4403");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList17 = mongoClientOptions13.getCommandListeners();
        int int18 = mongoClientOptions13.getLocalThreshold();
        int int19 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int20 = mongoClientOptions13.getServerSelectionTimeout();
        int int21 = mongoClientOptions13.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(commandListenerList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 30000 + "'", int20 == 30000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 120000 + "'", int21 == 120000);
    }

    @Test
    public void test4404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4404");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        java.lang.String str6 = mongoProperties0.getUsername();
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.host = "";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "test" + "'", str7, "test");
        org.junit.Assert.assertNull(wildcardClass8);
    }

    @Test
    public void test4405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4405");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getMinConnectionsPerHost();
        int int17 = mongoClientOptions13.getLocalThreshold();
        int int18 = mongoClientOptions13.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionLifeTime(5);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.maxWaitTime(0);
        boolean boolean28 = mongoClientOptions13.equals((java.lang.Object) builder27);
        com.mongodb.event.CommandListener commandListener29 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder30 = builder27.addCommandListener(commandListener29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 15 + "'", int17 == 15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test4406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4406");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getServerSelectionTimeout();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList9 = mongoClientOptions7.getCommandListeners();
        int int10 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        int int12 = mongoClientOptions7.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 30000 + "'", int8 == 30000);
        org.junit.Assert.assertNotNull(commandListenerList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test4407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4407");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        mongoProperties0.username = "hi!";
        java.lang.String str5 = mongoProperties0.host;
        java.lang.String str6 = mongoProperties0.getUsername();
        int int7 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.setDatabase("");
        java.lang.Class<?> wildcardClass10 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.database = "test";
        java.lang.Class<?> wildcardClass13 = mongoProperties0.getClass();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test4408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4408");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions13.getDbDecoderFactory();
        int int16 = mongoClientOptions13.getMaxConnectionIdleTime();
        boolean boolean17 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        int int18 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        boolean boolean20 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        int int21 = mongoClientOptions13.getMaxConnectionLifeTime();
        java.lang.String str22 = mongoClientOptions13.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test4409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4409");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        mongoProperties0.authenticationDatabase = "test";
        org.springframework.core.env.Environment environment24 = null;
        int int25 = mongoProperties0.determinePort(environment24);
        java.lang.Integer int26 = mongoProperties0.port;
        com.mongodb.MongoClientOptions mongoClientOptions27 = null;
        org.springframework.core.env.Environment environment28 = null;
        com.mongodb.MongoClient mongoClient29 = mongoProperties0.createMongoClient(mongoClientOptions27, environment28);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 27017 + "'", int25 == 27017);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(mongoClient29);
    }

    @Test
    public void test4410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4410");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        java.lang.String str6 = mongoProperties0.getUsername();
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str9 = mongoProperties0.authenticationDatabase;
        boolean boolean10 = mongoProperties0.hasCustomCredentials();
        mongoProperties0.port = 1;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "test" + "'", str7, "test");
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test4411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4411");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        int int25 = mongoClientOptions24.getHeartbeatConnectTimeout();
        int int26 = mongoClientOptions24.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions24.getReadPreference();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions24.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder29 = builder10.readPreference(readPreference28);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder35 = builder29.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.heartbeatSocketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.description("");
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions55 = builder52.build();
        int int56 = mongoClientOptions55.getHeartbeatConnectTimeout();
        int int57 = mongoClientOptions55.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry58 = mongoClientOptions55.getCodecRegistry();
        com.mongodb.ReadConcern readConcern59 = mongoClientOptions55.getReadConcern();
        javax.net.SocketFactory socketFactory60 = mongoClientOptions55.getSocketFactory();
        com.mongodb.WriteConcern writeConcern61 = mongoClientOptions55.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder62 = builder41.writeConcern(writeConcern61);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(mongoClientOptions55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 20000 + "'", int56 == 20000);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(codecRegistry58);
        org.junit.Assert.assertNotNull(readConcern59);
        org.junit.Assert.assertNotNull(socketFactory60);
        org.junit.Assert.assertNotNull(writeConcern61);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test4412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4412");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern9 = mongoClientOptions7.getReadConcern();
        boolean boolean10 = mongoClientOptions7.isSslEnabled();
        boolean boolean11 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int12 = mongoClientOptions7.getHeartbeatSocketTimeout();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList13 = mongoClientOptions7.getCommandListeners();
        int int14 = mongoClientOptions7.getSocketTimeout();
        int int15 = mongoClientOptions7.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(readConcern9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertNotNull(commandListenerList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 15 + "'", int15 == 15);
    }

    @Test
    public void test4413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4413");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList17 = mongoClientOptions13.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions13.getDbDecoderFactory();
        int int19 = mongoClientOptions13.getMinConnectionsPerHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties20 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties20.database = "";
        java.lang.Class<?> wildcardClass23 = mongoProperties20.getFieldNamingStrategy();
        mongoProperties20.setDatabase("hi!");
        boolean boolean26 = mongoClientOptions13.equals((java.lang.Object) mongoProperties20);
        int int27 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean28 = mongoClientOptions13.isAlwaysUseMBeans();
        int int29 = mongoClientOptions13.getConnectTimeout();
        int int30 = mongoClientOptions13.getMaxConnectionIdleTime();
        int int31 = mongoClientOptions13.getLocalThreshold();
        int int32 = mongoClientOptions13.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(commandListenerList17);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 120000 + "'", int27 == 120000);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10000 + "'", int29 == 10000);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 15 + "'", int31 == 15);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test4414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4414");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        boolean boolean24 = mongoClientOptions19.isSslInvalidHostNameAllowed();
        int int25 = mongoClientOptions19.getHeartbeatSocketTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions19.getDbDecoderFactory();
        java.lang.String str27 = mongoClientOptions19.getDescription();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test4415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4415");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getSocketTimeout();
        int int25 = mongoClientOptions19.getMinHeartbeatFrequency();
        boolean boolean26 = mongoClientOptions19.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.localThreshold(100);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder37 = builder31.maxConnectionIdleTime(500);
        com.mongodb.MongoClientOptions.Builder builder39 = builder31.connectionsPerHost((int) ' ');
        java.lang.Class<?> wildcardClass40 = builder31.getClass();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 500 + "'", int25 == 500);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test4416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4416");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        java.lang.String str20 = mongoClientOptions19.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions19.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder22 = builder9.dbEncoderFactory(dBEncoderFactory21);
        com.mongodb.MongoClientOptions.Builder builder23 = builder4.dbEncoderFactory(dBEncoderFactory21);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("");
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder43.build();
        int int47 = mongoClientOptions46.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern48 = mongoClientOptions46.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder49 = builder36.readConcern(readConcern48);
        com.mongodb.MongoClientOptions.Builder builder50 = builder23.readConcern(readConcern48);
        com.mongodb.MongoClientOptions.Builder builder52 = builder23.maxWaitTime(27017);
        com.mongodb.MongoClientOptions.Builder builder53 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.description("");
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions66 = builder63.build();
        int int67 = mongoClientOptions66.getHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern68 = mongoClientOptions66.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder69 = builder52.writeConcern(writeConcern68);
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.heartbeatConnectTimeout(1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(readConcern48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(mongoClientOptions66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10000 + "'", int67 == 10000);
        org.junit.Assert.assertNotNull(writeConcern68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test4417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4417");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getHost();
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        mongoProperties0.setPort((java.lang.Integer) 5);
        mongoProperties0.clearPassword();
        mongoProperties0.setUsername("hi!");
        mongoProperties0.username = "mongodb://localhost/test";
        boolean boolean14 = mongoProperties0.hasCustomCredentials();
        java.lang.String str15 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "test" + "'", str15, "test");
    }

    @Test
    public void test4418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4418");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClientOptions.Builder builder5 = mongoProperties0.builder(mongoClientOptions4);
        char[] charArray6 = mongoProperties0.getPassword();
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test4419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4419");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList17 = mongoClientOptions13.getCommandListeners();
        int int18 = mongoClientOptions13.getLocalThreshold();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        int int20 = mongoClientOptions13.getConnectionsPerHost();
        int int21 = mongoClientOptions13.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions13.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(commandListenerList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertNotNull(readPreference22);
    }

    @Test
    public void test4420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4420");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        int int26 = mongoClientOptions25.getHeartbeatConnectTimeout();
        int int27 = mongoClientOptions25.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory28 = mongoClientOptions25.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder29 = builder9.dbDecoderFactory(dBDecoderFactory28);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatSocketTimeout(5);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test4421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4421");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        mongoProperties0.port = (-1);
        char[] charArray7 = mongoProperties0.getPassword();
        mongoProperties0.port = 20000;
        java.lang.String str10 = mongoProperties0.database;
        java.lang.String str11 = mongoProperties0.uri;
        mongoProperties0.database = "";
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
    }

    @Test
    public void test4422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4422");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        int int25 = mongoClientOptions24.getHeartbeatConnectTimeout();
        int int26 = mongoClientOptions24.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions24.getReadPreference();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions24.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder29 = builder10.readPreference(readPreference28);
        com.mongodb.MongoClientOptions.Builder builder30 = builder29.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.description("");
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.heartbeatSocketTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.maxConnectionLifeTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.description("");
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions65 = builder62.build();
        int int66 = mongoClientOptions65.getHeartbeatConnectTimeout();
        int int67 = mongoClientOptions65.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry68 = mongoClientOptions65.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry69 = mongoClientOptions65.getCodecRegistry();
        com.mongodb.WriteConcern writeConcern70 = mongoClientOptions65.getWriteConcern();
        com.mongodb.DBDecoderFactory dBDecoderFactory71 = mongoClientOptions65.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern72 = mongoClientOptions65.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder73 = builder49.writeConcern(writeConcern72);
        com.mongodb.MongoClientOptions.Builder builder74 = builder30.writeConcern(writeConcern72);
        com.mongodb.MongoClientOptions mongoClientOptions75 = builder30.build();
        com.mongodb.MongoClientOptions.Builder builder77 = builder30.connectionsPerHost((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder79 = builder30.heartbeatConnectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder81 = builder79.heartbeatConnectTimeout((int) (byte) -1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(mongoClientOptions65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 20000 + "'", int66 == 20000);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertNotNull(codecRegistry68);
        org.junit.Assert.assertNotNull(codecRegistry69);
        org.junit.Assert.assertNotNull(writeConcern70);
        org.junit.Assert.assertNotNull(dBDecoderFactory71);
        org.junit.Assert.assertNotNull(writeConcern72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(mongoClientOptions75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test4423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4423");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        mongoProperties0.username = "hi!";
        java.lang.String str5 = mongoProperties0.host;
        java.lang.String str6 = mongoProperties0.getUsername();
        int int7 = mongoProperties0.getDEFAULT_PORT();
        mongoProperties0.database = "mongodb://localhost/test";
        mongoProperties0.setGridFsDatabase("test");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
    }

    @Test
    public void test4424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4424");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str5 = mongoProperties0.getHost();
        java.lang.String str6 = mongoProperties0.getHost();
        char[] charArray7 = mongoProperties0.password;
        java.lang.String str8 = mongoProperties0.getUri();
        mongoProperties0.uri = "test";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
    }

    @Test
    public void test4425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4425");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.build();
        int int17 = mongoClientOptions16.getHeartbeatConnectTimeout();
        int int18 = mongoClientOptions16.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions16.getReadPreference();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions16.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder21 = builder2.readPreference(readPreference20);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder34.build();
        int int38 = mongoClientOptions37.getHeartbeatConnectTimeout();
        int int39 = mongoClientOptions37.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry40 = mongoClientOptions37.getCodecRegistry();
        int int41 = mongoClientOptions37.getServerSelectionTimeout();
        int int42 = mongoClientOptions37.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern43 = mongoClientOptions37.getWriteConcern();
        com.mongodb.ReadPreference readPreference44 = mongoClientOptions37.getReadPreference();
        org.bson.codecs.configuration.CodecRegistry codecRegistry45 = mongoClientOptions37.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry46 = mongoClientOptions37.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder47 = builder21.codecRegistry(codecRegistry46);
        com.mongodb.MongoClientOptions.Builder builder49 = builder21.heartbeatConnectTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder55 = builder52.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder56 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.description("");
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions69 = builder66.build();
        int int70 = mongoClientOptions69.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry71 = mongoClientOptions69.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder72 = builder52.codecRegistry(codecRegistry71);
        com.mongodb.MongoClientOptions.Builder builder73 = builder21.codecRegistry(codecRegistry71);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder75 = builder73.minHeartbeatFrequency((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: minHeartbeatFrequency must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(readPreference19);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(codecRegistry40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(writeConcern43);
        org.junit.Assert.assertNotNull(readPreference44);
        org.junit.Assert.assertNotNull(codecRegistry45);
        org.junit.Assert.assertNotNull(codecRegistry46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(mongoClientOptions69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 20000 + "'", int70 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test4426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4426");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry17 = mongoClientOptions13.getCodecRegistry();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions13.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(false);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        boolean boolean23 = mongoClientOptions22.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(codecRegistry17);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test4427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4427");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUsername("mongodb://localhost/test");
        boolean boolean9 = mongoProperties0.hasCustomAddress();
        mongoProperties0.setUsername("mongodb://localhost/test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test4428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4428");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.database = "";
        java.lang.String str10 = mongoProperties7.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        com.mongodb.MongoClientOptions.Builder builder12 = mongoProperties7.builder(mongoClientOptions11);
        char[] charArray13 = mongoProperties7.getPassword();
        mongoProperties7.setHost("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        int int30 = mongoClientOptions29.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties7.createMongoClient(mongoClientOptions29, environment31);
        int int33 = mongoClientOptions29.getMaxConnectionLifeTime();
        boolean boolean34 = mongoClientOptions29.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder35 = mongoProperties0.builder(mongoClientOptions29);
        java.lang.String str36 = mongoClientOptions29.getDescription();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(charArray13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10000 + "'", int30 == 10000);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test4429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4429");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Integer int4 = mongoProperties0.getPort();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.database = "";
        java.lang.String str9 = mongoProperties6.getUsername();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass15 = builder14.getClass();
        mongoProperties6.fieldNamingStrategy = wildcardClass15;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties17.database = "";
        java.lang.String str20 = mongoProperties17.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties21.host = "";
        java.lang.String str24 = mongoProperties21.getHost();
        char[] charArray26 = new char[] { ' ' };
        mongoProperties21.setPassword(charArray26);
        char[] charArray31 = new char[] { '4', '4', '#' };
        mongoProperties21.password = charArray31;
        mongoProperties17.setPassword(charArray31);
        mongoProperties6.password = charArray31;
        mongoProperties0.setPassword(charArray31);
        java.lang.String str36 = mongoProperties0.host;
        boolean boolean37 = mongoProperties0.hasCustomCredentials();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties38 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties38.database = "";
        java.lang.String str41 = mongoProperties38.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions42 = null;
        com.mongodb.MongoClientOptions.Builder builder43 = mongoProperties38.builder(mongoClientOptions42);
        char[] charArray44 = mongoProperties38.getPassword();
        mongoProperties38.setHost("hi!");
        com.mongodb.MongoClientOptions.Builder builder47 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.description("");
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions60 = builder57.build();
        int int61 = mongoClientOptions60.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment62 = null;
        com.mongodb.MongoClient mongoClient63 = mongoProperties38.createMongoClient(mongoClientOptions60, environment62);
        com.mongodb.MongoClientOptions.Builder builder64 = mongoProperties0.builder(mongoClientOptions60);
        int int65 = mongoClientOptions60.getSocketTimeout();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ ]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[4, 4, #]");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(charArray44);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(mongoClientOptions60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10000 + "'", int61 == 10000);
        org.junit.Assert.assertNotNull(mongoClient63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test4430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4430");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("mongodb://localhost/test");
        char[] charArray5 = null;
        mongoProperties0.setPassword(charArray5);
        java.lang.Integer int7 = mongoProperties0.port;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties8.host = "";
        mongoProperties8.username = "";
        mongoProperties8.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatConnectTimeout();
        int int29 = mongoClientOptions27.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions27.getReadPreference();
        boolean boolean31 = mongoClientOptions27.isAlwaysUseMBeans();
        boolean boolean32 = mongoClientOptions27.isCursorFinalizerEnabled();
        int int33 = mongoClientOptions27.getConnectionsPerHost();
        org.springframework.core.env.Environment environment34 = null;
        com.mongodb.MongoClient mongoClient35 = mongoProperties8.createMongoClient(mongoClientOptions27, environment34);
        int int36 = mongoClientOptions27.getMaxConnectionLifeTime();
        int int37 = mongoClientOptions27.getMaxWaitTime();
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties0.createMongoClient(mongoClientOptions27, environment38);
        java.lang.Class<?> wildcardClass40 = mongoClient39.getClass();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(readPreference30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 120000 + "'", int37 == 120000);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test4431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4431");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        java.lang.String str5 = mongoProperties0.getHost();
        mongoProperties0.port = 1;
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setDatabase("hi!");
        java.lang.String str11 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass12 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setDatabase("hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass12);
    }

    @Test
    public void test4432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4432");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str5 = mongoProperties0.host;
        java.lang.Integer int6 = mongoProperties0.getPort();
        mongoProperties0.clearPassword();
        boolean boolean8 = mongoProperties0.hasCustomCredentials();
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        int int10 = mongoProperties0.getDEFAULT_PORT();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
    }

    @Test
    public void test4433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4433");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        boolean boolean16 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        int int17 = mongoClientOptions13.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions13.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions13.getDbDecoderFactory();
        int int21 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory22 = mongoClientOptions13.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 120000 + "'", int17 == 120000);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertNotNull(socketFactory22);
    }

    @Test
    public void test4434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4434");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions19.getReadConcern();
        int int24 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int25 = mongoClientOptions19.getHeartbeatConnectTimeout();
        boolean boolean26 = mongoClientOptions19.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions19.getDbEncoderFactory();
        javax.net.SocketFactory socketFactory28 = mongoClientOptions19.getSocketFactory();
        int int29 = mongoClientOptions19.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(readConcern23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertNotNull(socketFactory28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test4435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4435");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.description("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder8.minHeartbeatFrequency((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: minHeartbeatFrequency must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test4436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4436");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions19.getReadConcern();
        int int24 = mongoClientOptions19.getMaxConnectionIdleTime();
        java.lang.String str25 = mongoClientOptions19.getRequiredReplicaSetName();
        int int26 = mongoClientOptions19.getConnectionsPerHost();
        int int27 = mongoClientOptions19.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(readConcern23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
    }

    @Test
    public void test4437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4437");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.build();
        int int8 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.build();
        int int24 = mongoClientOptions23.getHeartbeatConnectTimeout();
        int int25 = mongoClientOptions23.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry26 = mongoClientOptions23.getCodecRegistry();
        int int27 = mongoClientOptions23.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions23.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList29 = mongoClientOptions23.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory30 = mongoClientOptions23.getDbDecoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList31 = mongoClientOptions23.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory32 = mongoClientOptions23.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern33 = mongoClientOptions23.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder34 = builder9.writeConcern(writeConcern33);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.heartbeatConnectTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder48 = builder42.localThreshold(500);
        com.mongodb.MongoClientOptions.Builder builder49 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.description("");
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions62 = builder59.build();
        int int63 = mongoClientOptions62.getHeartbeatConnectTimeout();
        int int64 = mongoClientOptions62.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry65 = mongoClientOptions62.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry66 = mongoClientOptions62.getCodecRegistry();
        com.mongodb.WriteConcern writeConcern67 = mongoClientOptions62.getWriteConcern();
        com.mongodb.DBDecoderFactory dBDecoderFactory68 = mongoClientOptions62.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern69 = mongoClientOptions62.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder70 = builder48.writeConcern(writeConcern69);
        com.mongodb.MongoClientOptions.Builder builder71 = builder39.writeConcern(writeConcern69);
        com.mongodb.MongoClientOptions.Builder builder72 = builder34.writeConcern(writeConcern69);
        com.mongodb.MongoClientOptions.Builder builder74 = builder34.serverSelectionTimeout(10000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(codecRegistry26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 30000 + "'", int27 == 30000);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertNotNull(commandListenerList29);
        org.junit.Assert.assertNotNull(dBDecoderFactory30);
        org.junit.Assert.assertNotNull(commandListenerList31);
        org.junit.Assert.assertNotNull(dBDecoderFactory32);
        org.junit.Assert.assertNotNull(writeConcern33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(mongoClientOptions62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 20000 + "'", int63 == 20000);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNotNull(codecRegistry65);
        org.junit.Assert.assertNotNull(codecRegistry66);
        org.junit.Assert.assertNotNull(writeConcern67);
        org.junit.Assert.assertNotNull(dBDecoderFactory68);
        org.junit.Assert.assertNotNull(writeConcern69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test4438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4438");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getHost();
        mongoProperties0.host = "hi!";
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder18.build();
        int int22 = mongoClientOptions21.getHeartbeatConnectTimeout();
        int int23 = mongoClientOptions21.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions21.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList25 = mongoClientOptions21.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions21.getDbDecoderFactory();
        int int27 = mongoClientOptions21.getMinConnectionsPerHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties28 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties28.database = "";
        java.lang.Class<?> wildcardClass31 = mongoProperties28.getFieldNamingStrategy();
        mongoProperties28.setDatabase("hi!");
        boolean boolean34 = mongoClientOptions21.equals((java.lang.Object) mongoProperties28);
        com.mongodb.ReadConcern readConcern35 = mongoClientOptions21.getReadConcern();
        int int36 = mongoClientOptions21.getSocketTimeout();
        org.springframework.core.env.Environment environment37 = null;
        com.mongodb.MongoClient mongoClient38 = mongoProperties0.createMongoClient(mongoClientOptions21, environment37);
        int int39 = mongoClientOptions21.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertNotNull(commandListenerList25);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(readConcern35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(mongoClient38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
    }

    @Test
    public void test4439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4439");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        mongoProperties0.port = 5;
        mongoProperties0.setAuthenticationDatabase("test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test4440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4440");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        int int25 = mongoClientOptions24.getHeartbeatConnectTimeout();
        int int26 = mongoClientOptions24.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions24.getReadPreference();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions24.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder29 = builder10.readPreference(readPreference28);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.description("");
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder42.build();
        int int46 = mongoClientOptions45.getHeartbeatConnectTimeout();
        int int47 = mongoClientOptions45.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry48 = mongoClientOptions45.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry49 = mongoClientOptions45.getCodecRegistry();
        com.mongodb.WriteConcern writeConcern50 = mongoClientOptions45.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder51 = builder29.writeConcern(writeConcern50);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties52 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties52.clearPassword();
        char[] charArray54 = mongoProperties52.getPassword();
        mongoProperties52.setGridFsDatabase("");
        java.lang.String str57 = mongoProperties52.getUsername();
        mongoProperties52.database = "";
        com.mongodb.MongoClientOptions.Builder builder60 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.description("");
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions73 = builder70.build();
        int int74 = mongoClientOptions73.getHeartbeatConnectTimeout();
        int int75 = mongoClientOptions73.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory76 = mongoClientOptions73.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder77 = mongoProperties52.builder(mongoClientOptions73);
        java.lang.String str78 = mongoProperties52.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass79 = mongoProperties52.getFieldNamingStrategy();
        boolean boolean80 = mongoProperties52.hasCustomAddress();
        com.mongodb.MongoClientOptions.Builder builder81 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder83 = builder81.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder85 = builder81.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder87 = builder85.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions88 = builder85.build();
        int int89 = mongoClientOptions88.getServerSelectionTimeout();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList90 = mongoClientOptions88.getCommandListeners();
        int int91 = mongoClientOptions88.getHeartbeatSocketTimeout();
        boolean boolean92 = mongoClientOptions88.isCursorFinalizerEnabled();
        boolean boolean93 = mongoClientOptions88.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder94 = mongoProperties52.builder(mongoClientOptions88);
        com.mongodb.DBDecoderFactory dBDecoderFactory95 = mongoClientOptions88.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder96 = builder51.dbDecoderFactory(dBDecoderFactory95);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 20000 + "'", int46 == 20000);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(codecRegistry48);
        org.junit.Assert.assertNotNull(codecRegistry49);
        org.junit.Assert.assertNotNull(writeConcern50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(charArray54);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(mongoClientOptions73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 20000 + "'", int74 == 20000);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNull(wildcardClass79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(mongoClientOptions88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 30000 + "'", int89 == 30000);
        org.junit.Assert.assertNotNull(commandListenerList90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 20000 + "'", int91 == 20000);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(dBDecoderFactory95);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test4441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4441");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        boolean boolean18 = mongoClientOptions13.isCursorFinalizerEnabled();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        com.mongodb.WriteConcern writeConcern20 = mongoClientOptions13.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties22.host = "";
        java.lang.String str25 = mongoProperties22.getHost();
        char[] charArray27 = new char[] { ' ' };
        mongoProperties22.setPassword(charArray27);
        char[] charArray32 = new char[] { '4', '4', '#' };
        mongoProperties22.password = charArray32;
        mongoProperties22.setAuthenticationDatabase("");
        java.lang.String str36 = mongoProperties22.getUri();
        java.lang.String str37 = mongoProperties22.getUsername();
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.description("");
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions51 = builder48.build();
        int int52 = mongoClientOptions51.getHeartbeatConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry53 = mongoClientOptions51.getCodecRegistry();
        boolean boolean54 = mongoClientOptions51.isSocketKeepAlive();
        boolean boolean55 = mongoClientOptions51.isSocketKeepAlive();
        int int56 = mongoClientOptions51.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder57 = mongoProperties22.builder(mongoClientOptions51);
        mongoProperties22.setDatabase("hi!");
        mongoProperties22.setHost("test");
        boolean boolean62 = mongoClientOptions13.equals((java.lang.Object) "test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(writeConcern20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[4, 4, #]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "mongodb://localhost/test" + "'", str36, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoClientOptions51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 20000 + "'", int52 == 20000);
        org.junit.Assert.assertNotNull(codecRegistry53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test4442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4442");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder4.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder4.description("test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test4443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4443");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder4.maxConnectionIdleTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder4.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder4.minConnectionsPerHost((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.connectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxConnectionLifeTime(5);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxConnectionIdleTime((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder33.build();
        java.lang.String str37 = mongoClientOptions36.getDescription();
        int int38 = mongoClientOptions36.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference39 = mongoClientOptions36.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder40 = com.mongodb.MongoClientOptions.builder(mongoClientOptions36);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder51 = builder47.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder52 = builder51.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder54 = builder51.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder55 = builder54.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder56 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.description("");
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions69 = builder66.build();
        int int70 = mongoClientOptions69.getHeartbeatConnectTimeout();
        int int71 = mongoClientOptions69.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry72 = mongoClientOptions69.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry73 = mongoClientOptions69.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder74 = builder55.codecRegistry(codecRegistry73);
        com.mongodb.MongoClientOptions.Builder builder75 = builder40.codecRegistry(codecRegistry73);
        com.mongodb.MongoClientOptions.Builder builder76 = builder28.codecRegistry(codecRegistry73);
        com.mongodb.MongoClientOptions.Builder builder77 = builder13.codecRegistry(codecRegistry73);
        com.mongodb.MongoClientOptions.Builder builder79 = builder77.minHeartbeatFrequency(97);
        com.mongodb.MongoClientOptions.Builder builder81 = builder77.threadsAllowedToBlockForConnectionMultiplier((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertNotNull(readPreference39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(mongoClientOptions69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 20000 + "'", int70 == 20000);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertNotNull(codecRegistry72);
        org.junit.Assert.assertNotNull(codecRegistry73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test4444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4444");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder(mongoClientOptions19);
        int int26 = mongoClientOptions19.getServerSelectionTimeout();
        com.mongodb.WriteConcern writeConcern27 = mongoClientOptions19.getWriteConcern();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 30000 + "'", int26 == 30000);
        org.junit.Assert.assertNotNull(writeConcern27);
    }

    @Test
    public void test4445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4445");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str6 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.uri = "mongodb://localhost/test";
        java.lang.String str10 = mongoProperties0.getHost();
        java.lang.String str11 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test4446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4446");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.authenticationDatabase = "";
        java.lang.Integer int5 = mongoProperties0.port;
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str8 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test4447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4447");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder4.maxConnectionIdleTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder4.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.serverSelectionTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.threadsAllowedToBlockForConnectionMultiplier(10000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test4448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4448");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Integer int4 = mongoProperties0.getPort();
        mongoProperties0.setUsername("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.database = "";
        java.lang.String str10 = mongoProperties7.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.host = "";
        java.lang.String str14 = mongoProperties11.getHost();
        char[] charArray16 = new char[] { ' ' };
        mongoProperties11.setPassword(charArray16);
        char[] charArray21 = new char[] { '4', '4', '#' };
        mongoProperties11.password = charArray21;
        mongoProperties7.setPassword(charArray21);
        mongoProperties0.password = charArray21;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties25 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties25.database = "";
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.build();
        java.lang.String str34 = mongoClientOptions33.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory35 = mongoClientOptions33.getDbEncoderFactory();
        int int36 = mongoClientOptions33.getServerSelectionTimeout();
        com.mongodb.ReadConcern readConcern37 = mongoClientOptions33.getReadConcern();
        boolean boolean38 = mongoClientOptions33.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder39 = mongoProperties25.builder(mongoClientOptions33);
        org.springframework.core.env.Environment environment40 = null;
        com.mongodb.MongoClient mongoClient41 = mongoProperties0.createMongoClient(mongoClientOptions33, environment40);
        int int42 = mongoClientOptions33.getMinHeartbeatFrequency();
        boolean boolean43 = mongoClientOptions33.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder44 = com.mongodb.MongoClientOptions.builder(mongoClientOptions33);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[ ]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(dBEncoderFactory35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(readConcern37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClient41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 500 + "'", int42 == 500);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test4449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4449");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        int int16 = mongoClientOptions13.getLocalThreshold();
        com.mongodb.ReadConcern readConcern17 = mongoClientOptions13.getReadConcern();
        javax.net.SocketFactory socketFactory18 = mongoClientOptions13.getSocketFactory();
        boolean boolean19 = mongoClientOptions13.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15 + "'", int16 == 15);
        org.junit.Assert.assertNotNull(readConcern17);
        org.junit.Assert.assertNotNull(socketFactory18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test4450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4450");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        int int18 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions13.getWriteConcern();
        int int20 = mongoClientOptions13.getHeartbeatConnectTimeout();
        com.mongodb.ReadConcern readConcern21 = mongoClientOptions13.getReadConcern();
        javax.net.SocketFactory socketFactory22 = mongoClientOptions13.getSocketFactory();
        int int23 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        org.bson.codecs.configuration.CodecRegistry codecRegistry24 = mongoClientOptions13.getCodecRegistry();
        int int25 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(readConcern21);
        org.junit.Assert.assertNotNull(socketFactory22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertNotNull(codecRegistry24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
    }

    @Test
    public void test4451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4451");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        mongoProperties0.setHost("test");
        java.lang.String str8 = mongoProperties0.getHost();
        boolean boolean9 = mongoProperties0.hasCustomCredentials();
        java.lang.String str10 = mongoProperties0.database;
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "test" + "'", str8, "test");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test4452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4452");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.uri;
        mongoProperties0.host = "";
        mongoProperties0.username = "hi!";
        org.springframework.core.env.Environment environment11 = null;
        int int12 = mongoProperties0.determinePort(environment11);
        mongoProperties0.setUri("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties15.host = "";
        mongoProperties15.setUsername("hi!");
        char[] charArray20 = mongoProperties15.getPassword();
        java.lang.String str21 = mongoProperties15.uri;
        java.lang.String str22 = mongoProperties15.uri;
        char[] charArray23 = mongoProperties15.password;
        mongoProperties15.username = "";
        java.lang.String str26 = mongoProperties15.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties27 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties27.host = "";
        java.lang.String str30 = mongoProperties27.getHost();
        char[] charArray32 = new char[] { ' ' };
        mongoProperties27.setPassword(charArray32);
        char[] charArray37 = new char[] { '4', '4', '#' };
        mongoProperties27.password = charArray37;
        mongoProperties15.password = charArray37;
        mongoProperties0.setPassword(charArray37);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 27017 + "'", int12 == 27017);
        org.junit.Assert.assertNull(charArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "mongodb://localhost/test" + "'", str21, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "mongodb://localhost/test" + "'", str22, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[ ]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[4, 4, #]");
    }

    @Test
    public void test4453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4453");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMinConnectionsPerHost();
        int int23 = mongoClientOptions19.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry24 = mongoClientOptions19.getCodecRegistry();
        com.mongodb.WriteConcern writeConcern25 = mongoClientOptions19.getWriteConcern();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertNotNull(codecRegistry24);
        org.junit.Assert.assertNotNull(writeConcern25);
    }

    @Test
    public void test4454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4454");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str5 = mongoProperties0.authenticationDatabase;
        char[] charArray6 = mongoProperties0.getPassword();
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.host = "";
        java.lang.String str11 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test4455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4455");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry17 = mongoClientOptions13.getCodecRegistry();
        com.mongodb.ReadConcern readConcern18 = mongoClientOptions13.getReadConcern();
        int int19 = mongoClientOptions13.getLocalThreshold();
        boolean boolean20 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.WriteConcern writeConcern21 = mongoClientOptions13.getWriteConcern();
        boolean boolean22 = mongoClientOptions13.isSslEnabled();
        int int23 = mongoClientOptions13.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions13.getReadPreference();
        int int25 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(codecRegistry17);
        org.junit.Assert.assertNotNull(readConcern18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 15 + "'", int19 == 15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(writeConcern21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
    }

    @Test
    public void test4456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4456");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str5 = mongoProperties0.host;
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.springframework.core.env.Environment environment7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties0.createMongoClient(mongoClientOptions6, environment7);
        mongoProperties0.port = 10000;
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(mongoClient8);
    }

    @Test
    public void test4457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4457");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder38.build();
        int int42 = mongoClientOptions41.getHeartbeatConnectTimeout();
        int int43 = mongoClientOptions41.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference44 = mongoClientOptions41.getReadPreference();
        com.mongodb.ReadPreference readPreference45 = mongoClientOptions41.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder46 = builder27.readPreference(readPreference45);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.requiredReplicaSetName("mongodb://localhost/test");
        boolean boolean49 = mongoClientOptions13.equals((java.lang.Object) builder46);
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder58 = builder54.socketKeepAlive(true);
        boolean boolean59 = mongoClientOptions13.equals((java.lang.Object) builder54);
        int int60 = mongoClientOptions13.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20000 + "'", int42 == 20000);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(readPreference44);
        org.junit.Assert.assertNotNull(readPreference45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test4458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4458");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str5 = mongoProperties0.getUsername();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.host = "";
        char[] charArray10 = new char[] { '4' };
        mongoProperties6.setPassword(charArray10);
        java.lang.String str12 = mongoProperties6.authenticationDatabase;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties13.setAuthenticationDatabase("hi!");
        java.lang.String str16 = mongoProperties13.getHost();
        mongoProperties13.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder29.build();
        int int33 = mongoClientOptions32.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder34 = mongoProperties13.builder(mongoClientOptions32);
        int int35 = mongoClientOptions32.getMaxConnectionIdleTime();
        int int36 = mongoClientOptions32.getConnectionsPerHost();
        int int37 = mongoClientOptions32.getSocketTimeout();
        int int38 = mongoClientOptions32.getMinHeartbeatFrequency();
        boolean boolean39 = mongoClientOptions32.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder40 = mongoProperties6.builder(mongoClientOptions32);
        org.bson.codecs.configuration.CodecRegistry codecRegistry41 = mongoClientOptions32.getCodecRegistry();
        int int42 = mongoClientOptions32.getHeartbeatConnectTimeout();
        org.springframework.core.env.Environment environment43 = null;
        com.mongodb.MongoClient mongoClient44 = mongoProperties0.createMongoClient(mongoClientOptions32, environment43);
        com.mongodb.MongoClientOptions.Builder builder45 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder47.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory51 = mongoClientOptions50.getDbEncoderFactory();
        int int52 = mongoClientOptions50.getHeartbeatConnectTimeout();
        int int53 = mongoClientOptions50.getHeartbeatConnectTimeout();
        boolean boolean54 = mongoClientOptions32.equals((java.lang.Object) mongoClientOptions50);
        boolean boolean55 = mongoClientOptions32.isAlwaysUseMBeans();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20000 + "'", int33 == 20000);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 500 + "'", int38 == 500);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(codecRegistry41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20000 + "'", int42 == 20000);
        org.junit.Assert.assertNotNull(mongoClient44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertNotNull(dBEncoderFactory51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 20000 + "'", int52 == 20000);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 20000 + "'", int53 == 20000);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test4459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4459");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList19 = mongoClientOptions13.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions13.getDbDecoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList21 = mongoClientOptions13.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions13.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern23 = mongoClientOptions13.getWriteConcern();
        com.mongodb.ReadConcern readConcern24 = mongoClientOptions13.getReadConcern();
        com.mongodb.WriteConcern writeConcern25 = mongoClientOptions13.getWriteConcern();
        int int26 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder32 = builder29.legacyDefaults();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties33 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties33.setAuthenticationDatabase("hi!");
        java.lang.String str36 = mongoProperties33.getHost();
        mongoProperties33.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.description("");
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions52 = builder49.build();
        int int53 = mongoClientOptions52.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder54 = mongoProperties33.builder(mongoClientOptions52);
        int int55 = mongoClientOptions52.getMaxConnectionIdleTime();
        int int56 = mongoClientOptions52.getConnectionsPerHost();
        int int57 = mongoClientOptions52.getSocketTimeout();
        int int58 = mongoClientOptions52.getMinHeartbeatFrequency();
        boolean boolean59 = mongoClientOptions52.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder60 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions52);
        com.mongodb.WriteConcern writeConcern61 = mongoClientOptions52.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder62 = builder32.writeConcern(writeConcern61);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.minConnectionsPerHost(5);
        boolean boolean65 = mongoClientOptions13.equals((java.lang.Object) 5);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(commandListenerList19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertNotNull(commandListenerList21);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
        org.junit.Assert.assertNotNull(writeConcern23);
        org.junit.Assert.assertNotNull(readConcern24);
        org.junit.Assert.assertNotNull(writeConcern25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(mongoClientOptions52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 20000 + "'", int53 == 20000);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 500 + "'", int58 == 500);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(writeConcern61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test4460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4460");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionLifeTime((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test4461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4461");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = builder7.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.cursorFinalizerEnabled(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test4462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4462");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.username = "";
        mongoProperties0.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        java.lang.Object obj20 = null;
        boolean boolean21 = mongoClientOptions19.equals(obj20);
        int int22 = mongoClientOptions19.getHeartbeatConnectTimeout();
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions19, environment23);
        java.lang.Class<?> wildcardClass25 = mongoProperties0.fieldNamingStrategy;
        mongoProperties0.clearPassword();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str29 = mongoProperties0.uri;
        mongoProperties0.setPort((java.lang.Integer) 500);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "mongodb://localhost/test" + "'", str29, "mongodb://localhost/test");
    }

    @Test
    public void test4463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4463");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str6 = mongoProperties0.host;
        java.lang.String str7 = mongoProperties0.gridFsDatabase;
        mongoProperties0.setUri("");
        org.springframework.core.env.Environment environment10 = null;
        int int11 = mongoProperties0.determinePort(environment10);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 27017 + "'", int11 == 27017);
    }

    @Test
    public void test4464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4464");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry17 = mongoClientOptions13.getCodecRegistry();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions13.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int20 = mongoClientOptions13.getSocketTimeout();
        int int21 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(codecRegistry17);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
    }

    @Test
    public void test4465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4465");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionLifeTime((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("");
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder43.build();
        int int47 = mongoClientOptions46.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern48 = mongoClientOptions46.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder49 = builder36.readConcern(readConcern48);
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.description("");
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder60.build();
        int int64 = mongoClientOptions63.getHeartbeatConnectTimeout();
        int int65 = mongoClientOptions63.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory66 = mongoClientOptions63.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder67 = builder36.dbDecoderFactory(dBDecoderFactory66);
        com.mongodb.MongoClientOptions.Builder builder68 = builder21.dbDecoderFactory(dBDecoderFactory66);
        com.mongodb.MongoClientOptions.Builder builder69 = builder12.dbDecoderFactory(dBDecoderFactory66);
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.minConnectionsPerHost(10000);
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.heartbeatSocketTimeout(5);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(readConcern48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoClientOptions63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 20000 + "'", int64 == 20000);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test4466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4466");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Integer int4 = mongoProperties0.getPort();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.database = "";
        java.lang.String str9 = mongoProperties6.getUsername();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass15 = builder14.getClass();
        mongoProperties6.fieldNamingStrategy = wildcardClass15;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties17.database = "";
        java.lang.String str20 = mongoProperties17.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties21.host = "";
        java.lang.String str24 = mongoProperties21.getHost();
        char[] charArray26 = new char[] { ' ' };
        mongoProperties21.setPassword(charArray26);
        char[] charArray31 = new char[] { '4', '4', '#' };
        mongoProperties21.password = charArray31;
        mongoProperties17.setPassword(charArray31);
        mongoProperties6.password = charArray31;
        mongoProperties0.setPassword(charArray31);
        mongoProperties0.uri = "hi!";
        java.lang.Integer int38 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ ]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[4, 4, #]");
        org.junit.Assert.assertNull(int38);
    }

    @Test
    public void test4467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4467");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str5 = mongoProperties0.getHost();
        java.lang.String str6 = mongoProperties0.username;
        mongoProperties0.setPort((java.lang.Integer) 500);
        boolean boolean9 = mongoProperties0.hasCustomCredentials();
        java.lang.String str10 = mongoProperties0.getUsername();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test4468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4468");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder(mongoClientOptions19);
        int int26 = mongoClientOptions19.getServerSelectionTimeout();
        int int27 = mongoClientOptions19.getMaxConnectionLifeTime();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList28 = mongoClientOptions19.getCommandListeners();
        int int29 = mongoClientOptions19.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 30000 + "'", int26 == 30000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(commandListenerList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
    }

    @Test
    public void test4469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4469");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
    }

    @Test
    public void test4470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4470");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.uri;
        java.lang.String str7 = mongoProperties0.uri;
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("hi!");
        java.lang.Class<?> wildcardClass13 = builder12.getClass();
        mongoProperties0.fieldNamingStrategy = wildcardClass13;
        java.lang.String str15 = mongoProperties0.gridFsDatabase;
        boolean boolean16 = mongoProperties0.hasCustomAddress();
        mongoProperties0.host = "hi!";
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties19.database = "";
        java.lang.String str22 = mongoProperties19.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions23 = null;
        com.mongodb.MongoClientOptions.Builder builder24 = mongoProperties19.builder(mongoClientOptions23);
        java.lang.String str25 = mongoProperties19.getUsername();
        java.lang.String str26 = mongoProperties19.uri;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties27 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties27.database = "";
        java.lang.String str30 = mongoProperties27.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties31 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties31.host = "";
        java.lang.String str34 = mongoProperties31.getHost();
        char[] charArray36 = new char[] { ' ' };
        mongoProperties31.setPassword(charArray36);
        char[] charArray41 = new char[] { '4', '4', '#' };
        mongoProperties31.password = charArray41;
        mongoProperties27.setPassword(charArray41);
        java.lang.Class<?> wildcardClass44 = mongoProperties27.getFieldNamingStrategy();
        mongoProperties27.port = 30000;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties47 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties47.database = "";
        java.lang.String str50 = mongoProperties47.getUsername();
        java.lang.Integer int51 = mongoProperties47.getPort();
        mongoProperties47.setUsername("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties54 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties54.database = "";
        java.lang.String str57 = mongoProperties54.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties58 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties58.host = "";
        java.lang.String str61 = mongoProperties58.getHost();
        char[] charArray63 = new char[] { ' ' };
        mongoProperties58.setPassword(charArray63);
        char[] charArray68 = new char[] { '4', '4', '#' };
        mongoProperties58.password = charArray68;
        mongoProperties54.setPassword(charArray68);
        mongoProperties47.password = charArray68;
        mongoProperties27.password = charArray68;
        char[] charArray73 = mongoProperties27.password;
        mongoProperties19.password = charArray73;
        mongoProperties0.password = charArray73;
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "mongodb://localhost/test" + "'", str26, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[ ]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[4, 4, #]");
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(int51);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[ ]");
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[4, 4, #]");
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[4, 4, #]");
    }

    @Test
    public void test4471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4471");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions19.getReadConcern();
        int int24 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        int int26 = mongoClientOptions19.getLocalThreshold();
        com.mongodb.MongoClientOptions.Builder builder27 = com.mongodb.MongoClientOptions.builder(mongoClientOptions19);
        boolean boolean28 = mongoClientOptions19.isSocketKeepAlive();
        com.mongodb.ReadConcern readConcern29 = mongoClientOptions19.getReadConcern();
        int int30 = mongoClientOptions19.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str31 = mongoClientOptions19.getDescription();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(readConcern23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 15 + "'", int26 == 15);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(readConcern29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test4472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4472");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getUri();
        mongoProperties0.gridFsDatabase = "";
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        int int9 = mongoProperties0.getDEFAULT_PORT();
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str11 = mongoProperties0.database;
        boolean boolean12 = mongoProperties0.hasCustomAddress();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27017 + "'", int9 == 27017);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb://localhost/test" + "'", str10, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test4473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4473");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Integer int4 = mongoProperties0.getPort();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.database = "";
        java.lang.String str9 = mongoProperties6.getUsername();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass15 = builder14.getClass();
        mongoProperties6.fieldNamingStrategy = wildcardClass15;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties17.database = "";
        java.lang.String str20 = mongoProperties17.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties21.host = "";
        java.lang.String str24 = mongoProperties21.getHost();
        char[] charArray26 = new char[] { ' ' };
        mongoProperties21.setPassword(charArray26);
        char[] charArray31 = new char[] { '4', '4', '#' };
        mongoProperties21.password = charArray31;
        mongoProperties17.setPassword(charArray31);
        mongoProperties6.password = charArray31;
        mongoProperties0.setPassword(charArray31);
        mongoProperties0.setUri("hi!");
        mongoProperties0.database = "hi!";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ ]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[4, 4, #]");
    }

    @Test
    public void test4474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4474");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        mongoProperties0.database = "";
        mongoProperties0.port = 500;
        char[] charArray10 = mongoProperties0.getPassword();
        mongoProperties0.database = "test";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(charArray10);
    }

    @Test
    public void test4475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4475");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Integer int4 = mongoProperties0.getPort();
        mongoProperties0.setUsername("test");
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        char[] charArray9 = mongoProperties0.getPassword();
        mongoProperties0.setAuthenticationDatabase("hi!");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(charArray9);
    }

    @Test
    public void test4476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4476");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.fieldNamingStrategy;
        java.lang.String str5 = mongoProperties0.getHost();
        java.lang.String str6 = mongoProperties0.username;
        mongoProperties0.host = "mongodb://localhost/test";
        mongoProperties0.host = "hi!";
        boolean boolean11 = mongoProperties0.hasCustomAddress();
        mongoProperties0.gridFsDatabase = "hi!";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test4477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4477");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        int int25 = mongoClientOptions24.getHeartbeatConnectTimeout();
        int int26 = mongoClientOptions24.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions24.getReadPreference();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions24.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder29 = builder10.readPreference(readPreference28);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder35 = builder29.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.maxConnectionIdleTime(20000);
        com.mongodb.MongoClientOptions.Builder builder49 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder57 = builder53.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder59 = builder53.socketTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder60 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder68 = builder64.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder69 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder77 = builder75.description("");
        com.mongodb.MongoClientOptions.Builder builder79 = builder77.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder81 = builder79.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions82 = builder79.build();
        int int83 = mongoClientOptions82.getHeartbeatConnectTimeout();
        int int84 = mongoClientOptions82.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry85 = mongoClientOptions82.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder86 = builder64.codecRegistry(codecRegistry85);
        com.mongodb.MongoClientOptions.Builder builder87 = builder59.codecRegistry(codecRegistry85);
        com.mongodb.MongoClientOptions.Builder builder88 = builder48.codecRegistry(codecRegistry85);
        com.mongodb.MongoClientOptions.Builder builder89 = builder35.codecRegistry(codecRegistry85);
        com.mongodb.MongoClientOptions.Builder builder91 = builder89.maxConnectionIdleTime(500);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(mongoClientOptions82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 20000 + "'", int83 == 20000);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertNotNull(codecRegistry85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test4478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4478");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getHeartbeatSocketTimeout();
        com.mongodb.ReadConcern readConcern25 = mongoClientOptions19.getReadConcern();
        int int26 = mongoClientOptions19.getServerSelectionTimeout();
        int int27 = mongoClientOptions19.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern28 = mongoClientOptions19.getReadConcern();
        int int29 = mongoClientOptions19.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder(mongoClientOptions19);
        com.mongodb.MongoClientOptions.Builder builder31 = com.mongodb.MongoClientOptions.builder(mongoClientOptions19);
        int int32 = mongoClientOptions19.getMaxConnectionLifeTime();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertNotNull(readConcern25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 30000 + "'", int26 == 30000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10000 + "'", int27 == 10000);
        org.junit.Assert.assertNotNull(readConcern28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test4479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4479");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList19 = mongoClientOptions13.getCommandListeners();
        boolean boolean20 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference21 = mongoClientOptions13.getReadPreference();
        int int22 = mongoClientOptions13.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern23 = mongoClientOptions13.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(commandListenerList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(readPreference21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 500 + "'", int22 == 500);
        org.junit.Assert.assertNotNull(writeConcern23);
    }

    @Test
    public void test4480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4480");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        mongoProperties0.setUsername("hi!");
        char[] charArray5 = mongoProperties0.getPassword();
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str8 = mongoProperties0.getUsername();
        java.lang.String str9 = mongoProperties0.host;
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str12 = mongoProperties0.host;
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test4481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4481");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.Integer int5 = mongoProperties0.getPort();
        java.lang.String str6 = mongoProperties0.uri;
        mongoProperties0.host = "";
        mongoProperties0.username = "hi!";
        mongoProperties0.uri = "test";
        char[] charArray13 = mongoProperties0.password;
        org.springframework.core.env.Environment environment14 = null;
        int int15 = mongoProperties0.determinePort(environment14);
        java.lang.String str16 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setHost("");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 27017 + "'", int15 == 27017);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test4482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4482");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder2.build();
        java.lang.String str6 = mongoClientOptions5.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions5.getDbEncoderFactory();
        boolean boolean8 = mongoClientOptions5.isSslInvalidHostNameAllowed();
        int int9 = mongoClientOptions5.getConnectionsPerHost();
        int int10 = mongoClientOptions5.getLocalThreshold();
        int int11 = mongoClientOptions5.getMaxConnectionLifeTime();
        int int12 = mongoClientOptions5.getLocalThreshold();
        int int13 = mongoClientOptions5.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 15 + "'", int12 == 15);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
    }

    @Test
    public void test4483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4483");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.Integer int4 = mongoProperties0.getPort();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.database = "";
        java.lang.String str9 = mongoProperties6.getUsername();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass15 = builder14.getClass();
        mongoProperties6.fieldNamingStrategy = wildcardClass15;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties17.database = "";
        java.lang.String str20 = mongoProperties17.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties21.host = "";
        java.lang.String str24 = mongoProperties21.getHost();
        char[] charArray26 = new char[] { ' ' };
        mongoProperties21.setPassword(charArray26);
        char[] charArray31 = new char[] { '4', '4', '#' };
        mongoProperties21.password = charArray31;
        mongoProperties17.setPassword(charArray31);
        mongoProperties6.password = charArray31;
        mongoProperties0.setPassword(charArray31);
        mongoProperties0.setUri("hi!");
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ ]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[\000, \000, \000]");
    }

    @Test
    public void test4484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4484");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.authenticationDatabase = "";
        java.lang.String str5 = mongoProperties0.authenticationDatabase;
        char[] charArray6 = mongoProperties0.getPassword();
        mongoProperties0.gridFsDatabase = "mongodb://localhost/test";
        mongoProperties0.setHost("");
        java.lang.String str11 = mongoProperties0.uri;
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
    }

    @Test
    public void test4485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4485");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        java.lang.String str14 = mongoClientOptions13.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder4.dbEncoderFactory(dBEncoderFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder4.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("mongodb://localhost/test");
        com.mongodb.event.CommandListener commandListener21 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder22 = builder20.addCommandListener(commandListener21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test4486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4486");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getServerSelectionTimeout();
        int int24 = mongoClientOptions19.getHeartbeatFrequency();
        boolean boolean25 = mongoClientOptions19.isSslEnabled();
        int int26 = mongoClientOptions19.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern27 = mongoClientOptions19.getWriteConcern();
        boolean boolean28 = mongoClientOptions19.isAlwaysUseMBeans();
        int int29 = mongoClientOptions19.getConnectTimeout();
        int int30 = mongoClientOptions19.getMinConnectionsPerHost();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 30000 + "'", int23 == 30000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10000 + "'", int24 == 10000);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(writeConcern27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10000 + "'", int29 == 10000);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test4487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4487");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.database;
        java.lang.String str5 = mongoProperties0.gridFsDatabase;
        mongoProperties0.setPort((java.lang.Integer) 0);
        mongoProperties0.clearPassword();
        char[] charArray9 = mongoProperties0.getPassword();
        java.lang.String str10 = mongoProperties0.host;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(charArray9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test4488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4488");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        org.springframework.core.env.Environment environment6 = null;
        int int7 = mongoProperties0.determinePort(environment6);
        mongoProperties0.authenticationDatabase = "";
        char[] charArray10 = mongoProperties0.password;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.database = "";
        java.lang.String str14 = mongoProperties11.getUsername();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionIdleTime((int) (short) 10);
        java.lang.Class<?> wildcardClass20 = builder19.getClass();
        mongoProperties11.fieldNamingStrategy = wildcardClass20;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties22.database = "";
        java.lang.String str25 = mongoProperties22.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties26 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties26.host = "";
        java.lang.String str29 = mongoProperties26.getHost();
        char[] charArray31 = new char[] { ' ' };
        mongoProperties26.setPassword(charArray31);
        char[] charArray36 = new char[] { '4', '4', '#' };
        mongoProperties26.password = charArray36;
        mongoProperties22.setPassword(charArray36);
        mongoProperties11.password = charArray36;
        mongoProperties0.setPassword(charArray36);
        java.lang.Class<?> wildcardClass41 = mongoProperties0.fieldNamingStrategy;
        java.lang.Integer int42 = mongoProperties0.port;
        java.lang.String str43 = mongoProperties0.getDatabase();
        java.lang.String str44 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(charArray10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ ]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[4, 4, #]");
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test4489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4489");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder7.build();
        java.lang.String str11 = mongoClientOptions10.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions10.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder13 = builder0.dbEncoderFactory(dBEncoderFactory12);
        com.mongodb.MongoClientOptions.Builder builder15 = builder0.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder0.heartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 500 + "'", int19 == 500);
    }

    @Test
    public void test4490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4490");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.host = "";
        java.lang.String str3 = mongoProperties0.getHost();
        char[] charArray5 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray5);
        mongoProperties0.clearPassword();
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        int int23 = mongoClientOptions22.getHeartbeatConnectTimeout();
        int int24 = mongoClientOptions22.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference25 = mongoClientOptions22.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList26 = mongoClientOptions22.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory27 = mongoClientOptions22.getDbDecoderFactory();
        boolean boolean28 = mongoClientOptions22.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions22, environment29);
        mongoProperties0.database = "test";
        int int33 = mongoProperties0.getDEFAULT_PORT();
        java.lang.String str34 = mongoProperties0.getHost();
        mongoProperties0.setPort((java.lang.Integer) 5);
        mongoProperties0.uri = "hi!";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000]");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(readPreference25);
        org.junit.Assert.assertNotNull(commandListenerList26);
        org.junit.Assert.assertNotNull(dBDecoderFactory27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 27017 + "'", int33 == 27017);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test4491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4491");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("mongodb://localhost/test");
        char[] charArray5 = null;
        mongoProperties0.setPassword(charArray5);
        java.lang.String str7 = mongoProperties0.host;
        java.lang.Class<?> wildcardClass8 = mongoProperties0.fieldNamingStrategy;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass8);
    }

    @Test
    public void test4492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4492");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions19.getConnectionsPerHost();
        int int24 = mongoClientOptions19.getSocketTimeout();
        int int25 = mongoClientOptions19.getMinHeartbeatFrequency();
        int int26 = mongoClientOptions19.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 500 + "'", int25 == 500);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
    }

    @Test
    public void test4493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4493");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        com.mongodb.MongoClientOptions.Builder builder5 = mongoProperties0.builder(mongoClientOptions4);
        char[] charArray6 = mongoProperties0.getPassword();
        mongoProperties0.setHost("hi!");
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        int int23 = mongoClientOptions22.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions22, environment24);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder28.build();
        java.lang.String str32 = mongoClientOptions31.getDescription();
        int int33 = mongoClientOptions31.getHeartbeatSocketTimeout();
        com.mongodb.WriteConcern writeConcern34 = mongoClientOptions31.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder35 = mongoProperties0.builder(mongoClientOptions31);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions31);
        int int37 = mongoClientOptions31.getMinHeartbeatFrequency();
        int int38 = mongoClientOptions31.getHeartbeatConnectTimeout();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10000 + "'", int23 == 10000);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20000 + "'", int33 == 20000);
        org.junit.Assert.assertNotNull(writeConcern34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 500 + "'", int37 == 500);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
    }

    @Test
    public void test4494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4494");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder4.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        int int26 = mongoClientOptions25.getHeartbeatConnectTimeout();
        int int27 = mongoClientOptions25.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry28 = mongoClientOptions25.getCodecRegistry();
        com.mongodb.ReadConcern readConcern29 = mongoClientOptions25.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder30 = builder11.readConcern(readConcern29);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.minConnectionsPerHost((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.description("");
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder45.build();
        int int49 = mongoClientOptions48.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory50 = mongoClientOptions48.getDbDecoderFactory();
        int int51 = mongoClientOptions48.getConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry52 = mongoClientOptions48.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder53 = builder30.codecRegistry(codecRegistry52);
        com.mongodb.MongoClientOptions.Builder builder54 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.description("");
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions67 = builder64.build();
        int int68 = mongoClientOptions67.getHeartbeatConnectTimeout();
        int int69 = mongoClientOptions67.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry70 = mongoClientOptions67.getCodecRegistry();
        int int71 = mongoClientOptions67.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference72 = mongoClientOptions67.getReadPreference();
        com.mongodb.ReadConcern readConcern73 = mongoClientOptions67.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder74 = builder53.readConcern(readConcern73);
        com.mongodb.MongoClientOptions.Builder builder76 = builder53.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder78 = builder76.serverSelectionTimeout(27017);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(codecRegistry28);
        org.junit.Assert.assertNotNull(readConcern29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 20000 + "'", int49 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10000 + "'", int51 == 10000);
        org.junit.Assert.assertNotNull(codecRegistry52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(mongoClientOptions67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 20000 + "'", int68 == 20000);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertNotNull(codecRegistry70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 30000 + "'", int71 == 30000);
        org.junit.Assert.assertNotNull(readPreference72);
        org.junit.Assert.assertNotNull(readConcern73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test4495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4495");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.database = "";
        java.lang.String str3 = mongoProperties0.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties4 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties4.host = "";
        java.lang.String str7 = mongoProperties4.getHost();
        char[] charArray9 = new char[] { ' ' };
        mongoProperties4.setPassword(charArray9);
        char[] charArray14 = new char[] { '4', '4', '#' };
        mongoProperties4.password = charArray14;
        mongoProperties0.setPassword(charArray14);
        mongoProperties0.setGridFsDatabase("test");
        org.springframework.core.env.Environment environment19 = null;
        int int20 = mongoProperties0.determinePort(environment19);
        mongoProperties0.database = "hi!";
        mongoProperties0.port = (-1);
        java.lang.String str25 = mongoProperties0.getDatabase();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[ ]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, 4, #]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 27017 + "'", int20 == 27017);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
    }

    @Test
    public void test4496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4496");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.Integer int3 = mongoProperties0.port;
        mongoProperties0.setPort((java.lang.Integer) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties6.database = "";
        java.lang.String str9 = mongoProperties6.getDatabase();
        java.lang.String str10 = mongoProperties6.getUri();
        java.lang.Integer int11 = mongoProperties6.getPort();
        char[] charArray15 = new char[] { ' ', ' ', '4' };
        mongoProperties6.setPassword(charArray15);
        mongoProperties0.password = charArray15;
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.description("");
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder28.build();
        int int32 = mongoClientOptions31.getHeartbeatConnectTimeout();
        int int33 = mongoClientOptions31.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference34 = mongoClientOptions31.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList35 = mongoClientOptions31.getCommandListeners();
        int int36 = mongoClientOptions31.getLocalThreshold();
        int int37 = mongoClientOptions31.getConnectionsPerHost();
        java.lang.String str38 = mongoClientOptions31.getRequiredReplicaSetName();
        int int39 = mongoClientOptions31.getConnectTimeout();
        boolean boolean40 = mongoClientOptions31.isSslEnabled();
        com.mongodb.ReadConcern readConcern41 = mongoClientOptions31.getReadConcern();
        org.springframework.core.env.Environment environment42 = null;
        com.mongodb.MongoClient mongoClient43 = mongoProperties0.createMongoClient(mongoClientOptions31, environment42);
        int int44 = mongoClientOptions31.getConnectionsPerHost();
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb://localhost/test" + "'", str10, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20000 + "'", int32 == 20000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(readPreference34);
        org.junit.Assert.assertNotNull(commandListenerList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 15 + "'", int36 == 15);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10000 + "'", int39 == 10000);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(readConcern41);
        org.junit.Assert.assertNotNull(mongoClient43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
    }

    @Test
    public void test4497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4497");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass2 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.String str6 = mongoProperties0.host;
        java.lang.String str7 = mongoProperties0.host;
        mongoProperties0.setGridFsDatabase("");
        java.lang.Class<?> wildcardClass10 = mongoProperties0.fieldNamingStrategy;
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.database = "";
        java.lang.String str14 = mongoProperties11.getUsername();
        java.lang.Integer int15 = mongoProperties11.getPort();
        mongoProperties11.setUsername("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties18.database = "";
        java.lang.String str21 = mongoProperties18.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties22.host = "";
        java.lang.String str25 = mongoProperties22.getHost();
        char[] charArray27 = new char[] { ' ' };
        mongoProperties22.setPassword(charArray27);
        char[] charArray32 = new char[] { '4', '4', '#' };
        mongoProperties22.password = charArray32;
        mongoProperties18.setPassword(charArray32);
        mongoProperties11.password = charArray32;
        mongoProperties11.clearPassword();
        mongoProperties11.setPort((java.lang.Integer) 500);
        char[] charArray39 = mongoProperties11.password;
        mongoProperties0.setPassword(charArray39);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[\000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[\000, \000, \000]");
    }

    @Test
    public void test4498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4498");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder4.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder4.heartbeatConnectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder16 = builder4.socketTimeout((int) (short) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4499");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.authenticationDatabase = "hi!";
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        int int20 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = mongoProperties0.builder(mongoClientOptions19);
        int int22 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions19.getReadConcern();
        int int24 = mongoClientOptions19.getMaxConnectionIdleTime();
        java.lang.String str25 = mongoClientOptions19.getRequiredReplicaSetName();
        boolean boolean26 = mongoClientOptions19.isSslInvalidHostNameAllowed();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList27 = mongoClientOptions19.getCommandListeners();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(readConcern23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(commandListenerList27);
    }

    @Test
    public void test4500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4500");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        int int14 = mongoClientOptions13.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions13.getDbDecoderFactory();
        java.lang.Object obj16 = null;
        boolean boolean17 = mongoClientOptions13.equals(obj16);
        int int18 = mongoClientOptions13.getConnectionsPerHost();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        int int20 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
    }
}

