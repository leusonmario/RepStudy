import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest6 {

    public static boolean debug = false;

    @Test
    public void test3001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3001");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        boolean boolean11 = mongoClientOptions10.isSslEnabled();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions10.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.dbEncoderFactory(dBEncoderFactory13);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern20 = mongoClientOptions18.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder21 = builder6.readConcern(readConcern20);
        com.mongodb.MongoClientOptions.Builder builder23 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.connectTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxConnectionLifeTime(15);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertNotNull(readConcern20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test3002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3002");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        boolean boolean9 = mongoClientOptions3.isCursorFinalizerEnabled();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList10 = mongoClientOptions3.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions3.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        javax.net.SocketFactory socketFactory13 = mongoClientOptions3.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.heartbeatSocketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        int int31 = mongoClientOptions30.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern32 = mongoClientOptions30.getReadConcern();
        com.mongodb.ReadPreference readPreference33 = mongoClientOptions30.getReadPreference();
        com.mongodb.WriteConcern writeConcern34 = mongoClientOptions30.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder35 = builder22.writeConcern(writeConcern34);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        boolean boolean40 = mongoClientOptions39.isSslEnabled();
        int int41 = mongoClientOptions39.getHeartbeatSocketTimeout();
        int int42 = mongoClientOptions39.getServerSelectionTimeout();
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions39);
        com.mongodb.ReadPreference readPreference44 = mongoClientOptions39.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder45 = builder22.readPreference(readPreference44);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder45.build();
        com.mongodb.MongoClientOptions.Builder builder47 = com.mongodb.MongoClientOptions.builder(mongoClientOptions46);
        com.mongodb.DBDecoderFactory dBDecoderFactory48 = mongoClientOptions46.getDbDecoderFactory();
        boolean boolean49 = mongoClientOptions3.equals((java.lang.Object) mongoClientOptions46);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 500 + "'", int6 == 500);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(commandListenerList10);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertNotNull(socketFactory13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10000 + "'", int31 == 10000);
        org.junit.Assert.assertNotNull(readConcern32);
        org.junit.Assert.assertNotNull(readPreference33);
        org.junit.Assert.assertNotNull(writeConcern34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 30000 + "'", int42 == 30000);
        org.junit.Assert.assertNotNull(readPreference44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(dBDecoderFactory48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test3003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3003");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        java.lang.Integer int8 = mongoProperties0.getPort();
        java.lang.String str9 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass10 = mongoProperties0.getFieldNamingStrategy();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties11.createMongoClient(mongoClientOptions14, environment15);
        java.lang.String str17 = mongoProperties11.getMongoClientDatabase();
        mongoProperties11.setHost("hi!");
        char[] charArray26 = new char[] { 'a', '4', '#', ' ', ' ', ' ' };
        mongoProperties11.setPassword(charArray26);
        char[] charArray28 = mongoProperties11.getPassword();
        mongoProperties11.setHost("");
        char[] charArray31 = mongoProperties11.getPassword();
        mongoProperties0.setPassword(charArray31);
        java.lang.Integer int33 = mongoProperties0.getPort();
        mongoProperties0.setUri("");
        java.lang.String str36 = mongoProperties0.getDatabase();
        java.lang.String str37 = mongoProperties0.getGridFsDatabase();
        java.lang.String str38 = mongoProperties0.getUri();
        mongoProperties0.setPort((java.lang.Integer) 120000);
        mongoProperties0.setGridFsDatabase("");
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test3004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3004");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getSocketTimeout();
        boolean boolean10 = mongoClientOptions8.isAlwaysUseMBeans();
        int int11 = mongoClientOptions8.getThreadsAllowedToBlockForConnectionMultiplier();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList12 = mongoClientOptions8.getCommandListeners();
        boolean boolean13 = mongoClientOptions3.equals((java.lang.Object) mongoClientOptions8);
        com.mongodb.DBDecoderFactory dBDecoderFactory14 = mongoClientOptions3.getDbDecoderFactory();
        int int15 = mongoClientOptions3.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions3.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        boolean boolean18 = mongoClientOptions3.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(commandListenerList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dBDecoderFactory14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3005");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        com.mongodb.ReadConcern readConcern16 = mongoClientOptions15.getReadConcern();
        int int17 = mongoClientOptions15.getLocalThreshold();
        boolean boolean18 = mongoClientOptions15.isAlwaysUseMBeans();
        int int19 = mongoClientOptions15.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(readConcern16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 15 + "'", int17 == 15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test3006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3006");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        java.lang.String str6 = mongoClientOptions3.getRequiredReplicaSetName();
        org.bson.codecs.configuration.CodecRegistry codecRegistry7 = mongoClientOptions3.getCodecRegistry();
        int int8 = mongoClientOptions3.getHeartbeatConnectTimeout();
        boolean boolean9 = mongoClientOptions3.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold(1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(codecRegistry7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test3007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3007");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        int int6 = mongoClientOptions3.getMinConnectionsPerHost();
        boolean boolean7 = mongoClientOptions3.isSslInvalidHostNameAllowed();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList8 = mongoClientOptions3.getCommandListeners();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getMaxConnectionLifeTime();
        boolean boolean15 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        com.mongodb.ReadConcern readConcern16 = mongoClientOptions13.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        int int18 = mongoClientOptions13.getSocketTimeout();
        boolean boolean19 = mongoClientOptions3.equals((java.lang.Object) mongoClientOptions13);
        int int20 = mongoClientOptions3.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(commandListenerList8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(readConcern16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 15 + "'", int20 == 15);
    }

    @Test
    public void test3008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3008");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setDatabase("");
        java.lang.String str8 = mongoProperties0.getUri();
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str10 = mongoProperties0.getHost();
        mongoProperties0.setDatabase("hi!");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test3009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3009");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setAuthenticationDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getSocketTimeout();
        boolean boolean13 = mongoClientOptions11.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties0.createMongoClient(mongoClientOptions11, environment14);
        java.lang.String str16 = mongoProperties0.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties17.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties17.createMongoClient(mongoClientOptions20, environment21);
        java.lang.String str23 = mongoProperties17.getMongoClientDatabase();
        mongoProperties17.setHost("hi!");
        char[] charArray32 = new char[] { 'a', '4', '#', ' ', ' ', ' ' };
        mongoProperties17.setPassword(charArray32);
        mongoProperties0.setPassword(charArray32);
        mongoProperties0.setHost("hi!");
        java.lang.Integer int37 = mongoProperties0.getPort();
        java.lang.String str38 = mongoProperties0.getDatabase();
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
    }

    @Test
    public void test3010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3010");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionLifeTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.description("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test3011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3011");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatSocketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getConnectionsPerHost();
        int int22 = mongoClientOptions20.getHeartbeatSocketTimeout();
        java.lang.String str23 = mongoClientOptions20.getRequiredReplicaSetName();
        boolean boolean24 = mongoClientOptions20.isAlwaysUseMBeans();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions20.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions20);
        int int27 = mongoClientOptions20.getConnectionsPerHost();
        com.mongodb.DBDecoderFactory dBDecoderFactory28 = mongoClientOptions20.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder29 = builder16.dbDecoderFactory(dBDecoderFactory28);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.sslInvalidHostNameAllowed(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(dBDecoderFactory28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test3012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3012");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        int int6 = mongoClientOptions3.getMinConnectionsPerHost();
        int int7 = mongoClientOptions3.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern8 = mongoClientOptions3.getWriteConcern();
        boolean boolean9 = mongoClientOptions3.isSslInvalidHostNameAllowed();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder(mongoClientOptions3);
        int int11 = mongoClientOptions3.getHeartbeatFrequency();
        boolean boolean12 = mongoClientOptions3.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertNotNull(writeConcern8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test3013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3013");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        com.mongodb.ReadPreference readPreference6 = mongoClientOptions3.getReadPreference();
        int int7 = mongoClientOptions3.getMaxWaitTime();
        int int8 = mongoClientOptions3.getMaxConnectionIdleTime();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern17 = mongoClientOptions15.getReadConcern();
        int int18 = mongoClientOptions15.getMinConnectionsPerHost();
        boolean boolean19 = mongoClientOptions15.isSslInvalidHostNameAllowed();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList20 = mongoClientOptions15.getCommandListeners();
        int int21 = mongoClientOptions15.getMaxConnectionLifeTime();
        int int22 = mongoClientOptions15.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        boolean boolean40 = mongoClientOptions39.isSslEnabled();
        int int41 = mongoClientOptions39.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory42 = mongoClientOptions39.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder43 = builder35.dbEncoderFactory(dBEncoderFactory42);
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder54 = builder50.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder56 = builder50.threadsAllowedToBlockForConnectionMultiplier(100);
        com.mongodb.MongoClientOptions.Builder builder57 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder61 = builder57.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder64 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions67 = builder66.build();
        boolean boolean68 = mongoClientOptions67.isSslEnabled();
        int int69 = mongoClientOptions67.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory70 = mongoClientOptions67.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder71 = builder63.dbEncoderFactory(dBEncoderFactory70);
        com.mongodb.MongoClientOptions.Builder builder72 = builder50.dbEncoderFactory(dBEncoderFactory70);
        com.mongodb.MongoClientOptions.Builder builder73 = builder35.dbEncoderFactory(dBEncoderFactory70);
        com.mongodb.MongoClientOptions.Builder builder74 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder76 = builder74.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder78 = builder74.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder82 = builder78.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder83 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder85 = builder83.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions86 = builder85.build();
        int int87 = mongoClientOptions86.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory88 = mongoClientOptions86.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern89 = mongoClientOptions86.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder90 = builder82.writeConcern(writeConcern89);
        com.mongodb.MongoClientOptions.Builder builder91 = builder35.writeConcern(writeConcern89);
        boolean boolean92 = mongoClientOptions15.equals((java.lang.Object) writeConcern89);
        com.mongodb.WriteConcern writeConcern93 = mongoClientOptions15.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder94 = builder9.writeConcern(writeConcern93);
        com.mongodb.MongoClientOptions mongoClientOptions95 = builder9.build();
        int int96 = mongoClientOptions95.getHeartbeatSocketTimeout();
        int int97 = mongoClientOptions95.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertNotNull(readPreference6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(readConcern17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(commandListenerList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(mongoClientOptions67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 100 + "'", int69 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(mongoClientOptions86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 10000 + "'", int87 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory88);
        org.junit.Assert.assertNotNull(writeConcern89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(writeConcern93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(mongoClientOptions95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 32 + "'", int96 == 32);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 5 + "'", int97 == 5);
    }

    @Test
    public void test3014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3014");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxWaitTime(120000);
        com.mongodb.MongoClientOptions.Builder builder15 = builder12.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder17 = builder12.sslEnabled(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder19 = builder12.minConnectionsPerHost((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: minConnectionsPerHost must be >= 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test3015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3015");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        java.lang.String str4 = mongoClientOptions3.getRequiredReplicaSetName();
        int int5 = mongoClientOptions3.getServerSelectionTimeout();
        int int6 = mongoClientOptions3.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 30000 + "'", int5 == 30000);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test3016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3016");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        int int5 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getSocketTimeout();
        boolean boolean14 = mongoClientOptions12.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions12.getSocketFactory();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions12.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder17 = builder6.codecRegistry(codecRegistry16);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        int int22 = mongoClientOptions21.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions21.getReadConcern();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions21.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder25 = builder17.readPreference(readPreference24);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.connectTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder25.localThreshold(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
        org.junit.Assert.assertNotNull(readConcern23);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test3017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3017");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        java.lang.Integer int8 = mongoProperties0.getPort();
        java.lang.String str9 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass10 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions17.getDbDecoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions17.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = com.mongodb.MongoClientOptions.builder(mongoClientOptions17);
        int int21 = mongoClientOptions17.getThreadsAllowedToBlockForConnectionMultiplier();
        int int22 = mongoClientOptions17.getLocalThreshold();
        int int23 = mongoClientOptions17.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions17);
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions17, environment25);
        mongoProperties0.setHost("test");
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(mongoClient26);
    }

    @Test
    public void test3018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3018");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setHost("hi!");
        char[] charArray15 = new char[] { 'a', '4', '#', ' ', ' ', ' ' };
        mongoProperties0.setPassword(charArray15);
        java.lang.String str17 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str18 = mongoProperties0.getGridFsDatabase();
        java.lang.String str19 = mongoProperties0.getUsername();
        java.lang.String str20 = mongoProperties0.getDatabase();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties23.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions26 = null;
        org.springframework.core.env.Environment environment27 = null;
        com.mongodb.MongoClient mongoClient28 = mongoProperties23.createMongoClient(mongoClientOptions26, environment27);
        java.lang.String str29 = mongoProperties23.getMongoClientDatabase();
        java.lang.String str30 = mongoProperties23.getGridFsDatabase();
        mongoProperties23.setUsername("hi!");
        mongoProperties23.setPort((java.lang.Integer) 5);
        java.lang.String str35 = mongoProperties23.getHost();
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        boolean boolean40 = mongoClientOptions39.isSslEnabled();
        int int41 = mongoClientOptions39.getHeartbeatSocketTimeout();
        int int42 = mongoClientOptions39.getMinHeartbeatFrequency();
        int int43 = mongoClientOptions39.getMaxWaitTime();
        int int44 = mongoClientOptions39.getServerSelectionTimeout();
        org.springframework.core.env.Environment environment45 = null;
        com.mongodb.MongoClient mongoClient46 = mongoProperties23.createMongoClient(mongoClientOptions39, environment45);
        boolean boolean47 = mongoClientOptions39.isSslInvalidHostNameAllowed();
        int int48 = mongoClientOptions39.getMaxWaitTime();
        int int49 = mongoClientOptions39.getHeartbeatConnectTimeout();
        org.springframework.core.env.Environment environment50 = null;
        com.mongodb.MongoClient mongoClient51 = mongoProperties0.createMongoClient(mongoClientOptions39, environment50);
        int int52 = mongoClientOptions39.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 500 + "'", int42 == 500);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 120000 + "'", int43 == 120000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 30000 + "'", int44 == 30000);
        org.junit.Assert.assertNotNull(mongoClient46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 120000 + "'", int48 == 120000);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 20000 + "'", int49 == 20000);
        org.junit.Assert.assertNotNull(mongoClient51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 500 + "'", int52 == 500);
    }

    @Test
    public void test3019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3019");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.serverSelectionTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.connectionsPerHost(5);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        int int10 = mongoClientOptions9.getHeartbeatConnectTimeout();
        int int11 = mongoClientOptions9.getConnectTimeout();
        com.mongodb.WriteConcern writeConcern12 = mongoClientOptions9.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertNotNull(writeConcern12);
    }

    @Test
    public void test3020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3020");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setHost("hi!");
        char[] charArray15 = new char[] { 'a', '4', '#', ' ', ' ', ' ' };
        mongoProperties0.setPassword(charArray15);
        char[] charArray17 = mongoProperties0.getPassword();
        java.lang.String str18 = mongoProperties0.getDatabase();
        java.lang.String str19 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass20 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(wildcardClass20);
    }

    @Test
    public void test3021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3021");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getLocalThreshold();
        int int5 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxWaitTime(5);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test3022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3022");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        boolean boolean6 = mongoClientOptions3.isSocketKeepAlive();
        com.mongodb.ReadConcern readConcern7 = mongoClientOptions3.getReadConcern();
        org.bson.codecs.configuration.CodecRegistry codecRegistry8 = mongoClientOptions3.getCodecRegistry();
        boolean boolean9 = mongoClientOptions3.isSslInvalidHostNameAllowed();
        int int10 = mongoClientOptions3.getMaxConnectionLifeTime();
        int int11 = mongoClientOptions3.getMaxConnectionLifeTime();
        boolean boolean12 = mongoClientOptions3.isSslInvalidHostNameAllowed();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(readConcern7);
        org.junit.Assert.assertNotNull(codecRegistry8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test3023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3023");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setUsername("");
        mongoProperties0.setHost("hi!");
        char[] charArray5 = mongoProperties0.getPassword();
        mongoProperties0.setUri("");
        mongoProperties0.setPort((java.lang.Integer) 0);
        mongoProperties0.setUsername("");
        mongoProperties0.setHost("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties14.setUsername("");
        mongoProperties14.setHost("hi!");
        char[] charArray19 = mongoProperties14.getPassword();
        mongoProperties14.setDatabase("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties22.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties22.createMongoClient(mongoClientOptions25, environment26);
        java.lang.String str28 = mongoProperties22.getMongoClientDatabase();
        mongoProperties22.setHost("hi!");
        char[] charArray37 = new char[] { 'a', '4', '#', ' ', ' ', ' ' };
        mongoProperties22.setPassword(charArray37);
        char[] charArray39 = mongoProperties22.getPassword();
        mongoProperties22.setHost("");
        java.lang.String str42 = mongoProperties22.getAuthenticationDatabase();
        mongoProperties22.setDatabase("");
        java.lang.String str45 = mongoProperties22.getMongoClientDatabase();
        mongoProperties22.setGridFsDatabase("");
        char[] charArray48 = mongoProperties22.getPassword();
        mongoProperties14.setPassword(charArray48);
        mongoProperties0.setPassword(charArray48);
        mongoProperties0.setDatabase("test");
        java.lang.String str53 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(charArray19);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test3024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3024");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUsername("hi!");
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        java.lang.Integer int11 = mongoProperties0.getPort();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str14 = mongoProperties0.getUsername();
        mongoProperties0.setDatabase("");
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern22 = mongoClientOptions20.getReadConcern();
        int int23 = mongoClientOptions20.getMinConnectionsPerHost();
        boolean boolean24 = mongoClientOptions20.isSslInvalidHostNameAllowed();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList25 = mongoClientOptions20.getCommandListeners();
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties0.createMongoClient(mongoClientOptions20, environment26);
        char[] charArray28 = mongoProperties0.getPassword();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertNotNull(readConcern22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(commandListenerList25);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertNull(charArray28);
    }

    @Test
    public void test3025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3025");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder15.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions18.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions23.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern26 = mongoClientOptions23.getWriteConcern();
        boolean boolean27 = mongoClientOptions18.equals((java.lang.Object) writeConcern26);
        com.mongodb.MongoClientOptions.Builder builder28 = builder14.writeConcern(writeConcern26);
        com.mongodb.MongoClientOptions.Builder builder30 = builder14.serverSelectionTimeout(30000);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxConnectionIdleTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder44.build();
        int int46 = mongoClientOptions45.getMaxConnectionLifeTime();
        int int47 = mongoClientOptions45.getConnectionsPerHost();
        boolean boolean48 = mongoClientOptions45.isSocketKeepAlive();
        boolean boolean49 = mongoClientOptions45.isSslInvalidHostNameAllowed();
        com.mongodb.DBEncoderFactory dBEncoderFactory50 = mongoClientOptions45.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder51 = builder41.dbEncoderFactory(dBEncoderFactory50);
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions55 = builder54.build();
        int int56 = mongoClientOptions55.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern57 = mongoClientOptions55.getReadConcern();
        boolean boolean58 = mongoClientOptions55.isCursorFinalizerEnabled();
        boolean boolean59 = mongoClientOptions55.isSslEnabled();
        int int60 = mongoClientOptions55.getLocalThreshold();
        int int61 = mongoClientOptions55.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory62 = mongoClientOptions55.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder63 = builder41.socketFactory(socketFactory62);
        com.mongodb.MongoClientOptions.Builder builder64 = builder30.socketFactory(socketFactory62);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10000 + "'", int24 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
        org.junit.Assert.assertNotNull(writeConcern26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(mongoClientOptions55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10000 + "'", int56 == 10000);
        org.junit.Assert.assertNotNull(readConcern57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 15 + "'", int60 == 15);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 20000 + "'", int61 == 20000);
        org.junit.Assert.assertNotNull(socketFactory62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test3026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3026");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getMinHeartbeatFrequency();
        int int7 = mongoClientOptions3.getMaxConnectionLifeTime();
        int int8 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions3.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        java.lang.String str12 = mongoClientOptions3.getDescription();
        int int13 = mongoClientOptions3.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 500 + "'", int6 == 500);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test3027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3027");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        java.lang.String str6 = mongoClientOptions3.getRequiredReplicaSetName();
        org.bson.codecs.configuration.CodecRegistry codecRegistry7 = mongoClientOptions3.getCodecRegistry();
        int int8 = mongoClientOptions3.getHeartbeatConnectTimeout();
        int int9 = mongoClientOptions3.getConnectionsPerHost();
        java.lang.String str10 = mongoClientOptions3.getRequiredReplicaSetName();
        int int11 = mongoClientOptions3.getMaxConnectionIdleTime();
        int int12 = mongoClientOptions3.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(codecRegistry7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test3028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3028");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getMinHeartbeatFrequency();
        int int7 = mongoClientOptions3.getMaxConnectionLifeTime();
        int int8 = mongoClientOptions3.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory14 = mongoClientOptions12.getDbDecoderFactory();
        int int15 = mongoClientOptions12.getLocalThreshold();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions12.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory17 = mongoClientOptions12.getDbDecoderFactory();
        boolean boolean18 = mongoClientOptions3.equals((java.lang.Object) mongoClientOptions12);
        int int19 = mongoClientOptions12.getLocalThreshold();
        java.lang.Class<?> wildcardClass20 = mongoClientOptions12.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 500 + "'", int6 == 500);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 15 + "'", int15 == 15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertNotNull(dBDecoderFactory17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 15 + "'", int19 == 15);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test3029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3029");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        java.lang.Integer int8 = mongoProperties0.getPort();
        char[] charArray9 = mongoProperties0.getPassword();
        mongoProperties0.setHost("hi!");
        java.lang.Integer int12 = mongoProperties0.getPort();
        mongoProperties0.setHost("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties15.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.springframework.core.env.Environment environment19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties15.createMongoClient(mongoClientOptions18, environment19);
        java.lang.String str21 = mongoProperties15.getMongoClientDatabase();
        mongoProperties15.setHost("hi!");
        char[] charArray30 = new char[] { 'a', '4', '#', ' ', ' ', ' ' };
        mongoProperties15.setPassword(charArray30);
        mongoProperties0.setPassword(charArray30);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties33 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties33.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions36 = null;
        org.springframework.core.env.Environment environment37 = null;
        com.mongodb.MongoClient mongoClient38 = mongoProperties33.createMongoClient(mongoClientOptions36, environment37);
        java.lang.String str39 = mongoProperties33.getMongoClientDatabase();
        java.lang.String str40 = mongoProperties33.getGridFsDatabase();
        java.lang.Integer int41 = mongoProperties33.getPort();
        char[] charArray42 = mongoProperties33.getPassword();
        mongoProperties33.setHost("hi!");
        java.lang.Integer int45 = mongoProperties33.getPort();
        mongoProperties33.setHost("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties48 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties48.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions51 = null;
        org.springframework.core.env.Environment environment52 = null;
        com.mongodb.MongoClient mongoClient53 = mongoProperties48.createMongoClient(mongoClientOptions51, environment52);
        java.lang.String str54 = mongoProperties48.getMongoClientDatabase();
        mongoProperties48.setHost("hi!");
        char[] charArray63 = new char[] { 'a', '4', '#', ' ', ' ', ' ' };
        mongoProperties48.setPassword(charArray63);
        mongoProperties33.setPassword(charArray63);
        mongoProperties0.setPassword(charArray63);
        mongoProperties0.setHost("");
        java.lang.Class<?> wildcardClass69 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("");
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(charArray9);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNotNull(mongoClient38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNull(charArray42);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNotNull(mongoClient53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNull(wildcardClass69);
    }

    @Test
    public void test3030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3030");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        java.lang.Integer int8 = mongoProperties0.getPort();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions12.isCursorFinalizerEnabled();
        java.lang.String str15 = mongoClientOptions12.getDescription();
        org.springframework.core.env.Environment environment16 = null;
        com.mongodb.MongoClient mongoClient17 = mongoProperties0.createMongoClient(mongoClientOptions12, environment16);
        int int18 = mongoClientOptions12.getSocketTimeout();
        com.mongodb.ReadConcern readConcern19 = mongoClientOptions12.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions23);
        int int26 = mongoClientOptions23.getServerSelectionTimeout();
        boolean boolean27 = mongoClientOptions23.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder28 = com.mongodb.MongoClientOptions.builder(mongoClientOptions23);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.alwaysUseMBeans(true);
        boolean boolean31 = mongoClientOptions12.equals((java.lang.Object) true);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(readConcern19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 30000 + "'", int26 == 30000);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test3031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3031");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        java.lang.String str6 = mongoClientOptions3.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern7 = mongoClientOptions3.getWriteConcern();
        java.lang.String str8 = mongoClientOptions3.getRequiredReplicaSetName();
        com.mongodb.ReadPreference readPreference9 = mongoClientOptions3.getReadPreference();
        int int10 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        int int11 = mongoClientOptions3.getLocalThreshold();
        com.mongodb.ReadConcern readConcern12 = mongoClientOptions3.getReadConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(writeConcern7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(readPreference9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 15 + "'", int11 == 15);
        org.junit.Assert.assertNotNull(readConcern12);
    }

    @Test
    public void test3032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3032");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        javax.net.SocketFactory socketFactory8 = mongoClientOptions3.getSocketFactory();
        int int9 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int10 = mongoClientOptions3.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 500 + "'", int6 == 500);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
    }

    @Test
    public void test3033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3033");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setHost("hi!");
        char[] charArray15 = new char[] { 'a', '4', '#', ' ', ' ', ' ' };
        mongoProperties0.setPassword(charArray15);
        char[] charArray17 = mongoProperties0.getPassword();
        mongoProperties0.setHost("");
        java.lang.String str20 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setHost("");
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test3034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3034");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        com.mongodb.ReadPreference readPreference6 = mongoClientOptions3.getReadPreference();
        boolean boolean7 = mongoClientOptions3.isCursorFinalizerEnabled();
        int int8 = mongoClientOptions3.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertNotNull(readPreference6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
    }

    @Test
    public void test3035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3035");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        int int5 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        int int6 = mongoClientOptions3.getMaxWaitTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry7 = mongoClientOptions3.getCodecRegistry();
        int int8 = mongoClientOptions3.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        boolean boolean10 = mongoClientOptions3.isAlwaysUseMBeans();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions3.getWriteConcern();
        int int12 = mongoClientOptions3.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatConnectTimeout((int) (short) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 120000 + "'", int6 == 120000);
        org.junit.Assert.assertNotNull(codecRegistry7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test3036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3036");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setAuthenticationDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getSocketTimeout();
        boolean boolean13 = mongoClientOptions11.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties0.createMongoClient(mongoClientOptions11, environment14);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getConnectionsPerHost();
        int int21 = mongoClientOptions19.getConnectTimeout();
        org.springframework.core.env.Environment environment22 = null;
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions19, environment22);
        int int24 = mongoClientOptions19.getHeartbeatFrequency();
        java.lang.String str25 = mongoClientOptions19.getRequiredReplicaSetName();
        boolean boolean26 = mongoClientOptions19.isAlwaysUseMBeans();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions19.getReadPreference();
        int int28 = mongoClientOptions19.getMaxConnectionLifeTime();
        java.lang.String str29 = mongoClientOptions19.getRequiredReplicaSetName();
        int int30 = mongoClientOptions19.getLocalThreshold();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10000 + "'", int24 == 10000);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 15 + "'", int30 == 15);
    }

    @Test
    public void test3037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3037");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatSocketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getMaxConnectionLifeTime();
        int int18 = mongoClientOptions16.getConnectionsPerHost();
        javax.net.SocketFactory socketFactory19 = mongoClientOptions16.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions16);
        boolean boolean21 = mongoClientOptions16.isSslInvalidHostNameAllowed();
        boolean boolean22 = mongoClientOptions16.isSslEnabled();
        int int23 = mongoClientOptions16.getMaxConnectionLifeTime();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions16.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder25 = builder12.readPreference(readPreference24);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.connectTimeout((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(socketFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test3038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3038");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        java.lang.String str6 = mongoClientOptions3.getRequiredReplicaSetName();
        org.bson.codecs.configuration.CodecRegistry codecRegistry7 = mongoClientOptions3.getCodecRegistry();
        int int8 = mongoClientOptions3.getHeartbeatConnectTimeout();
        int int9 = mongoClientOptions3.getConnectionsPerHost();
        java.lang.String str10 = mongoClientOptions3.getRequiredReplicaSetName();
        com.mongodb.ReadConcern readConcern11 = mongoClientOptions3.getReadConcern();
        int int12 = mongoClientOptions3.getLocalThreshold();
        java.lang.String str13 = mongoClientOptions3.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(codecRegistry7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(readConcern11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 15 + "'", int12 == 15);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test3039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3039");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        boolean boolean17 = mongoClientOptions16.isSslEnabled();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions16.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.dbEncoderFactory(dBEncoderFactory19);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder27.threadsAllowedToBlockForConnectionMultiplier(100);
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder43.build();
        boolean boolean45 = mongoClientOptions44.isSslEnabled();
        int int46 = mongoClientOptions44.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory47 = mongoClientOptions44.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder48 = builder40.dbEncoderFactory(dBEncoderFactory47);
        com.mongodb.MongoClientOptions.Builder builder49 = builder27.dbEncoderFactory(dBEncoderFactory47);
        com.mongodb.MongoClientOptions.Builder builder50 = builder12.dbEncoderFactory(dBEncoderFactory47);
        com.mongodb.MongoClientOptions.Builder builder52 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder54 = builder12.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder57.build();
        int int59 = mongoClientOptions58.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern60 = mongoClientOptions58.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder61 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions58);
        boolean boolean62 = mongoClientOptions58.isSslInvalidHostNameAllowed();
        int int63 = mongoClientOptions58.getConnectTimeout();
        int int64 = mongoClientOptions58.getMaxWaitTime();
        int int65 = mongoClientOptions58.getMinConnectionsPerHost();
        int int66 = mongoClientOptions58.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder67 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions58);
        com.mongodb.MongoClientOptions.Builder builder68 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions71 = builder70.build();
        int int72 = mongoClientOptions71.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder73 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions71);
        com.mongodb.MongoClientOptions.Builder builder74 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder76 = builder74.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions77 = builder76.build();
        int int78 = mongoClientOptions77.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern79 = mongoClientOptions77.getReadConcern();
        int int80 = mongoClientOptions77.getMinConnectionsPerHost();
        int int81 = mongoClientOptions77.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern82 = mongoClientOptions77.getWriteConcern();
        boolean boolean83 = mongoClientOptions71.equals((java.lang.Object) writeConcern82);
        javax.net.SocketFactory socketFactory84 = mongoClientOptions71.getSocketFactory();
        com.mongodb.ReadPreference readPreference85 = mongoClientOptions71.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder86 = builder67.readPreference(readPreference85);
        com.mongodb.MongoClientOptions.Builder builder87 = builder54.readPreference(readPreference85);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder89 = builder87.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: threadsAllowedToBlockForConnectionMultiplier must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10000 + "'", int59 == 10000);
        org.junit.Assert.assertNotNull(readConcern60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10000 + "'", int63 == 10000);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 120000 + "'", int64 == 120000);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(mongoClientOptions71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 100 + "'", int72 == 100);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(mongoClientOptions77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10000 + "'", int78 == 10000);
        org.junit.Assert.assertNotNull(readConcern79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 120000 + "'", int81 == 120000);
        org.junit.Assert.assertNotNull(writeConcern82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(socketFactory84);
        org.junit.Assert.assertNotNull(readPreference85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test3040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3040");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern18 = mongoClientOptions16.getReadConcern();
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions16.getReadPreference();
        com.mongodb.WriteConcern writeConcern20 = mongoClientOptions16.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder21 = builder12.writeConcern(writeConcern20);
        com.mongodb.MongoClientOptions.Builder builder23 = builder12.minHeartbeatFrequency((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertNotNull(readConcern18);
        org.junit.Assert.assertNotNull(readPreference19);
        org.junit.Assert.assertNotNull(writeConcern20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test3041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3041");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        java.lang.Integer int8 = mongoProperties0.getPort();
        char[] charArray9 = mongoProperties0.getPassword();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setHost("test");
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(charArray9);
    }

    @Test
    public void test3042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3042");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        com.mongodb.MongoClientOptions.Builder builder12 = builder9.minHeartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getConnectionsPerHost();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        java.lang.String str19 = mongoClientOptions16.getRequiredReplicaSetName();
        org.bson.codecs.configuration.CodecRegistry codecRegistry20 = mongoClientOptions16.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder21 = builder9.codecRegistry(codecRegistry20);
        com.mongodb.MongoClientOptions.Builder builder22 = builder2.codecRegistry(codecRegistry20);
        com.mongodb.MongoClientOptions.Builder builder24 = builder2.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder26 = builder2.connectTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder2.sslInvalidHostNameAllowed(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(codecRegistry20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test3043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3043");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.threadsAllowedToBlockForConnectionMultiplier(100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.maxConnectionLifeTime(15);
        java.lang.Class<?> wildcardClass15 = builder6.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3044");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        boolean boolean15 = mongoClientOptions14.isSslEnabled();
        int int16 = mongoClientOptions14.getHeartbeatSocketTimeout();
        int int17 = mongoClientOptions14.getMinHeartbeatFrequency();
        int int18 = mongoClientOptions14.getMaxConnectionLifeTime();
        int int19 = mongoClientOptions14.getHeartbeatSocketTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions14.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder21 = builder10.dbDecoderFactory(dBDecoderFactory20);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatSocketTimeout(27017);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test3045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3045");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str8 = mongoProperties0.getDatabase();
        java.lang.String str9 = mongoProperties0.getUri();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getSocketTimeout();
        boolean boolean15 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions13, environment17);
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions13.getWriteConcern();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions13.getReadPreference();
        java.lang.String str21 = mongoClientOptions13.getRequiredReplicaSetName();
        boolean boolean22 = mongoClientOptions13.isSslEnabled();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test3046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3046");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getMinHeartbeatFrequency();
        int int7 = mongoClientOptions3.getMaxConnectionLifeTime();
        int int8 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions3.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatFrequency(15);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) -1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 500 + "'", int6 == 500);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test3047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3047");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        com.mongodb.ReadPreference readPreference6 = mongoClientOptions3.getReadPreference();
        int int7 = mongoClientOptions3.getMaxWaitTime();
        int int8 = mongoClientOptions3.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern9 = mongoClientOptions3.getReadConcern();
        int int10 = mongoClientOptions3.getServerSelectionTimeout();
        boolean boolean11 = mongoClientOptions3.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertNotNull(readPreference6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(readConcern9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 30000 + "'", int10 == 30000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test3048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3048");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        com.mongodb.ReadPreference readPreference6 = mongoClientOptions3.getReadPreference();
        int int7 = mongoClientOptions3.getMaxWaitTime();
        int int8 = mongoClientOptions3.getMaxConnectionIdleTime();
        int int9 = mongoClientOptions3.getLocalThreshold();
        int int10 = mongoClientOptions3.getMaxConnectionLifeTime();
        int int11 = mongoClientOptions3.getSocketTimeout();
        boolean boolean12 = mongoClientOptions3.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertNotNull(readPreference6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 15 + "'", int9 == 15);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test3049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3049");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        boolean boolean5 = mongoClientOptions3.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder19.threadsAllowedToBlockForConnectionMultiplier(100);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder37.build();
        int int39 = mongoClientOptions38.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern40 = mongoClientOptions38.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder41 = builder34.readConcern(readConcern40);
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder52 = builder48.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder57.build();
        boolean boolean59 = mongoClientOptions58.isSslEnabled();
        int int60 = mongoClientOptions58.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory61 = mongoClientOptions58.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder62 = builder54.dbEncoderFactory(dBEncoderFactory61);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder69 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions72 = builder71.build();
        int int73 = mongoClientOptions72.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern74 = mongoClientOptions72.getReadConcern();
        boolean boolean75 = mongoClientOptions72.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory76 = mongoClientOptions72.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder77 = builder66.dbEncoderFactory(dBEncoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder78 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions81 = builder80.build();
        int int82 = mongoClientOptions81.getSocketTimeout();
        int int83 = mongoClientOptions81.getThreadsAllowedToBlockForConnectionMultiplier();
        int int84 = mongoClientOptions81.getMaxWaitTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry85 = mongoClientOptions81.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder86 = builder66.codecRegistry(codecRegistry85);
        com.mongodb.MongoClientOptions.Builder builder87 = builder34.codecRegistry(codecRegistry85);
        com.mongodb.MongoClientOptions.Builder builder88 = builder29.codecRegistry(codecRegistry85);
        com.mongodb.MongoClientOptions.Builder builder89 = builder12.codecRegistry(codecRegistry85);
        com.mongodb.MongoClientOptions.Builder builder90 = builder12.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder92 = builder90.threadsAllowedToBlockForConnectionMultiplier((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10000 + "'", int39 == 10000);
        org.junit.Assert.assertNotNull(readConcern40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(mongoClientOptions72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10000 + "'", int73 == 10000);
        org.junit.Assert.assertNotNull(readConcern74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(mongoClientOptions81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 5 + "'", int83 == 5);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 120000 + "'", int84 == 120000);
        org.junit.Assert.assertNotNull(codecRegistry85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test3050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3050");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.connectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxConnectionIdleTime((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory34 = mongoClientOptions33.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder37.build();
        int int39 = mongoClientOptions38.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory40 = mongoClientOptions38.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern41 = mongoClientOptions38.getWriteConcern();
        boolean boolean42 = mongoClientOptions33.equals((java.lang.Object) writeConcern41);
        com.mongodb.MongoClientOptions.Builder builder43 = builder29.writeConcern(writeConcern41);
        com.mongodb.MongoClientOptions.Builder builder44 = builder14.writeConcern(writeConcern41);
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder44.build();
        com.mongodb.MongoClientOptions.Builder builder47 = builder44.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(dBDecoderFactory34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10000 + "'", int39 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory40);
        org.junit.Assert.assertNotNull(writeConcern41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test3051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3051");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(true);
        com.mongodb.event.CommandListener commandListener11 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder10.addCommandListener(commandListener11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test3052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3052");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: heartbeatFrequency must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test3053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3053");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getMaxConnectionIdleTime();
        java.lang.String str6 = mongoClientOptions3.getDescription();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.DBDecoderFactory dBDecoderFactory8 = mongoClientOptions3.getDbDecoderFactory();
        int int9 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory10 = mongoClientOptions3.getDbEncoderFactory();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions3.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(dBDecoderFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertNotNull(dBEncoderFactory10);
        org.junit.Assert.assertNotNull(socketFactory11);
    }

    @Test
    public void test3054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3054");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        java.lang.Integer int8 = mongoProperties0.getPort();
        java.lang.String str9 = mongoProperties0.getDatabase();
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setUri("");
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        mongoProperties0.setDatabase("mongodb://localhost/test");
        java.lang.Class<?> wildcardClass17 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str18 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str19 = mongoProperties0.getUri();
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb://localhost/test" + "'", str18, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test3055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3055");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        boolean boolean6 = mongoClientOptions3.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions3.getDbEncoderFactory();
        int int8 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        org.bson.codecs.configuration.CodecRegistry codecRegistry10 = mongoClientOptions3.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder12 = com.mongodb.MongoClientOptions.builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10000 + "'", int8 == 10000);
        org.junit.Assert.assertNotNull(codecRegistry10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test3056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3056");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions15.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions20.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern23 = mongoClientOptions20.getWriteConcern();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList24 = mongoClientOptions20.getCommandListeners();
        boolean boolean25 = mongoClientOptions20.isSslInvalidHostNameAllowed();
        boolean boolean26 = mongoClientOptions20.isSocketKeepAlive();
        com.mongodb.ReadConcern readConcern27 = mongoClientOptions20.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions20);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.requiredReplicaSetName("mongodb://localhost/test");
        boolean boolean31 = mongoClientOptions15.equals((java.lang.Object) "mongodb://localhost/test");
        org.bson.codecs.configuration.CodecRegistry codecRegistry32 = mongoClientOptions15.getCodecRegistry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
        org.junit.Assert.assertNotNull(writeConcern23);
        org.junit.Assert.assertNotNull(commandListenerList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(readConcern27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(codecRegistry32);
    }

    @Test
    public void test3057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3057");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        boolean boolean17 = mongoClientOptions16.isSslEnabled();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions16.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.dbEncoderFactory(dBEncoderFactory19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.maxWaitTime(27017);
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        boolean boolean35 = mongoClientOptions34.isSslEnabled();
        int int36 = mongoClientOptions34.getMaxConnectionIdleTime();
        java.lang.String str37 = mongoClientOptions34.getDescription();
        int int38 = mongoClientOptions34.getMinConnectionsPerHost();
        com.mongodb.DBDecoderFactory dBDecoderFactory39 = mongoClientOptions34.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder40 = builder30.dbDecoderFactory(dBDecoderFactory39);
        com.mongodb.MongoClientOptions.Builder builder42 = builder30.serverSelectionTimeout(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test3058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3058");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setAuthenticationDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getSocketTimeout();
        boolean boolean13 = mongoClientOptions11.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties0.createMongoClient(mongoClientOptions11, environment14);
        java.lang.String str16 = mongoProperties0.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties17.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties17.createMongoClient(mongoClientOptions20, environment21);
        java.lang.String str23 = mongoProperties17.getMongoClientDatabase();
        mongoProperties17.setHost("hi!");
        char[] charArray32 = new char[] { 'a', '4', '#', ' ', ' ', ' ' };
        mongoProperties17.setPassword(charArray32);
        mongoProperties0.setPassword(charArray32);
        java.lang.String str35 = mongoProperties0.getUsername();
        mongoProperties0.setPort((java.lang.Integer) 32);
        mongoProperties0.setUri("");
        java.lang.Class<?> wildcardClass40 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setGridFsDatabase("hi!");
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(wildcardClass40);
    }

    @Test
    public void test3059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3059");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        com.mongodb.ReadPreference readPreference6 = mongoClientOptions3.getReadPreference();
        boolean boolean7 = mongoClientOptions3.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.connectTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertNotNull(readPreference6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test3060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3060");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setAuthenticationDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getSocketTimeout();
        boolean boolean13 = mongoClientOptions11.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties0.createMongoClient(mongoClientOptions11, environment14);
        int int16 = mongoClientOptions11.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions11);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionIdleTime(500);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test3061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3061");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getMaxConnectionLifeTime();
        int int5 = mongoClientOptions3.getConnectionsPerHost();
        javax.net.SocketFactory socketFactory6 = mongoClientOptions3.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        boolean boolean8 = mongoClientOptions3.isSslInvalidHostNameAllowed();
        boolean boolean9 = mongoClientOptions3.isCursorFinalizerEnabled();
        int int10 = mongoClientOptions3.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNotNull(socketFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
    }

    @Test
    public void test3062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3062");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        boolean boolean18 = mongoClientOptions17.isSslEnabled();
        int int19 = mongoClientOptions17.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions17.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder21 = builder13.dbEncoderFactory(dBEncoderFactory20);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern27 = mongoClientOptions25.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder28 = builder13.readConcern(readConcern27);
        com.mongodb.MongoClientOptions.Builder builder29 = builder2.readConcern(readConcern27);
        com.mongodb.MongoClientOptions.Builder builder31 = builder2.maxConnectionIdleTime(1);
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        boolean boolean36 = mongoClientOptions35.isSslEnabled();
        int int37 = mongoClientOptions35.getMaxConnectionIdleTime();
        java.lang.String str38 = mongoClientOptions35.getDescription();
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions35);
        com.mongodb.DBDecoderFactory dBDecoderFactory40 = mongoClientOptions35.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder41 = builder31.dbDecoderFactory(dBDecoderFactory40);
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder44.build();
        int int46 = mongoClientOptions45.getMaxConnectionLifeTime();
        int int47 = mongoClientOptions45.getConnectionsPerHost();
        boolean boolean48 = mongoClientOptions45.isSocketKeepAlive();
        boolean boolean49 = mongoClientOptions45.isCursorFinalizerEnabled();
        java.lang.String str50 = mongoClientOptions45.getRequiredReplicaSetName();
        com.mongodb.ReadConcern readConcern51 = mongoClientOptions45.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder52 = builder31.readConcern(readConcern51);
        com.mongodb.MongoClientOptions.Builder builder54 = builder31.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder57.build();
        int int59 = mongoClientOptions58.getSocketTimeout();
        boolean boolean60 = mongoClientOptions58.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder61 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions58);
        com.mongodb.MongoClientOptions.Builder builder62 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions65 = builder62.build();
        com.mongodb.MongoClientOptions.Builder builder67 = builder62.connectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder71 = builder67.maxWaitTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder72 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions75 = builder74.build();
        int int76 = mongoClientOptions75.getConnectionsPerHost();
        int int77 = mongoClientOptions75.getHeartbeatSocketTimeout();
        java.lang.String str78 = mongoClientOptions75.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern79 = mongoClientOptions75.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder80 = builder67.writeConcern(writeConcern79);
        com.mongodb.MongoClientOptions.Builder builder81 = builder61.writeConcern(writeConcern79);
        com.mongodb.MongoClientOptions.Builder builder82 = builder31.writeConcern(writeConcern79);
        com.mongodb.MongoClientOptions.Builder builder84 = builder82.maxConnectionIdleTime(1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertNotNull(readConcern27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(dBDecoderFactory40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(readConcern51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(mongoClientOptions65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(mongoClientOptions75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 100 + "'", int77 == 100);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(writeConcern79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test3063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3063");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        int int5 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory23 = mongoClientOptions22.getDbDecoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions22.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = builder16.dbEncoderFactory(dBEncoderFactory24);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxWaitTime((int) (short) -1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertNotNull(dBDecoderFactory23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test3064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3064");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test3065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3065");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatSocketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        int int16 = mongoClientOptions15.getHeartbeatSocketTimeout();
        int int17 = mongoClientOptions15.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test3066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3066");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxConnectionLifeTime(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.heartbeatSocketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder7.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxWaitTime(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 500 + "'", int6 == 500);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test3067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3067");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getMinHeartbeatFrequency();
        int int7 = mongoClientOptions3.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern13 = mongoClientOptions11.getReadConcern();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions11.getReadPreference();
        com.mongodb.ReadConcern readConcern15 = mongoClientOptions11.getReadConcern();
        boolean boolean16 = mongoClientOptions3.equals((java.lang.Object) mongoClientOptions11);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions11);
        boolean boolean18 = mongoClientOptions11.isAlwaysUseMBeans();
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions11.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 500 + "'", int6 == 500);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
        org.junit.Assert.assertNotNull(readConcern13);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertNotNull(readConcern15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(readPreference19);
    }

    @Test
    public void test3068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3068");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        int int6 = mongoClientOptions3.getMinConnectionsPerHost();
        int int7 = mongoClientOptions3.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern8 = mongoClientOptions3.getWriteConcern();
        boolean boolean9 = mongoClientOptions3.isSslInvalidHostNameAllowed();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.DBDecoderFactory dBDecoderFactory12 = mongoClientOptions3.getDbDecoderFactory();
        int int13 = mongoClientOptions3.getHeartbeatConnectTimeout();
        int int14 = mongoClientOptions3.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertNotNull(writeConcern8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(dBDecoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
    }

    @Test
    public void test3069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3069");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        boolean boolean6 = mongoClientOptions3.isSocketKeepAlive();
        int int7 = mongoClientOptions3.getMaxConnectionIdleTime();
        int int8 = mongoClientOptions3.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test3070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3070");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        java.lang.String str6 = mongoClientOptions3.getRequiredReplicaSetName();
        org.bson.codecs.configuration.CodecRegistry codecRegistry7 = mongoClientOptions3.getCodecRegistry();
        java.lang.String str8 = mongoClientOptions3.getRequiredReplicaSetName();
        boolean boolean9 = mongoClientOptions3.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(codecRegistry7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test3071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3071");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getServerSelectionTimeout();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.WriteConcern writeConcern8 = mongoClientOptions3.getWriteConcern();
        int int9 = mongoClientOptions3.getConnectTimeout();
        int int10 = mongoClientOptions3.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 30000 + "'", int6 == 30000);
        org.junit.Assert.assertNotNull(writeConcern8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
    }

    @Test
    public void test3072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3072");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getLocalThreshold();
        int int5 = mongoClientOptions3.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatSocketTimeout((-1));
        boolean boolean19 = mongoClientOptions3.equals((java.lang.Object) builder14);
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions3.getDbDecoderFactory();
        int int21 = mongoClientOptions3.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
    }

    @Test
    public void test3073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3073");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder5 = builder2.connectionsPerHost((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: connectionPerHost must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
    }

    @Test
    public void test3074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3074");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getMinHeartbeatFrequency();
        int int7 = mongoClientOptions3.getMaxWaitTime();
        int int8 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory14 = mongoClientOptions12.getDbDecoderFactory();
        int int15 = mongoClientOptions12.getLocalThreshold();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions12.getCommandListeners();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions12);
        boolean boolean18 = mongoClientOptions3.equals((java.lang.Object) mongoClientOptions12);
        int int19 = mongoClientOptions3.getHeartbeatFrequency();
        int int20 = mongoClientOptions3.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 500 + "'", int6 == 500);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10000 + "'", int8 == 10000);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 15 + "'", int15 == 15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test3075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3075");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        com.mongodb.ReadPreference readPreference6 = mongoClientOptions3.getReadPreference();
        int int7 = mongoClientOptions3.getMaxWaitTime();
        int int8 = mongoClientOptions3.getMaxConnectionIdleTime();
        com.mongodb.WriteConcern writeConcern9 = mongoClientOptions3.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertNotNull(readPreference6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(writeConcern9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test3076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3076");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 0);
        mongoProperties0.setPort((java.lang.Integer) 500);
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getMaxConnectionLifeTime();
        int int13 = mongoClientOptions11.getConnectionsPerHost();
        boolean boolean14 = mongoClientOptions11.isSocketKeepAlive();
        boolean boolean15 = mongoClientOptions11.isSslInvalidHostNameAllowed();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions11);
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions11, environment17);
        mongoProperties0.setUri("");
        java.lang.String str21 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setUsername("test");
        char[] charArray24 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNull(charArray24);
    }

    @Test
    public void test3077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3077");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        com.mongodb.ReadPreference readPreference6 = mongoClientOptions3.getReadPreference();
        int int7 = mongoClientOptions3.getMaxWaitTime();
        boolean boolean8 = mongoClientOptions3.isSslEnabled();
        com.mongodb.DBDecoderFactory dBDecoderFactory9 = mongoClientOptions3.getDbDecoderFactory();
        int int10 = mongoClientOptions3.getMaxWaitTime();
        int int11 = mongoClientOptions3.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder12 = com.mongodb.MongoClientOptions.builder(mongoClientOptions3);
        boolean boolean13 = mongoClientOptions3.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertNotNull(readPreference6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 120000 + "'", int10 == 120000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test3078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3078");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        java.lang.String str6 = mongoClientOptions3.getRequiredReplicaSetName();
        boolean boolean7 = mongoClientOptions3.isAlwaysUseMBeans();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions3.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern15 = mongoClientOptions13.getReadConcern();
        int int16 = mongoClientOptions13.getMinConnectionsPerHost();
        boolean boolean17 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions13.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder19 = builder9.dbEncoderFactory(dBEncoderFactory18);
        com.mongodb.MongoClientOptions.Builder builder21 = builder9.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern27 = mongoClientOptions25.getReadConcern();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions25.getReadPreference();
        boolean boolean29 = mongoClientOptions25.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions25);
        int int31 = mongoClientOptions25.getMinConnectionsPerHost();
        com.mongodb.DBDecoderFactory dBDecoderFactory32 = mongoClientOptions25.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder33 = builder21.dbDecoderFactory(dBDecoderFactory32);
        com.mongodb.MongoClientOptions.Builder builder35 = builder21.maxConnectionLifeTime(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertNotNull(readConcern15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertNotNull(readConcern27);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test3079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3079");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        boolean boolean28 = mongoClientOptions27.isSslEnabled();
        int int29 = mongoClientOptions27.getHeartbeatSocketTimeout();
        int int30 = mongoClientOptions27.getMinHeartbeatFrequency();
        int int31 = mongoClientOptions27.getMaxConnectionLifeTime();
        int int32 = mongoClientOptions27.getHeartbeatSocketTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions27.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder23.dbDecoderFactory(dBDecoderFactory33);
        com.mongodb.MongoClientOptions.Builder builder35 = builder23.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions43 = builder42.build();
        int int44 = mongoClientOptions43.getHeartbeatFrequency();
        int int45 = mongoClientOptions43.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder46 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions43);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.heartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder52 = builder48.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder53 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions56 = builder55.build();
        int int57 = mongoClientOptions56.getSocketTimeout();
        boolean boolean58 = mongoClientOptions56.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory59 = mongoClientOptions56.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder60 = builder48.socketFactory(socketFactory59);
        com.mongodb.MongoClientOptions.Builder builder61 = builder39.socketFactory(socketFactory59);
        com.mongodb.MongoClientOptions.Builder builder62 = builder10.socketFactory(socketFactory59);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 500 + "'", int30 == 500);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoClientOptions43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10000 + "'", int44 == 10000);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoClientOptions56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(socketFactory59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test3080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3080");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setUsername("");
        mongoProperties0.setHost("hi!");
        char[] charArray5 = mongoProperties0.getPassword();
        char[] charArray6 = mongoProperties0.getPassword();
        java.lang.String str7 = mongoProperties0.getHost();
        mongoProperties0.setDatabase("hi!");
        java.lang.String str10 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern16 = mongoClientOptions14.getReadConcern();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions14.getReadPreference();
        boolean boolean18 = mongoClientOptions14.isCursorFinalizerEnabled();
        int int19 = mongoClientOptions14.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions14.getDbDecoderFactory();
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions14, environment21);
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertNotNull(readConcern16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertNotNull(mongoClient22);
    }

    @Test
    public void test3081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3081");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory5 = mongoClientOptions3.getDbDecoderFactory();
        int int6 = mongoClientOptions3.getLocalThreshold();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList7 = mongoClientOptions3.getCommandListeners();
        int int8 = mongoClientOptions3.getMaxConnectionLifeTime();
        boolean boolean9 = mongoClientOptions3.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 15 + "'", int6 == 15);
        org.junit.Assert.assertNotNull(commandListenerList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test3082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3082");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        java.lang.String str6 = mongoClientOptions3.getRequiredReplicaSetName();
        org.bson.codecs.configuration.CodecRegistry codecRegistry7 = mongoClientOptions3.getCodecRegistry();
        int int8 = mongoClientOptions3.getHeartbeatConnectTimeout();
        int int9 = mongoClientOptions3.getConnectionsPerHost();
        java.lang.String str10 = mongoClientOptions3.getRequiredReplicaSetName();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions3.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions3.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        boolean boolean14 = mongoClientOptions3.isSslEnabled();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions3.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(codecRegistry7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(socketFactory15);
    }

    @Test
    public void test3083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3083");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        boolean boolean11 = mongoClientOptions10.isSslEnabled();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions10.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.dbEncoderFactory(dBEncoderFactory13);
        com.mongodb.MongoClientOptions.Builder builder16 = builder6.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder6.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder6.maxConnectionIdleTime(30000);
        com.mongodb.MongoClientOptions.Builder builder22 = builder6.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test3084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3084");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatSocketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder36.build();
        boolean boolean38 = mongoClientOptions37.isSslEnabled();
        int int39 = mongoClientOptions37.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory40 = mongoClientOptions37.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder41 = builder33.dbEncoderFactory(dBEncoderFactory40);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.connectTimeout(30000);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder56 = builder52.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder57 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder61 = builder57.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder64 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions67 = builder66.build();
        boolean boolean68 = mongoClientOptions67.isSslEnabled();
        int int69 = mongoClientOptions67.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory70 = mongoClientOptions67.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder71 = builder63.dbEncoderFactory(dBEncoderFactory70);
        com.mongodb.MongoClientOptions.Builder builder72 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions75 = builder74.build();
        int int76 = mongoClientOptions75.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern77 = mongoClientOptions75.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder78 = builder63.readConcern(readConcern77);
        com.mongodb.MongoClientOptions.Builder builder79 = builder52.readConcern(readConcern77);
        com.mongodb.MongoClientOptions.Builder builder81 = builder52.maxConnectionIdleTime(1);
        com.mongodb.MongoClientOptions.Builder builder82 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder84 = builder82.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions85 = builder84.build();
        boolean boolean86 = mongoClientOptions85.isSslEnabled();
        int int87 = mongoClientOptions85.getMaxConnectionIdleTime();
        java.lang.String str88 = mongoClientOptions85.getDescription();
        com.mongodb.MongoClientOptions.Builder builder89 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions85);
        com.mongodb.DBDecoderFactory dBDecoderFactory90 = mongoClientOptions85.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder91 = builder81.dbDecoderFactory(dBDecoderFactory90);
        com.mongodb.MongoClientOptions.Builder builder92 = builder47.dbDecoderFactory(dBDecoderFactory90);
        com.mongodb.MongoClientOptions.Builder builder93 = builder20.dbDecoderFactory(dBDecoderFactory90);
        com.mongodb.MongoClientOptions.Builder builder95 = builder20.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder97 = builder95.serverSelectionTimeout((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(mongoClientOptions67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 100 + "'", int69 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(mongoClientOptions75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10000 + "'", int76 == 10000);
        org.junit.Assert.assertNotNull(readConcern77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(mongoClientOptions85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(dBDecoderFactory90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test3085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3085");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.serverSelectionTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test3086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3086");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        boolean boolean5 = mongoClientOptions3.isAlwaysUseMBeans();
        int int6 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern15 = mongoClientOptions13.getReadConcern();
        int int16 = mongoClientOptions13.getMinConnectionsPerHost();
        boolean boolean17 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions13.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder19 = builder7.dbEncoderFactory(dBEncoderFactory18);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions20.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertNotNull(readConcern15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
    }

    @Test
    public void test3087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3087");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setUsername("");
        mongoProperties0.setHost("hi!");
        char[] charArray5 = mongoProperties0.getPassword();
        mongoProperties0.setHost("");
        java.lang.String str8 = mongoProperties0.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory14 = mongoClientOptions12.getDbDecoderFactory();
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties0.createMongoClient(mongoClientOptions12, environment15);
        mongoProperties0.clearPassword();
        java.lang.String str18 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "test" + "'", str8, "test");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test3088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3088");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        int int5 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.minHeartbeatFrequency(20000);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.build();
        java.lang.String str14 = mongoClientOptions13.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test3089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3089");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getMinHeartbeatFrequency();
        int int7 = mongoClientOptions3.getMaxConnectionLifeTime();
        int int8 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions3.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 500 + "'", int6 == 500);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test3090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3090");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getServerSelectionTimeout();
        int int7 = mongoClientOptions3.getMinHeartbeatFrequency();
        org.bson.codecs.configuration.CodecRegistry codecRegistry8 = mongoClientOptions3.getCodecRegistry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 30000 + "'", int6 == 30000);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 500 + "'", int7 == 500);
        org.junit.Assert.assertNotNull(codecRegistry8);
    }

    @Test
    public void test3091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3091");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        java.lang.String str6 = mongoClientOptions3.getRequiredReplicaSetName();
        org.bson.codecs.configuration.CodecRegistry codecRegistry7 = mongoClientOptions3.getCodecRegistry();
        int int8 = mongoClientOptions3.getHeartbeatConnectTimeout();
        int int9 = mongoClientOptions3.getConnectionsPerHost();
        java.lang.String str10 = mongoClientOptions3.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        int int23 = mongoClientOptions22.getSocketTimeout();
        boolean boolean24 = mongoClientOptions22.isAlwaysUseMBeans();
        int int25 = mongoClientOptions22.getThreadsAllowedToBlockForConnectionMultiplier();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList26 = mongoClientOptions22.getCommandListeners();
        boolean boolean27 = mongoClientOptions17.equals((java.lang.Object) mongoClientOptions22);
        com.mongodb.DBDecoderFactory dBDecoderFactory28 = mongoClientOptions17.getDbDecoderFactory();
        int int29 = mongoClientOptions17.getHeartbeatConnectTimeout();
        boolean boolean30 = mongoClientOptions17.isAlwaysUseMBeans();
        com.mongodb.ReadPreference readPreference31 = mongoClientOptions17.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder32 = builder11.readPreference(readPreference31);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(codecRegistry7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(commandListenerList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dBDecoderFactory28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(readPreference31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test3092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3092");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setAuthenticationDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getSocketTimeout();
        boolean boolean13 = mongoClientOptions11.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties0.createMongoClient(mongoClientOptions11, environment14);
        boolean boolean16 = mongoClientOptions11.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions11);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern28 = mongoClientOptions26.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder29 = builder22.readConcern(readConcern28);
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder45.build();
        boolean boolean47 = mongoClientOptions46.isSslEnabled();
        int int48 = mongoClientOptions46.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory49 = mongoClientOptions46.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder50 = builder42.dbEncoderFactory(dBEncoderFactory49);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder57 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions60 = builder59.build();
        int int61 = mongoClientOptions60.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern62 = mongoClientOptions60.getReadConcern();
        boolean boolean63 = mongoClientOptions60.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory64 = mongoClientOptions60.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder65 = builder54.dbEncoderFactory(dBEncoderFactory64);
        com.mongodb.MongoClientOptions.Builder builder66 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions69 = builder68.build();
        int int70 = mongoClientOptions69.getSocketTimeout();
        int int71 = mongoClientOptions69.getThreadsAllowedToBlockForConnectionMultiplier();
        int int72 = mongoClientOptions69.getMaxWaitTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry73 = mongoClientOptions69.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder74 = builder54.codecRegistry(codecRegistry73);
        com.mongodb.MongoClientOptions.Builder builder75 = builder22.codecRegistry(codecRegistry73);
        com.mongodb.MongoClientOptions.Builder builder77 = builder75.minConnectionsPerHost(1);
        boolean boolean78 = mongoClientOptions11.equals((java.lang.Object) builder75);
        java.lang.String str79 = mongoClientOptions11.getDescription();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10000 + "'", int27 == 10000);
        org.junit.Assert.assertNotNull(readConcern28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(mongoClientOptions60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10000 + "'", int61 == 10000);
        org.junit.Assert.assertNotNull(readConcern62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(mongoClientOptions69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 5 + "'", int71 == 5);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 120000 + "'", int72 == 120000);
        org.junit.Assert.assertNotNull(codecRegistry73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str79);
    }

    @Test
    public void test3093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3093");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        boolean boolean5 = mongoClientOptions3.isAlwaysUseMBeans();
        java.lang.String str6 = mongoClientOptions3.getRequiredReplicaSetName();
        boolean boolean7 = mongoClientOptions3.isSocketKeepAlive();
        int int8 = mongoClientOptions3.getMaxWaitTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry9 = mongoClientOptions3.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 120000 + "'", int8 == 120000);
        org.junit.Assert.assertNotNull(codecRegistry9);
    }

    @Test
    public void test3094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3094");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.serverSelectionTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getHeartbeatFrequency();
        int int16 = mongoClientOptions14.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions14);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getSocketTimeout();
        boolean boolean25 = mongoClientOptions23.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions23.getSocketFactory();
        org.bson.codecs.configuration.CodecRegistry codecRegistry27 = mongoClientOptions23.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder28 = builder17.codecRegistry(codecRegistry27);
        com.mongodb.MongoClientOptions.Builder builder29 = builder8.codecRegistry(codecRegistry27);
        com.mongodb.MongoClientOptions.Builder builder31 = builder8.heartbeatSocketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder33 = builder8.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder35 = builder8.localThreshold(5);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertNotNull(codecRegistry27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test3095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3095");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getServerSelectionTimeout();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        int int8 = mongoClientOptions3.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        int int10 = mongoClientOptions3.getServerSelectionTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 30000 + "'", int6 == 30000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 30000 + "'", int10 == 30000);
    }

    @Test
    public void test3096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3096");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        boolean boolean5 = mongoClientOptions3.isAlwaysUseMBeans();
        int int6 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern17 = mongoClientOptions15.getReadConcern();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions15.getReadPreference();
        com.mongodb.ReadConcern readConcern19 = mongoClientOptions15.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder20 = builder9.readConcern(readConcern19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder9.localThreshold(30000);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getMaxConnectionLifeTime();
        int int28 = mongoClientOptions26.getConnectionsPerHost();
        boolean boolean29 = mongoClientOptions26.isSocketKeepAlive();
        boolean boolean30 = mongoClientOptions26.isCursorFinalizerEnabled();
        java.lang.String str31 = mongoClientOptions26.getRequiredReplicaSetName();
        com.mongodb.DBDecoderFactory dBDecoderFactory32 = mongoClientOptions26.getDbDecoderFactory();
        int int33 = mongoClientOptions26.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern34 = mongoClientOptions26.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder35 = builder22.writeConcern(writeConcern34);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        int int40 = mongoClientOptions39.getHeartbeatFrequency();
        int int41 = mongoClientOptions39.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions39);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder52 = builder48.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder54 = builder48.heartbeatConnectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder57.build();
        int int59 = mongoClientOptions58.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory60 = mongoClientOptions58.getDbDecoderFactory();
        int int61 = mongoClientOptions58.getLocalThreshold();
        com.mongodb.ReadPreference readPreference62 = mongoClientOptions58.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder63 = builder48.readPreference(readPreference62);
        com.mongodb.MongoClientOptions.Builder builder64 = builder22.readPreference(readPreference62);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(readConcern17);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(readConcern19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(dBDecoderFactory32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 120000 + "'", int33 == 120000);
        org.junit.Assert.assertNotNull(writeConcern34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10000 + "'", int40 == 10000);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10000 + "'", int59 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 15 + "'", int61 == 15);
        org.junit.Assert.assertNotNull(readPreference62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test3097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3097");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.clearPassword();
        java.lang.String str10 = mongoProperties0.getUsername();
        java.lang.String str11 = mongoProperties0.getUsername();
        mongoProperties0.setHost("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test3098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3098");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        java.lang.String str8 = mongoClientOptions7.getRequiredReplicaSetName();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions7.getWriteConcern();
        com.mongodb.DBDecoderFactory dBDecoderFactory12 = mongoClientOptions7.getDbDecoderFactory();
        boolean boolean13 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int14 = mongoClientOptions7.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertNotNull(dBDecoderFactory12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 500 + "'", int14 == 500);
    }

    @Test
    public void test3099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3099");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        int int6 = mongoClientOptions3.getMinConnectionsPerHost();
        int int7 = mongoClientOptions3.getLocalThreshold();
        boolean boolean8 = mongoClientOptions3.isAlwaysUseMBeans();
        com.mongodb.ReadPreference readPreference9 = mongoClientOptions3.getReadPreference();
        int int10 = mongoClientOptions3.getConnectTimeout();
        int int11 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        int int12 = mongoClientOptions3.getServerSelectionTimeout();
        int int13 = mongoClientOptions3.getConnectTimeout();
        int int14 = mongoClientOptions3.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(readPreference9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 30000 + "'", int12 == 30000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
    }

    @Test
    public void test3100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3100");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUsername("hi!");
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        java.lang.Integer int11 = mongoProperties0.getPort();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str14 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass15 = mongoProperties0.getFieldNamingStrategy();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties16.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties16.createMongoClient(mongoClientOptions19, environment20);
        java.lang.String str22 = mongoProperties16.getMongoClientDatabase();
        java.lang.String str23 = mongoProperties16.getGridFsDatabase();
        java.lang.Integer int24 = mongoProperties16.getPort();
        char[] charArray25 = mongoProperties16.getPassword();
        mongoProperties16.setHost("hi!");
        java.lang.Integer int28 = mongoProperties16.getPort();
        mongoProperties16.setHost("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties31 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties31.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions34 = null;
        org.springframework.core.env.Environment environment35 = null;
        com.mongodb.MongoClient mongoClient36 = mongoProperties31.createMongoClient(mongoClientOptions34, environment35);
        java.lang.String str37 = mongoProperties31.getMongoClientDatabase();
        mongoProperties31.setHost("hi!");
        char[] charArray46 = new char[] { 'a', '4', '#', ' ', ' ', ' ' };
        mongoProperties31.setPassword(charArray46);
        mongoProperties16.setPassword(charArray46);
        mongoProperties16.setUsername("mongodb://localhost/test");
        mongoProperties16.clearPassword();
        char[] charArray52 = mongoProperties16.getPassword();
        mongoProperties0.setPassword(charArray52);
        java.lang.String str54 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNull(charArray25);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(mongoClient36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "mongodb://localhost/test" + "'", str54, "mongodb://localhost/test");
    }

    @Test
    public void test3101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3101");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatSocketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        int int22 = mongoClientOptions21.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions21.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder24 = builder17.readConcern(readConcern23);
        com.mongodb.MongoClientOptions.Builder builder25 = builder8.readConcern(readConcern23);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder47 = builder43.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder51 = builder47.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder53 = builder47.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.maxWaitTime(120000);
        com.mongodb.MongoClientOptions.Builder builder57 = builder53.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder59 = builder53.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder60 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder62.build();
        int int64 = mongoClientOptions63.getConnectionsPerHost();
        int int65 = mongoClientOptions63.getHeartbeatSocketTimeout();
        boolean boolean67 = mongoClientOptions63.equals((java.lang.Object) 500);
        int int68 = mongoClientOptions63.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder69 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder75 = builder71.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder77 = builder71.maxConnectionIdleTime(1);
        boolean boolean78 = mongoClientOptions63.equals((java.lang.Object) builder77);
        org.bson.codecs.configuration.CodecRegistry codecRegistry79 = mongoClientOptions63.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder80 = builder53.codecRegistry(codecRegistry79);
        com.mongodb.MongoClientOptions.Builder builder81 = builder36.codecRegistry(codecRegistry79);
        com.mongodb.MongoClientOptions.Builder builder82 = builder25.codecRegistry(codecRegistry79);
        com.mongodb.MongoClientOptions.Builder builder84 = builder25.requiredReplicaSetName("hi!");
        com.mongodb.event.CommandListener commandListener85 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder86 = builder25.addCommandListener(commandListener85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
        org.junit.Assert.assertNotNull(readConcern23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoClientOptions63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10000 + "'", int68 == 10000);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(codecRegistry79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test3102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3102");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        boolean boolean5 = mongoClientOptions3.isAlwaysUseMBeans();
        int int6 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.ReadPreference readPreference7 = mongoClientOptions3.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(readPreference7);
    }

    @Test
    public void test3103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3103");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUsername("hi!");
        mongoProperties0.setPort((java.lang.Integer) 5);
        java.lang.String str12 = mongoProperties0.getGridFsDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties13.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions16 = null;
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties13.createMongoClient(mongoClientOptions16, environment17);
        java.lang.String str19 = mongoProperties13.getMongoClientDatabase();
        java.lang.String str20 = mongoProperties13.getGridFsDatabase();
        java.lang.Integer int21 = mongoProperties13.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties22.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties22.createMongoClient(mongoClientOptions25, environment26);
        java.lang.String str28 = mongoProperties22.getMongoClientDatabase();
        mongoProperties22.setHost("hi!");
        char[] charArray37 = new char[] { 'a', '4', '#', ' ', ' ', ' ' };
        mongoProperties22.setPassword(charArray37);
        mongoProperties13.setPassword(charArray37);
        mongoProperties0.setPassword(charArray37);
        mongoProperties0.setPort((java.lang.Integer) 5);
        mongoProperties0.setHost("test");
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[a, 4, #,  ,  ,  ]");
    }

    @Test
    public void test3104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3104");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        boolean boolean5 = mongoClientOptions3.isAlwaysUseMBeans();
        int int6 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern17 = mongoClientOptions15.getReadConcern();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions15.getReadPreference();
        com.mongodb.ReadConcern readConcern19 = mongoClientOptions15.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder20 = builder9.readConcern(readConcern19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder9.localThreshold(30000);
        com.mongodb.MongoClientOptions.Builder builder24 = builder9.localThreshold((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(readConcern17);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(readConcern19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test3105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3105");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        boolean boolean11 = mongoClientOptions10.isSslEnabled();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions10.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.dbEncoderFactory(dBEncoderFactory13);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern20 = mongoClientOptions18.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder21 = builder6.readConcern(readConcern20);
        com.mongodb.MongoClientOptions.Builder builder23 = builder6.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        int int28 = mongoClientOptions27.getMaxConnectionLifeTime();
        int int29 = mongoClientOptions27.getConnectionsPerHost();
        java.lang.String str30 = mongoClientOptions27.getDescription();
        com.mongodb.ReadConcern readConcern31 = mongoClientOptions27.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder32 = builder6.readConcern(readConcern31);
        com.mongodb.MongoClientOptions.Builder builder34 = builder6.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.description("");
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertNotNull(readConcern20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(readConcern31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
    }

    @Test
    public void test3106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3106");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        int int5 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.heartbeatConnectTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.maxConnectionIdleTime((-1));
        com.mongodb.MongoClientOptions.Builder builder15 = builder14.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder17 = builder14.cursorFinalizerEnabled(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test3107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3107");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        boolean boolean5 = mongoClientOptions3.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder19.threadsAllowedToBlockForConnectionMultiplier(100);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder37.build();
        int int39 = mongoClientOptions38.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern40 = mongoClientOptions38.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder41 = builder34.readConcern(readConcern40);
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder52 = builder48.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder57.build();
        boolean boolean59 = mongoClientOptions58.isSslEnabled();
        int int60 = mongoClientOptions58.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory61 = mongoClientOptions58.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder62 = builder54.dbEncoderFactory(dBEncoderFactory61);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder69 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions72 = builder71.build();
        int int73 = mongoClientOptions72.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern74 = mongoClientOptions72.getReadConcern();
        boolean boolean75 = mongoClientOptions72.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory76 = mongoClientOptions72.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder77 = builder66.dbEncoderFactory(dBEncoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder78 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions81 = builder80.build();
        int int82 = mongoClientOptions81.getSocketTimeout();
        int int83 = mongoClientOptions81.getThreadsAllowedToBlockForConnectionMultiplier();
        int int84 = mongoClientOptions81.getMaxWaitTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry85 = mongoClientOptions81.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder86 = builder66.codecRegistry(codecRegistry85);
        com.mongodb.MongoClientOptions.Builder builder87 = builder34.codecRegistry(codecRegistry85);
        com.mongodb.MongoClientOptions.Builder builder88 = builder29.codecRegistry(codecRegistry85);
        com.mongodb.MongoClientOptions.Builder builder89 = builder12.codecRegistry(codecRegistry85);
        com.mongodb.MongoClientOptions.Builder builder91 = builder12.maxConnectionIdleTime((int) (short) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10000 + "'", int39 == 10000);
        org.junit.Assert.assertNotNull(readConcern40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(mongoClientOptions72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10000 + "'", int73 == 10000);
        org.junit.Assert.assertNotNull(readConcern74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(mongoClientOptions81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 5 + "'", int83 == 5);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 120000 + "'", int84 == 120000);
        org.junit.Assert.assertNotNull(codecRegistry85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test3108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3108");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getSocketTimeout();
        boolean boolean10 = mongoClientOptions8.isAlwaysUseMBeans();
        int int11 = mongoClientOptions8.getThreadsAllowedToBlockForConnectionMultiplier();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList12 = mongoClientOptions8.getCommandListeners();
        boolean boolean13 = mongoClientOptions3.equals((java.lang.Object) mongoClientOptions8);
        int int14 = mongoClientOptions8.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern15 = mongoClientOptions8.getWriteConcern();
        java.lang.String str16 = mongoClientOptions8.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(commandListenerList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(writeConcern15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test3109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3109");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory5 = mongoClientOptions3.getDbDecoderFactory();
        int int6 = mongoClientOptions3.getLocalThreshold();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList7 = mongoClientOptions3.getCommandListeners();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        int int9 = mongoClientOptions3.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 15 + "'", int6 == 15);
        org.junit.Assert.assertNotNull(commandListenerList7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test3110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3110");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        boolean boolean5 = mongoClientOptions3.isSocketKeepAlive();
        int int6 = mongoClientOptions3.getMaxWaitTime();
        java.lang.String str7 = mongoClientOptions3.getRequiredReplicaSetName();
        int int8 = mongoClientOptions3.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 120000 + "'", int6 == 120000);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 120000 + "'", int8 == 120000);
    }

    @Test
    public void test3111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3111");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getMaxConnectionLifeTime();
        int int5 = mongoClientOptions3.getConnectionsPerHost();
        javax.net.SocketFactory socketFactory6 = mongoClientOptions3.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        boolean boolean8 = mongoClientOptions3.isSslInvalidHostNameAllowed();
        boolean boolean9 = mongoClientOptions3.isSslEnabled();
        com.mongodb.WriteConcern writeConcern10 = mongoClientOptions3.getWriteConcern();
        int int11 = mongoClientOptions3.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNotNull(socketFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(writeConcern10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test3112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3112");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        boolean boolean17 = mongoClientOptions16.isSslEnabled();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions16.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.dbEncoderFactory(dBEncoderFactory19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        int int31 = mongoClientOptions30.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern32 = mongoClientOptions30.getReadConcern();
        boolean boolean33 = mongoClientOptions30.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory34 = mongoClientOptions30.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder24.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        int int40 = mongoClientOptions39.getSocketTimeout();
        int int41 = mongoClientOptions39.getThreadsAllowedToBlockForConnectionMultiplier();
        int int42 = mongoClientOptions39.getMaxWaitTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry43 = mongoClientOptions39.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder44 = builder24.codecRegistry(codecRegistry43);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder47 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder47.build();
        com.mongodb.MongoClientOptions.Builder builder52 = builder47.connectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.minHeartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder55.build();
        int int59 = mongoClientOptions58.getConnectionsPerHost();
        int int60 = mongoClientOptions58.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean61 = mongoClientOptions58.isAlwaysUseMBeans();
        org.bson.codecs.configuration.CodecRegistry codecRegistry62 = mongoClientOptions58.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder63 = builder52.codecRegistry(codecRegistry62);
        com.mongodb.MongoClientOptions.Builder builder64 = builder44.codecRegistry(codecRegistry62);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder68 = builder64.threadsAllowedToBlockForConnectionMultiplier(32);
        com.mongodb.event.CommandListener commandListener69 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder70 = builder68.addCommandListener(commandListener69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10000 + "'", int31 == 10000);
        org.junit.Assert.assertNotNull(readConcern32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 120000 + "'", int42 == 120000);
        org.junit.Assert.assertNotNull(codecRegistry43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(codecRegistry62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test3113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3113");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        boolean boolean6 = mongoClientOptions3.isSocketKeepAlive();
        com.mongodb.ReadConcern readConcern7 = mongoClientOptions3.getReadConcern();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions3.getReadPreference();
        com.mongodb.WriteConcern writeConcern9 = mongoClientOptions3.getWriteConcern();
        int int10 = mongoClientOptions3.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        boolean boolean15 = mongoClientOptions14.isSslEnabled();
        int int16 = mongoClientOptions14.getMaxConnectionIdleTime();
        int int17 = mongoClientOptions14.getHeartbeatSocketTimeout();
        int int18 = mongoClientOptions14.getMaxConnectionIdleTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions14.getDbEncoderFactory();
        int int20 = mongoClientOptions14.getMinConnectionsPerHost();
        int int21 = mongoClientOptions14.getMaxWaitTime();
        boolean boolean22 = mongoClientOptions3.equals((java.lang.Object) mongoClientOptions14);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(readConcern7);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertNotNull(writeConcern9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 120000 + "'", int21 == 120000);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test3114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3114");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        boolean boolean5 = mongoClientOptions3.isAlwaysUseMBeans();
        int int6 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern15 = mongoClientOptions13.getReadConcern();
        int int16 = mongoClientOptions13.getMinConnectionsPerHost();
        boolean boolean17 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions13.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder19 = builder7.dbEncoderFactory(dBEncoderFactory18);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getThreadsAllowedToBlockForConnectionMultiplier();
        int int22 = mongoClientOptions20.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions20);
        int int24 = mongoClientOptions20.getLocalThreshold();
        boolean boolean25 = mongoClientOptions20.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertNotNull(readConcern15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 15 + "'", int24 == 15);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test3115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3115");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setAuthenticationDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getSocketTimeout();
        boolean boolean13 = mongoClientOptions11.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties0.createMongoClient(mongoClientOptions11, environment14);
        java.lang.Integer int16 = mongoProperties0.getPort();
        mongoProperties0.setUri("hi!");
        mongoProperties0.clearPassword();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        java.lang.String str22 = mongoProperties0.getUri();
        mongoProperties0.setHost("");
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
    }

    @Test
    public void test3116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3116");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxWaitTime(120000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.minHeartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder12.maxWaitTime(27017);
        com.mongodb.MongoClientOptions.Builder builder24 = builder12.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test3117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3117");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setAuthenticationDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getSocketTimeout();
        boolean boolean13 = mongoClientOptions11.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties0.createMongoClient(mongoClientOptions11, environment14);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getConnectionsPerHost();
        int int21 = mongoClientOptions19.getConnectTimeout();
        org.springframework.core.env.Environment environment22 = null;
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions19, environment22);
        boolean boolean24 = mongoClientOptions19.isSslEnabled();
        int int25 = mongoClientOptions19.getMinHeartbeatFrequency();
        int int26 = mongoClientOptions19.getSocketTimeout();
        int int27 = mongoClientOptions19.getConnectionsPerHost();
        java.lang.String str28 = mongoClientOptions19.getDescription();
        int int29 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 500 + "'", int25 == 500);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
    }

    @Test
    public void test3118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3118");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setUsername("");
        mongoProperties0.setHost("hi!");
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.String str7 = mongoProperties0.getUri();
        java.lang.String str8 = mongoProperties0.getHost();
        char[] charArray9 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(charArray9);
    }

    @Test
    public void test3119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3119");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getMaxConnectionIdleTime();
        int int6 = mongoClientOptions3.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder9.build();
        com.mongodb.MongoClientOptions.Builder builder14 = builder9.connectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.minHeartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.build();
        int int21 = mongoClientOptions20.getConnectionsPerHost();
        int int22 = mongoClientOptions20.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean23 = mongoClientOptions20.isAlwaysUseMBeans();
        org.bson.codecs.configuration.CodecRegistry codecRegistry24 = mongoClientOptions20.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder25 = builder14.codecRegistry(codecRegistry24);
        com.mongodb.MongoClientOptions.Builder builder26 = builder8.codecRegistry(codecRegistry24);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatSocketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(codecRegistry24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test3120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3120");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setUsername("test");
        org.junit.Assert.assertNotNull(mongoClient5);
    }

    @Test
    public void test3121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3121");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.connectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.minHeartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        boolean boolean11 = mongoClientOptions10.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions10);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getMaxConnectionLifeTime();
        int int18 = mongoClientOptions16.getConnectionsPerHost();
        javax.net.SocketFactory socketFactory19 = mongoClientOptions16.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.socketFactory(socketFactory19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxConnectionIdleTime(100);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketTimeout((int) (short) -1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(socketFactory19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test3122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3122");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        boolean boolean9 = mongoClientOptions3.isCursorFinalizerEnabled();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList10 = mongoClientOptions3.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions3.getDbDecoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList12 = mongoClientOptions3.getCommandListeners();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 500 + "'", int6 == 500);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(commandListenerList10);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertNotNull(commandListenerList12);
    }

    @Test
    public void test3123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3123");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        boolean boolean28 = mongoClientOptions27.isSslEnabled();
        int int29 = mongoClientOptions27.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory30 = mongoClientOptions27.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder31 = builder23.dbEncoderFactory(dBEncoderFactory30);
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        int int36 = mongoClientOptions35.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern37 = mongoClientOptions35.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder38 = builder23.readConcern(readConcern37);
        com.mongodb.MongoClientOptions.Builder builder40 = builder23.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.connectTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.maxWaitTime(20000);
        com.mongodb.MongoClientOptions.Builder builder45 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder47.build();
        int int49 = mongoClientOptions48.getConnectionsPerHost();
        int int50 = mongoClientOptions48.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder51 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions48);
        boolean boolean52 = mongoClientOptions48.isAlwaysUseMBeans();
        com.mongodb.ReadPreference readPreference53 = mongoClientOptions48.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder54 = builder42.readPreference(readPreference53);
        com.mongodb.MongoClientOptions.Builder builder55 = builder16.readPreference(readPreference53);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10000 + "'", int36 == 10000);
        org.junit.Assert.assertNotNull(readConcern37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10000 + "'", int50 == 10000);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(readPreference53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test3124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3124");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        boolean boolean5 = mongoClientOptions3.isAlwaysUseMBeans();
        int int6 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList7 = mongoClientOptions3.getCommandListeners();
        int int8 = mongoClientOptions3.getMaxConnectionLifeTime();
        int int9 = mongoClientOptions3.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions3.getReadPreference();
        boolean boolean11 = mongoClientOptions3.isSslInvalidHostNameAllowed();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(commandListenerList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 30000 + "'", int9 == 30000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test3125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3125");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        java.lang.Integer int8 = mongoProperties0.getPort();
        java.lang.String str9 = mongoProperties0.getDatabase();
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setUri("");
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        java.lang.Integer int15 = mongoProperties0.getPort();
        java.lang.String str16 = mongoProperties0.getDatabase();
        java.lang.String str17 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass18 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(wildcardClass18);
    }

    @Test
    public void test3126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3126");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        boolean boolean5 = mongoClientOptions3.isAlwaysUseMBeans();
        int int6 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList7 = mongoClientOptions3.getCommandListeners();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions3.getDbEncoderFactory();
        int int9 = mongoClientOptions3.getConnectTimeout();
        int int10 = mongoClientOptions3.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(commandListenerList7);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
    }

    @Test
    public void test3127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3127");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        boolean boolean5 = mongoClientOptions3.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory6 = mongoClientOptions3.getSocketFactory();
        org.bson.codecs.configuration.CodecRegistry codecRegistry7 = mongoClientOptions3.getCodecRegistry();
        java.lang.String str8 = mongoClientOptions3.getDescription();
        int int9 = mongoClientOptions3.getHeartbeatSocketTimeout();
        boolean boolean10 = mongoClientOptions3.isSslInvalidHostNameAllowed();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions3.getDbEncoderFactory();
        int int12 = mongoClientOptions3.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions3.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(socketFactory6);
        org.junit.Assert.assertNotNull(codecRegistry7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 30000 + "'", int12 == 30000);
        org.junit.Assert.assertNotNull(readPreference13);
    }

    @Test
    public void test3128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3128");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        boolean boolean9 = mongoClientOptions3.isCursorFinalizerEnabled();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList10 = mongoClientOptions3.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions3.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        javax.net.SocketFactory socketFactory13 = mongoClientOptions3.getSocketFactory();
        int int14 = mongoClientOptions3.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 500 + "'", int6 == 500);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(commandListenerList10);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertNotNull(socketFactory13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
    }

    @Test
    public void test3129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3129");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getMaxConnectionIdleTime();
        java.lang.String str6 = mongoClientOptions3.getDescription();
        java.lang.String str7 = mongoClientOptions3.getRequiredReplicaSetName();
        boolean boolean8 = mongoClientOptions3.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.WriteConcern writeConcern10 = mongoClientOptions3.getWriteConcern();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions3.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(writeConcern10);
        org.junit.Assert.assertNotNull(socketFactory11);
    }

    @Test
    public void test3130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3130");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getMaxConnectionIdleTime();
        int int6 = mongoClientOptions3.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        int int8 = mongoClientOptions3.getMaxWaitTime();
        int int9 = mongoClientOptions3.getSocketTimeout();
        int int10 = mongoClientOptions3.getHeartbeatFrequency();
        org.bson.codecs.configuration.CodecRegistry codecRegistry11 = mongoClientOptions3.getCodecRegistry();
        boolean boolean12 = mongoClientOptions3.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 120000 + "'", int8 == 120000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(codecRegistry11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test3131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3131");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        int int6 = mongoClientOptions3.getMaxConnectionIdleTime();
        int int7 = mongoClientOptions3.getMinConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions3.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference9 = mongoClientOptions3.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNotNull(readPreference9);
    }

    @Test
    public void test3132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3132");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        boolean boolean17 = mongoClientOptions16.isSslEnabled();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions16.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.dbEncoderFactory(dBEncoderFactory19);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder27.threadsAllowedToBlockForConnectionMultiplier(100);
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder43.build();
        boolean boolean45 = mongoClientOptions44.isSslEnabled();
        int int46 = mongoClientOptions44.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory47 = mongoClientOptions44.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder48 = builder40.dbEncoderFactory(dBEncoderFactory47);
        com.mongodb.MongoClientOptions.Builder builder49 = builder27.dbEncoderFactory(dBEncoderFactory47);
        com.mongodb.MongoClientOptions.Builder builder50 = builder12.dbEncoderFactory(dBEncoderFactory47);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder54 = builder50.socketTimeout(35);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test3133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3133");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        java.lang.String str6 = mongoClientOptions3.getRequiredReplicaSetName();
        int int7 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions3.getDbEncoderFactory();
        int int9 = mongoClientOptions3.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10000 + "'", int7 == 10000);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 15 + "'", int9 == 15);
    }

    @Test
    public void test3134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3134");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        java.lang.String str6 = mongoClientOptions3.getRequiredReplicaSetName();
        org.bson.codecs.configuration.CodecRegistry codecRegistry7 = mongoClientOptions3.getCodecRegistry();
        int int8 = mongoClientOptions3.getHeartbeatConnectTimeout();
        int int9 = mongoClientOptions3.getConnectionsPerHost();
        int int10 = mongoClientOptions3.getConnectTimeout();
        int int11 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        int int12 = mongoClientOptions3.getMaxWaitTime();
        int int13 = mongoClientOptions3.getMaxConnectionLifeTime();
        int int14 = mongoClientOptions3.getMinHeartbeatFrequency();
        int int15 = mongoClientOptions3.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(codecRegistry7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 500 + "'", int14 == 500);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
    }

    @Test
    public void test3135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3135");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getMinHeartbeatFrequency();
        int int7 = mongoClientOptions3.getMaxConnectionLifeTime();
        int int8 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions3.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        java.lang.String str12 = mongoClientOptions3.getRequiredReplicaSetName();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList13 = mongoClientOptions3.getCommandListeners();
        int int14 = mongoClientOptions3.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        int int16 = mongoClientOptions3.getServerSelectionTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 500 + "'", int6 == 500);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(commandListenerList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 30000 + "'", int16 == 30000);
    }

    @Test
    public void test3136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3136");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.serverSelectionTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test3137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3137");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setUsername("");
        mongoProperties0.setHost("hi!");
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setDatabase("mongodb://localhost/test");
        mongoProperties0.setDatabase("");
        java.lang.Class<?> wildcardClass10 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str11 = mongoProperties0.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties12.setDatabase("hi!");
        mongoProperties12.setDatabase("hi!");
        java.lang.String str17 = mongoProperties12.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        int int22 = mongoClientOptions21.getMaxConnectionLifeTime();
        int int23 = mongoClientOptions21.getConnectionsPerHost();
        java.lang.String str24 = mongoClientOptions21.getDescription();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties12.createMongoClient(mongoClientOptions21, environment25);
        java.lang.Class<?> wildcardClass27 = mongoProperties12.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass28 = mongoProperties12.getFieldNamingStrategy();
        mongoProperties12.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties30 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties30.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions33 = null;
        org.springframework.core.env.Environment environment34 = null;
        com.mongodb.MongoClient mongoClient35 = mongoProperties30.createMongoClient(mongoClientOptions33, environment34);
        java.lang.String str36 = mongoProperties30.getMongoClientDatabase();
        java.lang.String str37 = mongoProperties30.getGridFsDatabase();
        mongoProperties30.setUsername("hi!");
        mongoProperties30.setUri("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties42 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties42.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions45 = null;
        org.springframework.core.env.Environment environment46 = null;
        com.mongodb.MongoClient mongoClient47 = mongoProperties42.createMongoClient(mongoClientOptions45, environment46);
        java.lang.String str48 = mongoProperties42.getMongoClientDatabase();
        mongoProperties42.setHost("hi!");
        char[] charArray57 = new char[] { 'a', '4', '#', ' ', ' ', ' ' };
        mongoProperties42.setPassword(charArray57);
        char[] charArray59 = mongoProperties42.getPassword();
        java.lang.String str60 = mongoProperties42.getGridFsDatabase();
        char[] charArray61 = mongoProperties42.getPassword();
        mongoProperties30.setPassword(charArray61);
        mongoProperties12.setPassword(charArray61);
        mongoProperties0.setPassword(charArray61);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(mongoClient47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[a, 4, #,  ,  ,  ]");
    }

    @Test
    public void test3138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3138");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str8 = mongoProperties0.getHost();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test3139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3139");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        boolean boolean17 = mongoClientOptions16.isSslEnabled();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions16.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.dbEncoderFactory(dBEncoderFactory19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.connectTimeout(30000);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.description("");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxConnectionIdleTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.requiredReplicaSetName("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test3140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3140");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getMaxConnectionLifeTime();
        int int5 = mongoClientOptions3.getConnectionsPerHost();
        javax.net.SocketFactory socketFactory6 = mongoClientOptions3.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        boolean boolean8 = mongoClientOptions3.isSslInvalidHostNameAllowed();
        boolean boolean9 = mongoClientOptions3.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.connectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.sslEnabled(true);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties22.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties22.createMongoClient(mongoClientOptions25, environment26);
        java.lang.String str28 = mongoProperties22.getMongoClientDatabase();
        java.lang.String str29 = mongoProperties22.getGridFsDatabase();
        mongoProperties22.setUsername("hi!");
        java.lang.String str32 = mongoProperties22.getUsername();
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions36);
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties22.createMongoClient(mongoClientOptions36, environment38);
        int int40 = mongoClientOptions36.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory41 = mongoClientOptions36.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder42 = builder19.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder43 = builder10.socketFactory(socketFactory41);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNotNull(socketFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 20000 + "'", int40 == 20000);
        org.junit.Assert.assertNotNull(socketFactory41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test3141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3141");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getLocalThreshold();
        int int5 = mongoClientOptions3.getHeartbeatConnectTimeout();
        int int6 = mongoClientOptions3.getMaxWaitTime();
        int int7 = mongoClientOptions3.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 120000 + "'", int6 == 120000);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test3142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3142");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getSocketTimeout();
        int int7 = mongoClientOptions3.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry8 = mongoClientOptions3.getCodecRegistry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(codecRegistry8);
    }

    @Test
    public void test3143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3143");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        boolean boolean5 = mongoClientOptions3.isSocketKeepAlive();
        int int6 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int7 = mongoClientOptions3.getConnectTimeout();
        int int8 = mongoClientOptions3.getMaxConnectionLifeTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory9 = mongoClientOptions3.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10000 + "'", int7 == 10000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory9);
    }

    @Test
    public void test3144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3144");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.connectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.minHeartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getMaxConnectionLifeTime();
        int int13 = mongoClientOptions11.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry14 = mongoClientOptions11.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder15 = builder5.codecRegistry(codecRegistry14);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder5.build();
        boolean boolean17 = mongoClientOptions16.isSslEnabled();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions16.getWriteConcern();
        int int19 = mongoClientOptions16.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(codecRegistry14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
    }

    @Test
    public void test3145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3145");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getMaxConnectionLifeTime();
        int int5 = mongoClientOptions3.getConnectionsPerHost();
        javax.net.SocketFactory socketFactory6 = mongoClientOptions3.getSocketFactory();
        javax.net.SocketFactory socketFactory7 = mongoClientOptions3.getSocketFactory();
        com.mongodb.ReadConcern readConcern8 = mongoClientOptions3.getReadConcern();
        javax.net.SocketFactory socketFactory9 = mongoClientOptions3.getSocketFactory();
        int int10 = mongoClientOptions3.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNotNull(socketFactory6);
        org.junit.Assert.assertNotNull(socketFactory7);
        org.junit.Assert.assertNotNull(readConcern8);
        org.junit.Assert.assertNotNull(socketFactory9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
    }

    @Test
    public void test3146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3146");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        int int10 = mongoClientOptions9.getMaxConnectionLifeTime();
        int int11 = mongoClientOptions9.getConnectionsPerHost();
        java.lang.String str12 = mongoClientOptions9.getDescription();
        org.springframework.core.env.Environment environment13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties0.createMongoClient(mongoClientOptions9, environment13);
        int int15 = mongoClientOptions9.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions9);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.localThreshold((int) (byte) 10);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test3147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3147");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        boolean boolean7 = mongoClientOptions3.equals((java.lang.Object) 500);
        int int8 = mongoClientOptions3.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.maxConnectionIdleTime(1);
        boolean boolean18 = mongoClientOptions3.equals((java.lang.Object) builder17);
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions3.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        boolean boolean21 = mongoClientOptions3.isSocketKeepAlive();
        boolean boolean22 = mongoClientOptions3.isCursorFinalizerEnabled();
        int int23 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int24 = mongoClientOptions3.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10000 + "'", int8 == 10000);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 500 + "'", int24 == 500);
    }

    @Test
    public void test3148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3148");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        java.lang.Integer int8 = mongoProperties0.getPort();
        mongoProperties0.setUsername("hi!");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getConnectionsPerHost();
        int int16 = mongoClientOptions14.getHeartbeatSocketTimeout();
        java.lang.String str17 = mongoClientOptions14.getRequiredReplicaSetName();
        org.bson.codecs.configuration.CodecRegistry codecRegistry18 = mongoClientOptions14.getCodecRegistry();
        java.lang.String str19 = mongoClientOptions14.getRequiredReplicaSetName();
        boolean boolean20 = mongoClientOptions14.isAlwaysUseMBeans();
        com.mongodb.ReadPreference readPreference21 = mongoClientOptions14.getReadPreference();
        int int22 = mongoClientOptions14.getMaxConnectionIdleTime();
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions14, environment23);
        mongoProperties0.clearPassword();
        mongoProperties0.setUsername("hi!");
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(codecRegistry18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(readPreference21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(mongoClient24);
    }

    @Test
    public void test3149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3149");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        int int5 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        int int7 = mongoClientOptions3.getSocketTimeout();
        int int8 = mongoClientOptions3.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern21 = mongoClientOptions19.getReadConcern();
        int int22 = mongoClientOptions19.getMinConnectionsPerHost();
        int int23 = mongoClientOptions19.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern24 = mongoClientOptions19.getWriteConcern();
        boolean boolean25 = mongoClientOptions13.equals((java.lang.Object) writeConcern24);
        com.mongodb.DBEncoderFactory dBEncoderFactory26 = mongoClientOptions13.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder27 = builder9.dbEncoderFactory(dBEncoderFactory26);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.sslInvalidHostNameAllowed(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 120000 + "'", int8 == 120000);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
        org.junit.Assert.assertNotNull(readConcern21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 120000 + "'", int23 == 120000);
        org.junit.Assert.assertNotNull(writeConcern24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test3150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3150");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getMaxConnectionIdleTime();
        int int6 = mongoClientOptions3.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.connectTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.threadsAllowedToBlockForConnectionMultiplier(30000);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionLifeTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.minConnectionsPerHost((int) '4');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test3151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3151");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        boolean boolean7 = mongoClientOptions3.equals((java.lang.Object) 500);
        int int8 = mongoClientOptions3.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.maxConnectionIdleTime(1);
        boolean boolean18 = mongoClientOptions3.equals((java.lang.Object) builder17);
        int int19 = mongoClientOptions3.getConnectionsPerHost();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList20 = mongoClientOptions3.getCommandListeners();
        com.mongodb.WriteConcern writeConcern21 = mongoClientOptions3.getWriteConcern();
        boolean boolean22 = mongoClientOptions3.isSocketKeepAlive();
        boolean boolean23 = mongoClientOptions3.isSslInvalidHostNameAllowed();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10000 + "'", int8 == 10000);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(commandListenerList20);
        org.junit.Assert.assertNotNull(writeConcern21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test3152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3152");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.localThreshold(35);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test3153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3153");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setUsername("");
        mongoProperties0.setHost("hi!");
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.String str7 = mongoProperties0.getUri();
        mongoProperties0.setUsername("hi!");
        mongoProperties0.setGridFsDatabase("hi!");
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
    }

    @Test
    public void test3154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3154");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setAuthenticationDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getSocketTimeout();
        boolean boolean13 = mongoClientOptions11.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties0.createMongoClient(mongoClientOptions11, environment14);
        java.lang.String str16 = mongoProperties0.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties17.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties17.createMongoClient(mongoClientOptions20, environment21);
        java.lang.String str23 = mongoProperties17.getMongoClientDatabase();
        mongoProperties17.setHost("hi!");
        char[] charArray32 = new char[] { 'a', '4', '#', ' ', ' ', ' ' };
        mongoProperties17.setPassword(charArray32);
        mongoProperties0.setPassword(charArray32);
        mongoProperties0.setHost("hi!");
        java.lang.Integer int37 = mongoProperties0.getPort();
        mongoProperties0.setGridFsDatabase("");
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNull(int37);
    }

    @Test
    public void test3155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3155");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUsername("hi!");
        mongoProperties0.setPort((java.lang.Integer) 5);
        java.lang.String str12 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        boolean boolean17 = mongoClientOptions16.isSslEnabled();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions16.getMinHeartbeatFrequency();
        int int20 = mongoClientOptions16.getMaxWaitTime();
        int int21 = mongoClientOptions16.getServerSelectionTimeout();
        org.springframework.core.env.Environment environment22 = null;
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions16, environment22);
        char[] charArray24 = mongoProperties0.getPassword();
        java.lang.String str25 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 500 + "'", int19 == 500);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 120000 + "'", int20 == 120000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 30000 + "'", int21 == 30000);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertNull(charArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
    }

    @Test
    public void test3156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3156");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        int int5 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder8.build();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions15.getCommandListeners();
        com.mongodb.WriteConcern writeConcern17 = mongoClientOptions15.getWriteConcern();
        int int18 = mongoClientOptions15.getHeartbeatConnectTimeout();
        int int19 = mongoClientOptions15.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertNotNull(writeConcern17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
    }

    @Test
    public void test3157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3157");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder17 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatConnectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.heartbeatConnectTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.description("test");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.minConnectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.localThreshold((int) '#');
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.maxConnectionIdleTime((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions43 = builder40.build();
        com.mongodb.ReadConcern readConcern44 = mongoClientOptions43.getReadConcern();
        int int45 = mongoClientOptions43.getLocalThreshold();
        com.mongodb.DBEncoderFactory dBEncoderFactory46 = mongoClientOptions43.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder47 = builder23.dbEncoderFactory(dBEncoderFactory46);
        com.mongodb.MongoClientOptions.Builder builder49 = builder23.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoClientOptions43);
        org.junit.Assert.assertNotNull(readConcern44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 15 + "'", int45 == 15);
        org.junit.Assert.assertNotNull(dBEncoderFactory46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test3158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3158");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        int int5 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        org.bson.codecs.configuration.CodecRegistry codecRegistry6 = mongoClientOptions3.getCodecRegistry();
        int int7 = mongoClientOptions3.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder8 = com.mongodb.MongoClientOptions.builder(mongoClientOptions3);
        int int9 = mongoClientOptions3.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getMaxConnectionLifeTime();
        boolean boolean15 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        com.mongodb.ReadConcern readConcern16 = mongoClientOptions13.getReadConcern();
        int int17 = mongoClientOptions13.getMaxConnectionIdleTime();
        boolean boolean18 = mongoClientOptions3.equals((java.lang.Object) int17);
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions3.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertNotNull(codecRegistry6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(readConcern16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(writeConcern19);
    }

    @Test
    public void test3159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3159");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        boolean boolean6 = mongoClientOptions3.isSocketKeepAlive();
        com.mongodb.ReadConcern readConcern7 = mongoClientOptions3.getReadConcern();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions3.getReadPreference();
        int int9 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int10 = mongoClientOptions3.getSocketTimeout();
        int int11 = mongoClientOptions3.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(readConcern7);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test3160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3160");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.connectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.minHeartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getMaxConnectionLifeTime();
        int int13 = mongoClientOptions11.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry14 = mongoClientOptions11.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder15 = builder5.codecRegistry(codecRegistry14);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder5.build();
        boolean boolean17 = mongoClientOptions16.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions16);
        int int19 = mongoClientOptions16.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(codecRegistry14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
    }

    @Test
    public void test3161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3161");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory5 = mongoClientOptions3.getDbDecoderFactory();
        int int6 = mongoClientOptions3.getLocalThreshold();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList7 = mongoClientOptions3.getCommandListeners();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        int int9 = mongoClientOptions3.getHeartbeatConnectTimeout();
        int int10 = mongoClientOptions3.getConnectionsPerHost();
        boolean boolean11 = mongoClientOptions3.isSslEnabled();
        int int12 = mongoClientOptions3.getHeartbeatFrequency();
        int int13 = mongoClientOptions3.getConnectionsPerHost();
        boolean boolean14 = mongoClientOptions3.isAlwaysUseMBeans();
        boolean boolean15 = mongoClientOptions3.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 15 + "'", int6 == 15);
        org.junit.Assert.assertNotNull(commandListenerList7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test3162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3162");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        boolean boolean6 = mongoClientOptions3.isSocketKeepAlive();
        com.mongodb.ReadConcern readConcern7 = mongoClientOptions3.getReadConcern();
        org.bson.codecs.configuration.CodecRegistry codecRegistry8 = mongoClientOptions3.getCodecRegistry();
        boolean boolean9 = mongoClientOptions3.isSslInvalidHostNameAllowed();
        boolean boolean10 = mongoClientOptions3.isCursorFinalizerEnabled();
        int int11 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(readConcern7);
        org.junit.Assert.assertNotNull(codecRegistry8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
    }

    @Test
    public void test3163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3163");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getConnectTimeout();
        java.lang.String str7 = mongoClientOptions3.getDescription();
        int int8 = mongoClientOptions3.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
    }

    @Test
    public void test3164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3164");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        int int6 = mongoClientOptions3.getMinConnectionsPerHost();
        int int7 = mongoClientOptions3.getMaxWaitTime();
        boolean boolean8 = mongoClientOptions3.isSslEnabled();
        int int9 = mongoClientOptions3.getConnectionsPerHost();
        boolean boolean10 = mongoClientOptions3.isAlwaysUseMBeans();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions3.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory12 = mongoClientOptions3.getDbDecoderFactory();
        java.lang.String str13 = mongoClientOptions3.getRequiredReplicaSetName();
        int int14 = mongoClientOptions3.getSocketTimeout();
        int int15 = mongoClientOptions3.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(dBDecoderFactory12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test3165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3165");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        boolean boolean5 = mongoClientOptions3.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder19.threadsAllowedToBlockForConnectionMultiplier(100);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder37.build();
        int int39 = mongoClientOptions38.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern40 = mongoClientOptions38.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder41 = builder34.readConcern(readConcern40);
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder52 = builder48.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder57.build();
        boolean boolean59 = mongoClientOptions58.isSslEnabled();
        int int60 = mongoClientOptions58.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory61 = mongoClientOptions58.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder62 = builder54.dbEncoderFactory(dBEncoderFactory61);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder69 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions72 = builder71.build();
        int int73 = mongoClientOptions72.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern74 = mongoClientOptions72.getReadConcern();
        boolean boolean75 = mongoClientOptions72.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory76 = mongoClientOptions72.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder77 = builder66.dbEncoderFactory(dBEncoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder78 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions81 = builder80.build();
        int int82 = mongoClientOptions81.getSocketTimeout();
        int int83 = mongoClientOptions81.getThreadsAllowedToBlockForConnectionMultiplier();
        int int84 = mongoClientOptions81.getMaxWaitTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry85 = mongoClientOptions81.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder86 = builder66.codecRegistry(codecRegistry85);
        com.mongodb.MongoClientOptions.Builder builder87 = builder34.codecRegistry(codecRegistry85);
        com.mongodb.MongoClientOptions.Builder builder88 = builder29.codecRegistry(codecRegistry85);
        com.mongodb.MongoClientOptions.Builder builder89 = builder12.codecRegistry(codecRegistry85);
        com.mongodb.MongoClientOptions.Builder builder91 = builder12.serverSelectionTimeout((int) (short) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10000 + "'", int39 == 10000);
        org.junit.Assert.assertNotNull(readConcern40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(mongoClientOptions72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10000 + "'", int73 == 10000);
        org.junit.Assert.assertNotNull(readConcern74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(mongoClientOptions81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 5 + "'", int83 == 5);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 120000 + "'", int84 == 120000);
        org.junit.Assert.assertNotNull(codecRegistry85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test3166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3166");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.threadsAllowedToBlockForConnectionMultiplier(100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatFrequency((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test3167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3167");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.connectTimeout(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test3168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3168");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionLifeTime(500);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getSocketTimeout();
        java.lang.String str18 = mongoClientOptions16.getDescription();
        int int19 = mongoClientOptions16.getThreadsAllowedToBlockForConnectionMultiplier();
        int int20 = mongoClientOptions16.getServerSelectionTimeout();
        int int21 = mongoClientOptions16.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern22 = mongoClientOptions16.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder23 = builder12.readConcern(readConcern22);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxWaitTime(5);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.sslInvalidHostNameAllowed(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 30000 + "'", int20 == 30000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertNotNull(readConcern22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test3169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3169");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getConnectTimeout();
        int int7 = mongoClientOptions3.getMaxConnectionLifeTime();
        int int8 = mongoClientOptions3.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
    }

    @Test
    public void test3170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3170");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        boolean boolean17 = mongoClientOptions16.isSslEnabled();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions16.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.dbEncoderFactory(dBEncoderFactory19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxConnectionLifeTime((int) (short) -1);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.connectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder44.build();
        int int46 = mongoClientOptions45.getSocketTimeout();
        boolean boolean47 = mongoClientOptions45.isAlwaysUseMBeans();
        int int48 = mongoClientOptions45.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder49 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions45);
        int int50 = mongoClientOptions45.getLocalThreshold();
        org.bson.codecs.configuration.CodecRegistry codecRegistry51 = mongoClientOptions45.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder52 = builder41.codecRegistry(codecRegistry51);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.maxWaitTime(5);
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder57.build();
        int int59 = mongoClientOptions58.getConnectionsPerHost();
        int int60 = mongoClientOptions58.getHeartbeatSocketTimeout();
        java.lang.String str61 = mongoClientOptions58.getRequiredReplicaSetName();
        boolean boolean62 = mongoClientOptions58.isAlwaysUseMBeans();
        com.mongodb.DBEncoderFactory dBEncoderFactory63 = mongoClientOptions58.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder64 = builder52.dbEncoderFactory(dBEncoderFactory63);
        com.mongodb.MongoClientOptions.Builder builder65 = builder32.dbEncoderFactory(dBEncoderFactory63);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 15 + "'", int50 == 15);
        org.junit.Assert.assertNotNull(codecRegistry51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test3171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3171");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        boolean boolean7 = mongoClientOptions3.equals((java.lang.Object) 500);
        int int8 = mongoClientOptions3.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.requiredReplicaSetName("test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10000 + "'", int8 == 10000);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test3172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3172");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        java.lang.Integer int8 = mongoProperties0.getPort();
        char[] charArray9 = mongoProperties0.getPassword();
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str11 = mongoProperties0.getDatabase();
        java.lang.String str12 = mongoProperties0.getDatabase();
        java.lang.String str13 = mongoProperties0.getGridFsDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties14.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions17 = null;
        org.springframework.core.env.Environment environment18 = null;
        com.mongodb.MongoClient mongoClient19 = mongoProperties14.createMongoClient(mongoClientOptions17, environment18);
        mongoProperties14.setAuthenticationDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getSocketTimeout();
        boolean boolean27 = mongoClientOptions25.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment28 = null;
        com.mongodb.MongoClient mongoClient29 = mongoProperties14.createMongoClient(mongoClientOptions25, environment28);
        java.lang.String str30 = mongoProperties14.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties31 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties31.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions34 = null;
        org.springframework.core.env.Environment environment35 = null;
        com.mongodb.MongoClient mongoClient36 = mongoProperties31.createMongoClient(mongoClientOptions34, environment35);
        java.lang.String str37 = mongoProperties31.getMongoClientDatabase();
        mongoProperties31.setHost("hi!");
        char[] charArray46 = new char[] { 'a', '4', '#', ' ', ' ', ' ' };
        mongoProperties31.setPassword(charArray46);
        char[] charArray48 = mongoProperties31.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties49 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties49.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions52 = null;
        org.springframework.core.env.Environment environment53 = null;
        com.mongodb.MongoClient mongoClient54 = mongoProperties49.createMongoClient(mongoClientOptions52, environment53);
        java.lang.String str55 = mongoProperties49.getMongoClientDatabase();
        mongoProperties49.setHost("hi!");
        char[] charArray64 = new char[] { 'a', '4', '#', ' ', ' ', ' ' };
        mongoProperties49.setPassword(charArray64);
        char[] charArray66 = mongoProperties49.getPassword();
        mongoProperties49.setHost("");
        char[] charArray69 = mongoProperties49.getPassword();
        mongoProperties31.setPassword(charArray69);
        mongoProperties14.setPassword(charArray69);
        mongoProperties0.setPassword(charArray69);
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(charArray9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(mongoClient19);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(mongoClient36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNotNull(mongoClient54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[a, 4, #,  ,  ,  ]");
    }

    @Test
    public void test3173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3173");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        javax.net.SocketFactory socketFactory5 = mongoClientOptions3.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder6.build();
        java.lang.Class<?> wildcardClass10 = mongoClientOptions9.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertNotNull(socketFactory5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test3174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3174");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.threadsAllowedToBlockForConnectionMultiplier(100);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern18 = mongoClientOptions16.getReadConcern();
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions16.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder20 = builder6.readPreference(readPreference19);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.heartbeatSocketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder36.build();
        int int38 = mongoClientOptions37.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern39 = mongoClientOptions37.getReadConcern();
        com.mongodb.ReadPreference readPreference40 = mongoClientOptions37.getReadPreference();
        com.mongodb.WriteConcern writeConcern41 = mongoClientOptions37.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder42 = builder29.writeConcern(writeConcern41);
        com.mongodb.MongoClientOptions.Builder builder43 = builder20.writeConcern(writeConcern41);
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder57.build();
        boolean boolean59 = mongoClientOptions58.isSslEnabled();
        int int60 = mongoClientOptions58.getHeartbeatSocketTimeout();
        int int61 = mongoClientOptions58.getMinHeartbeatFrequency();
        int int62 = mongoClientOptions58.getMaxConnectionLifeTime();
        int int63 = mongoClientOptions58.getHeartbeatSocketTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory64 = mongoClientOptions58.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder65 = builder54.dbDecoderFactory(dBDecoderFactory64);
        com.mongodb.MongoClientOptions.Builder builder66 = builder20.dbDecoderFactory(dBDecoderFactory64);
        com.mongodb.MongoClientOptions.Builder builder68 = builder20.maxConnectionLifeTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.socketTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder72 = builder68.sslInvalidHostNameAllowed(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertNotNull(readConcern18);
        org.junit.Assert.assertNotNull(readPreference19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10000 + "'", int38 == 10000);
        org.junit.Assert.assertNotNull(readConcern39);
        org.junit.Assert.assertNotNull(readPreference40);
        org.junit.Assert.assertNotNull(writeConcern41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 500 + "'", int61 == 500);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertNotNull(dBDecoderFactory64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test3175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3175");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getLocalThreshold();
        com.mongodb.DBDecoderFactory dBDecoderFactory5 = mongoClientOptions3.getDbDecoderFactory();
        java.lang.String str6 = mongoClientOptions3.getRequiredReplicaSetName();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList7 = mongoClientOptions3.getCommandListeners();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertNotNull(dBDecoderFactory5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(commandListenerList7);
    }

    @Test
    public void test3176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3176");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        com.mongodb.ReadPreference readPreference6 = mongoClientOptions3.getReadPreference();
        com.mongodb.ReadConcern readConcern7 = mongoClientOptions3.getReadConcern();
        int int8 = mongoClientOptions3.getMinHeartbeatFrequency();
        int int9 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertNotNull(readPreference6);
        org.junit.Assert.assertNotNull(readConcern7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
    }

    @Test
    public void test3177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3177");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        boolean boolean5 = mongoClientOptions3.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory6 = mongoClientOptions3.getSocketFactory();
        org.bson.codecs.configuration.CodecRegistry codecRegistry7 = mongoClientOptions3.getCodecRegistry();
        int int8 = mongoClientOptions3.getMaxConnectionIdleTime();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        boolean boolean10 = mongoClientOptions3.isSslInvalidHostNameAllowed();
        org.bson.codecs.configuration.CodecRegistry codecRegistry11 = mongoClientOptions3.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder12 = com.mongodb.MongoClientOptions.builder(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(socketFactory6);
        org.junit.Assert.assertNotNull(codecRegistry7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(codecRegistry11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test3178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3178");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxWaitTime(120000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        int int23 = mongoClientOptions22.getMaxConnectionLifeTime();
        int int24 = mongoClientOptions22.getConnectionsPerHost();
        boolean boolean25 = mongoClientOptions22.isSocketKeepAlive();
        boolean boolean26 = mongoClientOptions22.isSslInvalidHostNameAllowed();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.connectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        com.mongodb.MongoClientOptions.Builder builder41 = builder38.minHeartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder44.build();
        int int46 = mongoClientOptions45.getSocketTimeout();
        boolean boolean47 = mongoClientOptions45.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory48 = mongoClientOptions45.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder49 = builder41.socketFactory(socketFactory48);
        com.mongodb.MongoClientOptions.Builder builder50 = builder33.socketFactory(socketFactory48);
        boolean boolean51 = mongoClientOptions22.equals((java.lang.Object) builder50);
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions55 = builder54.build();
        int int56 = mongoClientOptions55.getConnectionsPerHost();
        boolean boolean57 = mongoClientOptions55.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference58 = mongoClientOptions55.getReadPreference();
        boolean boolean59 = mongoClientOptions55.isSslInvalidHostNameAllowed();
        com.mongodb.ReadPreference readPreference60 = mongoClientOptions55.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder61 = builder50.readPreference(readPreference60);
        com.mongodb.MongoClientOptions.Builder builder63 = builder50.heartbeatSocketTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder64 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions67 = builder64.build();
        com.mongodb.MongoClientOptions.Builder builder69 = builder64.connectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder73 = builder69.maxWaitTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder74 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder76 = builder74.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder78 = builder74.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder81 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder83 = builder81.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions84 = builder83.build();
        boolean boolean85 = mongoClientOptions84.isSslEnabled();
        int int86 = mongoClientOptions84.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory87 = mongoClientOptions84.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder88 = builder80.dbEncoderFactory(dBEncoderFactory87);
        com.mongodb.MongoClientOptions.Builder builder89 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder91 = builder89.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions92 = builder91.build();
        int int93 = mongoClientOptions92.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern94 = mongoClientOptions92.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder95 = builder80.readConcern(readConcern94);
        com.mongodb.MongoClientOptions.Builder builder96 = builder73.readConcern(readConcern94);
        com.mongodb.MongoClientOptions.Builder builder97 = builder63.readConcern(readConcern94);
        com.mongodb.MongoClientOptions.Builder builder98 = builder16.readConcern(readConcern94);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(socketFactory48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(mongoClientOptions55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(readPreference58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(readPreference60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(mongoClientOptions67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(mongoClientOptions84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 100 + "'", int86 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(mongoClientOptions92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 10000 + "'", int93 == 10000);
        org.junit.Assert.assertNotNull(readConcern94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test3179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3179");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory5 = mongoClientOptions3.getDbDecoderFactory();
        com.mongodb.ReadConcern readConcern6 = mongoClientOptions3.getReadConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions3.getDbEncoderFactory();
        boolean boolean8 = mongoClientOptions3.isSslEnabled();
        int int9 = mongoClientOptions3.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory5);
        org.junit.Assert.assertNotNull(readConcern6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
    }

    @Test
    public void test3180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3180");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getMinHeartbeatFrequency();
        int int7 = mongoClientOptions3.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        boolean boolean9 = mongoClientOptions3.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions3.getDbEncoderFactory();
        boolean boolean13 = mongoClientOptions3.isSslEnabled();
        boolean boolean14 = mongoClientOptions3.isSslInvalidHostNameAllowed();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 500 + "'", int6 == 500);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test3181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3181");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        boolean boolean18 = mongoClientOptions17.isSslEnabled();
        int int19 = mongoClientOptions17.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions17.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder21 = builder13.dbEncoderFactory(dBEncoderFactory20);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern27 = mongoClientOptions25.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder28 = builder13.readConcern(readConcern27);
        com.mongodb.MongoClientOptions.Builder builder29 = builder2.readConcern(readConcern27);
        com.mongodb.MongoClientOptions.Builder builder31 = builder2.maxConnectionIdleTime(1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.minConnectionsPerHost(10000);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.heartbeatSocketTimeout((int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertNotNull(readConcern27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test3182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3182");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setDatabase("");
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test3183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3183");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getMinHeartbeatFrequency();
        int int7 = mongoClientOptions3.getMaxConnectionLifeTime();
        int int8 = mongoClientOptions3.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory14 = mongoClientOptions12.getDbDecoderFactory();
        int int15 = mongoClientOptions12.getLocalThreshold();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions12.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory17 = mongoClientOptions12.getDbDecoderFactory();
        boolean boolean18 = mongoClientOptions3.equals((java.lang.Object) mongoClientOptions12);
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions3.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory20 = mongoClientOptions3.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 500 + "'", int6 == 500);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 15 + "'", int15 == 15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertNotNull(dBDecoderFactory17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertNotNull(socketFactory20);
    }

    @Test
    public void test3184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3184");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setUsername("");
        mongoProperties0.setHost("hi!");
        char[] charArray5 = mongoProperties0.getPassword();
        mongoProperties0.setHost("");
        mongoProperties0.setDatabase("");
        mongoProperties0.clearPassword();
        mongoProperties0.setUri("hi!");
        java.lang.Class<?> wildcardClass13 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setPort((java.lang.Integer) 5);
        char[] charArray16 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(charArray16);
    }

    @Test
    public void test3185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3185");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUsername("hi!");
        mongoProperties0.setPort((java.lang.Integer) 5);
        java.lang.String str12 = mongoProperties0.getHost();
        mongoProperties0.setHost("");
        java.lang.String str15 = mongoProperties0.getHost();
        java.lang.String str16 = mongoProperties0.getGridFsDatabase();
        java.lang.String str17 = mongoProperties0.getDatabase();
        java.lang.String str18 = mongoProperties0.getHost();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str21 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
    }

    @Test
    public void test3186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3186");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        java.lang.String str6 = mongoClientOptions3.getRequiredReplicaSetName();
        boolean boolean7 = mongoClientOptions3.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.WriteConcern writeConcern9 = mongoClientOptions3.getWriteConcern();
        com.mongodb.DBDecoderFactory dBDecoderFactory10 = mongoClientOptions3.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(writeConcern9);
        org.junit.Assert.assertNotNull(dBDecoderFactory10);
    }

    @Test
    public void test3187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3187");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        java.lang.Integer int8 = mongoProperties0.getPort();
        char[] charArray9 = mongoProperties0.getPassword();
        mongoProperties0.setHost("hi!");
        java.lang.Integer int12 = mongoProperties0.getPort();
        mongoProperties0.setHost("mongodb://localhost/test");
        java.lang.String str15 = mongoProperties0.getUsername();
        java.lang.String str16 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str17 = mongoProperties0.getUsername();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(charArray9);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test3188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3188");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.minHeartbeatFrequency((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder9.build();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getConnectionsPerHost();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        java.lang.String str19 = mongoClientOptions16.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern20 = mongoClientOptions16.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder21 = builder9.writeConcern(writeConcern20);
        com.mongodb.MongoClientOptions.Builder builder22 = builder8.writeConcern(writeConcern20);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        boolean boolean27 = mongoClientOptions26.isSslEnabled();
        int int28 = mongoClientOptions26.getHeartbeatSocketTimeout();
        int int29 = mongoClientOptions26.getMinHeartbeatFrequency();
        int int30 = mongoClientOptions26.getMaxConnectionLifeTime();
        int int31 = mongoClientOptions26.getHeartbeatSocketTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory32 = mongoClientOptions26.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder33 = builder8.dbDecoderFactory(dBDecoderFactory32);
        com.mongodb.MongoClientOptions.Builder builder34 = builder33.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(writeConcern20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 500 + "'", int29 == 500);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(dBDecoderFactory32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test3189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3189");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory5 = mongoClientOptions3.getDbDecoderFactory();
        com.mongodb.ReadConcern readConcern6 = mongoClientOptions3.getReadConcern();
        int int7 = mongoClientOptions3.getMaxConnectionIdleTime();
        boolean boolean8 = mongoClientOptions3.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory5);
        org.junit.Assert.assertNotNull(readConcern6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test3190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3190");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory5 = mongoClientOptions3.getDbDecoderFactory();
        com.mongodb.ReadConcern readConcern6 = mongoClientOptions3.getReadConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions3.getDbEncoderFactory();
        int int8 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean9 = mongoClientOptions3.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory5);
        org.junit.Assert.assertNotNull(readConcern6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test3191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3191");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        java.lang.String str6 = mongoClientOptions3.getRequiredReplicaSetName();
        org.bson.codecs.configuration.CodecRegistry codecRegistry7 = mongoClientOptions3.getCodecRegistry();
        int int8 = mongoClientOptions3.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder(mongoClientOptions3);
        boolean boolean10 = mongoClientOptions3.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        int int12 = mongoClientOptions3.getMinConnectionsPerHost();
        com.mongodb.ReadConcern readConcern13 = mongoClientOptions3.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(codecRegistry7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(readConcern13);
    }

    @Test
    public void test3192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3192");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        boolean boolean5 = mongoClientOptions3.isAlwaysUseMBeans();
        int int6 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        int int7 = mongoClientOptions3.getServerSelectionTimeout();
        int int8 = mongoClientOptions3.getConnectTimeout();
        javax.net.SocketFactory socketFactory9 = mongoClientOptions3.getSocketFactory();
        boolean boolean10 = mongoClientOptions3.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 30000 + "'", int7 == 30000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10000 + "'", int8 == 10000);
        org.junit.Assert.assertNotNull(socketFactory9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test3193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3193");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getMaxConnectionIdleTime();
        java.lang.String str6 = mongoClientOptions3.getDescription();
        int int7 = mongoClientOptions3.getMinConnectionsPerHost();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions3.getSocketFactory();
        int int9 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        int int10 = mongoClientOptions3.getLocalThreshold();
        boolean boolean11 = mongoClientOptions3.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder18.threadsAllowedToBlockForConnectionMultiplier(100);
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        int int29 = mongoClientOptions28.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern30 = mongoClientOptions28.getReadConcern();
        com.mongodb.ReadPreference readPreference31 = mongoClientOptions28.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder32 = builder18.readPreference(readPreference31);
        com.mongodb.MongoClientOptions.Builder builder34 = builder18.connectTimeout((int) (byte) 1);
        boolean boolean35 = mongoClientOptions3.equals((java.lang.Object) builder18);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10000 + "'", int29 == 10000);
        org.junit.Assert.assertNotNull(readConcern30);
        org.junit.Assert.assertNotNull(readPreference31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test3194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3194");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        boolean boolean18 = mongoClientOptions17.isSslEnabled();
        int int19 = mongoClientOptions17.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions17.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder21 = builder13.dbEncoderFactory(dBEncoderFactory20);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern27 = mongoClientOptions25.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder28 = builder13.readConcern(readConcern27);
        com.mongodb.MongoClientOptions.Builder builder29 = builder2.readConcern(readConcern27);
        com.mongodb.MongoClientOptions.Builder builder31 = builder2.maxConnectionIdleTime(1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        int int40 = mongoClientOptions39.getMaxConnectionLifeTime();
        int int41 = mongoClientOptions39.getConnectionsPerHost();
        javax.net.SocketFactory socketFactory42 = mongoClientOptions39.getSocketFactory();
        javax.net.SocketFactory socketFactory43 = mongoClientOptions39.getSocketFactory();
        com.mongodb.ReadConcern readConcern44 = mongoClientOptions39.getReadConcern();
        int int45 = mongoClientOptions39.getMinConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory46 = mongoClientOptions39.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder47 = builder35.dbEncoderFactory(dBEncoderFactory46);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertNotNull(readConcern27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertNotNull(socketFactory42);
        org.junit.Assert.assertNotNull(socketFactory43);
        org.junit.Assert.assertNotNull(readConcern44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory46);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test3195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3195");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        boolean boolean17 = mongoClientOptions16.isSslEnabled();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions16.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.dbEncoderFactory(dBEncoderFactory19);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        int int25 = mongoClientOptions24.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern26 = mongoClientOptions24.getReadConcern();
        int int27 = mongoClientOptions24.getMinConnectionsPerHost();
        int int28 = mongoClientOptions24.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern29 = mongoClientOptions24.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder30 = builder12.writeConcern(writeConcern29);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.minConnectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.socketTimeout(32);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.minHeartbeatFrequency((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10000 + "'", int25 == 10000);
        org.junit.Assert.assertNotNull(readConcern26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 120000 + "'", int28 == 120000);
        org.junit.Assert.assertNotNull(writeConcern29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test3196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3196");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        int int6 = mongoClientOptions3.getMinConnectionsPerHost();
        int int7 = mongoClientOptions3.getMaxWaitTime();
        int int8 = mongoClientOptions3.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.minHeartbeatFrequency((int) (short) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10000 + "'", int8 == 10000);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test3197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3197");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        com.mongodb.ReadPreference readPreference5 = mongoClientOptions3.getReadPreference();
        java.lang.String str6 = mongoClientOptions3.getDescription();
        boolean boolean7 = mongoClientOptions3.isSslInvalidHostNameAllowed();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(readPreference5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test3198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3198");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        java.lang.Integer int8 = mongoProperties0.getPort();
        java.lang.String str9 = mongoProperties0.getDatabase();
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setUri("");
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        mongoProperties0.setDatabase("mongodb://localhost/test");
        java.lang.Class<?> wildcardClass17 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str18 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str19 = mongoProperties0.getUri();
        mongoProperties0.setPort((java.lang.Integer) 32);
        mongoProperties0.setPort((java.lang.Integer) (-1));
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb://localhost/test" + "'", str18, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test3199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3199");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory5 = mongoClientOptions3.getDbDecoderFactory();
        com.mongodb.ReadConcern readConcern6 = mongoClientOptions3.getReadConcern();
        int int7 = mongoClientOptions3.getMaxConnectionIdleTime();
        int int8 = mongoClientOptions3.getMaxConnectionLifeTime();
        java.lang.String str9 = mongoClientOptions3.getDescription();
        boolean boolean10 = mongoClientOptions3.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory5);
        org.junit.Assert.assertNotNull(readConcern6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test3200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3200");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        boolean boolean6 = mongoClientOptions3.isSocketKeepAlive();
        com.mongodb.ReadConcern readConcern7 = mongoClientOptions3.getReadConcern();
        org.bson.codecs.configuration.CodecRegistry codecRegistry8 = mongoClientOptions3.getCodecRegistry();
        boolean boolean9 = mongoClientOptions3.isSslInvalidHostNameAllowed();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(readConcern7);
        org.junit.Assert.assertNotNull(codecRegistry8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test3201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3201");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getMaxConnectionLifeTime();
        int int5 = mongoClientOptions3.getConnectionsPerHost();
        boolean boolean6 = mongoClientOptions3.isSocketKeepAlive();
        boolean boolean7 = mongoClientOptions3.isSslInvalidHostNameAllowed();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions3.getDbEncoderFactory();
        int int9 = mongoClientOptions3.getMaxWaitTime();
        int int10 = mongoClientOptions3.getMinHeartbeatFrequency();
        int int11 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder12 = com.mongodb.MongoClientOptions.builder(mongoClientOptions3);
        int int13 = mongoClientOptions3.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        int int15 = mongoClientOptions3.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 120000 + "'", int9 == 120000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
    }

    @Test
    public void test3202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3202");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatSocketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.serverSelectionTimeout((int) (short) -1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test3203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3203");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUri("hi!");
        mongoProperties0.setUsername("");
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("");
        char[] charArray12 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass13 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUsername("test");
        java.lang.String str16 = mongoProperties0.getGridFsDatabase();
        char[] charArray17 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(charArray17);
    }

    @Test
    public void test3204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3204");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.serverSelectionTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.build();
        com.mongodb.MongoClientOptions.Builder builder16 = builder11.connectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.maxWaitTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        int int25 = mongoClientOptions24.getConnectionsPerHost();
        int int26 = mongoClientOptions24.getHeartbeatSocketTimeout();
        java.lang.String str27 = mongoClientOptions24.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern28 = mongoClientOptions24.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder29 = builder16.writeConcern(writeConcern28);
        com.mongodb.MongoClientOptions.Builder builder30 = builder10.writeConcern(writeConcern28);
        com.mongodb.MongoClientOptions.Builder builder32 = builder10.requiredReplicaSetName("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(writeConcern28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test3205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3205");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.serverSelectionTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.requiredReplicaSetName("test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test3206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3206");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        int int6 = mongoClientOptions3.getMinConnectionsPerHost();
        int int7 = mongoClientOptions3.getLocalThreshold();
        boolean boolean8 = mongoClientOptions3.isAlwaysUseMBeans();
        com.mongodb.ReadPreference readPreference9 = mongoClientOptions3.getReadPreference();
        int int10 = mongoClientOptions3.getConnectTimeout();
        int int11 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        int int13 = mongoClientOptions3.getServerSelectionTimeout();
        int int14 = mongoClientOptions3.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(readPreference9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 30000 + "'", int13 == 30000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
    }

    @Test
    public void test3207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3207");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getConnectTimeout();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList6 = mongoClientOptions3.getCommandListeners();
        boolean boolean7 = mongoClientOptions3.isSocketKeepAlive();
        com.mongodb.ReadConcern readConcern8 = mongoClientOptions3.getReadConcern();
        com.mongodb.ReadPreference readPreference9 = mongoClientOptions3.getReadPreference();
        java.lang.String str10 = mongoClientOptions3.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10000 + "'", int5 == 10000);
        org.junit.Assert.assertNotNull(commandListenerList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(readConcern8);
        org.junit.Assert.assertNotNull(readPreference9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test3208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3208");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 0);
        mongoProperties0.setPort((java.lang.Integer) 500);
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getMaxConnectionLifeTime();
        int int13 = mongoClientOptions11.getConnectionsPerHost();
        boolean boolean14 = mongoClientOptions11.isSocketKeepAlive();
        boolean boolean15 = mongoClientOptions11.isSslInvalidHostNameAllowed();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions11);
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions11, environment17);
        mongoProperties0.setUri("");
        java.lang.String str21 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.clearPassword();
        mongoProperties0.setHost("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
    }

    @Test
    public void test3209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3209");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setAuthenticationDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getSocketTimeout();
        boolean boolean13 = mongoClientOptions11.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties0.createMongoClient(mongoClientOptions11, environment14);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getConnectionsPerHost();
        int int21 = mongoClientOptions19.getConnectTimeout();
        org.springframework.core.env.Environment environment22 = null;
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions19, environment22);
        int int24 = mongoClientOptions19.getHeartbeatFrequency();
        java.lang.String str25 = mongoClientOptions19.getRequiredReplicaSetName();
        int int26 = mongoClientOptions19.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10000 + "'", int24 == 10000);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test3210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3210");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setUsername("");
        mongoProperties0.setHost("hi!");
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.String str7 = mongoProperties0.getUri();
        mongoProperties0.setUsername("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties10.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.springframework.core.env.Environment environment14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties10.createMongoClient(mongoClientOptions13, environment14);
        java.lang.String str16 = mongoProperties10.getMongoClientDatabase();
        mongoProperties10.setHost("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties19.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties19.createMongoClient(mongoClientOptions22, environment23);
        mongoProperties19.setUsername("hi!");
        java.lang.Integer int27 = mongoProperties19.getPort();
        char[] charArray28 = new char[] {};
        mongoProperties19.setPassword(charArray28);
        mongoProperties10.setPassword(charArray28);
        mongoProperties0.setPassword(charArray28);
        java.lang.String str32 = mongoProperties0.getUsername();
        java.lang.String str33 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "test" + "'", str33, "test");
    }

    @Test
    public void test3211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3211");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        java.lang.String str5 = mongoClientOptions3.getDescription();
        boolean boolean6 = mongoClientOptions3.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder7 = com.mongodb.MongoClientOptions.builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatFrequency(100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test3212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3212");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.clearPassword();
        mongoProperties0.setDatabase("");
        java.lang.Class<?> wildcardClass12 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str13 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test3213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3213");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setHost("hi!");
        char[] charArray15 = new char[] { 'a', '4', '#', ' ', ' ', ' ' };
        mongoProperties0.setPassword(charArray15);
        char[] charArray17 = mongoProperties0.getPassword();
        mongoProperties0.setHost("");
        java.lang.String str20 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setUri("test");
        mongoProperties0.setUri("");
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test3214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3214");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        int int5 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder8.build();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions15.getCommandListeners();
        int int17 = mongoClientOptions15.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
    }

    @Test
    public void test3215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3215");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        boolean boolean7 = mongoClientOptions3.equals((java.lang.Object) 500);
        int int8 = mongoClientOptions3.getHeartbeatFrequency();
        int int9 = mongoClientOptions3.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10000 + "'", int8 == 10000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test3216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3216");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        int int10 = mongoClientOptions9.getMaxConnectionLifeTime();
        int int11 = mongoClientOptions9.getConnectionsPerHost();
        java.lang.String str12 = mongoClientOptions9.getDescription();
        org.springframework.core.env.Environment environment13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties0.createMongoClient(mongoClientOptions9, environment13);
        int int15 = mongoClientOptions9.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions9);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder23.threadsAllowedToBlockForConnectionMultiplier(100);
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder32.build();
        int int34 = mongoClientOptions33.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern35 = mongoClientOptions33.getReadConcern();
        com.mongodb.ReadPreference readPreference36 = mongoClientOptions33.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder37 = builder23.readPreference(readPreference36);
        com.mongodb.MongoClientOptions.Builder builder39 = builder23.connectTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder48 = builder42.minHeartbeatFrequency((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder49 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions52 = builder49.build();
        com.mongodb.MongoClientOptions.Builder builder53 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions56 = builder55.build();
        int int57 = mongoClientOptions56.getConnectionsPerHost();
        int int58 = mongoClientOptions56.getHeartbeatSocketTimeout();
        java.lang.String str59 = mongoClientOptions56.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern60 = mongoClientOptions56.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder61 = builder49.writeConcern(writeConcern60);
        com.mongodb.MongoClientOptions.Builder builder62 = builder48.writeConcern(writeConcern60);
        com.mongodb.MongoClientOptions.Builder builder63 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions66 = builder65.build();
        boolean boolean67 = mongoClientOptions66.isSslEnabled();
        int int68 = mongoClientOptions66.getHeartbeatSocketTimeout();
        int int69 = mongoClientOptions66.getMinHeartbeatFrequency();
        int int70 = mongoClientOptions66.getMaxConnectionLifeTime();
        int int71 = mongoClientOptions66.getHeartbeatSocketTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory72 = mongoClientOptions66.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder73 = builder48.dbDecoderFactory(dBDecoderFactory72);
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.serverSelectionTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder77 = builder75.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder78 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions81 = builder80.build();
        int int82 = mongoClientOptions81.getConnectionsPerHost();
        int int83 = mongoClientOptions81.getHeartbeatSocketTimeout();
        java.lang.String str84 = mongoClientOptions81.getRequiredReplicaSetName();
        org.bson.codecs.configuration.CodecRegistry codecRegistry85 = mongoClientOptions81.getCodecRegistry();
        java.lang.String str86 = mongoClientOptions81.getRequiredReplicaSetName();
        com.mongodb.ReadPreference readPreference87 = mongoClientOptions81.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder88 = builder77.readPreference(readPreference87);
        com.mongodb.MongoClientOptions.Builder builder89 = builder23.readPreference(readPreference87);
        com.mongodb.MongoClientOptions.Builder builder90 = builder16.readPreference(readPreference87);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10000 + "'", int34 == 10000);
        org.junit.Assert.assertNotNull(readConcern35);
        org.junit.Assert.assertNotNull(readPreference36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(mongoClientOptions52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoClientOptions56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(writeConcern60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(mongoClientOptions66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 500 + "'", int69 == 500);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertNotNull(dBDecoderFactory72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(mongoClientOptions81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 100 + "'", int82 == 100);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 100 + "'", int83 == 100);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(codecRegistry85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(readPreference87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test3217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3217");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.maxConnectionLifeTime((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        boolean boolean26 = mongoClientOptions25.isSslEnabled();
        int int27 = mongoClientOptions25.getHeartbeatSocketTimeout();
        int int28 = mongoClientOptions25.getServerSelectionTimeout();
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions25);
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions25.getReadPreference();
        boolean boolean31 = mongoClientOptions25.isAlwaysUseMBeans();
        com.mongodb.DBDecoderFactory dBDecoderFactory32 = mongoClientOptions25.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder33 = builder19.dbDecoderFactory(dBDecoderFactory32);
        com.mongodb.MongoClientOptions.Builder builder34 = builder2.dbDecoderFactory(dBDecoderFactory32);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder41.build();
        int int43 = mongoClientOptions42.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern44 = mongoClientOptions42.getReadConcern();
        com.mongodb.ReadPreference readPreference45 = mongoClientOptions42.getReadPreference();
        com.mongodb.ReadConcern readConcern46 = mongoClientOptions42.getReadConcern();
        int int47 = mongoClientOptions42.getMinHeartbeatFrequency();
        javax.net.SocketFactory socketFactory48 = mongoClientOptions42.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder49 = builder38.socketFactory(socketFactory48);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 30000 + "'", int28 == 30000);
        org.junit.Assert.assertNotNull(readPreference30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10000 + "'", int43 == 10000);
        org.junit.Assert.assertNotNull(readConcern44);
        org.junit.Assert.assertNotNull(readPreference45);
        org.junit.Assert.assertNotNull(readConcern46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 500 + "'", int47 == 500);
        org.junit.Assert.assertNotNull(socketFactory48);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test3218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3218");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        boolean boolean5 = mongoClientOptions3.isSocketKeepAlive();
        int int6 = mongoClientOptions3.getMaxConnectionLifeTime();
        boolean boolean7 = mongoClientOptions3.isSslEnabled();
        boolean boolean8 = mongoClientOptions3.isSslEnabled();
        int int9 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
    }

    @Test
    public void test3219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3219");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getConnectionsPerHost();
        int int22 = mongoClientOptions20.getHeartbeatSocketTimeout();
        boolean boolean24 = mongoClientOptions20.equals((java.lang.Object) 500);
        boolean boolean25 = mongoClientOptions20.isSocketKeepAlive();
        java.lang.String str26 = mongoClientOptions20.getDescription();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions20.getReadPreference();
        com.mongodb.ReadConcern readConcern28 = mongoClientOptions20.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder29 = builder16.readConcern(readConcern28);
        com.mongodb.MongoClientOptions.Builder builder31 = builder16.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        int int36 = mongoClientOptions35.getConnectionsPerHost();
        boolean boolean37 = mongoClientOptions35.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference38 = mongoClientOptions35.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions35);
        javax.net.SocketFactory socketFactory40 = mongoClientOptions35.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder41 = builder16.socketFactory(socketFactory40);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(readConcern28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(readPreference38);
        org.junit.Assert.assertNotNull(socketFactory40);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test3220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3220");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setAuthenticationDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getSocketTimeout();
        boolean boolean13 = mongoClientOptions11.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties0.createMongoClient(mongoClientOptions11, environment14);
        boolean boolean16 = mongoClientOptions11.isCursorFinalizerEnabled();
        int int17 = mongoClientOptions11.getLocalThreshold();
        int int18 = mongoClientOptions11.getSocketTimeout();
        int int19 = mongoClientOptions11.getConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions11.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 15 + "'", int17 == 15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
    }

    @Test
    public void test3221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3221");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str10 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getConnectionsPerHost();
        int int16 = mongoClientOptions14.getHeartbeatSocketTimeout();
        boolean boolean18 = mongoClientOptions14.equals((java.lang.Object) 500);
        int int19 = mongoClientOptions14.getMaxConnectionIdleTime();
        com.mongodb.WriteConcern writeConcern20 = mongoClientOptions14.getWriteConcern();
        javax.net.SocketFactory socketFactory21 = mongoClientOptions14.getSocketFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList22 = mongoClientOptions14.getCommandListeners();
        int int23 = mongoClientOptions14.getMinHeartbeatFrequency();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions14, environment24);
        mongoProperties0.setUsername("hi!");
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(writeConcern20);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertNotNull(commandListenerList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 500 + "'", int23 == 500);
        org.junit.Assert.assertNotNull(mongoClient25);
    }

    @Test
    public void test3222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3222");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getMaxConnectionIdleTime();
        int int6 = mongoClientOptions3.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.connectTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.threadsAllowedToBlockForConnectionMultiplier(30000);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionLifeTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.serverSelectionTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder17.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test3223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3223");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        com.mongodb.ReadPreference readPreference6 = mongoClientOptions3.getReadPreference();
        boolean boolean7 = mongoClientOptions3.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.connectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        int int23 = mongoClientOptions22.getHeartbeatFrequency();
        int int24 = mongoClientOptions22.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions22);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder37 = builder31.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.maxConnectionIdleTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder54 = builder50.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder57.build();
        int int59 = mongoClientOptions58.getConnectionsPerHost();
        int int60 = mongoClientOptions58.getHeartbeatSocketTimeout();
        boolean boolean62 = mongoClientOptions58.equals((java.lang.Object) 500);
        boolean boolean63 = mongoClientOptions58.isSocketKeepAlive();
        java.lang.String str64 = mongoClientOptions58.getDescription();
        com.mongodb.ReadPreference readPreference65 = mongoClientOptions58.getReadPreference();
        com.mongodb.ReadConcern readConcern66 = mongoClientOptions58.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder67 = builder54.readConcern(readConcern66);
        com.mongodb.MongoClientOptions.Builder builder68 = builder37.readConcern(readConcern66);
        com.mongodb.MongoClientOptions.Builder builder69 = builder16.readConcern(readConcern66);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertNotNull(readPreference6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10000 + "'", int23 == 10000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(readPreference65);
        org.junit.Assert.assertNotNull(readConcern66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test3224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3224");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.build();
        boolean boolean4 = mongoClientOptions3.isAlwaysUseMBeans();
        java.lang.String str5 = mongoClientOptions3.getDescription();
        java.lang.String str6 = mongoClientOptions3.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test3225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3225");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        java.lang.String str4 = mongoClientOptions3.getRequiredReplicaSetName();
        int int5 = mongoClientOptions3.getServerSelectionTimeout();
        boolean boolean6 = mongoClientOptions3.isCursorFinalizerEnabled();
        int int7 = mongoClientOptions3.getConnectTimeout();
        int int8 = mongoClientOptions3.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 30000 + "'", int5 == 30000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10000 + "'", int7 == 10000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test3226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3226");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.serverSelectionTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.connectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern16 = mongoClientOptions14.getReadConcern();
        int int17 = mongoClientOptions14.getMinConnectionsPerHost();
        int int18 = mongoClientOptions14.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions14.getWriteConcern();
        boolean boolean20 = mongoClientOptions14.isSslInvalidHostNameAllowed();
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder(mongoClientOptions14);
        boolean boolean22 = mongoClientOptions14.isSocketKeepAlive();
        boolean boolean23 = mongoClientOptions14.isSocketKeepAlive();
        com.mongodb.ReadConcern readConcern24 = mongoClientOptions14.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder25 = builder8.readConcern(readConcern24);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertNotNull(readConcern16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120000 + "'", int18 == 120000);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(readConcern24);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test3227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3227");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        int int6 = mongoClientOptions3.getMinConnectionsPerHost();
        int int7 = mongoClientOptions3.getMaxWaitTime();
        boolean boolean8 = mongoClientOptions3.isSslEnabled();
        int int9 = mongoClientOptions3.getConnectionsPerHost();
        boolean boolean10 = mongoClientOptions3.isAlwaysUseMBeans();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions3.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory12 = mongoClientOptions3.getDbDecoderFactory();
        int int13 = mongoClientOptions3.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(dBDecoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test3228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3228");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatFrequency(5);
        com.mongodb.ReadPreference readPreference19 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder20 = builder16.readPreference(readPreference19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: readPreference can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test3229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3229");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        int int6 = mongoClientOptions3.getMinConnectionsPerHost();
        int int7 = mongoClientOptions3.getLocalThreshold();
        boolean boolean8 = mongoClientOptions3.isAlwaysUseMBeans();
        com.mongodb.ReadPreference readPreference9 = mongoClientOptions3.getReadPreference();
        int int10 = mongoClientOptions3.getConnectTimeout();
        int int11 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties13.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions16 = null;
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties13.createMongoClient(mongoClientOptions16, environment17);
        mongoProperties13.setAuthenticationDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        int int25 = mongoClientOptions24.getSocketTimeout();
        boolean boolean26 = mongoClientOptions24.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment27 = null;
        com.mongodb.MongoClient mongoClient28 = mongoProperties13.createMongoClient(mongoClientOptions24, environment27);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        int int33 = mongoClientOptions32.getConnectionsPerHost();
        int int34 = mongoClientOptions32.getConnectTimeout();
        org.springframework.core.env.Environment environment35 = null;
        com.mongodb.MongoClient mongoClient36 = mongoProperties13.createMongoClient(mongoClientOptions32, environment35);
        int int37 = mongoClientOptions32.getHeartbeatFrequency();
        java.lang.String str38 = mongoClientOptions32.getRequiredReplicaSetName();
        boolean boolean39 = mongoClientOptions32.isAlwaysUseMBeans();
        com.mongodb.WriteConcern writeConcern40 = mongoClientOptions32.getWriteConcern();
        javax.net.SocketFactory socketFactory41 = mongoClientOptions32.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder42 = builder12.socketFactory(socketFactory41);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(readPreference9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10000 + "'", int34 == 10000);
        org.junit.Assert.assertNotNull(mongoClient36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10000 + "'", int37 == 10000);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(writeConcern40);
        org.junit.Assert.assertNotNull(socketFactory41);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test3230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3230");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        int int6 = mongoClientOptions3.getMinConnectionsPerHost();
        int int7 = mongoClientOptions3.getMaxWaitTime();
        boolean boolean8 = mongoClientOptions3.isSocketKeepAlive();
        int int9 = mongoClientOptions3.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder(mongoClientOptions3);
        int int11 = mongoClientOptions3.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 120000 + "'", int9 == 120000);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
    }

    @Test
    public void test3231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3231");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUsername("");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory13 = mongoClientOptions11.getDbDecoderFactory();
        com.mongodb.ReadConcern readConcern14 = mongoClientOptions11.getReadConcern();
        int int15 = mongoClientOptions11.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions11.getReadPreference();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions11, environment17);
        javax.net.SocketFactory socketFactory19 = mongoClientOptions11.getSocketFactory();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory13);
        org.junit.Assert.assertNotNull(readConcern14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNotNull(socketFactory19);
    }

    @Test
    public void test3232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3232");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        int int6 = mongoClientOptions3.getMinConnectionsPerHost();
        int int7 = mongoClientOptions3.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern8 = mongoClientOptions3.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions3.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.heartbeatSocketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.build();
        int int28 = mongoClientOptions27.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory29 = mongoClientOptions27.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder30 = builder11.dbDecoderFactory(dBDecoderFactory29);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertNotNull(writeConcern8);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory29);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test3233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3233");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        com.mongodb.MongoClientOptions.Builder builder12 = com.mongodb.MongoClientOptions.builder(mongoClientOptions11);
        org.springframework.core.env.Environment environment13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties0.createMongoClient(mongoClientOptions11, environment13);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getSocketTimeout();
        int int20 = mongoClientOptions18.getThreadsAllowedToBlockForConnectionMultiplier();
        int int21 = mongoClientOptions18.getMaxWaitTime();
        java.lang.String str22 = mongoClientOptions18.getRequiredReplicaSetName();
        int int23 = mongoClientOptions18.getMaxWaitTime();
        int int24 = mongoClientOptions18.getMaxConnectionIdleTime();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions18, environment25);
        mongoProperties0.setDatabase("mongodb://localhost/test");
        java.lang.String str29 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 120000 + "'", int21 == 120000);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 120000 + "'", int23 == 120000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test3234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3234");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUsername("");
        mongoProperties0.setUri("mongodb://localhost/test");
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test3235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3235");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatSocketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.sslInvalidHostNameAllowed(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test3236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3236");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getMaxConnectionLifeTime();
        int int5 = mongoClientOptions3.getConnectionsPerHost();
        javax.net.SocketFactory socketFactory6 = mongoClientOptions3.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        boolean boolean8 = mongoClientOptions3.isSslInvalidHostNameAllowed();
        boolean boolean9 = mongoClientOptions3.isSslEnabled();
        com.mongodb.WriteConcern writeConcern10 = mongoClientOptions3.getWriteConcern();
        int int11 = mongoClientOptions3.getHeartbeatFrequency();
        int int12 = mongoClientOptions3.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getSocketTimeout();
        boolean boolean19 = mongoClientOptions17.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions17);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.build();
        com.mongodb.MongoClientOptions.Builder builder26 = builder21.connectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.maxWaitTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        int int35 = mongoClientOptions34.getConnectionsPerHost();
        int int36 = mongoClientOptions34.getHeartbeatSocketTimeout();
        java.lang.String str37 = mongoClientOptions34.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern38 = mongoClientOptions34.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder39 = builder26.writeConcern(writeConcern38);
        com.mongodb.MongoClientOptions.Builder builder40 = builder20.writeConcern(writeConcern38);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder47 = builder43.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder51 = builder47.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder54 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions57 = builder54.build();
        com.mongodb.MongoClientOptions.Builder builder59 = builder54.connectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder63 = builder59.maxWaitTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder64 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions67 = builder66.build();
        int int68 = mongoClientOptions67.getConnectionsPerHost();
        int int69 = mongoClientOptions67.getHeartbeatSocketTimeout();
        java.lang.String str70 = mongoClientOptions67.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern71 = mongoClientOptions67.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder72 = builder59.writeConcern(writeConcern71);
        com.mongodb.MongoClientOptions.Builder builder73 = builder51.writeConcern(writeConcern71);
        com.mongodb.MongoClientOptions.Builder builder74 = builder42.writeConcern(writeConcern71);
        com.mongodb.MongoClientOptions.Builder builder75 = builder13.writeConcern(writeConcern71);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNotNull(socketFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(writeConcern10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(writeConcern38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mongoClientOptions57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(mongoClientOptions67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 100 + "'", int69 == 100);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(writeConcern71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test3237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3237");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUsername("hi!");
        mongoProperties0.setPort((java.lang.Integer) 5);
        java.lang.String str12 = mongoProperties0.getHost();
        mongoProperties0.setHost("");
        java.lang.String str15 = mongoProperties0.getHost();
        java.lang.String str16 = mongoProperties0.getGridFsDatabase();
        java.lang.String str17 = mongoProperties0.getDatabase();
        java.lang.String str18 = mongoProperties0.getHost();
        mongoProperties0.clearPassword();
        java.lang.String str20 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str21 = mongoProperties0.getUri();
        java.lang.String str22 = mongoProperties0.getUsername();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "mongodb://localhost/test" + "'", str21, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
    }

    @Test
    public void test3238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3238");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.serverSelectionTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.localThreshold(10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties11.createMongoClient(mongoClientOptions14, environment15);
        java.lang.String str17 = mongoProperties11.getMongoClientDatabase();
        java.lang.String str18 = mongoProperties11.getGridFsDatabase();
        mongoProperties11.setUsername("hi!");
        java.lang.String str21 = mongoProperties11.getAuthenticationDatabase();
        java.lang.String str22 = mongoProperties11.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getSocketTimeout();
        boolean boolean28 = mongoClientOptions26.isSocketKeepAlive();
        int int29 = mongoClientOptions26.getConnectionsPerHost();
        int int30 = mongoClientOptions26.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties11.createMongoClient(mongoClientOptions26, environment31);
        boolean boolean33 = mongoClientOptions26.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory34 = mongoClientOptions26.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder8.dbEncoderFactory(dBEncoderFactory34);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10000 + "'", int30 == 10000);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test3239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3239");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getSocketTimeout();
        boolean boolean10 = mongoClientOptions8.isAlwaysUseMBeans();
        int int11 = mongoClientOptions8.getThreadsAllowedToBlockForConnectionMultiplier();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList12 = mongoClientOptions8.getCommandListeners();
        boolean boolean13 = mongoClientOptions3.equals((java.lang.Object) mongoClientOptions8);
        int int14 = mongoClientOptions8.getMaxConnectionLifeTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions8.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = com.mongodb.MongoClientOptions.builder(mongoClientOptions8);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.connectTimeout((int) (short) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(commandListenerList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test3240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3240");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatSocketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder16.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test3241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3241");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str8 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("");
        char[] charArray11 = mongoProperties0.getPassword();
        java.lang.String str12 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(charArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test3242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3242");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        int int5 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        int int6 = mongoClientOptions3.getMaxWaitTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry7 = mongoClientOptions3.getCodecRegistry();
        int int8 = mongoClientOptions3.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        javax.net.SocketFactory socketFactory10 = mongoClientOptions3.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketTimeout(30000);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.requiredReplicaSetName("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 120000 + "'", int6 == 120000);
        org.junit.Assert.assertNotNull(codecRegistry7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test3243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3243");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        com.mongodb.ReadPreference readPreference6 = mongoClientOptions3.getReadPreference();
        int int7 = mongoClientOptions3.getMaxWaitTime();
        int int8 = mongoClientOptions3.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern9 = mongoClientOptions3.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder(mongoClientOptions3);
        boolean boolean11 = mongoClientOptions3.isAlwaysUseMBeans();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList12 = mongoClientOptions3.getCommandListeners();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.ReadConcern readConcern14 = mongoClientOptions3.getReadConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertNotNull(readPreference6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(readConcern9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(commandListenerList12);
        org.junit.Assert.assertNotNull(readConcern14);
    }

    @Test
    public void test3244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3244");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        com.mongodb.ReadPreference readPreference6 = mongoClientOptions3.getReadPreference();
        int int7 = mongoClientOptions3.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setUsername("");
        mongoProperties9.setHost("hi!");
        java.lang.String str14 = mongoProperties9.getHost();
        java.lang.String str15 = mongoProperties9.getUri();
        mongoProperties9.setUri("mongodb://localhost/test");
        java.lang.String str18 = mongoProperties9.getMongoClientDatabase();
        java.lang.String str19 = mongoProperties9.getUsername();
        mongoProperties9.clearPassword();
        mongoProperties9.setPort((java.lang.Integer) 10);
        boolean boolean23 = mongoClientOptions3.equals((java.lang.Object) mongoProperties9);
        java.lang.Class<?> wildcardClass24 = mongoProperties9.getFieldNamingStrategy();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertNotNull(readPreference6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb://localhost/test" + "'", str15, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "test" + "'", str18, "test");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(wildcardClass24);
    }

    @Test
    public void test3245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3245");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        boolean boolean5 = mongoClientOptions3.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory6 = mongoClientOptions3.getSocketFactory();
        int int7 = mongoClientOptions3.getSocketTimeout();
        int int8 = mongoClientOptions3.getMaxWaitTime();
        int int9 = mongoClientOptions3.getHeartbeatConnectTimeout();
        java.lang.Object obj10 = null;
        boolean boolean11 = mongoClientOptions3.equals(obj10);
        int int12 = mongoClientOptions3.getConnectionsPerHost();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions3.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(socketFactory6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 120000 + "'", int8 == 120000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(readPreference13);
    }

    @Test
    public void test3246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3246");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getConnectionsPerHost();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        java.lang.String str10 = mongoClientOptions7.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions7.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder12 = builder0.writeConcern(writeConcern11);
        com.mongodb.MongoClientOptions.Builder builder14 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.connectionsPerHost((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder18.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test3247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3247");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getMaxConnectionIdleTime();
        int int6 = mongoClientOptions3.getHeartbeatSocketTimeout();
        boolean boolean7 = mongoClientOptions3.isSslEnabled();
        int int8 = mongoClientOptions3.getMaxConnectionIdleTime();
        java.lang.String str9 = mongoClientOptions3.getDescription();
        int int10 = mongoClientOptions3.getMaxWaitTime();
        int int11 = mongoClientOptions3.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 120000 + "'", int10 == 120000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test3248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3248");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.serverSelectionTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.socketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        boolean boolean29 = mongoClientOptions28.isSslEnabled();
        int int30 = mongoClientOptions28.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory31 = mongoClientOptions28.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder32 = builder24.dbEncoderFactory(dBEncoderFactory31);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern38 = mongoClientOptions36.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder39 = builder24.readConcern(readConcern38);
        com.mongodb.MongoClientOptions.Builder builder40 = builder13.readConcern(readConcern38);
        com.mongodb.MongoClientOptions.Builder builder41 = builder10.readConcern(readConcern38);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder45 = builder41.heartbeatSocketTimeout((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10000 + "'", int37 == 10000);
        org.junit.Assert.assertNotNull(readConcern38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test3249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3249");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setHost("hi!");
        char[] charArray15 = new char[] { 'a', '4', '#', ' ', ' ', ' ' };
        mongoProperties0.setPassword(charArray15);
        char[] charArray17 = mongoProperties0.getPassword();
        mongoProperties0.setHost("");
        java.lang.String str20 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setPort((java.lang.Integer) 20000);
        mongoProperties0.setHost("");
        mongoProperties0.setDatabase("");
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test3250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3250");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.serverSelectionTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatFrequency();
        int int22 = mongoClientOptions20.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions20);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder28.build();
        int int30 = mongoClientOptions29.getSocketTimeout();
        boolean boolean31 = mongoClientOptions29.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory32 = mongoClientOptions29.getSocketFactory();
        org.bson.codecs.configuration.CodecRegistry codecRegistry33 = mongoClientOptions29.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder34 = builder23.codecRegistry(codecRegistry33);
        com.mongodb.MongoClientOptions.Builder builder35 = builder14.codecRegistry(codecRegistry33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder5.codecRegistry(codecRegistry33);
        com.mongodb.MongoClientOptions.Builder builder38 = builder5.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder40 = builder5.maxWaitTime(1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(socketFactory32);
        org.junit.Assert.assertNotNull(codecRegistry33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test3251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3251");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.serverSelectionTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getConnectionsPerHost();
        int int18 = mongoClientOptions16.getConnectTimeout();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList19 = mongoClientOptions16.getCommandListeners();
        boolean boolean20 = mongoClientOptions16.isSocketKeepAlive();
        com.mongodb.ReadConcern readConcern21 = mongoClientOptions16.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder22 = builder10.readConcern(readConcern21);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.description("");
        com.mongodb.event.CommandListener commandListener27 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder28 = builder22.addCommandListener(commandListener27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
        org.junit.Assert.assertNotNull(commandListenerList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(readConcern21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test3252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3252");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getConnectionsPerHost();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        java.lang.String str10 = mongoClientOptions7.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions7.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder12 = builder0.writeConcern(writeConcern11);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.connectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        com.mongodb.MongoClientOptions.Builder builder27 = builder24.minHeartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder30.build();
        int int32 = mongoClientOptions31.getSocketTimeout();
        boolean boolean33 = mongoClientOptions31.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory34 = mongoClientOptions31.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder27.socketFactory(socketFactory34);
        com.mongodb.MongoClientOptions.Builder builder36 = builder19.socketFactory(socketFactory34);
        com.mongodb.MongoClientOptions.Builder builder37 = builder0.socketFactory(socketFactory34);
        com.mongodb.MongoClientOptions.Builder builder39 = builder0.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder41 = builder0.connectionsPerHost(500);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder51 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder53.build();
        boolean boolean55 = mongoClientOptions54.isSslEnabled();
        int int56 = mongoClientOptions54.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory57 = mongoClientOptions54.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder58 = builder50.dbEncoderFactory(dBEncoderFactory57);
        com.mongodb.MongoClientOptions.Builder builder59 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions62 = builder61.build();
        int int63 = mongoClientOptions62.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern64 = mongoClientOptions62.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder65 = builder50.readConcern(readConcern64);
        com.mongodb.MongoClientOptions.Builder builder67 = builder50.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.description("");
        com.mongodb.MongoClientOptions.Builder builder70 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions73 = builder72.build();
        int int74 = mongoClientOptions73.getSocketTimeout();
        boolean boolean75 = mongoClientOptions73.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory76 = mongoClientOptions73.getSocketFactory();
        org.bson.codecs.configuration.CodecRegistry codecRegistry77 = mongoClientOptions73.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder78 = builder67.codecRegistry(codecRegistry77);
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder82 = builder80.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder83 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder85 = builder83.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions86 = builder85.build();
        int int87 = mongoClientOptions86.getConnectionsPerHost();
        boolean boolean88 = mongoClientOptions86.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference89 = mongoClientOptions86.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder90 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions86);
        java.util.List<com.mongodb.event.CommandListener> commandListenerList91 = mongoClientOptions86.getCommandListeners();
        com.mongodb.WriteConcern writeConcern92 = mongoClientOptions86.getWriteConcern();
        com.mongodb.DBDecoderFactory dBDecoderFactory93 = mongoClientOptions86.getDbDecoderFactory();
        int int94 = mongoClientOptions86.getMinConnectionsPerHost();
        com.mongodb.WriteConcern writeConcern95 = mongoClientOptions86.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder96 = builder80.writeConcern(writeConcern95);
        com.mongodb.MongoClientOptions.Builder builder97 = builder43.writeConcern(writeConcern95);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(socketFactory34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(mongoClientOptions54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(mongoClientOptions62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10000 + "'", int63 == 10000);
        org.junit.Assert.assertNotNull(readConcern64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(mongoClientOptions73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(socketFactory76);
        org.junit.Assert.assertNotNull(codecRegistry77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(mongoClientOptions86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 100 + "'", int87 == 100);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(readPreference89);
        org.junit.Assert.assertNotNull(commandListenerList91);
        org.junit.Assert.assertNotNull(writeConcern92);
        org.junit.Assert.assertNotNull(dBDecoderFactory93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(writeConcern95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test3253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3253");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setAuthenticationDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getSocketTimeout();
        boolean boolean13 = mongoClientOptions11.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties0.createMongoClient(mongoClientOptions11, environment14);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getConnectionsPerHost();
        int int21 = mongoClientOptions19.getConnectTimeout();
        org.springframework.core.env.Environment environment22 = null;
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions19, environment22);
        boolean boolean24 = mongoClientOptions19.isSslEnabled();
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions19.getDbDecoderFactory();
        int int26 = mongoClientOptions19.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
    }

    @Test
    public void test3254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3254");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        boolean boolean5 = mongoClientOptions3.isSocketKeepAlive();
        boolean boolean6 = mongoClientOptions3.isAlwaysUseMBeans();
        int int7 = mongoClientOptions3.getMaxConnectionLifeTime();
        boolean boolean8 = mongoClientOptions3.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test3255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3255");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxConnectionLifeTime(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getMaxConnectionLifeTime();
        boolean boolean17 = mongoClientOptions15.isSslInvalidHostNameAllowed();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions15);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions15);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        boolean boolean24 = mongoClientOptions23.isSslEnabled();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        int int26 = mongoClientOptions23.getMinHeartbeatFrequency();
        int int27 = mongoClientOptions23.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions23);
        com.mongodb.DBDecoderFactory dBDecoderFactory29 = mongoClientOptions23.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder30 = builder19.dbDecoderFactory(dBDecoderFactory29);
        com.mongodb.MongoClientOptions.Builder builder31 = builder7.dbDecoderFactory(dBDecoderFactory29);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 500 + "'", int6 == 500);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 500 + "'", int26 == 500);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 120000 + "'", int27 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test3256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3256");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getConnectionsPerHost();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        java.lang.String str13 = mongoClientOptions10.getRequiredReplicaSetName();
        org.bson.codecs.configuration.CodecRegistry codecRegistry14 = mongoClientOptions10.getCodecRegistry();
        int int15 = mongoClientOptions10.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions10.getConnectionsPerHost();
        java.lang.String str17 = mongoClientOptions10.getRequiredReplicaSetName();
        com.mongodb.ReadConcern readConcern18 = mongoClientOptions10.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions10);
        org.bson.codecs.configuration.CodecRegistry codecRegistry20 = mongoClientOptions10.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder21 = builder6.codecRegistry(codecRegistry20);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(codecRegistry14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(readConcern18);
        org.junit.Assert.assertNotNull(codecRegistry20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test3257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3257");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setHost("");
        mongoProperties0.setDatabase("hi!");
        java.lang.Integer int10 = mongoProperties0.getPort();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getSocketTimeout();
        int int16 = mongoClientOptions14.getThreadsAllowedToBlockForConnectionMultiplier();
        org.bson.codecs.configuration.CodecRegistry codecRegistry17 = mongoClientOptions14.getCodecRegistry();
        int int18 = mongoClientOptions14.getSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry19 = mongoClientOptions14.getCodecRegistry();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions14, environment20);
        mongoProperties0.clearPassword();
        java.lang.String str23 = mongoProperties0.getUri();
        char[] charArray24 = mongoProperties0.getPassword();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(codecRegistry17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(codecRegistry19);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "mongodb://localhost/test" + "'", str23, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray24);
    }

    @Test
    public void test3258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3258");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.connectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.minHeartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getMaxConnectionLifeTime();
        int int13 = mongoClientOptions11.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry14 = mongoClientOptions11.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder15 = builder5.codecRegistry(codecRegistry14);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketTimeout(15);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder15.build();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions18.getWriteConcern();
        int int20 = mongoClientOptions18.getMaxConnectionLifeTime();
        boolean boolean21 = mongoClientOptions18.isSslInvalidHostNameAllowed();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(codecRegistry14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test3259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3259");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setUsername("");
        mongoProperties0.setHost("hi!");
        char[] charArray5 = mongoProperties0.getPassword();
        mongoProperties0.setHost("");
        java.lang.String str8 = mongoProperties0.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory14 = mongoClientOptions12.getDbDecoderFactory();
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties0.createMongoClient(mongoClientOptions12, environment15);
        mongoProperties0.clearPassword();
        java.lang.String str18 = mongoProperties0.getHost();
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str21 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "test" + "'", str8, "test");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test3260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3260");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        com.mongodb.ReadPreference readPreference6 = mongoClientOptions3.getReadPreference();
        int int7 = mongoClientOptions3.getMaxWaitTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry8 = mongoClientOptions3.getCodecRegistry();
        int int9 = mongoClientOptions3.getMaxConnectionIdleTime();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        java.lang.String str11 = mongoClientOptions3.getRequiredReplicaSetName();
        int int12 = mongoClientOptions3.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertNotNull(readPreference6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertNotNull(codecRegistry8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test3261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3261");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        com.mongodb.ReadPreference readPreference6 = mongoClientOptions3.getReadPreference();
        boolean boolean7 = mongoClientOptions3.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern16 = mongoClientOptions14.getReadConcern();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions14.getReadPreference();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions14.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder19 = builder10.writeConcern(writeConcern18);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.maxConnectionIdleTime((int) 'a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertNotNull(readPreference6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertNotNull(readConcern16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test3262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3262");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatSocketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern18 = mongoClientOptions16.getReadConcern();
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions16.getReadPreference();
        com.mongodb.WriteConcern writeConcern20 = mongoClientOptions16.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder21 = builder8.writeConcern(writeConcern20);
        com.mongodb.MongoClientOptions.Builder builder23 = builder8.sslInvalidHostNameAllowed(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertNotNull(readConcern18);
        org.junit.Assert.assertNotNull(readPreference19);
        org.junit.Assert.assertNotNull(writeConcern20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test3263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3263");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.threadsAllowedToBlockForConnectionMultiplier(100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.maxConnectionLifeTime(15);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.sslInvalidHostNameAllowed(false);
        com.mongodb.event.CommandListener commandListener17 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder18 = builder14.addCommandListener(commandListener17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test3264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3264");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.serverSelectionTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatFrequency();
        int int22 = mongoClientOptions20.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions20);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder28.build();
        int int30 = mongoClientOptions29.getSocketTimeout();
        boolean boolean31 = mongoClientOptions29.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory32 = mongoClientOptions29.getSocketFactory();
        org.bson.codecs.configuration.CodecRegistry codecRegistry33 = mongoClientOptions29.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder34 = builder23.codecRegistry(codecRegistry33);
        com.mongodb.MongoClientOptions.Builder builder35 = builder14.codecRegistry(codecRegistry33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder5.codecRegistry(codecRegistry33);
        com.mongodb.MongoClientOptions.Builder builder38 = builder5.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.serverSelectionTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder44 = builder38.sslInvalidHostNameAllowed(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(socketFactory32);
        org.junit.Assert.assertNotNull(codecRegistry33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test3265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3265");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        int int14 = mongoClientOptions12.getConnectionsPerHost();
        boolean boolean15 = mongoClientOptions12.isSocketKeepAlive();
        boolean boolean16 = mongoClientOptions12.isSslInvalidHostNameAllowed();
        com.mongodb.DBEncoderFactory dBEncoderFactory17 = mongoClientOptions12.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder18 = builder8.dbEncoderFactory(dBEncoderFactory17);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern29 = mongoClientOptions27.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder30 = builder23.readConcern(readConcern29);
        com.mongodb.MongoClientOptions.Builder builder31 = builder18.readConcern(readConcern29);
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder38.threadsAllowedToBlockForConnectionMultiplier(100);
        com.mongodb.MongoClientOptions.Builder builder45 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder47.build();
        int int49 = mongoClientOptions48.getSocketTimeout();
        boolean boolean50 = mongoClientOptions48.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory51 = mongoClientOptions48.getSocketFactory();
        org.bson.codecs.configuration.CodecRegistry codecRegistry52 = mongoClientOptions48.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder53 = builder38.codecRegistry(codecRegistry52);
        com.mongodb.MongoClientOptions.Builder builder54 = builder18.codecRegistry(codecRegistry52);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.maxConnectionIdleTime((-1));
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.threadsAllowedToBlockForConnectionMultiplier(10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(readConcern29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(socketFactory51);
        org.junit.Assert.assertNotNull(codecRegistry52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test3266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3266");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.connectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder7 = builder0.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("");
        java.lang.Class<?> wildcardClass14 = builder13.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3267");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getMaxConnectionIdleTime();
        java.lang.String str6 = mongoClientOptions3.getDescription();
        int int7 = mongoClientOptions3.getMinConnectionsPerHost();
        int int8 = mongoClientOptions3.getMinHeartbeatFrequency();
        boolean boolean9 = mongoClientOptions3.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.connectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.requiredReplicaSetName("mongodb://localhost/test");
        boolean boolean21 = mongoClientOptions3.equals((java.lang.Object) builder16);
        boolean boolean22 = mongoClientOptions3.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        boolean boolean25 = mongoClientOptions3.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test3268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3268");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        boolean boolean5 = mongoClientOptions3.isAlwaysUseMBeans();
        java.lang.String str6 = mongoClientOptions3.getRequiredReplicaSetName();
        boolean boolean7 = mongoClientOptions3.isSocketKeepAlive();
        int int8 = mongoClientOptions3.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
    }

    @Test
    public void test3269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3269");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getMaxConnectionIdleTime();
        java.lang.String str6 = mongoClientOptions3.getDescription();
        int int7 = mongoClientOptions3.getMinConnectionsPerHost();
        int int8 = mongoClientOptions3.getMinHeartbeatFrequency();
        boolean boolean9 = mongoClientOptions3.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.connectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.requiredReplicaSetName("mongodb://localhost/test");
        boolean boolean21 = mongoClientOptions3.equals((java.lang.Object) builder16);
        boolean boolean22 = mongoClientOptions3.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        int int24 = mongoClientOptions3.getLocalThreshold();
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 15 + "'", int24 == 15);
    }

    @Test
    public void test3270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3270");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        java.lang.Integer int8 = mongoProperties0.getPort();
        java.lang.String str9 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass10 = mongoProperties0.getFieldNamingStrategy();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties11.createMongoClient(mongoClientOptions14, environment15);
        java.lang.String str17 = mongoProperties11.getMongoClientDatabase();
        mongoProperties11.setHost("hi!");
        char[] charArray26 = new char[] { 'a', '4', '#', ' ', ' ', ' ' };
        mongoProperties11.setPassword(charArray26);
        char[] charArray28 = mongoProperties11.getPassword();
        mongoProperties11.setHost("");
        char[] charArray31 = mongoProperties11.getPassword();
        mongoProperties0.setPassword(charArray31);
        java.lang.Integer int33 = mongoProperties0.getPort();
        mongoProperties0.setUri("");
        java.lang.String str36 = mongoProperties0.getDatabase();
        java.lang.String str37 = mongoProperties0.getHost();
        java.lang.Class<?> wildcardClass38 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.clearPassword();
        mongoProperties0.setDatabase("test");
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(wildcardClass38);
    }

    @Test
    public void test3271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3271");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatSocketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern18 = mongoClientOptions16.getReadConcern();
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions16.getReadPreference();
        com.mongodb.WriteConcern writeConcern20 = mongoClientOptions16.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder21 = builder8.writeConcern(writeConcern20);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionIdleTime((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertNotNull(readConcern18);
        org.junit.Assert.assertNotNull(readPreference19);
        org.junit.Assert.assertNotNull(writeConcern20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test3272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3272");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getLocalThreshold();
        int int5 = mongoClientOptions3.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatSocketTimeout((-1));
        boolean boolean19 = mongoClientOptions3.equals((java.lang.Object) builder14);
        com.mongodb.ReadConcern readConcern20 = mongoClientOptions3.getReadConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20000 + "'", int5 == 20000);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(readConcern20);
    }

    @Test
    public void test3273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3273");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        int int5 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.minHeartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder17.build();
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.minHeartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder26.serverSelectionTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder37.build();
        int int39 = mongoClientOptions38.getConnectionsPerHost();
        int int40 = mongoClientOptions38.getHeartbeatSocketTimeout();
        java.lang.String str41 = mongoClientOptions38.getRequiredReplicaSetName();
        boolean boolean42 = mongoClientOptions38.isAlwaysUseMBeans();
        com.mongodb.DBEncoderFactory dBEncoderFactory43 = mongoClientOptions38.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder44 = builder32.dbEncoderFactory(dBEncoderFactory43);
        com.mongodb.MongoClientOptions.Builder builder45 = builder21.dbEncoderFactory(dBEncoderFactory43);
        com.mongodb.MongoClientOptions.Builder builder46 = builder14.dbEncoderFactory(dBEncoderFactory43);
        com.mongodb.MongoClientOptions.Builder builder47 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder49.build();
        int int51 = mongoClientOptions50.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions55 = builder54.build();
        int int56 = mongoClientOptions55.getSocketTimeout();
        boolean boolean57 = mongoClientOptions55.isAlwaysUseMBeans();
        int int58 = mongoClientOptions55.getThreadsAllowedToBlockForConnectionMultiplier();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList59 = mongoClientOptions55.getCommandListeners();
        boolean boolean60 = mongoClientOptions50.equals((java.lang.Object) mongoClientOptions55);
        int int61 = mongoClientOptions55.getMaxConnectionLifeTime();
        javax.net.SocketFactory socketFactory62 = mongoClientOptions55.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder63 = builder46.socketFactory(socketFactory62);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(mongoClientOptions55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 5 + "'", int58 == 5);
        org.junit.Assert.assertNotNull(commandListenerList59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(socketFactory62);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test3274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3274");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getConnectionsPerHost();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        java.lang.String str10 = mongoClientOptions7.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions7.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder12 = builder0.writeConcern(writeConcern11);
        com.mongodb.MongoClientOptions.Builder builder14 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder0.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder0.heartbeatConnectTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        int int23 = mongoClientOptions22.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern24 = mongoClientOptions22.getReadConcern();
        int int25 = mongoClientOptions22.getMinConnectionsPerHost();
        int int26 = mongoClientOptions22.getMaxWaitTime();
        int int27 = mongoClientOptions22.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions22);
        java.util.List<com.mongodb.event.CommandListener> commandListenerList29 = mongoClientOptions22.getCommandListeners();
        org.bson.codecs.configuration.CodecRegistry codecRegistry30 = mongoClientOptions22.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder31 = builder18.codecRegistry(codecRegistry30);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.serverSelectionTimeout(120000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10000 + "'", int23 == 10000);
        org.junit.Assert.assertNotNull(readConcern24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10000 + "'", int27 == 10000);
        org.junit.Assert.assertNotNull(commandListenerList29);
        org.junit.Assert.assertNotNull(codecRegistry30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test3275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3275");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        boolean boolean18 = mongoClientOptions17.isSslEnabled();
        int int19 = mongoClientOptions17.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions17.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder21 = builder13.dbEncoderFactory(dBEncoderFactory20);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern27 = mongoClientOptions25.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder28 = builder13.readConcern(readConcern27);
        com.mongodb.MongoClientOptions.Builder builder29 = builder2.readConcern(readConcern27);
        com.mongodb.MongoClientOptions.Builder builder31 = builder2.maxConnectionIdleTime(1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        int int40 = mongoClientOptions39.getSocketTimeout();
        int int41 = mongoClientOptions39.getThreadsAllowedToBlockForConnectionMultiplier();
        org.bson.codecs.configuration.CodecRegistry codecRegistry42 = mongoClientOptions39.getCodecRegistry();
        int int43 = mongoClientOptions39.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder44 = com.mongodb.MongoClientOptions.builder(mongoClientOptions39);
        int int45 = mongoClientOptions39.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder46 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder48.build();
        int int50 = mongoClientOptions49.getMaxConnectionLifeTime();
        boolean boolean51 = mongoClientOptions49.isSslInvalidHostNameAllowed();
        com.mongodb.ReadConcern readConcern52 = mongoClientOptions49.getReadConcern();
        int int53 = mongoClientOptions49.getMaxConnectionIdleTime();
        boolean boolean54 = mongoClientOptions39.equals((java.lang.Object) int53);
        int int55 = mongoClientOptions39.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern56 = mongoClientOptions39.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder57 = builder35.writeConcern(writeConcern56);
        com.mongodb.MongoClientOptions.Builder builder58 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions61 = builder60.build();
        int int62 = mongoClientOptions61.getSocketTimeout();
        int int63 = mongoClientOptions61.getThreadsAllowedToBlockForConnectionMultiplier();
        int int64 = mongoClientOptions61.getMaxWaitTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry65 = mongoClientOptions61.getCodecRegistry();
        int int66 = mongoClientOptions61.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder67 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions61);
        boolean boolean68 = mongoClientOptions61.isAlwaysUseMBeans();
        com.mongodb.WriteConcern writeConcern69 = mongoClientOptions61.getWriteConcern();
        int int70 = mongoClientOptions61.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder71 = com.mongodb.MongoClientOptions.builder(mongoClientOptions61);
        com.mongodb.ReadConcern readConcern72 = mongoClientOptions61.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder73 = builder35.readConcern(readConcern72);
        com.mongodb.MongoClientOptions.Builder builder75 = builder35.serverSelectionTimeout((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertNotNull(readConcern27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(codecRegistry42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 500 + "'", int45 == 500);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(readConcern52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(writeConcern56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(mongoClientOptions61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 120000 + "'", int64 == 120000);
        org.junit.Assert.assertNotNull(codecRegistry65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(writeConcern69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(readConcern72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test3276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3276");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setAuthenticationDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getSocketTimeout();
        boolean boolean13 = mongoClientOptions11.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties0.createMongoClient(mongoClientOptions11, environment14);
        java.lang.Integer int16 = mongoProperties0.getPort();
        mongoProperties0.setUri("hi!");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str21 = mongoProperties0.getDatabase();
        java.lang.String str22 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("hi!");
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
    }

    @Test
    public void test3277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3277");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUsername("hi!");
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        java.lang.Integer int11 = mongoProperties0.getPort();
        mongoProperties0.clearPassword();
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str15 = mongoProperties0.getUsername();
        mongoProperties0.setHost("test");
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test3278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3278");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setHost("hi!");
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setUsername("hi!");
        java.lang.String str13 = mongoProperties0.getUri();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getMaxConnectionLifeTime();
        int int19 = mongoClientOptions17.getConnectionsPerHost();
        java.lang.String str20 = mongoClientOptions17.getDescription();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList21 = mongoClientOptions17.getCommandListeners();
        int int22 = mongoClientOptions17.getMinConnectionsPerHost();
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions17, environment23);
        int int25 = mongoClientOptions17.getHeartbeatSocketTimeout();
        int int26 = mongoClientOptions17.getHeartbeatSocketTimeout();
        int int27 = mongoClientOptions17.getServerSelectionTimeout();
        boolean boolean28 = mongoClientOptions17.isSslEnabled();
        boolean boolean29 = mongoClientOptions17.isSslEnabled();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(commandListenerList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 30000 + "'", int27 == 30000);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test3279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3279");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.clearPassword();
        java.lang.String str10 = mongoProperties0.getUsername();
        java.lang.String str11 = mongoProperties0.getUri();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getConnectionsPerHost();
        int int17 = mongoClientOptions15.getHeartbeatSocketTimeout();
        java.lang.String str18 = mongoClientOptions15.getRequiredReplicaSetName();
        boolean boolean19 = mongoClientOptions15.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions15, environment20);
        java.lang.String str22 = mongoClientOptions15.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions15);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions15);
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions15);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test3280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3280");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setHost("");
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setPort((java.lang.Integer) 10000);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties12.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.springframework.core.env.Environment environment16 = null;
        com.mongodb.MongoClient mongoClient17 = mongoProperties12.createMongoClient(mongoClientOptions15, environment16);
        java.lang.String str18 = mongoProperties12.getMongoClientDatabase();
        java.lang.String str19 = mongoProperties12.getAuthenticationDatabase();
        java.lang.String str20 = mongoProperties12.getDatabase();
        java.lang.String str21 = mongoProperties12.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties22.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties22.createMongoClient(mongoClientOptions25, environment26);
        java.lang.String str28 = mongoProperties22.getMongoClientDatabase();
        mongoProperties22.setHost("hi!");
        char[] charArray37 = new char[] { 'a', '4', '#', ' ', ' ', ' ' };
        mongoProperties22.setPassword(charArray37);
        char[] charArray39 = mongoProperties22.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties40 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties40.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions43 = null;
        org.springframework.core.env.Environment environment44 = null;
        com.mongodb.MongoClient mongoClient45 = mongoProperties40.createMongoClient(mongoClientOptions43, environment44);
        java.lang.String str46 = mongoProperties40.getMongoClientDatabase();
        mongoProperties40.setHost("hi!");
        char[] charArray55 = new char[] { 'a', '4', '#', ' ', ' ', ' ' };
        mongoProperties40.setPassword(charArray55);
        char[] charArray57 = mongoProperties40.getPassword();
        mongoProperties40.setHost("");
        char[] charArray60 = mongoProperties40.getPassword();
        mongoProperties22.setPassword(charArray60);
        char[] charArray62 = mongoProperties22.getPassword();
        mongoProperties12.setPassword(charArray62);
        mongoProperties0.setPassword(charArray62);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "mongodb://localhost/test" + "'", str21, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNotNull(mongoClient45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[a, 4, #,  ,  ,  ]");
    }

    @Test
    public void test3281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3281");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.threadsAllowedToBlockForConnectionMultiplier(100);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern29 = mongoClientOptions27.getReadConcern();
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions27.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder31 = builder17.readPreference(readPreference30);
        com.mongodb.MongoClientOptions.Builder builder32 = builder8.readPreference(readPreference30);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.minHeartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.localThreshold(500);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(readConcern29);
        org.junit.Assert.assertNotNull(readPreference30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test3282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3282");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        boolean boolean5 = mongoClientOptions3.isAlwaysUseMBeans();
        int int6 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList7 = mongoClientOptions3.getCommandListeners();
        int int8 = mongoClientOptions3.getMaxConnectionLifeTime();
        int int9 = mongoClientOptions3.getServerSelectionTimeout();
        int int10 = mongoClientOptions3.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(commandListenerList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 30000 + "'", int9 == 30000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test3283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3283");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory5 = mongoClientOptions3.getDbDecoderFactory();
        com.mongodb.ReadConcern readConcern6 = mongoClientOptions3.getReadConcern();
        int int7 = mongoClientOptions3.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory8 = mongoClientOptions3.getDbDecoderFactory();
        int int9 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory5);
        org.junit.Assert.assertNotNull(readConcern6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
    }

    @Test
    public void test3284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3284");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder17 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatConnectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern29 = mongoClientOptions27.getReadConcern();
        int int30 = mongoClientOptions27.getMinConnectionsPerHost();
        boolean boolean31 = mongoClientOptions27.isSslInvalidHostNameAllowed();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList32 = mongoClientOptions27.getCommandListeners();
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions27);
        com.mongodb.ReadConcern readConcern34 = mongoClientOptions27.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder35 = builder23.readConcern(readConcern34);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(readConcern29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(commandListenerList32);
        org.junit.Assert.assertNotNull(readConcern34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test3285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3285");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUsername("hi!");
        mongoProperties0.setPort((java.lang.Integer) 5);
        java.lang.String str12 = mongoProperties0.getHost();
        mongoProperties0.setHost("");
        java.lang.String str15 = mongoProperties0.getHost();
        java.lang.String str16 = mongoProperties0.getGridFsDatabase();
        java.lang.String str17 = mongoProperties0.getDatabase();
        java.lang.String str18 = mongoProperties0.getGridFsDatabase();
        java.lang.String str19 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str20 = mongoProperties0.getUsername();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test3286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3286");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        boolean boolean7 = mongoClientOptions3.equals((java.lang.Object) 500);
        int int8 = mongoClientOptions3.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.maxConnectionIdleTime(1);
        boolean boolean18 = mongoClientOptions3.equals((java.lang.Object) builder17);
        org.bson.codecs.configuration.CodecRegistry codecRegistry19 = mongoClientOptions3.getCodecRegistry();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions3.getDbDecoderFactory();
        boolean boolean21 = mongoClientOptions3.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10000 + "'", int8 == 10000);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(codecRegistry19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test3287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3287");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.threadsAllowedToBlockForConnectionMultiplier(100);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern18 = mongoClientOptions16.getReadConcern();
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions16.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder20 = builder6.readPreference(readPreference19);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.heartbeatSocketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder36.build();
        int int38 = mongoClientOptions37.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern39 = mongoClientOptions37.getReadConcern();
        com.mongodb.ReadPreference readPreference40 = mongoClientOptions37.getReadPreference();
        com.mongodb.WriteConcern writeConcern41 = mongoClientOptions37.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder42 = builder29.writeConcern(writeConcern41);
        com.mongodb.MongoClientOptions.Builder builder43 = builder20.writeConcern(writeConcern41);
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder54 = builder50.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder56 = builder50.threadsAllowedToBlockForConnectionMultiplier(100);
        com.mongodb.MongoClientOptions.Builder builder57 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions60 = builder59.build();
        int int61 = mongoClientOptions60.getSocketTimeout();
        boolean boolean62 = mongoClientOptions60.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory63 = mongoClientOptions60.getSocketFactory();
        org.bson.codecs.configuration.CodecRegistry codecRegistry64 = mongoClientOptions60.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder65 = builder50.codecRegistry(codecRegistry64);
        com.mongodb.MongoClientOptions.Builder builder66 = builder20.codecRegistry(codecRegistry64);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.sslEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertNotNull(readConcern18);
        org.junit.Assert.assertNotNull(readPreference19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10000 + "'", int38 == 10000);
        org.junit.Assert.assertNotNull(readConcern39);
        org.junit.Assert.assertNotNull(readPreference40);
        org.junit.Assert.assertNotNull(writeConcern41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(mongoClientOptions60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(socketFactory63);
        org.junit.Assert.assertNotNull(codecRegistry64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test3288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3288");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        java.lang.String str6 = mongoClientOptions3.getRequiredReplicaSetName();
        org.bson.codecs.configuration.CodecRegistry codecRegistry7 = mongoClientOptions3.getCodecRegistry();
        int int8 = mongoClientOptions3.getHeartbeatConnectTimeout();
        int int9 = mongoClientOptions3.getConnectionsPerHost();
        java.lang.String str10 = mongoClientOptions3.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        java.lang.String str12 = mongoClientOptions3.getDescription();
        int int13 = mongoClientOptions3.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(codecRegistry7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test3289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3289");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        com.mongodb.MongoClientOptions mongoClientOptions4 = builder2.build();
        int int5 = mongoClientOptions4.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder6 = com.mongodb.MongoClientOptions.builder(mongoClientOptions4);
        int int7 = mongoClientOptions4.getConnectTimeout();
        int int8 = mongoClientOptions4.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(mongoClientOptions4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10000 + "'", int7 == 10000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
    }

    @Test
    public void test3290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3290");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getMaxConnectionLifeTime();
        int int5 = mongoClientOptions3.getConnectionsPerHost();
        javax.net.SocketFactory socketFactory6 = mongoClientOptions3.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        boolean boolean8 = mongoClientOptions3.isSslInvalidHostNameAllowed();
        boolean boolean9 = mongoClientOptions3.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        int int11 = mongoClientOptions3.getHeartbeatConnectTimeout();
        int int12 = mongoClientOptions3.getMinConnectionsPerHost();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions3.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNotNull(socketFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(readPreference13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test3291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3291");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        int int6 = mongoClientOptions3.getMinConnectionsPerHost();
        int int7 = mongoClientOptions3.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern8 = mongoClientOptions3.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        org.bson.codecs.configuration.CodecRegistry codecRegistry10 = mongoClientOptions3.getCodecRegistry();
        boolean boolean11 = mongoClientOptions3.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertNotNull(writeConcern8);
        org.junit.Assert.assertNotNull(codecRegistry10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test3292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3292");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getMaxConnectionIdleTime();
        int int6 = mongoClientOptions3.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.connectTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.connectionsPerHost((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.heartbeatConnectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder19 = builder11.maxConnectionLifeTime(120000);
        com.mongodb.MongoClientOptions.Builder builder21 = builder11.socketTimeout((int) (byte) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test3293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3293");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        boolean boolean7 = mongoClientOptions3.isSslInvalidHostNameAllowed();
        int int8 = mongoClientOptions3.getConnectTimeout();
        int int9 = mongoClientOptions3.getMaxWaitTime();
        int int10 = mongoClientOptions3.getMinConnectionsPerHost();
        int int11 = mongoClientOptions3.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        boolean boolean13 = mongoClientOptions3.isSslInvalidHostNameAllowed();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10000 + "'", int8 == 10000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 120000 + "'", int9 == 120000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test3294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3294");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.serverSelectionTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.connectionsPerHost(5);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        com.mongodb.MongoClientOptions.Builder builder11 = builder8.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder8.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder8.minHeartbeatFrequency(20000);
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        int int22 = mongoClientOptions21.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory23 = mongoClientOptions21.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern24 = mongoClientOptions21.getWriteConcern();
        boolean boolean25 = mongoClientOptions21.isSslInvalidHostNameAllowed();
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions21.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList27 = mongoClientOptions21.getCommandListeners();
        org.bson.codecs.configuration.CodecRegistry codecRegistry28 = mongoClientOptions21.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder29 = builder8.codecRegistry(codecRegistry28);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory23);
        org.junit.Assert.assertNotNull(writeConcern24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(readPreference26);
        org.junit.Assert.assertNotNull(commandListenerList27);
        org.junit.Assert.assertNotNull(codecRegistry28);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test3295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3295");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getHost();
        mongoProperties0.setUsername("");
        mongoProperties0.setGridFsDatabase("");
        java.lang.Class<?> wildcardClass12 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str13 = mongoProperties0.getUsername();
        mongoProperties0.setPort((java.lang.Integer) 27017);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test3296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3296");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getMaxConnectionLifeTime();
        boolean boolean5 = mongoClientOptions3.isSslInvalidHostNameAllowed();
        com.mongodb.ReadConcern readConcern6 = mongoClientOptions3.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        int int8 = mongoClientOptions3.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder10 = builder9.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(readConcern6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test3297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3297");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUsername("hi!");
        mongoProperties0.setPort((java.lang.Integer) 5);
        java.lang.String str12 = mongoProperties0.getHost();
        mongoProperties0.setHost("");
        java.lang.String str15 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str16 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test3298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3298");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.threadsAllowedToBlockForConnectionMultiplier(100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.maxConnectionLifeTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) '4');
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.minHeartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        int int29 = mongoClientOptions28.getSocketTimeout();
        boolean boolean30 = mongoClientOptions28.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory31 = mongoClientOptions28.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder32 = builder24.socketFactory(socketFactory31);
        com.mongodb.MongoClientOptions.Builder builder33 = builder18.socketFactory(socketFactory31);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder35 = builder33.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: threadsAllowedToBlockForConnectionMultiplier must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(socketFactory31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test3299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3299");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        boolean boolean5 = mongoClientOptions3.isSocketKeepAlive();
        int int6 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int7 = mongoClientOptions3.getConnectTimeout();
        boolean boolean8 = mongoClientOptions3.isAlwaysUseMBeans();
        boolean boolean9 = mongoClientOptions3.isSslEnabled();
        java.lang.String str10 = mongoClientOptions3.getDescription();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        int int12 = mongoClientOptions3.getSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry13 = mongoClientOptions3.getCodecRegistry();
        com.mongodb.DBDecoderFactory dBDecoderFactory14 = mongoClientOptions3.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions3.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10000 + "'", int7 == 10000);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(codecRegistry13);
        org.junit.Assert.assertNotNull(dBDecoderFactory14);
        org.junit.Assert.assertNotNull(readPreference15);
    }

    @Test
    public void test3300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3300");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        boolean boolean5 = mongoClientOptions3.isSocketKeepAlive();
        int int6 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int7 = mongoClientOptions3.getConnectTimeout();
        boolean boolean8 = mongoClientOptions3.isAlwaysUseMBeans();
        boolean boolean9 = mongoClientOptions3.isSslEnabled();
        int int10 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions3.getDbEncoderFactory();
        int int12 = mongoClientOptions3.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10000 + "'", int7 == 10000);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 500 + "'", int12 == 500);
    }

    @Test
    public void test3301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3301");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setUsername("hi!");
        java.lang.Integer int8 = mongoProperties0.getPort();
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass10 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        boolean boolean15 = mongoClientOptions14.isSslEnabled();
        int int16 = mongoClientOptions14.getHeartbeatSocketTimeout();
        int int17 = mongoClientOptions14.getServerSelectionTimeout();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions14);
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions14.getReadPreference();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions14, environment20);
        java.lang.String str22 = mongoProperties0.getHost();
        mongoProperties0.setGridFsDatabase("");
        char[] charArray25 = null;
        mongoProperties0.setPassword(charArray25);
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.connectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder52 = builder48.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.maxConnectionIdleTime((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder57 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions60 = builder57.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory61 = mongoClientOptions60.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder62 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions65 = builder64.build();
        int int66 = mongoClientOptions65.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory67 = mongoClientOptions65.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern68 = mongoClientOptions65.getWriteConcern();
        boolean boolean69 = mongoClientOptions60.equals((java.lang.Object) writeConcern68);
        com.mongodb.MongoClientOptions.Builder builder70 = builder56.writeConcern(writeConcern68);
        com.mongodb.MongoClientOptions.Builder builder71 = builder41.writeConcern(writeConcern68);
        com.mongodb.MongoClientOptions mongoClientOptions72 = builder71.build();
        org.springframework.core.env.Environment environment73 = null;
        com.mongodb.MongoClient mongoClient74 = mongoProperties0.createMongoClient(mongoClientOptions72, environment73);
        com.mongodb.MongoClientOptions.Builder builder75 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions72);
        com.mongodb.DBDecoderFactory dBDecoderFactory76 = mongoClientOptions72.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30000 + "'", int17 == 30000);
        org.junit.Assert.assertNotNull(readPreference19);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(mongoClientOptions60);
        org.junit.Assert.assertNotNull(dBDecoderFactory61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(mongoClientOptions65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10000 + "'", int66 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory67);
        org.junit.Assert.assertNotNull(writeConcern68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(mongoClientOptions72);
        org.junit.Assert.assertNotNull(mongoClient74);
        org.junit.Assert.assertNotNull(dBDecoderFactory76);
    }

    @Test
    public void test3302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3302");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        int int5 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern6 = mongoClientOptions3.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        int int8 = mongoClientOptions3.getLocalThreshold();
        java.lang.String str9 = mongoClientOptions3.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertNotNull(writeConcern6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test3303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3303");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        com.mongodb.ReadPreference readPreference6 = mongoClientOptions3.getReadPreference();
        int int7 = mongoClientOptions3.getMaxWaitTime();
        int int8 = mongoClientOptions3.getMaxConnectionIdleTime();
        int int9 = mongoClientOptions3.getLocalThreshold();
        com.mongodb.WriteConcern writeConcern10 = mongoClientOptions3.getWriteConcern();
        int int11 = mongoClientOptions3.getConnectionsPerHost();
        java.lang.String str12 = mongoClientOptions3.getRequiredReplicaSetName();
        int int13 = mongoClientOptions3.getLocalThreshold();
        int int14 = mongoClientOptions3.getHeartbeatConnectTimeout();
        boolean boolean15 = mongoClientOptions3.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertNotNull(readPreference6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 15 + "'", int9 == 15);
        org.junit.Assert.assertNotNull(writeConcern10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 15 + "'", int13 == 15);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test3304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3304");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        int int11 = mongoClientOptions10.getConnectionsPerHost();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        boolean boolean13 = mongoClientOptions10.isSocketKeepAlive();
        java.lang.String str14 = mongoClientOptions10.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.maxConnectionIdleTime(1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder17.maxConnectionLifeTime((int) '4');
        com.mongodb.MongoClientOptions.Builder builder27 = builder17.description("");
        boolean boolean28 = mongoClientOptions10.equals((java.lang.Object) builder27);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions10);
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.heartbeatSocketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder45.build();
        int int47 = mongoClientOptions46.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern48 = mongoClientOptions46.getReadConcern();
        com.mongodb.ReadPreference readPreference49 = mongoClientOptions46.getReadPreference();
        com.mongodb.WriteConcern writeConcern50 = mongoClientOptions46.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder51 = builder38.writeConcern(writeConcern50);
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions55 = builder54.build();
        boolean boolean56 = mongoClientOptions55.isSslEnabled();
        int int57 = mongoClientOptions55.getHeartbeatSocketTimeout();
        int int58 = mongoClientOptions55.getServerSelectionTimeout();
        com.mongodb.MongoClientOptions.Builder builder59 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions55);
        com.mongodb.ReadPreference readPreference60 = mongoClientOptions55.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder61 = builder38.readPreference(readPreference60);
        com.mongodb.MongoClientOptions mongoClientOptions62 = builder61.build();
        com.mongodb.MongoClientOptions.Builder builder63 = com.mongodb.MongoClientOptions.builder(mongoClientOptions62);
        com.mongodb.DBDecoderFactory dBDecoderFactory64 = mongoClientOptions62.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder65 = builder29.dbDecoderFactory(dBDecoderFactory64);
        com.mongodb.MongoClientOptions.Builder builder66 = builder0.dbDecoderFactory(dBDecoderFactory64);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10000 + "'", int47 == 10000);
        org.junit.Assert.assertNotNull(readConcern48);
        org.junit.Assert.assertNotNull(readPreference49);
        org.junit.Assert.assertNotNull(writeConcern50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(mongoClientOptions55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 30000 + "'", int58 == 30000);
        org.junit.Assert.assertNotNull(readPreference60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(mongoClientOptions62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(dBDecoderFactory64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test3305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3305");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory4 = mongoClientOptions3.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory10 = mongoClientOptions8.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions8.getWriteConcern();
        boolean boolean12 = mongoClientOptions3.equals((java.lang.Object) writeConcern11);
        boolean boolean13 = mongoClientOptions3.isAlwaysUseMBeans();
        javax.net.SocketFactory socketFactory14 = mongoClientOptions3.getSocketFactory();
        int int15 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(dBDecoderFactory4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory10);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(socketFactory14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
    }

    @Test
    public void test3306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3306");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        boolean boolean7 = mongoClientOptions3.equals((java.lang.Object) 500);
        int int8 = mongoClientOptions3.getMaxConnectionIdleTime();
        int int9 = mongoClientOptions3.getMinHeartbeatFrequency();
        boolean boolean10 = mongoClientOptions3.isAlwaysUseMBeans();
        com.mongodb.ReadConcern readConcern11 = mongoClientOptions3.getReadConcern();
        org.bson.codecs.configuration.CodecRegistry codecRegistry12 = mongoClientOptions3.getCodecRegistry();
        int int13 = mongoClientOptions3.getMinHeartbeatFrequency();
        boolean boolean14 = mongoClientOptions3.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(readConcern11);
        org.junit.Assert.assertNotNull(codecRegistry12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test3307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3307");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        java.lang.Integer int8 = mongoProperties0.getPort();
        java.lang.String str9 = mongoProperties0.getDatabase();
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setUri("");
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        mongoProperties0.setUsername("mongodb://localhost/test");
        java.lang.Class<?> wildcardClass17 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass18 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNull(wildcardClass18);
    }

    @Test
    public void test3308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3308");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 0);
        mongoProperties0.setPort((java.lang.Integer) 500);
        mongoProperties0.setUri("test");
        char[] charArray10 = null;
        mongoProperties0.setPassword(charArray10);
        mongoProperties0.setDatabase("hi!");
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test3309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3309");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getMaxConnectionLifeTime();
        int int5 = mongoClientOptions3.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry6 = mongoClientOptions3.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions3.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNotNull(codecRegistry6);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test3310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3310");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        java.lang.String str6 = mongoClientOptions3.getRequiredReplicaSetName();
        org.bson.codecs.configuration.CodecRegistry codecRegistry7 = mongoClientOptions3.getCodecRegistry();
        int int8 = mongoClientOptions3.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder(mongoClientOptions3);
        boolean boolean10 = mongoClientOptions3.isAlwaysUseMBeans();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions3.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(codecRegistry7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
    }

    @Test
    public void test3311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3311");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.connectionsPerHost((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test3312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3312");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        int int5 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        int int7 = mongoClientOptions3.getSocketTimeout();
        int int8 = mongoClientOptions3.getMaxWaitTime();
        int int9 = mongoClientOptions3.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getSocketTimeout();
        java.lang.String str15 = mongoClientOptions13.getDescription();
        boolean boolean16 = mongoClientOptions13.isCursorFinalizerEnabled();
        java.lang.String str17 = mongoClientOptions13.getDescription();
        boolean boolean18 = mongoClientOptions3.equals((java.lang.Object) mongoClientOptions13);
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions13.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 120000 + "'", int8 == 120000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(readPreference19);
    }

    @Test
    public void test3313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3313");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.socketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.minHeartbeatFrequency(120000);
        com.mongodb.event.CommandListener commandListener13 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder14 = builder12.addCommandListener(commandListener13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test3314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3314");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.clearPassword();
        mongoProperties0.setUsername("test");
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test3315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3315");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setAuthenticationDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getSocketTimeout();
        boolean boolean13 = mongoClientOptions11.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties0.createMongoClient(mongoClientOptions11, environment14);
        int int16 = mongoClientOptions11.getHeartbeatFrequency();
        int int17 = mongoClientOptions11.getConnectTimeout();
        int int18 = mongoClientOptions11.getConnectionsPerHost();
        int int19 = mongoClientOptions11.getLocalThreshold();
        boolean boolean20 = mongoClientOptions11.isCursorFinalizerEnabled();
        org.bson.codecs.configuration.CodecRegistry codecRegistry21 = mongoClientOptions11.getCodecRegistry();
        int int22 = mongoClientOptions11.getMaxWaitTime();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 15 + "'", int19 == 15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(codecRegistry21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 120000 + "'", int22 == 120000);
    }

    @Test
    public void test3316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3316");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        boolean boolean5 = mongoClientOptions3.isAlwaysUseMBeans();
        int int6 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        boolean boolean29 = mongoClientOptions28.isSslEnabled();
        int int30 = mongoClientOptions28.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory31 = mongoClientOptions28.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder32 = builder24.dbEncoderFactory(dBEncoderFactory31);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern38 = mongoClientOptions36.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder39 = builder24.readConcern(readConcern38);
        com.mongodb.MongoClientOptions.Builder builder40 = builder13.readConcern(readConcern38);
        com.mongodb.MongoClientOptions.Builder builder42 = builder13.maxConnectionIdleTime(1);
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder45.build();
        boolean boolean47 = mongoClientOptions46.isSslEnabled();
        int int48 = mongoClientOptions46.getMaxConnectionIdleTime();
        java.lang.String str49 = mongoClientOptions46.getDescription();
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions46);
        com.mongodb.DBDecoderFactory dBDecoderFactory51 = mongoClientOptions46.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder52 = builder42.dbDecoderFactory(dBDecoderFactory51);
        com.mongodb.MongoClientOptions.Builder builder53 = builder9.dbDecoderFactory(dBDecoderFactory51);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10000 + "'", int37 == 10000);
        org.junit.Assert.assertNotNull(readConcern38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(dBDecoderFactory51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test3317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3317");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getServerSelectionTimeout();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        int int8 = mongoClientOptions3.getConnectionsPerHost();
        boolean boolean9 = mongoClientOptions3.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 30000 + "'", int6 == 30000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test3318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3318");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        boolean boolean5 = mongoClientOptions3.isSocketKeepAlive();
        boolean boolean6 = mongoClientOptions3.isAlwaysUseMBeans();
        int int7 = mongoClientOptions3.getMaxWaitTime();
        int int8 = mongoClientOptions3.getMinHeartbeatFrequency();
        int int9 = mongoClientOptions3.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
    }

    @Test
    public void test3319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3319");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.description("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test3320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3320");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory5 = mongoClientOptions3.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern6 = mongoClientOptions3.getWriteConcern();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList7 = mongoClientOptions3.getCommandListeners();
        int int8 = mongoClientOptions3.getMaxConnectionIdleTime();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatFrequency(10000);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.maxWaitTime((-1));
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory5);
        org.junit.Assert.assertNotNull(writeConcern6);
        org.junit.Assert.assertNotNull(commandListenerList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test3321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3321");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        boolean boolean15 = mongoClientOptions14.isSslEnabled();
        int int16 = mongoClientOptions14.getHeartbeatSocketTimeout();
        int int17 = mongoClientOptions14.getMinHeartbeatFrequency();
        int int18 = mongoClientOptions14.getMaxConnectionLifeTime();
        int int19 = mongoClientOptions14.getHeartbeatSocketTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions14.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder21 = builder10.dbDecoderFactory(dBDecoderFactory20);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        boolean boolean26 = mongoClientOptions25.isSslEnabled();
        int int27 = mongoClientOptions25.getHeartbeatSocketTimeout();
        int int28 = mongoClientOptions25.getMinHeartbeatFrequency();
        int int29 = mongoClientOptions25.getMaxConnectionLifeTime();
        int int30 = mongoClientOptions25.getHeartbeatSocketTimeout();
        int int31 = mongoClientOptions25.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions25);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions25);
        int int34 = mongoClientOptions25.getMinHeartbeatFrequency();
        javax.net.SocketFactory socketFactory35 = mongoClientOptions25.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder36 = builder10.socketFactory(socketFactory35);
        com.mongodb.MongoClientOptions.Builder builder38 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder41.build();
        int int43 = mongoClientOptions42.getMaxConnectionLifeTime();
        int int44 = mongoClientOptions42.getConnectionsPerHost();
        boolean boolean45 = mongoClientOptions42.isSocketKeepAlive();
        boolean boolean46 = mongoClientOptions42.isSslInvalidHostNameAllowed();
        com.mongodb.MongoClientOptions.Builder builder47 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder53 = builder49.connectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder56 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions59 = builder58.build();
        com.mongodb.MongoClientOptions.Builder builder61 = builder58.minHeartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder62 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions65 = builder64.build();
        int int66 = mongoClientOptions65.getSocketTimeout();
        boolean boolean67 = mongoClientOptions65.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory68 = mongoClientOptions65.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder69 = builder61.socketFactory(socketFactory68);
        com.mongodb.MongoClientOptions.Builder builder70 = builder53.socketFactory(socketFactory68);
        boolean boolean71 = mongoClientOptions42.equals((java.lang.Object) builder70);
        com.mongodb.MongoClientOptions.Builder builder72 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions75 = builder74.build();
        int int76 = mongoClientOptions75.getConnectionsPerHost();
        boolean boolean77 = mongoClientOptions75.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference78 = mongoClientOptions75.getReadPreference();
        boolean boolean79 = mongoClientOptions75.isSslInvalidHostNameAllowed();
        com.mongodb.ReadPreference readPreference80 = mongoClientOptions75.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder81 = builder70.readPreference(readPreference80);
        com.mongodb.MongoClientOptions.Builder builder82 = builder10.readPreference(readPreference80);
        com.mongodb.MongoClientOptions.Builder builder84 = builder82.connectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder86 = builder82.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 500 + "'", int28 == 500);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 500 + "'", int34 == 500);
        org.junit.Assert.assertNotNull(socketFactory35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(mongoClientOptions59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(mongoClientOptions65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(socketFactory68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(mongoClientOptions75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(readPreference78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(readPreference80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test3322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3322");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        int int6 = mongoClientOptions3.getMinConnectionsPerHost();
        int int7 = mongoClientOptions3.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.DBEncoderFactory dBEncoderFactory9 = mongoClientOptions3.getDbEncoderFactory();
        int int10 = mongoClientOptions3.getMinHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions3.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions3.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
    }

    @Test
    public void test3323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3323");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getAuthenticationDatabase();
        java.lang.Integer int8 = mongoProperties0.getPort();
        java.lang.String str9 = mongoProperties0.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern15 = mongoClientOptions13.getReadConcern();
        boolean boolean16 = mongoClientOptions13.isCursorFinalizerEnabled();
        boolean boolean17 = mongoClientOptions13.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int19 = mongoClientOptions13.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatFrequency();
        int int25 = mongoClientOptions23.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions23);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder38 = builder32.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder45 = builder41.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder49 = builder45.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.maxConnectionIdleTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder55 = builder51.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder56 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions59 = builder58.build();
        int int60 = mongoClientOptions59.getConnectionsPerHost();
        int int61 = mongoClientOptions59.getHeartbeatSocketTimeout();
        boolean boolean63 = mongoClientOptions59.equals((java.lang.Object) 500);
        boolean boolean64 = mongoClientOptions59.isSocketKeepAlive();
        java.lang.String str65 = mongoClientOptions59.getDescription();
        com.mongodb.ReadPreference readPreference66 = mongoClientOptions59.getReadPreference();
        com.mongodb.ReadConcern readConcern67 = mongoClientOptions59.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder68 = builder55.readConcern(readConcern67);
        com.mongodb.MongoClientOptions.Builder builder69 = builder38.readConcern(readConcern67);
        boolean boolean70 = mongoClientOptions13.equals((java.lang.Object) builder69);
        boolean boolean71 = mongoClientOptions13.isCursorFinalizerEnabled();
        org.springframework.core.env.Environment environment72 = null;
        com.mongodb.MongoClient mongoClient73 = mongoProperties0.createMongoClient(mongoClientOptions13, environment72);
        java.lang.String str74 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertNotNull(readConcern15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10000 + "'", int24 == 10000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(mongoClientOptions59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(readPreference66);
        org.junit.Assert.assertNotNull(readConcern67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(mongoClient73);
        org.junit.Assert.assertNull(str74);
    }

    @Test
    public void test3324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3324");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setHost("hi!");
        char[] charArray15 = new char[] { 'a', '4', '#', ' ', ' ', ' ' };
        mongoProperties0.setPassword(charArray15);
        char[] charArray17 = mongoProperties0.getPassword();
        java.lang.String str18 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str19 = mongoProperties0.getHost();
        java.lang.String str20 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass21 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNull(wildcardClass21);
    }

    @Test
    public void test3325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3325");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        boolean boolean13 = mongoClientOptions12.isSslEnabled();
        int int14 = mongoClientOptions12.getHeartbeatSocketTimeout();
        int int15 = mongoClientOptions12.getServerSelectionTimeout();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions12);
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions12.getReadPreference();
        boolean boolean18 = mongoClientOptions12.isAlwaysUseMBeans();
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions12.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = builder6.dbDecoderFactory(dBDecoderFactory19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.heartbeatFrequency(500);
        com.mongodb.MongoClientOptions.Builder builder26 = builder20.serverSelectionTimeout((int) '4');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 30000 + "'", int15 == 30000);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test3326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3326");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern10 = mongoClientOptions8.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder11 = builder4.readConcern(readConcern10);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        boolean boolean23 = mongoClientOptions22.isSslEnabled();
        int int24 = mongoClientOptions22.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions22.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder18.dbEncoderFactory(dBEncoderFactory25);
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        int int31 = mongoClientOptions30.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern32 = mongoClientOptions30.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder33 = builder18.readConcern(readConcern32);
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder36.build();
        int int38 = mongoClientOptions37.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern39 = mongoClientOptions37.getReadConcern();
        com.mongodb.ReadPreference readPreference40 = mongoClientOptions37.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder41 = builder33.readPreference(readPreference40);
        com.mongodb.MongoClientOptions.Builder builder42 = builder11.readPreference(readPreference40);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatFrequency((int) (short) 1);
        java.lang.Class<?> wildcardClass45 = builder44.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertNotNull(readConcern10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10000 + "'", int31 == 10000);
        org.junit.Assert.assertNotNull(readConcern32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10000 + "'", int38 == 10000);
        org.junit.Assert.assertNotNull(readConcern39);
        org.junit.Assert.assertNotNull(readPreference40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test3327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3327");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory5 = mongoClientOptions3.getDbDecoderFactory();
        int int6 = mongoClientOptions3.getLocalThreshold();
        com.mongodb.ReadPreference readPreference7 = mongoClientOptions3.getReadPreference();
        boolean boolean8 = mongoClientOptions3.isSslInvalidHostNameAllowed();
        int int9 = mongoClientOptions3.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 15 + "'", int6 == 15);
        org.junit.Assert.assertNotNull(readPreference7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
    }

    @Test
    public void test3328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3328");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder17 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatConnectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder17.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.maxConnectionIdleTime(27017);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test3329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3329");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        int int6 = mongoClientOptions3.getMinConnectionsPerHost();
        int int7 = mongoClientOptions3.getMaxWaitTime();
        int int8 = mongoClientOptions3.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatFrequency((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.minHeartbeatFrequency(32);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.minHeartbeatFrequency((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10000 + "'", int8 == 10000);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test3330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3330");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatSocketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getConnectionsPerHost();
        int int20 = mongoClientOptions18.getHeartbeatSocketTimeout();
        java.lang.String str21 = mongoClientOptions18.getRequiredReplicaSetName();
        org.bson.codecs.configuration.CodecRegistry codecRegistry22 = mongoClientOptions18.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder23 = builder12.codecRegistry(codecRegistry22);
        java.lang.Class<?> wildcardClass24 = builder12.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(codecRegistry22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test3331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3331");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        boolean boolean5 = mongoClientOptions3.isSocketKeepAlive();
        int int6 = mongoClientOptions3.getMaxWaitTime();
        int int7 = mongoClientOptions3.getHeartbeatConnectTimeout();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions3.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getSocketTimeout();
        boolean boolean14 = mongoClientOptions12.isAlwaysUseMBeans();
        int int15 = mongoClientOptions12.getThreadsAllowedToBlockForConnectionMultiplier();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions12.getCommandListeners();
        int int17 = mongoClientOptions12.getMaxConnectionLifeTime();
        int int18 = mongoClientOptions12.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions12.getReadPreference();
        int int20 = mongoClientOptions12.getHeartbeatConnectTimeout();
        boolean boolean21 = mongoClientOptions3.equals((java.lang.Object) mongoClientOptions12);
        java.util.List<com.mongodb.event.CommandListener> commandListenerList22 = mongoClientOptions12.getCommandListeners();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 120000 + "'", int6 == 120000);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20000 + "'", int7 == 20000);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 30000 + "'", int18 == 30000);
        org.junit.Assert.assertNotNull(readPreference19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(commandListenerList22);
    }

    @Test
    public void test3332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3332");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.maxConnectionLifeTime((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder2.heartbeatConnectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getConnectionsPerHost();
        int int20 = mongoClientOptions18.getHeartbeatSocketTimeout();
        java.lang.String str21 = mongoClientOptions18.getRequiredReplicaSetName();
        org.bson.codecs.configuration.CodecRegistry codecRegistry22 = mongoClientOptions18.getCodecRegistry();
        java.lang.String str23 = mongoClientOptions18.getRequiredReplicaSetName();
        boolean boolean24 = mongoClientOptions18.isAlwaysUseMBeans();
        com.mongodb.ReadPreference readPreference25 = mongoClientOptions18.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder26 = builder14.readPreference(readPreference25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder14.sslInvalidHostNameAllowed(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(codecRegistry22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(readPreference25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test3333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3333");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        boolean boolean6 = mongoClientOptions3.isCursorFinalizerEnabled();
        int int7 = mongoClientOptions3.getMaxConnectionIdleTime();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder(mongoClientOptions3);
        boolean boolean10 = mongoClientOptions3.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test3334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3334");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getMaxConnectionLifeTime();
        int int5 = mongoClientOptions3.getConnectionsPerHost();
        javax.net.SocketFactory socketFactory6 = mongoClientOptions3.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        boolean boolean8 = mongoClientOptions3.isSslInvalidHostNameAllowed();
        boolean boolean9 = mongoClientOptions3.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        int int11 = mongoClientOptions3.getServerSelectionTimeout();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.requiredReplicaSetName("test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNotNull(socketFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 30000 + "'", int11 == 30000);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test3335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3335");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        int int6 = mongoClientOptions3.getMinConnectionsPerHost();
        boolean boolean7 = mongoClientOptions3.isSslInvalidHostNameAllowed();
        int int8 = mongoClientOptions3.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        java.lang.String str10 = mongoClientOptions3.getRequiredReplicaSetName();
        boolean boolean11 = mongoClientOptions3.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test3336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3336");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.heartbeatFrequency((int) '4');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test3337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3337");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        com.mongodb.ReadPreference readPreference5 = mongoClientOptions3.getReadPreference();
        int int6 = mongoClientOptions3.getMaxWaitTime();
        int int7 = mongoClientOptions3.getHeartbeatFrequency();
        boolean boolean8 = mongoClientOptions3.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(readPreference5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 120000 + "'", int6 == 120000);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10000 + "'", int7 == 10000);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test3338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3338");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder8.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test3339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3339");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        boolean boolean6 = mongoClientOptions3.isSocketKeepAlive();
        java.lang.String str7 = mongoClientOptions3.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketTimeout((-1));
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getMaxConnectionLifeTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions11.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
    }

    @Test
    public void test3340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3340");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 0);
        mongoProperties0.setDatabase("hi!");
        java.lang.String str8 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray9 = mongoProperties0.getPassword();
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.Class<?> wildcardClass11 = mongoProperties0.getClass();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(charArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test3341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3341");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory5 = mongoClientOptions3.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern6 = mongoClientOptions3.getWriteConcern();
        boolean boolean7 = mongoClientOptions3.isSslInvalidHostNameAllowed();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions3.getDbEncoderFactory();
        boolean boolean9 = mongoClientOptions3.isAlwaysUseMBeans();
        int int10 = mongoClientOptions3.getHeartbeatFrequency();
        boolean boolean11 = mongoClientOptions3.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory5);
        org.junit.Assert.assertNotNull(writeConcern6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test3342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3342");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        boolean boolean6 = mongoClientOptions3.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions3.getDbEncoderFactory();
        int int8 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        int int10 = mongoClientOptions3.getMaxConnectionIdleTime();
        boolean boolean11 = mongoClientOptions3.isSslEnabled();
        int int12 = mongoClientOptions3.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10000 + "'", int8 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test3343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3343");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setAuthenticationDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getSocketTimeout();
        boolean boolean13 = mongoClientOptions11.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties0.createMongoClient(mongoClientOptions11, environment14);
        java.lang.String str16 = mongoProperties0.getUsername();
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.setAuthenticationDatabase("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties21.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions24 = null;
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties21.createMongoClient(mongoClientOptions24, environment25);
        mongoProperties21.setUsername("hi!");
        java.lang.Integer int29 = mongoProperties21.getPort();
        char[] charArray30 = new char[] {};
        mongoProperties21.setPassword(charArray30);
        mongoProperties0.setPassword(charArray30);
        mongoProperties0.setUri("test");
        java.lang.Class<?> wildcardClass35 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[]");
        org.junit.Assert.assertNull(wildcardClass35);
    }

    @Test
    public void test3344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3344");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getConnectionsPerHost();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        java.lang.String str10 = mongoClientOptions7.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions7.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder12 = builder0.writeConcern(writeConcern11);
        com.mongodb.MongoClientOptions.Builder builder14 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder0.socketTimeout((int) (short) -1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder0.heartbeatConnectTimeout((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder20 = builder0.threadsAllowedToBlockForConnectionMultiplier(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: threadsAllowedToBlockForConnectionMultiplier must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test3345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3345");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setAuthenticationDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getSocketTimeout();
        boolean boolean13 = mongoClientOptions11.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties0.createMongoClient(mongoClientOptions11, environment14);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getConnectionsPerHost();
        int int21 = mongoClientOptions19.getConnectTimeout();
        org.springframework.core.env.Environment environment22 = null;
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions19, environment22);
        boolean boolean24 = mongoClientOptions19.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions19.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
    }

    @Test
    public void test3346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3346");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setHost("hi!");
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setUsername("hi!");
        java.lang.String str13 = mongoProperties0.getUri();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getMaxConnectionLifeTime();
        int int19 = mongoClientOptions17.getConnectionsPerHost();
        java.lang.String str20 = mongoClientOptions17.getDescription();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList21 = mongoClientOptions17.getCommandListeners();
        int int22 = mongoClientOptions17.getMinConnectionsPerHost();
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions17, environment23);
        int int25 = mongoClientOptions17.getHeartbeatSocketTimeout();
        int int26 = mongoClientOptions17.getHeartbeatSocketTimeout();
        java.lang.String str27 = mongoClientOptions17.getDescription();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(commandListenerList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test3347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3347");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        int int5 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory23 = mongoClientOptions22.getDbDecoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions22.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder25 = builder16.dbEncoderFactory(dBEncoderFactory24);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder28.build();
        int int30 = mongoClientOptions29.getHeartbeatFrequency();
        int int31 = mongoClientOptions29.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions29);
        int int33 = mongoClientOptions29.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern34 = mongoClientOptions29.getReadConcern();
        com.mongodb.ReadPreference readPreference35 = mongoClientOptions29.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder36 = builder16.readPreference(readPreference35);
        com.mongodb.MongoClientOptions.Builder builder38 = builder16.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.connectionsPerHost((int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertNotNull(dBDecoderFactory23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10000 + "'", int30 == 10000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(readConcern34);
        org.junit.Assert.assertNotNull(readPreference35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test3348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3348");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.clearPassword();
        java.lang.String str10 = mongoProperties0.getUsername();
        java.lang.String str11 = mongoProperties0.getUri();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getConnectionsPerHost();
        int int17 = mongoClientOptions15.getHeartbeatSocketTimeout();
        java.lang.String str18 = mongoClientOptions15.getRequiredReplicaSetName();
        boolean boolean19 = mongoClientOptions15.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions15, environment20);
        java.lang.String str22 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setUsername("hi!");
        mongoProperties0.setDatabase("test");
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
    }

    @Test
    public void test3349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3349");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        int int10 = mongoClientOptions9.getMaxConnectionLifeTime();
        int int11 = mongoClientOptions9.getConnectionsPerHost();
        java.lang.String str12 = mongoClientOptions9.getDescription();
        org.springframework.core.env.Environment environment13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties0.createMongoClient(mongoClientOptions9, environment13);
        int int15 = mongoClientOptions9.getLocalThreshold();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions9.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions9.getReadPreference();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 15 + "'", int15 == 15);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertNotNull(readPreference17);
    }

    @Test
    public void test3350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3350");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getMinHeartbeatFrequency();
        int int7 = mongoClientOptions3.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        boolean boolean9 = mongoClientOptions3.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        java.lang.String str11 = mongoClientOptions3.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 500 + "'", int6 == 500);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test3351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3351");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setUsername("hi!");
        java.lang.Integer int8 = mongoProperties0.getPort();
        mongoProperties0.setPort((java.lang.Integer) 500);
        mongoProperties0.setUri("");
        java.lang.String str13 = mongoProperties0.getHost();
        mongoProperties0.setUri("test");
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test3352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3352");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        int int5 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.requiredReplicaSetName("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test3353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3353");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUsername("hi!");
        mongoProperties0.setPort((java.lang.Integer) 5);
        java.lang.String str12 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        boolean boolean17 = mongoClientOptions16.isSslEnabled();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions16.getMinHeartbeatFrequency();
        int int20 = mongoClientOptions16.getMaxWaitTime();
        int int21 = mongoClientOptions16.getServerSelectionTimeout();
        org.springframework.core.env.Environment environment22 = null;
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions16, environment22);
        boolean boolean24 = mongoClientOptions16.isSslInvalidHostNameAllowed();
        int int25 = mongoClientOptions16.getServerSelectionTimeout();
        com.mongodb.WriteConcern writeConcern26 = mongoClientOptions16.getWriteConcern();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 500 + "'", int19 == 500);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 120000 + "'", int20 == 120000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 30000 + "'", int21 == 30000);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 30000 + "'", int25 == 30000);
        org.junit.Assert.assertNotNull(writeConcern26);
    }

    @Test
    public void test3354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3354");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.serverSelectionTimeout((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder13 = builder11.connectTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: connectTimeout must be >= 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test3355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3355");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUri("hi!");
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str9 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test3356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3356");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        int int5 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        org.bson.codecs.configuration.CodecRegistry codecRegistry6 = mongoClientOptions3.getCodecRegistry();
        int int7 = mongoClientOptions3.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getMaxConnectionLifeTime();
        int int17 = mongoClientOptions15.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry18 = mongoClientOptions15.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions15);
        int int20 = mongoClientOptions15.getConnectionsPerHost();
        javax.net.SocketFactory socketFactory21 = mongoClientOptions15.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder22 = builder9.socketFactory(socketFactory21);
        com.mongodb.MongoClientOptions.Builder builder23 = builder9.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertNotNull(codecRegistry6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertNotNull(codecRegistry18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test3357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3357");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        boolean boolean7 = mongoClientOptions3.isSslInvalidHostNameAllowed();
        int int8 = mongoClientOptions3.getConnectTimeout();
        int int9 = mongoClientOptions3.getMaxWaitTime();
        int int10 = mongoClientOptions3.getMinConnectionsPerHost();
        int int11 = mongoClientOptions3.getConnectionsPerHost();
        int int12 = mongoClientOptions3.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern13 = mongoClientOptions3.getReadConcern();
        com.mongodb.ReadConcern readConcern14 = mongoClientOptions3.getReadConcern();
        int int15 = mongoClientOptions3.getConnectTimeout();
        boolean boolean16 = mongoClientOptions3.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10000 + "'", int8 == 10000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 120000 + "'", int9 == 120000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(readConcern13);
        org.junit.Assert.assertNotNull(readConcern14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test3358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3358");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        int int10 = mongoClientOptions9.getMaxConnectionLifeTime();
        int int11 = mongoClientOptions9.getConnectionsPerHost();
        java.lang.String str12 = mongoClientOptions9.getDescription();
        org.springframework.core.env.Environment environment13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties0.createMongoClient(mongoClientOptions9, environment13);
        java.lang.Class<?> wildcardClass15 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setHost("mongodb://localhost/test");
        java.lang.String str18 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test3359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3359");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.minHeartbeatFrequency(15);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test3360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3360");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setDatabase("hi!");
        char[] charArray7 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getSocketTimeout();
        boolean boolean13 = mongoClientOptions11.isAlwaysUseMBeans();
        int int14 = mongoClientOptions11.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions11);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        int int22 = mongoClientOptions21.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions21.getReadConcern();
        int int24 = mongoClientOptions21.getMinConnectionsPerHost();
        boolean boolean25 = mongoClientOptions21.isSslInvalidHostNameAllowed();
        com.mongodb.DBEncoderFactory dBEncoderFactory26 = mongoClientOptions21.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder27 = builder15.dbEncoderFactory(dBEncoderFactory26);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions28, environment29);
        int int31 = mongoClientOptions28.getConnectionsPerHost();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
        org.junit.Assert.assertNotNull(readConcern23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
    }

    @Test
    public void test3361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3361");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        boolean boolean6 = mongoClientOptions3.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test3362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3362");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        com.mongodb.ReadPreference readPreference5 = mongoClientOptions3.getReadPreference();
        java.lang.String str6 = mongoClientOptions3.getDescription();
        int int7 = mongoClientOptions3.getServerSelectionTimeout();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.ReadPreference readPreference9 = mongoClientOptions3.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getConnectionsPerHost();
        int int15 = mongoClientOptions13.getHeartbeatSocketTimeout();
        java.lang.String str16 = mongoClientOptions13.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern17 = mongoClientOptions13.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        com.mongodb.ReadConcern readConcern19 = mongoClientOptions13.getReadConcern();
        boolean boolean20 = mongoClientOptions3.equals((java.lang.Object) readConcern19);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(readPreference5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 30000 + "'", int7 == 30000);
        org.junit.Assert.assertNotNull(readPreference9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(writeConcern17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(readConcern19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test3363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3363");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setUsername("hi!");
        java.lang.Integer int8 = mongoProperties0.getPort();
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str10 = mongoProperties0.getUri();
        java.lang.String str11 = mongoProperties0.getDatabase();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        java.lang.String str14 = mongoProperties0.getUri();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb://localhost/test" + "'", str10, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb://localhost/test" + "'", str14, "mongodb://localhost/test");
    }

    @Test
    public void test3364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3364");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        int int6 = mongoClientOptions3.getMinConnectionsPerHost();
        boolean boolean7 = mongoClientOptions3.isSslInvalidHostNameAllowed();
        int int8 = mongoClientOptions3.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder25.serverSelectionTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder34.build();
        com.mongodb.MongoClientOptions.Builder builder39 = builder34.connectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.maxWaitTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder46.build();
        int int48 = mongoClientOptions47.getConnectionsPerHost();
        int int49 = mongoClientOptions47.getHeartbeatSocketTimeout();
        java.lang.String str50 = mongoClientOptions47.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern51 = mongoClientOptions47.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder52 = builder39.writeConcern(writeConcern51);
        com.mongodb.MongoClientOptions.Builder builder53 = builder33.writeConcern(writeConcern51);
        com.mongodb.MongoClientOptions.Builder builder54 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder60 = builder56.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder64 = builder60.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder67 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions70 = builder69.build();
        boolean boolean71 = mongoClientOptions70.isSslEnabled();
        int int72 = mongoClientOptions70.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory73 = mongoClientOptions70.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder74 = builder66.dbEncoderFactory(dBEncoderFactory73);
        com.mongodb.MongoClientOptions.Builder builder75 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder77 = builder75.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions78 = builder77.build();
        int int79 = mongoClientOptions78.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern80 = mongoClientOptions78.getReadConcern();
        int int81 = mongoClientOptions78.getMinConnectionsPerHost();
        int int82 = mongoClientOptions78.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern83 = mongoClientOptions78.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder84 = builder66.writeConcern(writeConcern83);
        com.mongodb.MongoClientOptions.Builder builder85 = builder53.writeConcern(writeConcern83);
        com.mongodb.MongoClientOptions.Builder builder86 = builder22.writeConcern(writeConcern83);
        com.mongodb.MongoClientOptions.Builder builder87 = builder11.writeConcern(writeConcern83);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(mongoClientOptions47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(writeConcern51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(mongoClientOptions70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 100 + "'", int72 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(mongoClientOptions78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10000 + "'", int79 == 10000);
        org.junit.Assert.assertNotNull(readConcern80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 120000 + "'", int82 == 120000);
        org.junit.Assert.assertNotNull(writeConcern83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test3365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3365");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) '#');
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getHeartbeatConnectTimeout();
        int int17 = mongoClientOptions15.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
    }

    @Test
    public void test3366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3366");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setUsername("");
        mongoProperties0.setHost("hi!");
        char[] charArray5 = mongoProperties0.getPassword();
        char[] charArray6 = mongoProperties0.getPassword();
        java.lang.String str7 = mongoProperties0.getHost();
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setPort((java.lang.Integer) 30000);
        mongoProperties0.setHost("test");
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str18 = mongoProperties0.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        int int23 = mongoClientOptions22.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern24 = mongoClientOptions22.getReadConcern();
        int int25 = mongoClientOptions22.getMinConnectionsPerHost();
        int int26 = mongoClientOptions22.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions22);
        int int28 = mongoClientOptions22.getMinConnectionsPerHost();
        boolean boolean29 = mongoClientOptions22.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions22);
        com.mongodb.DBEncoderFactory dBEncoderFactory31 = mongoClientOptions22.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference32 = mongoClientOptions22.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions22);
        int int34 = mongoClientOptions22.getHeartbeatFrequency();
        int int35 = mongoClientOptions22.getHeartbeatConnectTimeout();
        int int36 = mongoClientOptions22.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions22);
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties0.createMongoClient(mongoClientOptions22, environment38);
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10000 + "'", int23 == 10000);
        org.junit.Assert.assertNotNull(readConcern24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory31);
        org.junit.Assert.assertNotNull(readPreference32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10000 + "'", int34 == 10000);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20000 + "'", int35 == 20000);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10000 + "'", int36 == 10000);
        org.junit.Assert.assertNotNull(mongoClient39);
    }

    @Test
    public void test3367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3367");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getMaxConnectionIdleTime();
        int int6 = mongoClientOptions3.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.connectTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.threadsAllowedToBlockForConnectionMultiplier(30000);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionLifeTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.localThreshold(20000);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test3368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3368");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.connectionsPerHost((int) (byte) 10);
        com.mongodb.event.CommandListener commandListener15 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder16 = builder14.addCommandListener(commandListener15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test3369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3369");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setUsername("hi!");
        java.lang.Integer int8 = mongoProperties0.getPort();
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.clearPassword();
        mongoProperties0.setPort((java.lang.Integer) 30000);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties13.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions16 = null;
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties13.createMongoClient(mongoClientOptions16, environment17);
        mongoProperties13.setUsername("hi!");
        java.lang.Integer int21 = mongoProperties13.getPort();
        java.lang.String str22 = mongoProperties13.getAuthenticationDatabase();
        java.lang.Integer int23 = mongoProperties13.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties24 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties24.setUsername("");
        mongoProperties24.setHost("hi!");
        char[] charArray29 = mongoProperties24.getPassword();
        java.lang.String str30 = mongoProperties24.getDatabase();
        java.lang.String str31 = mongoProperties24.getUri();
        mongoProperties24.setUsername("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties34 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties34.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties34.createMongoClient(mongoClientOptions37, environment38);
        java.lang.String str40 = mongoProperties34.getMongoClientDatabase();
        mongoProperties34.setHost("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties43 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties43.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions46 = null;
        org.springframework.core.env.Environment environment47 = null;
        com.mongodb.MongoClient mongoClient48 = mongoProperties43.createMongoClient(mongoClientOptions46, environment47);
        mongoProperties43.setUsername("hi!");
        java.lang.Integer int51 = mongoProperties43.getPort();
        char[] charArray52 = new char[] {};
        mongoProperties43.setPassword(charArray52);
        mongoProperties34.setPassword(charArray52);
        mongoProperties24.setPassword(charArray52);
        mongoProperties13.setPassword(charArray52);
        mongoProperties0.setPassword(charArray52);
        java.lang.String str58 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNull(charArray29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "mongodb://localhost/test" + "'", str31, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(mongoClient48);
        org.junit.Assert.assertNull(int51);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[]");
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test3370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3370");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getServerSelectionTimeout();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions3.getReadPreference();
        boolean boolean9 = mongoClientOptions3.isAlwaysUseMBeans();
        com.mongodb.DBDecoderFactory dBDecoderFactory10 = mongoClientOptions3.getDbDecoderFactory();
        int int11 = mongoClientOptions3.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        int int13 = mongoClientOptions3.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 30000 + "'", int6 == 30000);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test3371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3371");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier(20000);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectTimeout(30000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.requiredReplicaSetName("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test3372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3372");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        int int9 = mongoClientOptions3.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory10 = mongoClientOptions3.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        int int13 = mongoClientOptions3.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 500 + "'", int6 == 500);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 120000 + "'", int9 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
    }

    @Test
    public void test3373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3373");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        boolean boolean9 = mongoClientOptions3.isCursorFinalizerEnabled();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList10 = mongoClientOptions3.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions3.getDbDecoderFactory();
        boolean boolean12 = mongoClientOptions3.isSslEnabled();
        javax.net.SocketFactory socketFactory13 = mongoClientOptions3.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 500 + "'", int6 == 500);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(commandListenerList10);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(socketFactory13);
    }

    @Test
    public void test3374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3374");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        boolean boolean5 = mongoClientOptions3.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory6 = mongoClientOptions3.getSocketFactory();
        int int7 = mongoClientOptions3.getSocketTimeout();
        int int8 = mongoClientOptions3.getMaxWaitTime();
        int int9 = mongoClientOptions3.getHeartbeatConnectTimeout();
        int int10 = mongoClientOptions3.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(socketFactory6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 120000 + "'", int8 == 120000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
    }

    @Test
    public void test3375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3375");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        com.mongodb.ReadPreference readPreference6 = mongoClientOptions3.getReadPreference();
        boolean boolean7 = mongoClientOptions3.isCursorFinalizerEnabled();
        int int8 = mongoClientOptions3.getServerSelectionTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        org.bson.codecs.configuration.CodecRegistry codecRegistry10 = mongoClientOptions3.getCodecRegistry();
        int int11 = mongoClientOptions3.getServerSelectionTimeout();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList12 = mongoClientOptions3.getCommandListeners();
        org.bson.codecs.configuration.CodecRegistry codecRegistry13 = mongoClientOptions3.getCodecRegistry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertNotNull(readPreference6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 30000 + "'", int8 == 30000);
        org.junit.Assert.assertNotNull(codecRegistry10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 30000 + "'", int11 == 30000);
        org.junit.Assert.assertNotNull(commandListenerList12);
        org.junit.Assert.assertNotNull(codecRegistry13);
    }

    @Test
    public void test3376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3376");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        java.lang.String str6 = mongoClientOptions3.getRequiredReplicaSetName();
        boolean boolean7 = mongoClientOptions3.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder(mongoClientOptions9);
        int int11 = mongoClientOptions9.getSocketTimeout();
        int int12 = mongoClientOptions9.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test3377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3377");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        boolean boolean5 = mongoClientOptions3.isAlwaysUseMBeans();
        int int6 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern17 = mongoClientOptions15.getReadConcern();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions15.getReadPreference();
        com.mongodb.ReadConcern readConcern19 = mongoClientOptions15.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder20 = builder9.readConcern(readConcern19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder9.localThreshold(30000);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.sslInvalidHostNameAllowed(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(readConcern17);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(readConcern19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test3378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3378");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        int int5 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        org.bson.codecs.configuration.CodecRegistry codecRegistry6 = mongoClientOptions3.getCodecRegistry();
        int int7 = mongoClientOptions3.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder8 = com.mongodb.MongoClientOptions.builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getSocketTimeout();
        boolean boolean14 = mongoClientOptions12.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions12.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.socketFactory(socketFactory15);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.heartbeatSocketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder37.build();
        int int39 = mongoClientOptions38.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern40 = mongoClientOptions38.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder41 = builder34.readConcern(readConcern40);
        com.mongodb.MongoClientOptions.Builder builder42 = builder25.readConcern(readConcern40);
        com.mongodb.MongoClientOptions.Builder builder43 = builder16.readConcern(readConcern40);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder16.build();
        int int45 = mongoClientOptions44.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertNotNull(codecRegistry6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10000 + "'", int39 == 10000);
        org.junit.Assert.assertNotNull(readConcern40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test3379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3379");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        boolean boolean9 = mongoClientOptions8.isSslEnabled();
        int int10 = mongoClientOptions8.getHeartbeatSocketTimeout();
        int int11 = mongoClientOptions8.getMinHeartbeatFrequency();
        int int12 = mongoClientOptions8.getMaxConnectionLifeTime();
        int int13 = mongoClientOptions8.getHeartbeatSocketTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory14 = mongoClientOptions8.getDbDecoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions8.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder4.dbEncoderFactory(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(dBDecoderFactory14);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test3380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3380");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        int int5 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getSocketTimeout();
        boolean boolean14 = mongoClientOptions12.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions12.getSocketFactory();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions12.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder17 = builder6.codecRegistry(codecRegistry16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout((int) 'a');
        com.mongodb.event.CommandListener commandListener22 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder23 = builder19.addCommandListener(commandListener22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test3381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3381");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        boolean boolean7 = mongoClientOptions3.equals((java.lang.Object) 500);
        int int8 = mongoClientOptions3.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.maxConnectionIdleTime(1);
        boolean boolean18 = mongoClientOptions3.equals((java.lang.Object) builder17);
        org.bson.codecs.configuration.CodecRegistry codecRegistry19 = mongoClientOptions3.getCodecRegistry();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions3.getDbDecoderFactory();
        int int21 = mongoClientOptions3.getConnectionsPerHost();
        int int22 = mongoClientOptions3.getHeartbeatFrequency();
        java.lang.String str23 = mongoClientOptions3.getDescription();
        boolean boolean24 = mongoClientOptions3.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10000 + "'", int8 == 10000);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(codecRegistry19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test3382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3382");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        boolean boolean6 = mongoClientOptions3.isCursorFinalizerEnabled();
        boolean boolean7 = mongoClientOptions3.isSslEnabled();
        int int8 = mongoClientOptions3.getLocalThreshold();
        int int9 = mongoClientOptions3.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory10 = mongoClientOptions3.getSocketFactory();
        int int11 = mongoClientOptions3.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
    }

    @Test
    public void test3383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3383");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        boolean boolean7 = mongoClientOptions3.isSocketKeepAlive();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList8 = mongoClientOptions3.getCommandListeners();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(commandListenerList8);
    }

    @Test
    public void test3384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3384");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        com.mongodb.MongoClientOptions.Builder builder12 = com.mongodb.MongoClientOptions.builder(mongoClientOptions11);
        org.springframework.core.env.Environment environment13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties0.createMongoClient(mongoClientOptions11, environment13);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getSocketTimeout();
        int int20 = mongoClientOptions18.getThreadsAllowedToBlockForConnectionMultiplier();
        int int21 = mongoClientOptions18.getMaxWaitTime();
        java.lang.String str22 = mongoClientOptions18.getRequiredReplicaSetName();
        int int23 = mongoClientOptions18.getMaxWaitTime();
        int int24 = mongoClientOptions18.getMaxConnectionIdleTime();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions18, environment25);
        java.lang.String str27 = mongoProperties0.getGridFsDatabase();
        java.lang.String str28 = mongoProperties0.getUri();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 120000 + "'", int21 == 120000);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 120000 + "'", int23 == 120000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "mongodb://localhost/test" + "'", str28, "mongodb://localhost/test");
    }

    @Test
    public void test3385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3385");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatSocketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.minHeartbeatFrequency(1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test3386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3386");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getMinHeartbeatFrequency();
        int int7 = mongoClientOptions3.getMaxWaitTime();
        com.mongodb.ReadConcern readConcern8 = mongoClientOptions3.getReadConcern();
        int int9 = mongoClientOptions3.getLocalThreshold();
        boolean boolean10 = mongoClientOptions3.isAlwaysUseMBeans();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions3.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        java.util.List<com.mongodb.event.CommandListener> commandListenerList13 = mongoClientOptions3.getCommandListeners();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 500 + "'", int6 == 500);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertNotNull(readConcern8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 15 + "'", int9 == 15);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(commandListenerList13);
    }

    @Test
    public void test3387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3387");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder6.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory10 = mongoClientOptions9.getDbDecoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions9.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder12 = builder5.dbEncoderFactory(dBEncoderFactory11);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        boolean boolean17 = mongoClientOptions16.isSslEnabled();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions16.getMinHeartbeatFrequency();
        int int20 = mongoClientOptions16.getMaxConnectionLifeTime();
        int int21 = mongoClientOptions16.getHeartbeatSocketTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions16.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder23 = builder12.dbDecoderFactory(dBDecoderFactory22);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        boolean boolean28 = mongoClientOptions27.isSslEnabled();
        int int29 = mongoClientOptions27.getMaxConnectionIdleTime();
        int int30 = mongoClientOptions27.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions27);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.connectTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder50 = builder44.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.maxWaitTime(120000);
        com.mongodb.MongoClientOptions.Builder builder54 = builder50.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder57.build();
        int int59 = mongoClientOptions58.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern60 = mongoClientOptions58.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder61 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions58);
        int int62 = mongoClientOptions58.getHeartbeatConnectTimeout();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList63 = mongoClientOptions58.getCommandListeners();
        org.bson.codecs.configuration.CodecRegistry codecRegistry64 = mongoClientOptions58.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder65 = builder50.codecRegistry(codecRegistry64);
        com.mongodb.MongoClientOptions.Builder builder66 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder72 = builder68.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder76 = builder72.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder78 = builder72.threadsAllowedToBlockForConnectionMultiplier(100);
        com.mongodb.MongoClientOptions.Builder builder79 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder81 = builder79.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder83 = builder79.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder85 = builder83.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder86 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder88 = builder86.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions89 = builder88.build();
        boolean boolean90 = mongoClientOptions89.isSslEnabled();
        int int91 = mongoClientOptions89.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory92 = mongoClientOptions89.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder93 = builder85.dbEncoderFactory(dBEncoderFactory92);
        com.mongodb.MongoClientOptions.Builder builder94 = builder72.dbEncoderFactory(dBEncoderFactory92);
        com.mongodb.MongoClientOptions.Builder builder95 = builder50.dbEncoderFactory(dBEncoderFactory92);
        com.mongodb.MongoClientOptions.Builder builder96 = builder35.dbEncoderFactory(dBEncoderFactory92);
        com.mongodb.MongoClientOptions.Builder builder97 = builder12.dbEncoderFactory(dBEncoderFactory92);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertNotNull(dBDecoderFactory10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 500 + "'", int19 == 500);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10000 + "'", int59 == 10000);
        org.junit.Assert.assertNotNull(readConcern60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 20000 + "'", int62 == 20000);
        org.junit.Assert.assertNotNull(commandListenerList63);
        org.junit.Assert.assertNotNull(codecRegistry64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(mongoClientOptions89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 100 + "'", int91 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test3388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3388");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatSocketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getConnectionsPerHost();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        boolean boolean20 = mongoClientOptions16.equals((java.lang.Object) 500);
        int int21 = mongoClientOptions16.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder24.maxConnectionIdleTime(1);
        boolean boolean31 = mongoClientOptions16.equals((java.lang.Object) builder30);
        int int32 = mongoClientOptions16.getConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory33 = mongoClientOptions16.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder12.dbEncoderFactory(dBEncoderFactory33);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder12.build();
        int int36 = mongoClientOptions35.getMaxConnectionIdleTime();
        int int37 = mongoClientOptions35.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 15 + "'", int37 == 15);
    }

    @Test
    public void test3389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3389");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatSocketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.minConnectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test3390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3390");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        int int7 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getConnectionsPerHost();
        int int13 = mongoClientOptions11.getHeartbeatSocketTimeout();
        boolean boolean15 = mongoClientOptions11.equals((java.lang.Object) 500);
        boolean boolean16 = mongoClientOptions11.isSocketKeepAlive();
        java.lang.String str17 = mongoClientOptions11.getDescription();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions11.getReadPreference();
        boolean boolean19 = mongoClientOptions3.equals((java.lang.Object) readPreference18);
        int int20 = mongoClientOptions3.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory27 = mongoClientOptions25.getDbDecoderFactory();
        com.mongodb.ReadConcern readConcern28 = mongoClientOptions25.getReadConcern();
        int int29 = mongoClientOptions25.getMaxConnectionIdleTime();
        boolean boolean30 = mongoClientOptions3.equals((java.lang.Object) int29);
        boolean boolean31 = mongoClientOptions3.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory27);
        org.junit.Assert.assertNotNull(readConcern28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test3391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3391");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        boolean boolean17 = mongoClientOptions16.isSslEnabled();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions16.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.dbEncoderFactory(dBEncoderFactory19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder22.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.localThreshold(30000);
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder32.build();
        int int34 = mongoClientOptions33.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern35 = mongoClientOptions33.getReadConcern();
        boolean boolean36 = mongoClientOptions33.isCursorFinalizerEnabled();
        int int37 = mongoClientOptions33.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory38 = mongoClientOptions33.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder39 = builder27.dbDecoderFactory(dBDecoderFactory38);
        com.mongodb.MongoClientOptions.Builder builder41 = builder27.maxWaitTime((int) (short) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10000 + "'", int34 == 10000);
        org.junit.Assert.assertNotNull(readConcern35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test3392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3392");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.connectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getSocketTimeout();
        boolean boolean21 = mongoClientOptions19.isAlwaysUseMBeans();
        int int22 = mongoClientOptions19.getThreadsAllowedToBlockForConnectionMultiplier();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList23 = mongoClientOptions19.getCommandListeners();
        boolean boolean24 = mongoClientOptions14.equals((java.lang.Object) mongoClientOptions19);
        int int25 = mongoClientOptions19.getMaxConnectionLifeTime();
        int int26 = mongoClientOptions19.getLocalThreshold();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions19.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder6.dbEncoderFactory(dBEncoderFactory27);
        com.mongodb.MongoClientOptions.Builder builder29 = builder28.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertNotNull(commandListenerList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 15 + "'", int26 == 15);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test3393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3393");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        boolean boolean11 = mongoClientOptions10.isSslEnabled();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions10.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.dbEncoderFactory(dBEncoderFactory13);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        boolean boolean21 = mongoClientOptions20.isSslEnabled();
        int int22 = mongoClientOptions20.getHeartbeatSocketTimeout();
        int int23 = mongoClientOptions20.getMinHeartbeatFrequency();
        int int24 = mongoClientOptions20.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions20);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder28.build();
        int int30 = mongoClientOptions29.getHeartbeatFrequency();
        int int31 = mongoClientOptions29.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions29);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder40 = builder34.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder47 = builder43.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder48 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder52 = builder48.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder57.build();
        boolean boolean59 = mongoClientOptions58.isSslEnabled();
        int int60 = mongoClientOptions58.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory61 = mongoClientOptions58.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder62 = builder54.dbEncoderFactory(dBEncoderFactory61);
        com.mongodb.MongoClientOptions.Builder builder63 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions66 = builder65.build();
        int int67 = mongoClientOptions66.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern68 = mongoClientOptions66.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder69 = builder54.readConcern(readConcern68);
        com.mongodb.MongoClientOptions.Builder builder70 = builder43.readConcern(readConcern68);
        com.mongodb.MongoClientOptions.Builder builder71 = builder40.readConcern(readConcern68);
        com.mongodb.MongoClientOptions.Builder builder72 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions75 = builder74.build();
        int int76 = mongoClientOptions75.getConnectionsPerHost();
        int int77 = mongoClientOptions75.getMinConnectionsPerHost();
        com.mongodb.DBDecoderFactory dBDecoderFactory78 = mongoClientOptions75.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder79 = builder71.dbDecoderFactory(dBDecoderFactory78);
        com.mongodb.MongoClientOptions.Builder builder80 = builder25.dbDecoderFactory(dBDecoderFactory78);
        com.mongodb.MongoClientOptions.Builder builder81 = builder16.dbDecoderFactory(dBDecoderFactory78);
        com.mongodb.MongoClientOptions.Builder builder83 = builder81.heartbeatConnectTimeout((-1));
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 500 + "'", int23 == 500);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 120000 + "'", int24 == 120000);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10000 + "'", int30 == 10000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(mongoClientOptions66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10000 + "'", int67 == 10000);
        org.junit.Assert.assertNotNull(readConcern68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(mongoClientOptions75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test3394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3394");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatSocketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder18.build();
        com.mongodb.WriteConcern writeConcern22 = mongoClientOptions21.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions21);
        com.mongodb.MongoClientOptions.Builder builder24 = builder23.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(writeConcern22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test3395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3395");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setAuthenticationDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getSocketTimeout();
        boolean boolean13 = mongoClientOptions11.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties0.createMongoClient(mongoClientOptions11, environment14);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getConnectionsPerHost();
        int int21 = mongoClientOptions19.getConnectTimeout();
        org.springframework.core.env.Environment environment22 = null;
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions19, environment22);
        int int24 = mongoClientOptions19.getHeartbeatFrequency();
        org.bson.codecs.configuration.CodecRegistry codecRegistry25 = mongoClientOptions19.getCodecRegistry();
        int int26 = mongoClientOptions19.getSocketTimeout();
        int int27 = mongoClientOptions19.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        int int29 = mongoClientOptions19.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10000 + "'", int24 == 10000);
        org.junit.Assert.assertNotNull(codecRegistry25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10000 + "'", int27 == 10000);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test3396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3396");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.threadsAllowedToBlockForConnectionMultiplier(100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        boolean boolean28 = mongoClientOptions27.isSslEnabled();
        int int29 = mongoClientOptions27.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory30 = mongoClientOptions27.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder31 = builder23.dbEncoderFactory(dBEncoderFactory30);
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        int int36 = mongoClientOptions35.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern37 = mongoClientOptions35.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder38 = builder23.readConcern(readConcern37);
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder41.build();
        int int43 = mongoClientOptions42.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern44 = mongoClientOptions42.getReadConcern();
        com.mongodb.ReadPreference readPreference45 = mongoClientOptions42.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder46 = builder38.readPreference(readPreference45);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.maxConnectionLifeTime(0);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.minHeartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder54 = builder50.heartbeatFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder55.build();
        com.mongodb.MongoClientOptions.Builder builder60 = builder55.connectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder64 = builder60.minHeartbeatFrequency(27017);
        com.mongodb.MongoClientOptions.Builder builder65 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions68 = builder67.build();
        com.mongodb.MongoClientOptions.Builder builder70 = builder67.minHeartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder71 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions74 = builder73.build();
        int int75 = mongoClientOptions74.getSocketTimeout();
        boolean boolean76 = mongoClientOptions74.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory77 = mongoClientOptions74.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder78 = builder70.socketFactory(socketFactory77);
        com.mongodb.MongoClientOptions.Builder builder79 = builder60.socketFactory(socketFactory77);
        com.mongodb.MongoClientOptions.Builder builder80 = builder50.socketFactory(socketFactory77);
        com.mongodb.MongoClientOptions mongoClientOptions81 = builder50.build();
        javax.net.SocketFactory socketFactory82 = mongoClientOptions81.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder83 = builder16.socketFactory(socketFactory82);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10000 + "'", int36 == 10000);
        org.junit.Assert.assertNotNull(readConcern37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10000 + "'", int43 == 10000);
        org.junit.Assert.assertNotNull(readConcern44);
        org.junit.Assert.assertNotNull(readPreference45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(mongoClientOptions68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(mongoClientOptions74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(socketFactory77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(mongoClientOptions81);
        org.junit.Assert.assertNotNull(socketFactory82);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test3397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3397");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        com.mongodb.ReadPreference readPreference6 = mongoClientOptions3.getReadPreference();
        boolean boolean7 = mongoClientOptions3.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.heartbeatSocketTimeout(30000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertNotNull(readPreference6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test3398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3398");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionIdleTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder34 = builder28.minHeartbeatFrequency((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder35.build();
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder41.build();
        int int43 = mongoClientOptions42.getConnectionsPerHost();
        int int44 = mongoClientOptions42.getHeartbeatSocketTimeout();
        java.lang.String str45 = mongoClientOptions42.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern46 = mongoClientOptions42.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder47 = builder35.writeConcern(writeConcern46);
        com.mongodb.MongoClientOptions.Builder builder48 = builder34.writeConcern(writeConcern46);
        com.mongodb.MongoClientOptions.Builder builder49 = builder23.writeConcern(writeConcern46);
        com.mongodb.MongoClientOptions.Builder builder50 = builder6.writeConcern(writeConcern46);
        com.mongodb.MongoClientOptions.Builder builder51 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder53.build();
        int int55 = mongoClientOptions54.getConnectionsPerHost();
        int int56 = mongoClientOptions54.getHeartbeatSocketTimeout();
        boolean boolean58 = mongoClientOptions54.equals((java.lang.Object) 500);
        boolean boolean59 = mongoClientOptions54.isAlwaysUseMBeans();
        int int60 = mongoClientOptions54.getServerSelectionTimeout();
        javax.net.SocketFactory socketFactory61 = mongoClientOptions54.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder62 = builder50.socketFactory(socketFactory61);
        com.mongodb.MongoClientOptions.Builder builder64 = builder50.minHeartbeatFrequency(100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(writeConcern46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(mongoClientOptions54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 30000 + "'", int60 == 30000);
        org.junit.Assert.assertNotNull(socketFactory61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test3399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3399");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        boolean boolean6 = mongoClientOptions3.isSocketKeepAlive();
        com.mongodb.ReadConcern readConcern7 = mongoClientOptions3.getReadConcern();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions3.getReadPreference();
        com.mongodb.WriteConcern writeConcern9 = mongoClientOptions3.getWriteConcern();
        int int10 = mongoClientOptions3.getConnectTimeout();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties11.createMongoClient(mongoClientOptions14, environment15);
        java.lang.String str17 = mongoProperties11.getMongoClientDatabase();
        mongoProperties11.setHost("hi!");
        char[] charArray26 = new char[] { 'a', '4', '#', ' ', ' ', ' ' };
        mongoProperties11.setPassword(charArray26);
        char[] charArray28 = mongoProperties11.getPassword();
        java.lang.Class<?> wildcardClass29 = mongoProperties11.getFieldNamingStrategy();
        boolean boolean30 = mongoClientOptions3.equals((java.lang.Object) mongoProperties11);
        java.lang.String str31 = mongoProperties11.getGridFsDatabase();
        mongoProperties11.setGridFsDatabase("hi!");
        mongoProperties11.setAuthenticationDatabase("");
        char[] charArray36 = mongoProperties11.getPassword();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(readConcern7);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertNotNull(writeConcern9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[a, 4, #,  ,  ,  ]");
    }

    @Test
    public void test3400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3400");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setHost("hi!");
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setUsername("hi!");
        java.lang.String str13 = mongoProperties0.getUri();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getMaxConnectionLifeTime();
        int int19 = mongoClientOptions17.getConnectionsPerHost();
        java.lang.String str20 = mongoClientOptions17.getDescription();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList21 = mongoClientOptions17.getCommandListeners();
        int int22 = mongoClientOptions17.getMinConnectionsPerHost();
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions17, environment23);
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions17);
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions17.getReadPreference();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(commandListenerList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNotNull(readPreference26);
    }

    @Test
    public void test3401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3401");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        com.mongodb.MongoClientOptions mongoClientOptions4 = builder2.build();
        int int5 = mongoClientOptions4.getServerSelectionTimeout();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions4);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.maxConnectionLifeTime(30000);
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.serverSelectionTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxConnectionIdleTime((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder27.build();
        com.mongodb.MongoClientOptions.Builder builder32 = builder27.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatConnectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder38 = builder32.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder40 = builder32.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder45.build();
        int int47 = mongoClientOptions46.getLocalThreshold();
        int int48 = mongoClientOptions46.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder49 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions46);
        javax.net.SocketFactory socketFactory50 = mongoClientOptions46.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder51 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions46);
        com.mongodb.DBEncoderFactory dBEncoderFactory52 = mongoClientOptions46.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder53 = builder40.dbEncoderFactory(dBEncoderFactory52);
        com.mongodb.MongoClientOptions.Builder builder54 = builder6.dbEncoderFactory(dBEncoderFactory52);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(mongoClientOptions4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 30000 + "'", int5 == 30000);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 15 + "'", int47 == 15);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(socketFactory50);
        org.junit.Assert.assertNotNull(dBEncoderFactory52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test3402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3402");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.connectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.heartbeatConnectTimeout(30000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test3403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3403");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.serverSelectionTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getConnectionsPerHost();
        int int13 = mongoClientOptions11.getHeartbeatSocketTimeout();
        java.lang.String str14 = mongoClientOptions11.getRequiredReplicaSetName();
        boolean boolean15 = mongoClientOptions11.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions11);
        int int17 = mongoClientOptions11.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory18 = mongoClientOptions11.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder19 = builder6.socketFactory(socketFactory18);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder6.build();
        int int21 = mongoClientOptions20.getConnectionsPerHost();
        java.lang.String str22 = mongoClientOptions20.getDescription();
        java.lang.String str23 = mongoClientOptions20.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertNotNull(socketFactory18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test3404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3404");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        java.lang.Integer int8 = mongoProperties0.getPort();
        mongoProperties0.setUsername("hi!");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getConnectionsPerHost();
        int int16 = mongoClientOptions14.getHeartbeatSocketTimeout();
        java.lang.String str17 = mongoClientOptions14.getRequiredReplicaSetName();
        org.bson.codecs.configuration.CodecRegistry codecRegistry18 = mongoClientOptions14.getCodecRegistry();
        java.lang.String str19 = mongoClientOptions14.getRequiredReplicaSetName();
        boolean boolean20 = mongoClientOptions14.isAlwaysUseMBeans();
        com.mongodb.ReadPreference readPreference21 = mongoClientOptions14.getReadPreference();
        int int22 = mongoClientOptions14.getMaxConnectionIdleTime();
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions14, environment23);
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions14);
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions14.getReadPreference();
        int int27 = mongoClientOptions14.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(codecRegistry18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(readPreference21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNotNull(readPreference26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test3405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3405");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionIdleTime(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.maxConnectionLifeTime((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        boolean boolean26 = mongoClientOptions25.isSslEnabled();
        int int27 = mongoClientOptions25.getHeartbeatSocketTimeout();
        int int28 = mongoClientOptions25.getServerSelectionTimeout();
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions25);
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions25.getReadPreference();
        boolean boolean31 = mongoClientOptions25.isAlwaysUseMBeans();
        com.mongodb.DBDecoderFactory dBDecoderFactory32 = mongoClientOptions25.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder33 = builder19.dbDecoderFactory(dBDecoderFactory32);
        com.mongodb.MongoClientOptions.Builder builder34 = builder2.dbDecoderFactory(dBDecoderFactory32);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.minHeartbeatFrequency(100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 30000 + "'", int28 == 30000);
        org.junit.Assert.assertNotNull(readPreference30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test3406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3406");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        int int6 = mongoClientOptions3.getMinConnectionsPerHost();
        int int7 = mongoClientOptions3.getMaxWaitTime();
        int int8 = mongoClientOptions3.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        boolean boolean10 = mongoClientOptions3.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10000 + "'", int8 == 10000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test3407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3407");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        boolean boolean13 = mongoClientOptions12.isSslEnabled();
        int int14 = mongoClientOptions12.getHeartbeatSocketTimeout();
        int int15 = mongoClientOptions12.getServerSelectionTimeout();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions12);
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions12.getReadPreference();
        boolean boolean18 = mongoClientOptions12.isAlwaysUseMBeans();
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions12.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = builder6.dbDecoderFactory(dBDecoderFactory19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder6.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder24 = builder6.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 30000 + "'", int15 == 30000);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test3408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3408");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test3409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3409");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setAuthenticationDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getSocketTimeout();
        boolean boolean13 = mongoClientOptions11.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties0.createMongoClient(mongoClientOptions11, environment14);
        boolean boolean16 = mongoClientOptions11.isCursorFinalizerEnabled();
        int int17 = mongoClientOptions11.getLocalThreshold();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions11);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxConnectionLifeTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.threadsAllowedToBlockForConnectionMultiplier(5);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 15 + "'", int17 == 15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test3410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3410");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        java.lang.String str6 = mongoClientOptions3.getRequiredReplicaSetName();
        org.bson.codecs.configuration.CodecRegistry codecRegistry7 = mongoClientOptions3.getCodecRegistry();
        int int8 = mongoClientOptions3.getHeartbeatConnectTimeout();
        boolean boolean9 = mongoClientOptions3.isSocketKeepAlive();
        boolean boolean10 = mongoClientOptions3.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(codecRegistry7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test3411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3411");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.minHeartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        int int10 = mongoClientOptions9.getSocketTimeout();
        boolean boolean11 = mongoClientOptions9.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions9.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder13 = builder5.socketFactory(socketFactory12);
        com.mongodb.MongoClientOptions.Builder builder14 = builder5.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test3412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3412");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        java.lang.String str5 = mongoClientOptions3.getDescription();
        int int6 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean7 = mongoClientOptions3.isSslEnabled();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList8 = mongoClientOptions3.getCommandListeners();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(commandListenerList8);
    }

    @Test
    public void test3413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3413");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        boolean boolean7 = mongoClientOptions3.equals((java.lang.Object) 500);
        int int8 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern15 = mongoClientOptions13.getReadConcern();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        boolean boolean17 = mongoClientOptions13.isCursorFinalizerEnabled();
        int int18 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.heartbeatSocketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder37.build();
        int int39 = mongoClientOptions38.getConnectionsPerHost();
        int int40 = mongoClientOptions38.getHeartbeatSocketTimeout();
        boolean boolean42 = mongoClientOptions38.equals((java.lang.Object) 500);
        int int43 = mongoClientOptions38.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder52 = builder46.maxConnectionIdleTime(1);
        boolean boolean53 = mongoClientOptions38.equals((java.lang.Object) builder52);
        int int54 = mongoClientOptions38.getConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory55 = mongoClientOptions38.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder56 = builder34.dbEncoderFactory(dBEncoderFactory55);
        com.mongodb.MongoClientOptions.Builder builder57 = builder21.dbEncoderFactory(dBEncoderFactory55);
        com.mongodb.MongoClientOptions.Builder builder58 = builder9.dbEncoderFactory(dBEncoderFactory55);
        com.mongodb.MongoClientOptions.Builder builder59 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions62 = builder61.build();
        int int63 = mongoClientOptions62.getSocketTimeout();
        boolean boolean64 = mongoClientOptions62.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder65 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions62);
        com.mongodb.MongoClientOptions.Builder builder66 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions69 = builder66.build();
        com.mongodb.MongoClientOptions.Builder builder71 = builder66.connectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder75 = builder71.maxWaitTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder76 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder78 = builder76.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions79 = builder78.build();
        int int80 = mongoClientOptions79.getConnectionsPerHost();
        int int81 = mongoClientOptions79.getHeartbeatSocketTimeout();
        java.lang.String str82 = mongoClientOptions79.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern83 = mongoClientOptions79.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder84 = builder71.writeConcern(writeConcern83);
        com.mongodb.MongoClientOptions.Builder builder85 = builder65.writeConcern(writeConcern83);
        com.mongodb.MongoClientOptions.Builder builder87 = builder85.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder88 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder90 = builder88.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions91 = builder90.build();
        boolean boolean92 = mongoClientOptions91.isSslEnabled();
        int int93 = mongoClientOptions91.getHeartbeatSocketTimeout();
        int int94 = mongoClientOptions91.getMinHeartbeatFrequency();
        int int95 = mongoClientOptions91.getMaxConnectionLifeTime();
        int int96 = mongoClientOptions91.getHeartbeatSocketTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory97 = mongoClientOptions91.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder98 = builder87.dbDecoderFactory(dBDecoderFactory97);
        com.mongodb.MongoClientOptions.Builder builder99 = builder58.dbDecoderFactory(dBDecoderFactory97);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10000 + "'", int8 == 10000);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertNotNull(readConcern15);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 30000 + "'", int18 == 30000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10000 + "'", int43 == 10000);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(mongoClientOptions62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(mongoClientOptions69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(mongoClientOptions79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 100 + "'", int80 == 100);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(writeConcern83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(mongoClientOptions91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 100 + "'", int93 == 100);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 500 + "'", int94 == 500);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 100 + "'", int96 == 100);
        org.junit.Assert.assertNotNull(dBDecoderFactory97);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test3414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3414");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        int int6 = mongoClientOptions3.getMinConnectionsPerHost();
        int int7 = mongoClientOptions3.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        int int9 = mongoClientOptions3.getMinConnectionsPerHost();
        boolean boolean10 = mongoClientOptions3.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getSocketTimeout();
        int int19 = mongoClientOptions17.getThreadsAllowedToBlockForConnectionMultiplier();
        int int20 = mongoClientOptions17.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions17);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getConnectionsPerHost();
        int int27 = mongoClientOptions25.getHeartbeatSocketTimeout();
        java.lang.String str28 = mongoClientOptions25.getRequiredReplicaSetName();
        org.bson.codecs.configuration.CodecRegistry codecRegistry29 = mongoClientOptions25.getCodecRegistry();
        int int30 = mongoClientOptions25.getHeartbeatConnectTimeout();
        boolean boolean31 = mongoClientOptions25.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions25);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        boolean boolean37 = mongoClientOptions36.isSslEnabled();
        int int38 = mongoClientOptions36.getMaxConnectionIdleTime();
        java.lang.String str39 = mongoClientOptions36.getDescription();
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions36);
        com.mongodb.MongoClientOptions.Builder builder41 = builder40.legacyDefaults();
        boolean boolean42 = mongoClientOptions25.equals((java.lang.Object) builder40);
        com.mongodb.WriteConcern writeConcern43 = mongoClientOptions25.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder44 = builder21.writeConcern(writeConcern43);
        com.mongodb.MongoClientOptions.Builder builder45 = builder13.writeConcern(writeConcern43);
        com.mongodb.MongoClientOptions.Builder builder46 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder48.build();
        int int50 = mongoClientOptions49.getSocketTimeout();
        int int51 = mongoClientOptions49.getThreadsAllowedToBlockForConnectionMultiplier();
        org.bson.codecs.configuration.CodecRegistry codecRegistry52 = mongoClientOptions49.getCodecRegistry();
        int int53 = mongoClientOptions49.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder54 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions49);
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions49);
        int int56 = mongoClientOptions49.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory57 = mongoClientOptions49.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder58 = builder45.dbEncoderFactory(dBEncoderFactory57);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 120000 + "'", int20 == 120000);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(codecRegistry29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(writeConcern43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(codecRegistry52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 120000 + "'", int56 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory57);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test3415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3415");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory5 = mongoClientOptions3.getDbDecoderFactory();
        int int6 = mongoClientOptions3.getLocalThreshold();
        int int7 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.DBDecoderFactory dBDecoderFactory9 = mongoClientOptions3.getDbDecoderFactory();
        int int10 = mongoClientOptions3.getServerSelectionTimeout();
        boolean boolean11 = mongoClientOptions3.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 15 + "'", int6 == 15);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertNotNull(dBDecoderFactory9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 30000 + "'", int10 == 30000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test3416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3416");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        boolean boolean6 = mongoClientOptions3.isSocketKeepAlive();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions3.getDbDecoderFactory();
        boolean boolean8 = mongoClientOptions3.isAlwaysUseMBeans();
        int int9 = mongoClientOptions3.getSocketTimeout();
        javax.net.SocketFactory socketFactory10 = mongoClientOptions3.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(socketFactory10);
    }

    @Test
    public void test3417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3417");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        int int6 = mongoClientOptions3.getMinConnectionsPerHost();
        int int7 = mongoClientOptions3.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        int int9 = mongoClientOptions3.getMinConnectionsPerHost();
        boolean boolean10 = mongoClientOptions3.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.heartbeatConnectTimeout(120000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test3418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3418");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setHost("hi!");
        char[] charArray15 = new char[] { 'a', '4', '#', ' ', ' ', ' ' };
        mongoProperties0.setPassword(charArray15);
        char[] charArray17 = mongoProperties0.getPassword();
        java.lang.String str18 = mongoProperties0.getDatabase();
        char[] charArray19 = mongoProperties0.getPassword();
        mongoProperties0.setPort((java.lang.Integer) 20000);
        mongoProperties0.setPort((java.lang.Integer) 10000);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[a, 4, #,  ,  ,  ]");
    }

    @Test
    public void test3419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3419");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setHost("");
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str10 = mongoProperties0.getUri();
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb://localhost/test" + "'", str10, "mongodb://localhost/test");
    }

    @Test
    public void test3420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3420");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder5 = builder0.connectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder7 = builder0.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder9 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions15);
        java.util.List<com.mongodb.event.CommandListener> commandListenerList18 = mongoClientOptions15.getCommandListeners();
        int int19 = mongoClientOptions15.getHeartbeatSocketTimeout();
        int int20 = mongoClientOptions15.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference21 = mongoClientOptions15.getReadPreference();
        int int22 = mongoClientOptions15.getMaxConnectionLifeTime();
        javax.net.SocketFactory socketFactory23 = mongoClientOptions15.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = builder0.socketFactory(socketFactory23);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNotNull(commandListenerList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
        org.junit.Assert.assertNotNull(readPreference21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test3421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3421");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        int int6 = mongoClientOptions3.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 500 + "'", int6 == 500);
    }

    @Test
    public void test3422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3422");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.setUri("");
        java.lang.String str10 = mongoProperties0.getUri();
        java.lang.String str11 = mongoProperties0.getUri();
        mongoProperties0.setPort((java.lang.Integer) 27017);
        mongoProperties0.setHost("hi!");
        java.lang.String str16 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test3423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3423");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getMaxConnectionIdleTime();
        int int6 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int7 = mongoClientOptions3.getMaxConnectionIdleTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions3.getDbEncoderFactory();
        int int9 = mongoClientOptions3.getMinConnectionsPerHost();
        boolean boolean10 = mongoClientOptions3.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test3424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3424");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setHost("hi!");
        char[] charArray15 = new char[] { 'a', '4', '#', ' ', ' ', ' ' };
        mongoProperties0.setPassword(charArray15);
        char[] charArray17 = mongoProperties0.getPassword();
        mongoProperties0.setHost("");
        java.lang.String str20 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setUri("test");
        java.lang.String str27 = mongoProperties0.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder30.build();
        int int32 = mongoClientOptions31.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions31);
        java.lang.String str34 = mongoClientOptions31.getDescription();
        com.mongodb.WriteConcern writeConcern35 = mongoClientOptions31.getWriteConcern();
        com.mongodb.ReadPreference readPreference36 = mongoClientOptions31.getReadPreference();
        org.springframework.core.env.Environment environment37 = null;
        com.mongodb.MongoClient mongoClient38 = mongoProperties0.createMongoClient(mongoClientOptions31, environment37);
        mongoProperties0.setDatabase("test");
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[\000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(writeConcern35);
        org.junit.Assert.assertNotNull(readPreference36);
        org.junit.Assert.assertNotNull(mongoClient38);
    }

    @Test
    public void test3425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3425");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        boolean boolean6 = mongoClientOptions3.isSocketKeepAlive();
        com.mongodb.ReadConcern readConcern7 = mongoClientOptions3.getReadConcern();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions3.getReadPreference();
        com.mongodb.WriteConcern writeConcern9 = mongoClientOptions3.getWriteConcern();
        int int10 = mongoClientOptions3.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        java.lang.Class<?> wildcardClass12 = builder11.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(readConcern7);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertNotNull(writeConcern9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3426");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxConnectionLifeTime(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getSocketTimeout();
        int int21 = mongoClientOptions19.getThreadsAllowedToBlockForConnectionMultiplier();
        org.bson.codecs.configuration.CodecRegistry codecRegistry22 = mongoClientOptions19.getCodecRegistry();
        int int23 = mongoClientOptions19.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        int int26 = mongoClientOptions19.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions19.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder28 = builder13.readPreference(readPreference27);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        int int33 = mongoClientOptions32.getConnectionsPerHost();
        int int34 = mongoClientOptions32.getHeartbeatSocketTimeout();
        java.lang.String str35 = mongoClientOptions32.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern36 = mongoClientOptions32.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder37 = com.mongodb.MongoClientOptions.builder(mongoClientOptions32);
        com.mongodb.ReadConcern readConcern38 = mongoClientOptions32.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder39 = builder28.readConcern(readConcern38);
        com.mongodb.MongoClientOptions.Builder builder41 = builder28.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder53 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions56 = builder55.build();
        boolean boolean57 = mongoClientOptions56.isSslEnabled();
        int int58 = mongoClientOptions56.getHeartbeatSocketTimeout();
        int int59 = mongoClientOptions56.getMinHeartbeatFrequency();
        int int60 = mongoClientOptions56.getMaxConnectionLifeTime();
        int int61 = mongoClientOptions56.getHeartbeatSocketTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory62 = mongoClientOptions56.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder63 = builder52.dbDecoderFactory(dBDecoderFactory62);
        com.mongodb.MongoClientOptions.Builder builder64 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder70 = builder66.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder72 = builder66.serverSelectionTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder75 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder77 = builder75.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions78 = builder77.build();
        int int79 = mongoClientOptions78.getHeartbeatFrequency();
        int int80 = mongoClientOptions78.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder81 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions78);
        com.mongodb.MongoClientOptions.Builder builder83 = builder81.heartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder84 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder86 = builder84.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions87 = builder86.build();
        int int88 = mongoClientOptions87.getSocketTimeout();
        boolean boolean89 = mongoClientOptions87.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory90 = mongoClientOptions87.getSocketFactory();
        org.bson.codecs.configuration.CodecRegistry codecRegistry91 = mongoClientOptions87.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder92 = builder81.codecRegistry(codecRegistry91);
        com.mongodb.MongoClientOptions.Builder builder93 = builder72.codecRegistry(codecRegistry91);
        com.mongodb.MongoClientOptions.Builder builder94 = builder52.codecRegistry(codecRegistry91);
        com.mongodb.MongoClientOptions.Builder builder95 = builder28.codecRegistry(codecRegistry91);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 500 + "'", int6 == 500);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(codecRegistry22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(writeConcern36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(readConcern38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoClientOptions56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 500 + "'", int59 == 500);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertNotNull(dBDecoderFactory62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(mongoClientOptions78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10000 + "'", int79 == 10000);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 5 + "'", int80 == 5);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(mongoClientOptions87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(socketFactory90);
        org.junit.Assert.assertNotNull(codecRegistry91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test3427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3427");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        java.lang.String str6 = mongoClientOptions3.getRequiredReplicaSetName();
        org.bson.codecs.configuration.CodecRegistry codecRegistry7 = mongoClientOptions3.getCodecRegistry();
        int int8 = mongoClientOptions3.getHeartbeatConnectTimeout();
        int int9 = mongoClientOptions3.getConnectionsPerHost();
        java.lang.String str10 = mongoClientOptions3.getRequiredReplicaSetName();
        com.mongodb.ReadConcern readConcern11 = mongoClientOptions3.getReadConcern();
        boolean boolean12 = mongoClientOptions3.isCursorFinalizerEnabled();
        int int13 = mongoClientOptions3.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(codecRegistry7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(readConcern11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test3428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3428");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        java.lang.Integer int8 = mongoProperties0.getPort();
        char[] charArray9 = mongoProperties0.getPassword();
        mongoProperties0.setHost("hi!");
        java.lang.Integer int12 = mongoProperties0.getPort();
        mongoProperties0.setHost("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties15.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.springframework.core.env.Environment environment19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties15.createMongoClient(mongoClientOptions18, environment19);
        java.lang.String str21 = mongoProperties15.getMongoClientDatabase();
        mongoProperties15.setHost("hi!");
        char[] charArray30 = new char[] { 'a', '4', '#', ' ', ' ', ' ' };
        mongoProperties15.setPassword(charArray30);
        mongoProperties0.setPassword(charArray30);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties33 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties33.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions36 = null;
        org.springframework.core.env.Environment environment37 = null;
        com.mongodb.MongoClient mongoClient38 = mongoProperties33.createMongoClient(mongoClientOptions36, environment37);
        java.lang.String str39 = mongoProperties33.getMongoClientDatabase();
        java.lang.String str40 = mongoProperties33.getGridFsDatabase();
        java.lang.Integer int41 = mongoProperties33.getPort();
        char[] charArray42 = mongoProperties33.getPassword();
        mongoProperties33.setHost("hi!");
        java.lang.Integer int45 = mongoProperties33.getPort();
        mongoProperties33.setHost("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties48 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties48.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions51 = null;
        org.springframework.core.env.Environment environment52 = null;
        com.mongodb.MongoClient mongoClient53 = mongoProperties48.createMongoClient(mongoClientOptions51, environment52);
        java.lang.String str54 = mongoProperties48.getMongoClientDatabase();
        mongoProperties48.setHost("hi!");
        char[] charArray63 = new char[] { 'a', '4', '#', ' ', ' ', ' ' };
        mongoProperties48.setPassword(charArray63);
        mongoProperties33.setPassword(charArray63);
        mongoProperties0.setPassword(charArray63);
        java.lang.String str67 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(charArray9);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNotNull(mongoClient38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNull(charArray42);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNotNull(mongoClient53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNull(str67);
    }

    @Test
    public void test3429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3429");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        java.lang.String str6 = mongoClientOptions3.getRequiredReplicaSetName();
        org.bson.codecs.configuration.CodecRegistry codecRegistry7 = mongoClientOptions3.getCodecRegistry();
        int int8 = mongoClientOptions3.getHeartbeatConnectTimeout();
        boolean boolean9 = mongoClientOptions3.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        boolean boolean15 = mongoClientOptions14.isSslEnabled();
        int int16 = mongoClientOptions14.getMaxConnectionIdleTime();
        java.lang.String str17 = mongoClientOptions14.getDescription();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions14);
        com.mongodb.MongoClientOptions.Builder builder19 = builder18.legacyDefaults();
        boolean boolean20 = mongoClientOptions3.equals((java.lang.Object) builder18);
        com.mongodb.WriteConcern writeConcern21 = mongoClientOptions3.getWriteConcern();
        javax.net.SocketFactory socketFactory22 = mongoClientOptions3.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory23 = mongoClientOptions3.getDbEncoderFactory();
        int int24 = mongoClientOptions3.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(codecRegistry7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(writeConcern21);
        org.junit.Assert.assertNotNull(socketFactory22);
        org.junit.Assert.assertNotNull(dBEncoderFactory23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 500 + "'", int24 == 500);
    }

    @Test
    public void test3430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3430");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setHost("");
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setGridFsDatabase("test");
        java.lang.Class<?> wildcardClass12 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNull(wildcardClass12);
    }

    @Test
    public void test3431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3431");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern14 = mongoClientOptions12.getReadConcern();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions12.getReadPreference();
        boolean boolean16 = mongoClientOptions12.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions12);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.connectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory27 = mongoClientOptions25.getDbDecoderFactory();
        int int28 = mongoClientOptions25.getLocalThreshold();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList29 = mongoClientOptions25.getCommandListeners();
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions25);
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder43 = builder37.threadsAllowedToBlockForConnectionMultiplier(100);
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder46.build();
        int int48 = mongoClientOptions47.getSocketTimeout();
        boolean boolean49 = mongoClientOptions47.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory50 = mongoClientOptions47.getSocketFactory();
        org.bson.codecs.configuration.CodecRegistry codecRegistry51 = mongoClientOptions47.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder52 = builder37.codecRegistry(codecRegistry51);
        com.mongodb.MongoClientOptions.Builder builder53 = builder30.codecRegistry(codecRegistry51);
        com.mongodb.MongoClientOptions.Builder builder54 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions57 = builder56.build();
        int int58 = mongoClientOptions57.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder59 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions57);
        com.mongodb.MongoClientOptions.Builder builder60 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder62.build();
        int int64 = mongoClientOptions63.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern65 = mongoClientOptions63.getReadConcern();
        int int66 = mongoClientOptions63.getMinConnectionsPerHost();
        int int67 = mongoClientOptions63.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern68 = mongoClientOptions63.getWriteConcern();
        boolean boolean69 = mongoClientOptions57.equals((java.lang.Object) writeConcern68);
        javax.net.SocketFactory socketFactory70 = mongoClientOptions57.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder71 = builder53.socketFactory(socketFactory70);
        com.mongodb.MongoClientOptions.Builder builder72 = builder21.socketFactory(socketFactory70);
        com.mongodb.MongoClientOptions.Builder builder73 = builder8.socketFactory(socketFactory70);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertNotNull(readConcern14);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 15 + "'", int28 == 15);
        org.junit.Assert.assertNotNull(commandListenerList29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(mongoClientOptions47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(socketFactory50);
        org.junit.Assert.assertNotNull(codecRegistry51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mongoClientOptions57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoClientOptions63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10000 + "'", int64 == 10000);
        org.junit.Assert.assertNotNull(readConcern65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 120000 + "'", int67 == 120000);
        org.junit.Assert.assertNotNull(writeConcern68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(socketFactory70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test3432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3432");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder7.socketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.minHeartbeatFrequency(10000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 500 + "'", int6 == 500);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test3433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3433");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder6 = com.mongodb.MongoClientOptions.builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern21 = mongoClientOptions19.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        boolean boolean23 = mongoClientOptions19.isSslInvalidHostNameAllowed();
        int int24 = mongoClientOptions19.getConnectTimeout();
        int int25 = mongoClientOptions19.getMaxWaitTime();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions19.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder27 = builder15.socketFactory(socketFactory26);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder30.build();
        boolean boolean32 = mongoClientOptions31.isSslEnabled();
        com.mongodb.ReadPreference readPreference33 = mongoClientOptions31.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory34 = mongoClientOptions31.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder15.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder36 = builder6.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.threadsAllowedToBlockForConnectionMultiplier(120000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
        org.junit.Assert.assertNotNull(readConcern21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10000 + "'", int24 == 10000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 120000 + "'", int25 == 120000);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(readPreference33);
        org.junit.Assert.assertNotNull(dBEncoderFactory34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test3434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3434");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder17 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatConnectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder17.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder27 = builder17.description("test");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxWaitTime(5);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test3435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3435");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatSocketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder16.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder22.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder25 = builder22.maxWaitTime((int) (short) -1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test3436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3436");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        boolean boolean11 = mongoClientOptions10.isSslEnabled();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions10.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.dbEncoderFactory(dBEncoderFactory13);
        com.mongodb.MongoClientOptions.Builder builder16 = builder6.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder6.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern29 = mongoClientOptions27.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder30 = builder23.readConcern(readConcern29);
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder40.build();
        boolean boolean42 = mongoClientOptions41.isSslEnabled();
        int int43 = mongoClientOptions41.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory44 = mongoClientOptions41.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder45 = builder37.dbEncoderFactory(dBEncoderFactory44);
        com.mongodb.MongoClientOptions.Builder builder46 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder48.build();
        int int50 = mongoClientOptions49.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern51 = mongoClientOptions49.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder52 = builder37.readConcern(readConcern51);
        com.mongodb.MongoClientOptions.Builder builder53 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions56 = builder55.build();
        int int57 = mongoClientOptions56.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern58 = mongoClientOptions56.getReadConcern();
        com.mongodb.ReadPreference readPreference59 = mongoClientOptions56.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder60 = builder52.readPreference(readPreference59);
        com.mongodb.MongoClientOptions.Builder builder61 = builder30.readPreference(readPreference59);
        com.mongodb.MongoClientOptions.Builder builder62 = builder6.readPreference(readPreference59);
        com.mongodb.event.CommandListener commandListener63 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder64 = builder6.addCommandListener(commandListener63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(readConcern29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10000 + "'", int50 == 10000);
        org.junit.Assert.assertNotNull(readConcern51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoClientOptions56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10000 + "'", int57 == 10000);
        org.junit.Assert.assertNotNull(readConcern58);
        org.junit.Assert.assertNotNull(readPreference59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test3437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3437");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setUsername("");
        mongoProperties0.setHost("hi!");
        char[] charArray5 = mongoProperties0.getPassword();
        mongoProperties0.setUri("");
        java.lang.String str8 = mongoProperties0.getDatabase();
        mongoProperties0.setPort((java.lang.Integer) 120000);
        char[] charArray11 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(charArray11);
    }

    @Test
    public void test3438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3438");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        int int5 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        org.bson.codecs.configuration.CodecRegistry codecRegistry6 = mongoClientOptions3.getCodecRegistry();
        int int7 = mongoClientOptions3.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionLifeTime((int) '#');
        com.mongodb.event.CommandListener commandListener11 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder10.addCommandListener(commandListener11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertNotNull(codecRegistry6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test3439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3439");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        boolean boolean11 = mongoClientOptions10.isSslEnabled();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions10.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.dbEncoderFactory(dBEncoderFactory13);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern20 = mongoClientOptions18.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder21 = builder6.readConcern(readConcern20);
        com.mongodb.MongoClientOptions.Builder builder23 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        int int28 = mongoClientOptions27.getHeartbeatFrequency();
        int int29 = mongoClientOptions27.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions27);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getSocketTimeout();
        boolean boolean38 = mongoClientOptions36.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory39 = mongoClientOptions36.getSocketFactory();
        org.bson.codecs.configuration.CodecRegistry codecRegistry40 = mongoClientOptions36.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder41 = builder30.codecRegistry(codecRegistry40);
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder44.build();
        int int46 = mongoClientOptions45.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern47 = mongoClientOptions45.getReadConcern();
        com.mongodb.ReadPreference readPreference48 = mongoClientOptions45.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder49 = builder41.readPreference(readPreference48);
        com.mongodb.MongoClientOptions.Builder builder50 = builder23.readPreference(readPreference48);
        com.mongodb.MongoClientOptions.Builder builder52 = builder23.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder53 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions56 = builder55.build();
        int int57 = mongoClientOptions56.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern58 = mongoClientOptions56.getReadConcern();
        int int59 = mongoClientOptions56.getMinConnectionsPerHost();
        boolean boolean60 = mongoClientOptions56.isSslInvalidHostNameAllowed();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList61 = mongoClientOptions56.getCommandListeners();
        com.mongodb.MongoClientOptions.Builder builder62 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions56);
        com.mongodb.MongoClientOptions.Builder builder63 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder67 = builder63.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder69 = builder63.serverSelectionTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions mongoClientOptions70 = builder69.build();
        com.mongodb.ReadPreference readPreference71 = mongoClientOptions70.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder72 = builder62.readPreference(readPreference71);
        com.mongodb.MongoClientOptions.Builder builder73 = builder23.readPreference(readPreference71);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertNotNull(readConcern20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(socketFactory39);
        org.junit.Assert.assertNotNull(codecRegistry40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10000 + "'", int46 == 10000);
        org.junit.Assert.assertNotNull(readConcern47);
        org.junit.Assert.assertNotNull(readPreference48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoClientOptions56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10000 + "'", int57 == 10000);
        org.junit.Assert.assertNotNull(readConcern58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(commandListenerList61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(mongoClientOptions70);
        org.junit.Assert.assertNotNull(readPreference71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test3440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3440");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxWaitTime(120000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.minHeartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder12.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatConnectTimeout((int) '4');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test3441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3441");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        boolean boolean11 = mongoClientOptions10.isSslEnabled();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions10.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.dbEncoderFactory(dBEncoderFactory13);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern20 = mongoClientOptions18.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder21 = builder6.readConcern(readConcern20);
        com.mongodb.MongoClientOptions.Builder builder23 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder28.build();
        int int30 = mongoClientOptions29.getSocketTimeout();
        boolean boolean31 = mongoClientOptions29.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory32 = mongoClientOptions29.getSocketFactory();
        org.bson.codecs.configuration.CodecRegistry codecRegistry33 = mongoClientOptions29.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder34 = builder23.codecRegistry(codecRegistry33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.maxConnectionLifeTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.maxConnectionIdleTime((int) (short) -1);
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder45.build();
        int int47 = mongoClientOptions46.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory48 = mongoClientOptions46.getDbDecoderFactory();
        int int49 = mongoClientOptions46.getLocalThreshold();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList50 = mongoClientOptions46.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory51 = mongoClientOptions46.getDbDecoderFactory();
        boolean boolean52 = mongoClientOptions46.isSslEnabled();
        javax.net.SocketFactory socketFactory53 = mongoClientOptions46.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder54 = builder42.socketFactory(socketFactory53);
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder57.build();
        boolean boolean59 = mongoClientOptions58.isSslEnabled();
        int int60 = mongoClientOptions58.getHeartbeatSocketTimeout();
        int int61 = mongoClientOptions58.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder62 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions58);
        com.mongodb.MongoClientOptions.Builder builder63 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions58);
        int int64 = mongoClientOptions58.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory65 = mongoClientOptions58.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder66 = builder54.dbEncoderFactory(dBEncoderFactory65);
        com.mongodb.MongoClientOptions.Builder builder68 = builder54.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.sslEnabled(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertNotNull(readConcern20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(socketFactory32);
        org.junit.Assert.assertNotNull(codecRegistry33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10000 + "'", int47 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 15 + "'", int49 == 15);
        org.junit.Assert.assertNotNull(commandListenerList50);
        org.junit.Assert.assertNotNull(dBDecoderFactory51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(socketFactory53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 500 + "'", int61 == 500);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 120000 + "'", int64 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test3442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3442");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        java.lang.Integer int8 = mongoProperties0.getPort();
        java.lang.String str9 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass10 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Integer int11 = mongoProperties0.getPort();
        mongoProperties0.setDatabase("");
        java.lang.String str14 = mongoProperties0.getUsername();
        mongoProperties0.setUsername("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test3443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3443");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        boolean boolean5 = mongoClientOptions3.isAlwaysUseMBeans();
        java.lang.String str6 = mongoClientOptions3.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        javax.net.SocketFactory socketFactory8 = mongoClientOptions3.getSocketFactory();
        int int9 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions3.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions3.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
    }

    @Test
    public void test3444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3444");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        org.bson.codecs.configuration.CodecRegistry codecRegistry6 = mongoClientOptions3.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder7 = com.mongodb.MongoClientOptions.builder(mongoClientOptions3);
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions3.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.minConnectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder13 = builder12.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getMaxConnectionLifeTime();
        int int19 = mongoClientOptions17.getConnectionsPerHost();
        javax.net.SocketFactory socketFactory20 = mongoClientOptions17.getSocketFactory();
        boolean boolean21 = mongoClientOptions17.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.heartbeatSocketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder37.build();
        int int39 = mongoClientOptions38.getSocketTimeout();
        boolean boolean40 = mongoClientOptions38.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory41 = mongoClientOptions38.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder42 = builder30.socketFactory(socketFactory41);
        boolean boolean43 = mongoClientOptions17.equals((java.lang.Object) builder30);
        javax.net.SocketFactory socketFactory44 = mongoClientOptions17.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder45 = builder12.socketFactory(socketFactory44);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertNotNull(codecRegistry6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(socketFactory20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(socketFactory41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(socketFactory44);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test3445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3445");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        com.mongodb.MongoClientOptions.Builder builder12 = com.mongodb.MongoClientOptions.builder(mongoClientOptions11);
        org.springframework.core.env.Environment environment13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties0.createMongoClient(mongoClientOptions11, environment13);
        java.lang.String str15 = mongoProperties0.getHost();
        mongoProperties0.setDatabase("");
        mongoProperties0.clearPassword();
        java.lang.String str19 = mongoProperties0.getDatabase();
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test3446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3446");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        boolean boolean5 = mongoClientOptions3.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory6 = mongoClientOptions3.getSocketFactory();
        org.bson.codecs.configuration.CodecRegistry codecRegistry7 = mongoClientOptions3.getCodecRegistry();
        int int8 = mongoClientOptions3.getMaxConnectionIdleTime();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        boolean boolean10 = mongoClientOptions3.isAlwaysUseMBeans();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions3.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        int int13 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(socketFactory6);
        org.junit.Assert.assertNotNull(codecRegistry7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
    }

    @Test
    public void test3447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3447");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        java.lang.Integer int8 = mongoProperties0.getPort();
        java.lang.String str9 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass10 = mongoProperties0.getFieldNamingStrategy();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties11.createMongoClient(mongoClientOptions14, environment15);
        java.lang.String str17 = mongoProperties11.getMongoClientDatabase();
        mongoProperties11.setHost("hi!");
        char[] charArray26 = new char[] { 'a', '4', '#', ' ', ' ', ' ' };
        mongoProperties11.setPassword(charArray26);
        char[] charArray28 = mongoProperties11.getPassword();
        mongoProperties11.setHost("");
        char[] charArray31 = mongoProperties11.getPassword();
        mongoProperties0.setPassword(charArray31);
        java.lang.Integer int33 = mongoProperties0.getPort();
        mongoProperties0.setUri("");
        java.lang.String str36 = mongoProperties0.getDatabase();
        java.lang.String str37 = mongoProperties0.getGridFsDatabase();
        java.lang.Class<?> wildcardClass38 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(wildcardClass38);
    }

    @Test
    public void test3448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3448");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        java.lang.Integer int8 = mongoProperties0.getPort();
        char[] charArray9 = mongoProperties0.getPassword();
        mongoProperties0.setHost("hi!");
        java.lang.Integer int12 = mongoProperties0.getPort();
        mongoProperties0.setHost("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties15.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.springframework.core.env.Environment environment19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties15.createMongoClient(mongoClientOptions18, environment19);
        java.lang.String str21 = mongoProperties15.getMongoClientDatabase();
        mongoProperties15.setHost("hi!");
        char[] charArray30 = new char[] { 'a', '4', '#', ' ', ' ', ' ' };
        mongoProperties15.setPassword(charArray30);
        mongoProperties0.setPassword(charArray30);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties33 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties33.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions36 = null;
        org.springframework.core.env.Environment environment37 = null;
        com.mongodb.MongoClient mongoClient38 = mongoProperties33.createMongoClient(mongoClientOptions36, environment37);
        java.lang.String str39 = mongoProperties33.getMongoClientDatabase();
        java.lang.String str40 = mongoProperties33.getGridFsDatabase();
        java.lang.Integer int41 = mongoProperties33.getPort();
        char[] charArray42 = mongoProperties33.getPassword();
        mongoProperties33.setHost("hi!");
        java.lang.Integer int45 = mongoProperties33.getPort();
        mongoProperties33.setHost("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties48 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties48.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions51 = null;
        org.springframework.core.env.Environment environment52 = null;
        com.mongodb.MongoClient mongoClient53 = mongoProperties48.createMongoClient(mongoClientOptions51, environment52);
        java.lang.String str54 = mongoProperties48.getMongoClientDatabase();
        mongoProperties48.setHost("hi!");
        char[] charArray63 = new char[] { 'a', '4', '#', ' ', ' ', ' ' };
        mongoProperties48.setPassword(charArray63);
        mongoProperties33.setPassword(charArray63);
        mongoProperties0.setPassword(charArray63);
        char[] charArray67 = mongoProperties0.getPassword();
        java.lang.String str68 = mongoProperties0.getGridFsDatabase();
        java.lang.String str69 = mongoProperties0.getUri();
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.setUri("hi!");
        mongoProperties0.setUsername("test");
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(charArray9);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNotNull(mongoClient38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNull(charArray42);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNotNull(mongoClient53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[a, 4, #,  ,  ,  ]");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "mongodb://localhost/test" + "'", str69, "mongodb://localhost/test");
    }

    @Test
    public void test3449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3449");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        com.mongodb.ReadPreference readPreference6 = mongoClientOptions3.getReadPreference();
        boolean boolean7 = mongoClientOptions3.isCursorFinalizerEnabled();
        int int8 = mongoClientOptions3.getServerSelectionTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        org.bson.codecs.configuration.CodecRegistry codecRegistry10 = mongoClientOptions3.getCodecRegistry();
        int int11 = mongoClientOptions3.getServerSelectionTimeout();
        int int12 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        int int13 = mongoClientOptions3.getHeartbeatConnectTimeout();
        int int14 = mongoClientOptions3.getLocalThreshold();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions3.getDbDecoderFactory();
        com.mongodb.ReadConcern readConcern16 = mongoClientOptions3.getReadConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertNotNull(readPreference6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 30000 + "'", int8 == 30000);
        org.junit.Assert.assertNotNull(codecRegistry10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 30000 + "'", int11 == 30000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertNotNull(readConcern16);
    }

    @Test
    public void test3450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3450");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        int int6 = mongoClientOptions3.getMinConnectionsPerHost();
        boolean boolean7 = mongoClientOptions3.isSslInvalidHostNameAllowed();
        int int8 = mongoClientOptions3.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        boolean boolean13 = mongoClientOptions12.isSslEnabled();
        int int14 = mongoClientOptions12.getHeartbeatSocketTimeout();
        int int15 = mongoClientOptions12.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions12);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions12);
        boolean boolean18 = mongoClientOptions12.isCursorFinalizerEnabled();
        boolean boolean19 = mongoClientOptions12.isSslInvalidHostNameAllowed();
        javax.net.SocketFactory socketFactory20 = mongoClientOptions12.getSocketFactory();
        int int21 = mongoClientOptions12.getConnectTimeout();
        int int22 = mongoClientOptions12.getHeartbeatConnectTimeout();
        int int23 = mongoClientOptions12.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean24 = mongoClientOptions3.equals((java.lang.Object) mongoClientOptions12);
        int int25 = mongoClientOptions12.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(socketFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
    }

    @Test
    public void test3451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3451");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setAuthenticationDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getSocketTimeout();
        boolean boolean13 = mongoClientOptions11.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties0.createMongoClient(mongoClientOptions11, environment14);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getConnectionsPerHost();
        int int21 = mongoClientOptions19.getConnectTimeout();
        org.springframework.core.env.Environment environment22 = null;
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions19, environment22);
        int int24 = mongoClientOptions19.getHeartbeatFrequency();
        java.lang.String str25 = mongoClientOptions19.getRequiredReplicaSetName();
        boolean boolean26 = mongoClientOptions19.isAlwaysUseMBeans();
        com.mongodb.WriteConcern writeConcern27 = mongoClientOptions19.getWriteConcern();
        javax.net.SocketFactory socketFactory28 = mongoClientOptions19.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10000 + "'", int24 == 10000);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(writeConcern27);
        org.junit.Assert.assertNotNull(socketFactory28);
    }

    @Test
    public void test3452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3452");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        java.lang.String str6 = mongoClientOptions3.getRequiredReplicaSetName();
        org.bson.codecs.configuration.CodecRegistry codecRegistry7 = mongoClientOptions3.getCodecRegistry();
        java.lang.String str8 = mongoClientOptions3.getRequiredReplicaSetName();
        boolean boolean9 = mongoClientOptions3.isAlwaysUseMBeans();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions3.getReadPreference();
        int int11 = mongoClientOptions3.getMaxConnectionIdleTime();
        int int12 = mongoClientOptions3.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(codecRegistry7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test3453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3453");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        boolean boolean5 = mongoClientOptions3.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory6 = mongoClientOptions3.getSocketFactory();
        int int7 = mongoClientOptions3.getSocketTimeout();
        int int8 = mongoClientOptions3.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions3.getReadPreference();
        boolean boolean11 = mongoClientOptions3.isSocketKeepAlive();
        int int12 = mongoClientOptions3.getServerSelectionTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(socketFactory6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 120000 + "'", int8 == 120000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 30000 + "'", int12 == 30000);
    }

    @Test
    public void test3454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3454");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        int int6 = mongoClientOptions3.getMinConnectionsPerHost();
        int int7 = mongoClientOptions3.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.DBEncoderFactory dBEncoderFactory9 = mongoClientOptions3.getDbEncoderFactory();
        int int10 = mongoClientOptions3.getMinHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions3.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.sslEnabled(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test3455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3455");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getSocketTimeout();
        boolean boolean10 = mongoClientOptions8.isAlwaysUseMBeans();
        int int11 = mongoClientOptions8.getThreadsAllowedToBlockForConnectionMultiplier();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList12 = mongoClientOptions8.getCommandListeners();
        boolean boolean13 = mongoClientOptions3.equals((java.lang.Object) mongoClientOptions8);
        int int14 = mongoClientOptions8.getMaxConnectionLifeTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions8.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = com.mongodb.MongoClientOptions.builder(mongoClientOptions8);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxWaitTime(20000);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.heartbeatSocketTimeout((int) (short) -1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder16.serverSelectionTimeout(10000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(commandListenerList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test3456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3456");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        int int6 = mongoClientOptions3.getMinConnectionsPerHost();
        int int7 = mongoClientOptions3.getMaxWaitTime();
        int int8 = mongoClientOptions3.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        java.util.List<com.mongodb.event.CommandListener> commandListenerList10 = mongoClientOptions3.getCommandListeners();
        int int11 = mongoClientOptions3.getConnectTimeout();
        int int12 = mongoClientOptions3.getMaxConnectionLifeTime();
        java.lang.String str13 = mongoClientOptions3.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10000 + "'", int8 == 10000);
        org.junit.Assert.assertNotNull(commandListenerList10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test3457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3457");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.minHeartbeatFrequency(1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.minHeartbeatFrequency(1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test3458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3458");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        java.lang.String str6 = mongoClientOptions3.getRequiredReplicaSetName();
        org.bson.codecs.configuration.CodecRegistry codecRegistry7 = mongoClientOptions3.getCodecRegistry();
        int int8 = mongoClientOptions3.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        boolean boolean11 = mongoClientOptions3.isCursorFinalizerEnabled();
        int int12 = mongoClientOptions3.getConnectionsPerHost();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions3.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(codecRegistry7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(readPreference13);
    }

    @Test
    public void test3459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3459");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setHost("");
        mongoProperties0.setUsername("hi!");
        mongoProperties0.setHost("mongodb://localhost/test");
        mongoProperties0.setDatabase("");
        org.junit.Assert.assertNotNull(mongoClient5);
    }

    @Test
    public void test3460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3460");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.threadsAllowedToBlockForConnectionMultiplier(100);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        boolean boolean24 = mongoClientOptions23.isSslEnabled();
        int int25 = mongoClientOptions23.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory26 = mongoClientOptions23.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder27 = builder19.dbEncoderFactory(dBEncoderFactory26);
        com.mongodb.MongoClientOptions.Builder builder28 = builder6.dbEncoderFactory(dBEncoderFactory26);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.heartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern38 = mongoClientOptions36.getReadConcern();
        int int39 = mongoClientOptions36.getMinConnectionsPerHost();
        int int40 = mongoClientOptions36.getMaxWaitTime();
        int int41 = mongoClientOptions36.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder42 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions36);
        java.util.List<com.mongodb.event.CommandListener> commandListenerList43 = mongoClientOptions36.getCommandListeners();
        org.bson.codecs.configuration.CodecRegistry codecRegistry44 = mongoClientOptions36.getCodecRegistry();
        javax.net.SocketFactory socketFactory45 = mongoClientOptions36.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder46 = builder32.socketFactory(socketFactory45);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10000 + "'", int37 == 10000);
        org.junit.Assert.assertNotNull(readConcern38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 120000 + "'", int40 == 120000);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10000 + "'", int41 == 10000);
        org.junit.Assert.assertNotNull(commandListenerList43);
        org.junit.Assert.assertNotNull(codecRegistry44);
        org.junit.Assert.assertNotNull(socketFactory45);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test3461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3461");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getMaxConnectionLifeTime();
        int int14 = mongoClientOptions12.getConnectionsPerHost();
        boolean boolean15 = mongoClientOptions12.isSocketKeepAlive();
        boolean boolean16 = mongoClientOptions12.isSslInvalidHostNameAllowed();
        com.mongodb.DBEncoderFactory dBEncoderFactory17 = mongoClientOptions12.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder18 = builder8.dbEncoderFactory(dBEncoderFactory17);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder21.build();
        int int24 = mongoClientOptions23.getServerSelectionTimeout();
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions23);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder28.build();
        int int30 = mongoClientOptions29.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern31 = mongoClientOptions29.getReadConcern();
        int int32 = mongoClientOptions29.getMinConnectionsPerHost();
        int int33 = mongoClientOptions29.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions29);
        com.mongodb.DBEncoderFactory dBEncoderFactory35 = mongoClientOptions29.getDbEncoderFactory();
        int int36 = mongoClientOptions29.getMinHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory37 = mongoClientOptions29.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder38 = builder25.dbDecoderFactory(dBDecoderFactory37);
        com.mongodb.MongoClientOptions.Builder builder39 = builder18.dbDecoderFactory(dBDecoderFactory37);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 30000 + "'", int24 == 30000);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10000 + "'", int30 == 10000);
        org.junit.Assert.assertNotNull(readConcern31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 120000 + "'", int33 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 500 + "'", int36 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test3462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3462");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        int int6 = mongoClientOptions3.getMinConnectionsPerHost();
        int int7 = mongoClientOptions3.getMaxWaitTime();
        int int8 = mongoClientOptions3.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatFrequency((int) ' ');
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder9.build();
        int int13 = mongoClientOptions12.getSocketTimeout();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions12.getReadPreference();
        int int15 = mongoClientOptions12.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120000 + "'", int7 == 120000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10000 + "'", int8 == 10000);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
    }

    @Test
    public void test3463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3463");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        boolean boolean18 = mongoClientOptions17.isSslEnabled();
        int int19 = mongoClientOptions17.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions17.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder21 = builder13.dbEncoderFactory(dBEncoderFactory20);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern27 = mongoClientOptions25.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder28 = builder13.readConcern(readConcern27);
        com.mongodb.MongoClientOptions.Builder builder29 = builder2.readConcern(readConcern27);
        com.mongodb.MongoClientOptions.Builder builder31 = builder2.maxConnectionIdleTime(1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        int int40 = mongoClientOptions39.getSocketTimeout();
        int int41 = mongoClientOptions39.getThreadsAllowedToBlockForConnectionMultiplier();
        org.bson.codecs.configuration.CodecRegistry codecRegistry42 = mongoClientOptions39.getCodecRegistry();
        int int43 = mongoClientOptions39.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder44 = com.mongodb.MongoClientOptions.builder(mongoClientOptions39);
        int int45 = mongoClientOptions39.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder46 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder48.build();
        int int50 = mongoClientOptions49.getMaxConnectionLifeTime();
        boolean boolean51 = mongoClientOptions49.isSslInvalidHostNameAllowed();
        com.mongodb.ReadConcern readConcern52 = mongoClientOptions49.getReadConcern();
        int int53 = mongoClientOptions49.getMaxConnectionIdleTime();
        boolean boolean54 = mongoClientOptions39.equals((java.lang.Object) int53);
        int int55 = mongoClientOptions39.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern56 = mongoClientOptions39.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder57 = builder35.writeConcern(writeConcern56);
        com.mongodb.MongoClientOptions.Builder builder58 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions61 = builder60.build();
        int int62 = mongoClientOptions61.getSocketTimeout();
        int int63 = mongoClientOptions61.getThreadsAllowedToBlockForConnectionMultiplier();
        int int64 = mongoClientOptions61.getMaxWaitTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry65 = mongoClientOptions61.getCodecRegistry();
        int int66 = mongoClientOptions61.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder67 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions61);
        boolean boolean68 = mongoClientOptions61.isAlwaysUseMBeans();
        com.mongodb.WriteConcern writeConcern69 = mongoClientOptions61.getWriteConcern();
        int int70 = mongoClientOptions61.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder71 = com.mongodb.MongoClientOptions.builder(mongoClientOptions61);
        com.mongodb.ReadConcern readConcern72 = mongoClientOptions61.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder73 = builder35.readConcern(readConcern72);
        com.mongodb.MongoClientOptions.Builder builder75 = builder35.maxWaitTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder76 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder78 = builder76.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions79 = builder78.build();
        boolean boolean80 = mongoClientOptions79.isSslEnabled();
        int int81 = mongoClientOptions79.getMaxConnectionIdleTime();
        int int82 = mongoClientOptions79.getHeartbeatSocketTimeout();
        int int83 = mongoClientOptions79.getMaxConnectionIdleTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory84 = mongoClientOptions79.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder85 = builder75.dbEncoderFactory(dBEncoderFactory84);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertNotNull(readConcern27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(codecRegistry42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 500 + "'", int45 == 500);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(readConcern52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(writeConcern56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(mongoClientOptions61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 120000 + "'", int64 == 120000);
        org.junit.Assert.assertNotNull(codecRegistry65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(writeConcern69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(readConcern72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(mongoClientOptions79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 100 + "'", int82 == 100);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory84);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test3464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3464");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.serverSelectionTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder0.build();
        int int8 = mongoClientOptions7.getLocalThreshold();
        int int9 = mongoClientOptions7.getSocketTimeout();
        boolean boolean10 = mongoClientOptions7.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test3465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3465");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.clearPassword();
        java.lang.String str10 = mongoProperties0.getDatabase();
        java.lang.String str11 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setHost("test");
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test3466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3466");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.build();
        boolean boolean11 = mongoClientOptions10.isSslEnabled();
        int int12 = mongoClientOptions10.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions10.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.dbEncoderFactory(dBEncoderFactory13);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern20 = mongoClientOptions18.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder21 = builder6.readConcern(readConcern20);
        com.mongodb.MongoClientOptions.Builder builder23 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder28.build();
        int int30 = mongoClientOptions29.getSocketTimeout();
        boolean boolean31 = mongoClientOptions29.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory32 = mongoClientOptions29.getSocketFactory();
        org.bson.codecs.configuration.CodecRegistry codecRegistry33 = mongoClientOptions29.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder34 = builder23.codecRegistry(codecRegistry33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder23.heartbeatConnectTimeout(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertNotNull(readConcern20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(socketFactory32);
        org.junit.Assert.assertNotNull(codecRegistry33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test3467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3467");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxConnectionLifeTime(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.heartbeatSocketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder7.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getSocketTimeout();
        int int21 = mongoClientOptions19.getThreadsAllowedToBlockForConnectionMultiplier();
        org.bson.codecs.configuration.CodecRegistry codecRegistry22 = mongoClientOptions19.getCodecRegistry();
        int int23 = mongoClientOptions19.getSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry24 = mongoClientOptions19.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder25 = builder13.codecRegistry(codecRegistry24);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxConnectionIdleTime(10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 500 + "'", int6 == 500);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(codecRegistry22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(codecRegistry24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test3468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3468");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getSocketTimeout();
        boolean boolean7 = mongoClientOptions3.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        boolean boolean9 = mongoClientOptions3.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test3469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3469");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionLifeTime(500);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getSocketTimeout();
        java.lang.String str18 = mongoClientOptions16.getDescription();
        int int19 = mongoClientOptions16.getThreadsAllowedToBlockForConnectionMultiplier();
        int int20 = mongoClientOptions16.getServerSelectionTimeout();
        int int21 = mongoClientOptions16.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern22 = mongoClientOptions16.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder23 = builder12.readConcern(readConcern22);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionIdleTime((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 30000 + "'", int20 == 30000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertNotNull(readConcern22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test3470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3470");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        int int5 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getSocketTimeout();
        boolean boolean14 = mongoClientOptions12.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions12.getSocketFactory();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions12.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder17 = builder6.codecRegistry(codecRegistry16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern27 = mongoClientOptions25.getReadConcern();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions25.getReadPreference();
        boolean boolean29 = mongoClientOptions25.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions25);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.connectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder35 = builder34.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder38.build();
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.description("");
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.minHeartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder45 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder51 = builder47.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder53 = builder47.serverSelectionTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder56 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions59 = builder58.build();
        int int60 = mongoClientOptions59.getConnectionsPerHost();
        int int61 = mongoClientOptions59.getHeartbeatSocketTimeout();
        java.lang.String str62 = mongoClientOptions59.getRequiredReplicaSetName();
        boolean boolean63 = mongoClientOptions59.isAlwaysUseMBeans();
        com.mongodb.DBEncoderFactory dBEncoderFactory64 = mongoClientOptions59.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder65 = builder53.dbEncoderFactory(dBEncoderFactory64);
        com.mongodb.MongoClientOptions.Builder builder66 = builder42.dbEncoderFactory(dBEncoderFactory64);
        com.mongodb.MongoClientOptions.Builder builder67 = builder34.dbEncoderFactory(dBEncoderFactory64);
        com.mongodb.MongoClientOptions.Builder builder68 = builder21.dbEncoderFactory(dBEncoderFactory64);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertNotNull(readConcern27);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(mongoClientOptions59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test3471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3471");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        int int15 = mongoClientOptions14.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern16 = mongoClientOptions14.getReadConcern();
        boolean boolean17 = mongoClientOptions14.isCursorFinalizerEnabled();
        int int18 = mongoClientOptions14.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions14.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.dbDecoderFactory(dBDecoderFactory19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxWaitTime((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertNotNull(readConcern16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test3472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3472");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        java.lang.String str6 = mongoClientOptions3.getRequiredReplicaSetName();
        boolean boolean7 = mongoClientOptions3.isAlwaysUseMBeans();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions3.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder9.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern18 = mongoClientOptions16.getReadConcern();
        int int19 = mongoClientOptions16.getMinConnectionsPerHost();
        int int20 = mongoClientOptions16.getMaxWaitTime();
        int int21 = mongoClientOptions16.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions16);
        java.util.List<com.mongodb.event.CommandListener> commandListenerList23 = mongoClientOptions16.getCommandListeners();
        org.bson.codecs.configuration.CodecRegistry codecRegistry24 = mongoClientOptions16.getCodecRegistry();
        javax.net.SocketFactory socketFactory25 = mongoClientOptions16.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder9.socketFactory(socketFactory25);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertNotNull(readConcern18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 120000 + "'", int20 == 120000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertNotNull(commandListenerList23);
        org.junit.Assert.assertNotNull(codecRegistry24);
        org.junit.Assert.assertNotNull(socketFactory25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test3473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3473");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getMaxConnectionIdleTime();
        int int6 = mongoClientOptions3.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.minConnectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.localThreshold(10000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatFrequency();
        int int22 = mongoClientOptions20.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern23 = mongoClientOptions20.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions20);
        int int25 = mongoClientOptions20.getLocalThreshold();
        int int26 = mongoClientOptions20.getHeartbeatFrequency();
        javax.net.SocketFactory socketFactory27 = mongoClientOptions20.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder16.socketFactory(socketFactory27);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertNotNull(writeConcern23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 15 + "'", int25 == 15);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertNotNull(socketFactory27);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test3474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3474");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory5 = mongoClientOptions3.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern6 = mongoClientOptions3.getWriteConcern();
        int int7 = mongoClientOptions3.getHeartbeatFrequency();
        org.bson.codecs.configuration.CodecRegistry codecRegistry8 = mongoClientOptions3.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory5);
        org.junit.Assert.assertNotNull(writeConcern6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10000 + "'", int7 == 10000);
        org.junit.Assert.assertNotNull(codecRegistry8);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test3475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3475");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setUsername("");
        mongoProperties0.setHost("hi!");
        char[] charArray5 = mongoProperties0.getPassword();
        mongoProperties0.setHost("");
        java.lang.String str8 = mongoProperties0.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory14 = mongoClientOptions12.getDbDecoderFactory();
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties0.createMongoClient(mongoClientOptions12, environment15);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getConnectionsPerHost();
        int int22 = mongoClientOptions20.getHeartbeatSocketTimeout();
        java.lang.String str23 = mongoClientOptions20.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern24 = mongoClientOptions20.getWriteConcern();
        java.lang.String str25 = mongoClientOptions20.getRequiredReplicaSetName();
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties0.createMongoClient(mongoClientOptions20, environment26);
        java.lang.Class<?> wildcardClass28 = mongoClientOptions20.getClass();
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "test" + "'", str8, "test");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(writeConcern24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test3476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3476");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        boolean boolean18 = mongoClientOptions17.isSslEnabled();
        int int19 = mongoClientOptions17.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions17.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder21 = builder13.dbEncoderFactory(dBEncoderFactory20);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern27 = mongoClientOptions25.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder28 = builder13.readConcern(readConcern27);
        com.mongodb.MongoClientOptions.Builder builder29 = builder2.readConcern(readConcern27);
        com.mongodb.MongoClientOptions.Builder builder31 = builder2.maxConnectionIdleTime(1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.threadsAllowedToBlockForConnectionMultiplier((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder40.build();
        boolean boolean42 = mongoClientOptions41.isSslEnabled();
        int int43 = mongoClientOptions41.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory44 = mongoClientOptions41.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder45 = builder35.dbEncoderFactory(dBEncoderFactory44);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertNotNull(readConcern27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory44);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test3477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3477");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getMinHeartbeatFrequency();
        int int7 = mongoClientOptions3.getMaxConnectionLifeTime();
        int int8 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int9 = mongoClientOptions3.getMinConnectionsPerHost();
        boolean boolean10 = mongoClientOptions3.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        java.util.List<com.mongodb.event.CommandListener> commandListenerList13 = mongoClientOptions3.getCommandListeners();
        int int14 = mongoClientOptions3.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 500 + "'", int6 == 500);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(commandListenerList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
    }

    @Test
    public void test3478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3478");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        boolean boolean5 = mongoClientOptions3.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder7 = com.mongodb.MongoClientOptions.builder(mongoClientOptions3);
        int int8 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
    }

    @Test
    public void test3479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3479");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        boolean boolean5 = mongoClientOptions3.isSocketKeepAlive();
        int int6 = mongoClientOptions3.getHeartbeatConnectTimeout();
        boolean boolean7 = mongoClientOptions3.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder8 = com.mongodb.MongoClientOptions.builder(mongoClientOptions3);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder10 = builder8.minHeartbeatFrequency((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: minHeartbeatFrequency must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 20000 + "'", int6 == 20000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test3480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3480");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getMaxConnectionIdleTime();
        java.lang.String str6 = mongoClientOptions3.getDescription();
        int int7 = mongoClientOptions3.getMinConnectionsPerHost();
        int int8 = mongoClientOptions3.getMinHeartbeatFrequency();
        boolean boolean9 = mongoClientOptions3.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions3.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 500 + "'", int8 == 500);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(writeConcern11);
    }

    @Test
    public void test3481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3481");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        java.util.List<com.mongodb.event.CommandListener> commandListenerList6 = mongoClientOptions3.getCommandListeners();
        int int7 = mongoClientOptions3.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory13 = mongoClientOptions11.getDbDecoderFactory();
        int int14 = mongoClientOptions11.getLocalThreshold();
        int int15 = mongoClientOptions11.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder16 = com.mongodb.MongoClientOptions.builder(mongoClientOptions11);
        com.mongodb.ReadConcern readConcern17 = mongoClientOptions11.getReadConcern();
        boolean boolean18 = mongoClientOptions3.equals((java.lang.Object) readConcern17);
        int int19 = mongoClientOptions3.getHeartbeatConnectTimeout();
        int int20 = mongoClientOptions3.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertNotNull(commandListenerList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(readConcern17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test3482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3482");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.clearPassword();
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.setPort((java.lang.Integer) (-1));
        java.lang.Class<?> wildcardClass14 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.setUsername("");
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        int int23 = mongoClientOptions22.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        int int28 = mongoClientOptions27.getSocketTimeout();
        boolean boolean29 = mongoClientOptions27.isAlwaysUseMBeans();
        int int30 = mongoClientOptions27.getThreadsAllowedToBlockForConnectionMultiplier();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList31 = mongoClientOptions27.getCommandListeners();
        boolean boolean32 = mongoClientOptions22.equals((java.lang.Object) mongoClientOptions27);
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions22.getDbDecoderFactory();
        int int34 = mongoClientOptions22.getHeartbeatConnectTimeout();
        boolean boolean35 = mongoClientOptions22.isAlwaysUseMBeans();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList36 = mongoClientOptions22.getCommandListeners();
        int int37 = mongoClientOptions22.getMaxWaitTime();
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties0.createMongoClient(mongoClientOptions22, environment38);
        mongoProperties0.setAuthenticationDatabase("hi!");
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertNotNull(commandListenerList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20000 + "'", int34 == 20000);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(commandListenerList36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 120000 + "'", int37 == 120000);
        org.junit.Assert.assertNotNull(mongoClient39);
    }

    @Test
    public void test3483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3483");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        boolean boolean4 = mongoClientOptions3.isSslEnabled();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        int int6 = mongoClientOptions3.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.event.CommandListener commandListener9 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder10 = builder8.addCommandListener(commandListener9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 500 + "'", int6 == 500);
    }

    @Test
    public void test3484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3484");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        mongoProperties0.setAuthenticationDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getSocketTimeout();
        boolean boolean13 = mongoClientOptions11.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties0.createMongoClient(mongoClientOptions11, environment14);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getConnectionsPerHost();
        int int21 = mongoClientOptions19.getConnectTimeout();
        org.springframework.core.env.Environment environment22 = null;
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions19, environment22);
        int int24 = mongoClientOptions19.getHeartbeatFrequency();
        java.lang.String str25 = mongoClientOptions19.getRequiredReplicaSetName();
        boolean boolean26 = mongoClientOptions19.isAlwaysUseMBeans();
        com.mongodb.WriteConcern writeConcern27 = mongoClientOptions19.getWriteConcern();
        javax.net.SocketFactory socketFactory28 = mongoClientOptions19.getSocketFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList29 = mongoClientOptions19.getCommandListeners();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10000 + "'", int24 == 10000);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(writeConcern27);
        org.junit.Assert.assertNotNull(socketFactory28);
        org.junit.Assert.assertNotNull(commandListenerList29);
    }

    @Test
    public void test3485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3485");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        int int10 = mongoClientOptions9.getMaxConnectionLifeTime();
        int int11 = mongoClientOptions9.getConnectionsPerHost();
        java.lang.String str12 = mongoClientOptions9.getDescription();
        org.springframework.core.env.Environment environment13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties0.createMongoClient(mongoClientOptions9, environment13);
        int int15 = mongoClientOptions9.getLocalThreshold();
        boolean boolean16 = mongoClientOptions9.isAlwaysUseMBeans();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 15 + "'", int15 == 15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test3486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3486");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getSocketTimeout();
        boolean boolean10 = mongoClientOptions8.isAlwaysUseMBeans();
        int int11 = mongoClientOptions8.getThreadsAllowedToBlockForConnectionMultiplier();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList12 = mongoClientOptions8.getCommandListeners();
        boolean boolean13 = mongoClientOptions3.equals((java.lang.Object) mongoClientOptions8);
        int int14 = mongoClientOptions8.getMaxConnectionLifeTime();
        java.lang.String str15 = mongoClientOptions8.getRequiredReplicaSetName();
        int int16 = mongoClientOptions8.getSocketTimeout();
        boolean boolean17 = mongoClientOptions8.isAlwaysUseMBeans();
        int int18 = mongoClientOptions8.getMinHeartbeatFrequency();
        int int19 = mongoClientOptions8.getLocalThreshold();
        javax.net.SocketFactory socketFactory20 = mongoClientOptions8.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(commandListenerList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 500 + "'", int18 == 500);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 15 + "'", int19 == 15);
        org.junit.Assert.assertNotNull(socketFactory20);
    }

    @Test
    public void test3487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3487");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getConnectionsPerHost();
        int int5 = mongoClientOptions3.getHeartbeatSocketTimeout();
        java.lang.String str6 = mongoClientOptions3.getRequiredReplicaSetName();
        boolean boolean7 = mongoClientOptions3.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        boolean boolean10 = mongoClientOptions9.isAlwaysUseMBeans();
        boolean boolean11 = mongoClientOptions9.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test3488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3488");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        int int5 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder8.build();
        int int16 = mongoClientOptions15.getConnectTimeout();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions15.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions15);
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions15.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertNotNull(readPreference19);
    }

    @Test
    public void test3489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3489");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        boolean boolean18 = mongoClientOptions17.isSslEnabled();
        int int19 = mongoClientOptions17.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions17.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder21 = builder13.dbEncoderFactory(dBEncoderFactory20);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern27 = mongoClientOptions25.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder28 = builder13.readConcern(readConcern27);
        com.mongodb.MongoClientOptions.Builder builder29 = builder2.readConcern(readConcern27);
        com.mongodb.MongoClientOptions.Builder builder31 = builder2.maxConnectionIdleTime(1);
        com.mongodb.event.CommandListener commandListener32 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder33 = builder2.addCommandListener(commandListener32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertNotNull(readConcern27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test3490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3490");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str4 = mongoProperties0.getUsername();
        mongoProperties0.setPort((java.lang.Integer) 0);
        mongoProperties0.setAuthenticationDatabase("test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test3491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3491");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str7 = mongoProperties0.getHost();
        mongoProperties0.setUsername("");
        mongoProperties0.setGridFsDatabase("");
        java.lang.Class<?> wildcardClass12 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray13 = mongoProperties0.getPassword();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(charArray13);
    }

    @Test
    public void test3492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3492");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setUsername("");
        mongoProperties0.setHost("hi!");
        char[] charArray5 = mongoProperties0.getPassword();
        mongoProperties0.setHost("");
        java.lang.String str8 = mongoProperties0.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        int int13 = mongoClientOptions12.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory14 = mongoClientOptions12.getDbDecoderFactory();
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties0.createMongoClient(mongoClientOptions12, environment15);
        mongoProperties0.clearPassword();
        java.lang.Integer int18 = mongoProperties0.getPort();
        java.lang.Integer int19 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "test" + "'", str8, "test");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNull(int19);
    }

    @Test
    public void test3493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3493");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.serverSelectionTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder12.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test3494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3494");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        org.springframework.core.env.Environment environment4 = null;
        com.mongodb.MongoClient mongoClient5 = mongoProperties0.createMongoClient(mongoClientOptions3, environment4);
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setDatabase("mongodb://localhost/test");
        mongoProperties0.setDatabase("mongodb://localhost/test");
        char[] charArray11 = mongoProperties0.getPassword();
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNotNull(mongoClient5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(charArray11);
    }

    @Test
    public void test3495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3495");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        boolean boolean13 = mongoClientOptions12.isSslEnabled();
        int int14 = mongoClientOptions12.getHeartbeatSocketTimeout();
        int int15 = mongoClientOptions12.getServerSelectionTimeout();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions12);
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions12.getReadPreference();
        boolean boolean18 = mongoClientOptions12.isAlwaysUseMBeans();
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions12.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = builder6.dbDecoderFactory(dBDecoderFactory19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder6.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder6.minConnectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.serverSelectionTimeout(32);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 30000 + "'", int15 == 30000);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test3496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3496");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        com.mongodb.ReadPreference readPreference6 = mongoClientOptions3.getReadPreference();
        boolean boolean7 = mongoClientOptions3.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.connectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.minConnectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        com.mongodb.MongoClientOptions.Builder builder28 = builder23.connectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder30 = builder23.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatSocketTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatFrequency(10);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        javax.net.SocketFactory socketFactory36 = mongoClientOptions35.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder37 = builder20.socketFactory(socketFactory36);
        com.mongodb.MongoClientOptions.Builder builder39 = builder20.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertNotNull(readPreference6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertNotNull(socketFactory36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test3497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3497");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.connectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.threadsAllowedToBlockForConnectionMultiplier(30000);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setDatabase("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.springframework.core.env.Environment environment13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties9.createMongoClient(mongoClientOptions12, environment13);
        mongoProperties9.setAuthenticationDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getSocketTimeout();
        boolean boolean22 = mongoClientOptions20.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties9.createMongoClient(mongoClientOptions20, environment23);
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        int int29 = mongoClientOptions28.getConnectionsPerHost();
        int int30 = mongoClientOptions28.getConnectTimeout();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties9.createMongoClient(mongoClientOptions28, environment31);
        int int33 = mongoClientOptions28.getHeartbeatFrequency();
        java.lang.String str34 = mongoClientOptions28.getRequiredReplicaSetName();
        boolean boolean35 = mongoClientOptions28.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions28);
        com.mongodb.DBEncoderFactory dBEncoderFactory37 = mongoClientOptions28.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder38 = builder8.dbEncoderFactory(dBEncoderFactory37);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.description("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10000 + "'", int30 == 10000);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10000 + "'", int33 == 10000);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test3498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3498");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setDatabase("hi!");
        char[] charArray7 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        int int12 = mongoClientOptions11.getSocketTimeout();
        boolean boolean13 = mongoClientOptions11.isAlwaysUseMBeans();
        int int14 = mongoClientOptions11.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions11);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        int int22 = mongoClientOptions21.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions21.getReadConcern();
        int int24 = mongoClientOptions21.getMinConnectionsPerHost();
        boolean boolean25 = mongoClientOptions21.isSslInvalidHostNameAllowed();
        com.mongodb.DBEncoderFactory dBEncoderFactory26 = mongoClientOptions21.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder27 = builder15.dbEncoderFactory(dBEncoderFactory26);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions28, environment29);
        com.mongodb.MongoClientOptions.Builder builder31 = com.mongodb.MongoClientOptions.builder(mongoClientOptions28);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
        org.junit.Assert.assertNotNull(readConcern23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test3499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3499");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern5 = mongoClientOptions3.getReadConcern();
        boolean boolean6 = mongoClientOptions3.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions3.getDbEncoderFactory();
        int int8 = mongoClientOptions3.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        int int10 = mongoClientOptions3.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions3.getReadPreference();
        org.bson.codecs.configuration.CodecRegistry codecRegistry12 = mongoClientOptions3.getCodecRegistry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertNotNull(readConcern5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10000 + "'", int8 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(codecRegistry12);
    }

    @Test
    public void test3500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3500");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder2.build();
        int int4 = mongoClientOptions3.getHeartbeatFrequency();
        int int5 = mongoClientOptions3.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions3);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder8.build();
        int int16 = mongoClientOptions15.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions15);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions15);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.minConnectionsPerHost((int) (short) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10000 + "'", int4 == 10000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(builder20);
    }
}

