import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest9 {

    public static boolean debug = false;

    @Test
    public void test4501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4501");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        int int15 = mongoClientOptions13.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions13.getDbEncoderFactory();
        java.lang.String str17 = mongoClientOptions13.getDescription();
        java.lang.String str18 = mongoClientOptions13.getRequiredReplicaSetName();
        int int19 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 120000 + "'", int15 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
    }

    @Test
    public void test4502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4502");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setHost("");
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setHost("hi!");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test4503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4503");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        boolean boolean31 = mongoClientOptions30.isSocketKeepAlive();
        int int32 = mongoClientOptions30.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions30);
        boolean boolean34 = mongoClientOptions30.isSslInvalidHostNameAllowed();
        int int35 = mongoClientOptions30.getServerSelectionTimeout();
        int int36 = mongoClientOptions30.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory37 = mongoClientOptions30.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder38 = builder18.dbDecoderFactory(dBDecoderFactory37);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatConnectTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatSocketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.minHeartbeatFrequency(32);
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder62 = builder58.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder63 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder69 = builder65.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions76 = builder75.build();
        com.mongodb.MongoClientOptions.Builder builder77 = com.mongodb.MongoClientOptions.builder(mongoClientOptions76);
        java.lang.String str78 = mongoClientOptions76.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry79 = mongoClientOptions76.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder80 = builder58.codecRegistry(codecRegistry79);
        com.mongodb.MongoClientOptions.Builder builder82 = builder58.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder84 = builder82.description("test");
        com.mongodb.MongoClientOptions.Builder builder86 = builder84.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder87 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder89 = builder87.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder91 = builder89.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder93 = builder91.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions94 = builder93.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory95 = mongoClientOptions94.getDbEncoderFactory();
        com.mongodb.ReadConcern readConcern96 = mongoClientOptions94.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder97 = builder84.readConcern(readConcern96);
        com.mongodb.MongoClientOptions.Builder builder98 = builder49.readConcern(readConcern96);
        com.mongodb.MongoClientOptions.Builder builder99 = builder40.readConcern(readConcern96);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10000 + "'", int32 == 10000);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 30000 + "'", int35 == 30000);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 120000 + "'", int36 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(mongoClientOptions76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(mongoClientOptions94);
        org.junit.Assert.assertNotNull(dBEncoderFactory95);
        org.junit.Assert.assertNotNull(readConcern96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test4504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4504");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        java.lang.String str15 = mongoClientOptions13.getRequiredReplicaSetName();
        java.lang.String str16 = mongoClientOptions13.getRequiredReplicaSetName();
        int int17 = mongoClientOptions13.getHeartbeatFrequency();
        int int18 = mongoClientOptions13.getLocalThreshold();
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions13.getDbDecoderFactory();
        int int20 = mongoClientOptions13.getLocalThreshold();
        java.lang.String str21 = mongoClientOptions13.getRequiredReplicaSetName();
        boolean boolean22 = mongoClientOptions13.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 15 + "'", int20 == 15);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test4505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4505");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getUri();
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setHost("test");
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb://localhost/test" + "'", str1, "mongodb://localhost/test");
    }

    @Test
    public void test4506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4506");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions13.getReadPreference();
        int int18 = mongoClientOptions13.getMinConnectionsPerHost();
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions13.getReadPreference();
        int int20 = mongoClientOptions13.getHeartbeatFrequency();
        boolean boolean21 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(readPreference19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test4507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4507");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        mongoProperties0.clearPassword();
        java.lang.String str4 = mongoProperties0.getDatabase();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.clearPassword();
        java.lang.String str7 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test4508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4508");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray4 = mongoProperties0.getPassword();
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setDatabase("mongodb://localhost/test");
        mongoProperties0.setHost("");
        java.lang.Integer int10 = mongoProperties0.getPort();
        mongoProperties0.setHost("hi!");
        java.lang.Integer int13 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(charArray4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(int13);
    }

    @Test
    public void test4509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4509");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getDatabase();
        java.lang.String str3 = mongoProperties0.getUri();
        mongoProperties0.clearPassword();
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.clearPassword();
        mongoProperties0.setUsername("hi!");
        mongoProperties0.setGridFsDatabase("hi!");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test4510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4510");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        java.lang.String str16 = mongoClientOptions13.getDescription();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        java.lang.String str18 = mongoClientOptions13.getRequiredReplicaSetName();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        int int20 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int21 = mongoClientOptions13.getMaxWaitTime();
        int int22 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int23 = mongoClientOptions13.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 120000 + "'", int21 == 120000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test4511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4511");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int10 = mongoClientOptions7.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry11 = mongoClientOptions7.getCodecRegistry();
        java.lang.String str12 = mongoClientOptions7.getRequiredReplicaSetName();
        javax.net.SocketFactory socketFactory13 = mongoClientOptions7.getSocketFactory();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions7.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder(mongoClientOptions7);
        int int16 = mongoClientOptions7.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(codecRegistry11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(socketFactory13);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test4512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4512");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getDescription();
        int int16 = mongoClientOptions13.getMinConnectionsPerHost();
        int int17 = mongoClientOptions13.getHeartbeatFrequency();
        int int18 = mongoClientOptions13.getHeartbeatFrequency();
        int int19 = mongoClientOptions13.getServerSelectionTimeout();
        int int20 = mongoClientOptions13.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
    }

    @Test
    public void test4513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4513");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions20.getDbEncoderFactory();
        com.mongodb.ReadConcern readConcern22 = mongoClientOptions20.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder23 = builder10.readConcern(readConcern22);
        com.mongodb.MongoClientOptions.Builder builder25 = builder10.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxConnectionIdleTime(32);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxConnectionLifeTime(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
        org.junit.Assert.assertNotNull(readConcern22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test4514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4514");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        char[] charArray4 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass5 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setHost("test");
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(charArray4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(wildcardClass7);
    }

    @Test
    public void test4515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4515");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getRequiredReplicaSetName();
        int int16 = mongoClientOptions13.getConnectTimeout();
        boolean boolean17 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions13.getDbEncoderFactory();
        int int19 = mongoClientOptions13.getMaxConnectionIdleTime();
        int int20 = mongoClientOptions13.getHeartbeatSocketTimeout();
        int int21 = mongoClientOptions13.getSocketTimeout();
        boolean boolean22 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test4516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4516");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions13.getSocketFactory();
        boolean boolean18 = mongoClientOptions13.isAlwaysUseMBeans();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions13.getDbEncoderFactory();
        boolean boolean21 = mongoClientOptions13.isCursorFinalizerEnabled();
        boolean boolean22 = mongoClientOptions13.isAlwaysUseMBeans();
        int int23 = mongoClientOptions13.getLocalThreshold();
        java.lang.String str24 = mongoClientOptions13.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 15 + "'", int23 == 15);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test4517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4517");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.minConnectionsPerHost((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.serverSelectionTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder40.build();
        int int42 = mongoClientOptions41.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory43 = mongoClientOptions41.getSocketFactory();
        boolean boolean44 = mongoClientOptions41.isSslInvalidHostNameAllowed();
        java.lang.String str45 = mongoClientOptions41.getDescription();
        java.lang.String str46 = mongoClientOptions41.getRequiredReplicaSetName();
        java.lang.String str47 = mongoClientOptions41.getRequiredReplicaSetName();
        org.bson.codecs.configuration.CodecRegistry codecRegistry48 = mongoClientOptions41.getCodecRegistry();
        com.mongodb.ReadConcern readConcern49 = mongoClientOptions41.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder50 = builder27.readConcern(readConcern49);
        com.mongodb.MongoClientOptions.Builder builder51 = builder18.readConcern(readConcern49);
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions59 = builder58.build();
        boolean boolean60 = mongoClientOptions59.isSocketKeepAlive();
        int int61 = mongoClientOptions59.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder62 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions59);
        boolean boolean63 = mongoClientOptions59.isSslInvalidHostNameAllowed();
        boolean boolean64 = mongoClientOptions59.isSocketKeepAlive();
        int int65 = mongoClientOptions59.getServerSelectionTimeout();
        int int66 = mongoClientOptions59.getLocalThreshold();
        org.bson.codecs.configuration.CodecRegistry codecRegistry67 = mongoClientOptions59.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder68 = builder18.codecRegistry(codecRegistry67);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(socketFactory43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(codecRegistry48);
        org.junit.Assert.assertNotNull(readConcern49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(mongoClientOptions59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10000 + "'", int61 == 10000);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 30000 + "'", int65 == 30000);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 15 + "'", int66 == 15);
        org.junit.Assert.assertNotNull(codecRegistry67);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test4518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4518");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setGridFsDatabase("hi!");
        char[] charArray9 = new char[] { '#' };
        mongoProperties0.setPassword(charArray9);
        java.lang.String str11 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str12 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setPort((java.lang.Integer) 30000);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "test" + "'", str11, "test");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test4519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4519");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatFrequency(27017);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        java.lang.String str12 = mongoClientOptions11.getRequiredReplicaSetName();
        int int13 = mongoClientOptions11.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 120000 + "'", int13 == 120000);
    }

    @Test
    public void test4520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4520");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray4 = mongoProperties0.getPassword();
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        java.lang.Integer int6 = mongoProperties0.getPort();
        char[] charArray7 = mongoProperties0.getPassword();
        mongoProperties0.setPort((java.lang.Integer) 32);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(charArray4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(charArray7);
    }

    @Test
    public void test4521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4521");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.heartbeatSocketTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        boolean boolean21 = mongoClientOptions20.isSocketKeepAlive();
        int int22 = mongoClientOptions20.getThreadsAllowedToBlockForConnectionMultiplier();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList23 = mongoClientOptions20.getCommandListeners();
        int int24 = mongoClientOptions20.getServerSelectionTimeout();
        int int25 = mongoClientOptions20.getMinHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern26 = mongoClientOptions20.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder27 = builder2.writeConcern(writeConcern26);
        com.mongodb.MongoClientOptions.Builder builder29 = builder2.description("test");
        com.mongodb.event.CommandListener commandListener30 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder31 = builder2.addCommandListener(commandListener30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertNotNull(commandListenerList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 30000 + "'", int24 == 30000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 500 + "'", int25 == 500);
        org.junit.Assert.assertNotNull(writeConcern26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test4522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4522");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setDatabase("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties8.setHost("");
        java.lang.Integer int11 = mongoProperties8.getPort();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.springframework.core.env.Environment environment13 = null;
        com.mongodb.MongoClient mongoClient14 = mongoProperties8.createMongoClient(mongoClientOptions12, environment13);
        mongoProperties8.setDatabase("hi!");
        mongoProperties8.setUri("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties19.setHost("");
        java.lang.String str22 = mongoProperties19.getGridFsDatabase();
        mongoProperties19.setUsername("hi!");
        java.lang.String str25 = mongoProperties19.getMongoClientDatabase();
        java.lang.String str26 = mongoProperties19.getMongoClientDatabase();
        char[] charArray33 = new char[] { ' ', '4', '4', 'a', '#', 'a' };
        mongoProperties19.setPassword(charArray33);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties35.setHost("");
        java.lang.String str38 = mongoProperties35.getGridFsDatabase();
        mongoProperties35.setUsername("hi!");
        java.lang.String str41 = mongoProperties35.getMongoClientDatabase();
        java.lang.String str42 = mongoProperties35.getMongoClientDatabase();
        char[] charArray49 = new char[] { ' ', '4', '4', 'a', '#', 'a' };
        mongoProperties35.setPassword(charArray49);
        mongoProperties19.setPassword(charArray49);
        mongoProperties8.setPassword(charArray49);
        mongoProperties0.setPassword(charArray49);
        java.lang.String str54 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(mongoClient14);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "test" + "'", str25, "test");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "test" + "'", str26, "test");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), " 44a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), " 44a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[ , 4, 4, a, #, a]");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "test" + "'", str41, "test");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "test" + "'", str42, "test");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), " 44a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), " 44a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[ , 4, 4, a, #, a]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
    }

    @Test
    public void test4523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4523");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        int int29 = mongoClientOptions28.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory30 = mongoClientOptions28.getSocketFactory();
        com.mongodb.WriteConcern writeConcern31 = mongoClientOptions28.getWriteConcern();
        boolean boolean32 = mongoClientOptions28.isAlwaysUseMBeans();
        boolean boolean33 = mongoClientOptions13.equals((java.lang.Object) mongoClientOptions28);
        java.util.List<com.mongodb.event.CommandListener> commandListenerList34 = mongoClientOptions28.getCommandListeners();
        java.lang.String str35 = mongoClientOptions28.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(socketFactory30);
        org.junit.Assert.assertNotNull(writeConcern31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(commandListenerList34);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test4524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4524");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions13.getCommandListeners();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions13.getReadPreference();
        javax.net.SocketFactory socketFactory18 = mongoClientOptions13.getSocketFactory();
        javax.net.SocketFactory socketFactory19 = mongoClientOptions13.getSocketFactory();
        boolean boolean20 = mongoClientOptions13.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertNotNull(socketFactory18);
        org.junit.Assert.assertNotNull(socketFactory19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test4525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4525");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setHost("");
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        com.mongodb.MongoClientOptions.Builder builder27 = com.mongodb.MongoClientOptions.builder(mongoClientOptions26);
        java.lang.String str28 = mongoClientOptions26.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry29 = mongoClientOptions26.getCodecRegistry();
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions26.getReadPreference();
        boolean boolean31 = mongoClientOptions26.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment32 = null;
        com.mongodb.MongoClient mongoClient33 = mongoProperties0.createMongoClient(mongoClientOptions26, environment32);
        java.lang.String str34 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        char[] charArray37 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions51 = builder50.build();
        boolean boolean52 = mongoClientOptions51.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory53 = mongoClientOptions51.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList54 = mongoClientOptions51.getCommandListeners();
        com.mongodb.ReadPreference readPreference55 = mongoClientOptions51.getReadPreference();
        int int56 = mongoClientOptions51.getLocalThreshold();
        boolean boolean57 = mongoClientOptions51.isSslInvalidHostNameAllowed();
        org.springframework.core.env.Environment environment58 = null;
        com.mongodb.MongoClient mongoClient59 = mongoProperties0.createMongoClient(mongoClientOptions51, environment58);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "test" + "'", str10, "test");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry29);
        org.junit.Assert.assertNotNull(readPreference30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(mongoClient33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "test" + "'", str34, "test");
        org.junit.Assert.assertNull(charArray37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoClientOptions51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory53);
        org.junit.Assert.assertNotNull(commandListenerList54);
        org.junit.Assert.assertNotNull(readPreference55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 15 + "'", int56 == 15);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(mongoClient59);
    }

    @Test
    public void test4526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4526");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        int int18 = mongoClientOptions13.getMinConnectionsPerHost();
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions13.getDbDecoderFactory();
        int int20 = mongoClientOptions13.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern21 = mongoClientOptions13.getWriteConcern();
        int int22 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(writeConcern21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
    }

    @Test
    public void test4527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4527");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        char[] charArray4 = mongoProperties0.getPassword();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        char[] charArray6 = mongoProperties0.getPassword();
        mongoProperties0.setUri("test");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(charArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(charArray6);
    }

    @Test
    public void test4528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4528");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        boolean boolean33 = mongoClientOptions32.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory34 = mongoClientOptions32.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder12.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder36 = builder9.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatConnectTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.socketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.description("");
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder52 = builder46.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder54 = builder46.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test4529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4529");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions7.getDbEncoderFactory();
        com.mongodb.ReadConcern readConcern9 = mongoClientOptions7.getReadConcern();
        com.mongodb.DBDecoderFactory dBDecoderFactory10 = mongoClientOptions7.getDbDecoderFactory();
        boolean boolean11 = mongoClientOptions7.isSslInvalidHostNameAllowed();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        int int13 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNotNull(readConcern9);
        org.junit.Assert.assertNotNull(dBDecoderFactory10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
    }

    @Test
    public void test4530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4530");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getUsername();
        java.lang.String str3 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.clearPassword();
        mongoProperties0.setDatabase("test");
        mongoProperties0.setHost("test");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test4531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4531");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        boolean boolean17 = mongoClientOptions16.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions16.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList19 = mongoClientOptions16.getCommandListeners();
        int int20 = mongoClientOptions16.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry21 = mongoClientOptions16.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions16);
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions16, environment23);
        int int25 = mongoClientOptions16.getMaxConnectionLifeTime();
        int int26 = mongoClientOptions16.getConnectTimeout();
        int int27 = mongoClientOptions16.getMaxConnectionIdleTime();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertNotNull(commandListenerList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(codecRegistry21);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test4532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4532");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.description("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        boolean boolean23 = mongoClientOptions22.isSocketKeepAlive();
        int int24 = mongoClientOptions22.getThreadsAllowedToBlockForConnectionMultiplier();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList25 = mongoClientOptions22.getCommandListeners();
        com.mongodb.DBEncoderFactory dBEncoderFactory26 = mongoClientOptions22.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder27 = builder10.dbEncoderFactory(dBEncoderFactory26);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNotNull(commandListenerList25);
        org.junit.Assert.assertNotNull(dBEncoderFactory26);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test4533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4533");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        int int16 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean17 = mongoClientOptions13.isSocketKeepAlive();
        int int18 = mongoClientOptions13.getServerSelectionTimeout();
        java.lang.String str19 = mongoClientOptions13.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        boolean boolean21 = mongoClientOptions13.isAlwaysUseMBeans();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions13.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(readPreference22);
    }

    @Test
    public void test4534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4534");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        com.mongodb.ReadConcern readConcern18 = mongoClientOptions13.getReadConcern();
        int int19 = mongoClientOptions13.getMinConnectionsPerHost();
        int int20 = mongoClientOptions13.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(readConcern18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 120000 + "'", int20 == 120000);
    }

    @Test
    public void test4535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4535");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean17 = mongoClientOptions13.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("test");
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.heartbeatSocketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder24 = builder18.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.description("");
        com.mongodb.MongoClientOptions.Builder builder32 = builder26.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder45.build();
        int int47 = mongoClientOptions46.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry48 = mongoClientOptions46.getCodecRegistry();
        int int49 = mongoClientOptions46.getSocketTimeout();
        java.lang.String str50 = mongoClientOptions46.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory51 = mongoClientOptions46.getDbEncoderFactory();
        boolean boolean52 = mongoClientOptions46.isSocketKeepAlive();
        com.mongodb.DBDecoderFactory dBDecoderFactory53 = mongoClientOptions46.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder54 = builder26.dbDecoderFactory(dBDecoderFactory53);
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder61 = builder57.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions68 = builder67.build();
        int int69 = mongoClientOptions68.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry70 = mongoClientOptions68.getCodecRegistry();
        int int71 = mongoClientOptions68.getMinHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference72 = mongoClientOptions68.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory73 = mongoClientOptions68.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder74 = builder26.dbDecoderFactory(dBDecoderFactory73);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(codecRegistry48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(dBEncoderFactory51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(mongoClientOptions68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(codecRegistry70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 500 + "'", int71 == 500);
        org.junit.Assert.assertNotNull(readPreference72);
        org.junit.Assert.assertNotNull(dBDecoderFactory73);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test4536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4536");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        com.mongodb.MongoClientOptions.Builder builder23 = com.mongodb.MongoClientOptions.builder(mongoClientOptions22);
        java.lang.String str24 = mongoClientOptions22.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry25 = mongoClientOptions22.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder26 = builder0.codecRegistry(codecRegistry25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder0.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder41.build();
        com.mongodb.MongoClientOptions.Builder builder43 = com.mongodb.MongoClientOptions.builder(mongoClientOptions42);
        java.lang.String str44 = mongoClientOptions42.getRequiredReplicaSetName();
        int int45 = mongoClientOptions42.getMinConnectionsPerHost();
        int int46 = mongoClientOptions42.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern47 = mongoClientOptions42.getWriteConcern();
        com.mongodb.WriteConcern writeConcern48 = mongoClientOptions42.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder49 = builder28.writeConcern(writeConcern48);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.localThreshold((int) '#');
        com.mongodb.MongoClientOptions.Builder builder55 = builder51.serverSelectionTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.localThreshold(10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 120000 + "'", int46 == 120000);
        org.junit.Assert.assertNotNull(writeConcern47);
        org.junit.Assert.assertNotNull(writeConcern48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test4537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4537");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.maxWaitTime((int) (byte) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4538");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder(mongoClientOptions24);
        java.lang.String str26 = mongoClientOptions24.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry27 = mongoClientOptions24.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder28 = builder6.codecRegistry(codecRegistry27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder6.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("test");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test4539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4539");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getUsername();
        mongoProperties0.setUri("hi!");
        mongoProperties0.setHost("");
        java.lang.String str7 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str9 = mongoProperties8.getAuthenticationDatabase();
        java.lang.String str10 = mongoProperties8.getUsername();
        mongoProperties8.setUsername("");
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        boolean boolean27 = mongoClientOptions26.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        boolean boolean36 = mongoClientOptions26.equals((java.lang.Object) builder34);
        int int37 = mongoClientOptions26.getMaxConnectionIdleTime();
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties8.createMongoClient(mongoClientOptions26, environment38);
        boolean boolean40 = mongoClientOptions26.isSocketKeepAlive();
        org.springframework.core.env.Environment environment41 = null;
        com.mongodb.MongoClient mongoClient42 = mongoProperties0.createMongoClient(mongoClientOptions26, environment41);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(mongoClient42);
    }

    @Test
    public void test4540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4540");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.ReadConcern readConcern16 = mongoClientOptions13.getReadConcern();
        boolean boolean17 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        int int19 = mongoClientOptions13.getServerSelectionTimeout();
        int int20 = mongoClientOptions13.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(readConcern16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 15 + "'", int20 == 15);
    }

    @Test
    public void test4541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4541");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        java.lang.String str4 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str5 = mongoProperties0.getHost();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.String str7 = mongoProperties0.getHost();
        java.lang.String str8 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str9 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass10 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        int int25 = mongoClientOptions24.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry26 = mongoClientOptions24.getCodecRegistry();
        int int27 = mongoClientOptions24.getSocketTimeout();
        int int28 = mongoClientOptions24.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean29 = mongoClientOptions24.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions24);
        boolean boolean31 = mongoClientOptions24.isSocketKeepAlive();
        org.springframework.core.env.Environment environment32 = null;
        com.mongodb.MongoClient mongoClient33 = mongoProperties0.createMongoClient(mongoClientOptions24, environment32);
        java.lang.String str34 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "test" + "'", str4, "test");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "test" + "'", str8, "test");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(codecRegistry26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(mongoClient33);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test4542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4542");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.minHeartbeatFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.connectionsPerHost((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatConnectTimeout((int) (short) 100);
        com.mongodb.event.CommandListener commandListener17 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder18 = builder12.addCommandListener(commandListener17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4543");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        boolean boolean21 = mongoClientOptions20.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory22 = mongoClientOptions20.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder23 = builder0.dbEncoderFactory(dBEncoderFactory22);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.minHeartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder23.heartbeatConnectTimeout((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test4544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4544");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.threadsAllowedToBlockForConnectionMultiplier(120000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.description("test");
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        int int31 = mongoClientOptions30.getHeartbeatSocketTimeout();
        boolean boolean32 = mongoClientOptions30.isAlwaysUseMBeans();
        int int33 = mongoClientOptions30.getMaxConnectionLifeTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry34 = mongoClientOptions30.getCodecRegistry();
        int int35 = mongoClientOptions30.getMinConnectionsPerHost();
        com.mongodb.ReadConcern readConcern36 = mongoClientOptions30.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder37 = builder16.readConcern(readConcern36);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.sslInvalidHostNameAllowed(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder41 = builder37.connectionsPerHost((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: connectionPerHost must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(codecRegistry34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(readConcern36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test4545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4545");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        boolean boolean23 = mongoClientOptions13.equals((java.lang.Object) builder21);
        int int24 = mongoClientOptions13.getHeartbeatConnectTimeout();
        com.mongodb.ReadPreference readPreference25 = mongoClientOptions13.getReadPreference();
        boolean boolean26 = mongoClientOptions13.isSocketKeepAlive();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList27 = mongoClientOptions13.getCommandListeners();
        java.lang.String str28 = mongoClientOptions13.getRequiredReplicaSetName();
        javax.net.SocketFactory socketFactory29 = mongoClientOptions13.getSocketFactory();
        int int30 = mongoClientOptions13.getConnectTimeout();
        int int31 = mongoClientOptions13.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertNotNull(readPreference25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(commandListenerList27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(socketFactory29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10000 + "'", int30 == 10000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
    }

    @Test
    public void test4546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4546");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        java.lang.Integer int6 = mongoProperties0.getPort();
        mongoProperties0.setUsername("hi!");
        java.lang.String str9 = mongoProperties0.getUri();
        mongoProperties0.setHost("test");
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
    }

    @Test
    public void test4547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4547");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUsername("hi!");
        mongoProperties0.setPort((java.lang.Integer) 10);
        java.lang.String str8 = mongoProperties0.getDatabase();
        mongoProperties0.setDatabase("mongodb://localhost/test");
        mongoProperties0.setUsername("mongodb://localhost/test");
        char[] charArray13 = mongoProperties0.getPassword();
        java.lang.String str14 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(charArray13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test4548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4548");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int10 = mongoClientOptions7.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry11 = mongoClientOptions7.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder12 = com.mongodb.MongoClientOptions.builder(mongoClientOptions7);
        com.mongodb.WriteConcern writeConcern13 = mongoClientOptions7.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(codecRegistry11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(writeConcern13);
    }

    @Test
    public void test4549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4549");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionLifeTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.sslEnabled(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder10.minHeartbeatFrequency((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: minHeartbeatFrequency must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test4550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4550");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        boolean boolean17 = mongoClientOptions16.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions16.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList19 = mongoClientOptions16.getCommandListeners();
        int int20 = mongoClientOptions16.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry21 = mongoClientOptions16.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions16);
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions16, environment23);
        int int25 = mongoClientOptions16.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder26 = com.mongodb.MongoClientOptions.builder(mongoClientOptions16);
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder39.build();
        int int41 = mongoClientOptions40.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory42 = mongoClientOptions40.getSocketFactory();
        boolean boolean43 = mongoClientOptions40.isSslInvalidHostNameAllowed();
        java.lang.String str44 = mongoClientOptions40.getRequiredReplicaSetName();
        boolean boolean45 = mongoClientOptions40.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory46 = mongoClientOptions40.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder47 = builder26.dbEncoderFactory(dBEncoderFactory46);
        com.mongodb.MongoClientOptions.Builder builder48 = builder26.legacyDefaults();
        java.lang.Class<?> wildcardClass49 = builder48.getClass();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertNotNull(commandListenerList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(codecRegistry21);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(socketFactory42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test4551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4551");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions20.getDbEncoderFactory();
        com.mongodb.ReadConcern readConcern22 = mongoClientOptions20.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder23 = builder10.readConcern(readConcern22);
        com.mongodb.MongoClientOptions.Builder builder25 = builder10.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxConnectionIdleTime(32);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.heartbeatSocketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder31 = builder25.socketTimeout((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
        org.junit.Assert.assertNotNull(readConcern22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test4552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4552");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        java.lang.Integer int10 = mongoProperties0.getPort();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.serverSelectionTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder25 = builder19.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder27 = builder19.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        javax.net.SocketFactory socketFactory29 = mongoClientOptions28.getSocketFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList30 = mongoClientOptions28.getCommandListeners();
        int int31 = mongoClientOptions28.getMaxConnectionIdleTime();
        org.springframework.core.env.Environment environment32 = null;
        com.mongodb.MongoClient mongoClient33 = mongoProperties0.createMongoClient(mongoClientOptions28, environment32);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(socketFactory29);
        org.junit.Assert.assertNotNull(commandListenerList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(mongoClient33);
    }

    @Test
    public void test4553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4553");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int10 = mongoClientOptions7.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry11 = mongoClientOptions7.getCodecRegistry();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        int int13 = mongoClientOptions7.getHeartbeatFrequency();
        int int14 = mongoClientOptions7.getConnectionsPerHost();
        int int15 = mongoClientOptions7.getHeartbeatFrequency();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions7.getCommandListeners();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(codecRegistry11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertNotNull(commandListenerList16);
    }

    @Test
    public void test4554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4554");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        boolean boolean16 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        java.lang.String str17 = mongoClientOptions13.getDescription();
        java.lang.String str18 = mongoClientOptions13.getRequiredReplicaSetName();
        java.lang.String str19 = mongoClientOptions13.getRequiredReplicaSetName();
        int int20 = mongoClientOptions13.getMinHeartbeatFrequency();
        int int21 = mongoClientOptions13.getServerSelectionTimeout();
        int int22 = mongoClientOptions13.getConnectionsPerHost();
        int int23 = mongoClientOptions13.getMaxConnectionLifeTime();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList24 = mongoClientOptions13.getCommandListeners();
        int int25 = mongoClientOptions13.getMaxConnectionLifeTime();
        boolean boolean26 = mongoClientOptions13.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(commandListenerList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test4555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4555");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions13.getWriteConcern();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        int int18 = mongoClientOptions13.getLocalThreshold();
        int int19 = mongoClientOptions13.getMaxWaitTime();
        int int20 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean21 = mongoClientOptions13.isSocketKeepAlive();
        int int22 = mongoClientOptions13.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 120000 + "'", int20 == 120000);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
    }

    @Test
    public void test4556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4556");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass5 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str6 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatSocketTimeout();
        java.lang.String str22 = mongoClientOptions20.getRequiredReplicaSetName();
        boolean boolean23 = mongoClientOptions20.isSslEnabled();
        int int24 = mongoClientOptions20.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions20, environment25);
        java.lang.String str27 = mongoProperties0.getUri();
        java.lang.Class<?> wildcardClass28 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray29 = mongoProperties0.getPassword();
        mongoProperties0.setHost("mongodb://localhost/test");
        mongoProperties0.setUri("");
        mongoProperties0.setHost("mongodb://localhost/test");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "mongodb://localhost/test" + "'", str27, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNull(charArray29);
    }

    @Test
    public void test4557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4557");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getSocketTimeout();
        java.lang.String str17 = mongoClientOptions13.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions13.getDbEncoderFactory();
        boolean boolean19 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions13.getDbDecoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions13.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions13.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
    }

    @Test
    public void test4558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4558");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder(mongoClientOptions24);
        java.lang.String str26 = mongoClientOptions24.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry27 = mongoClientOptions24.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder28 = builder6.codecRegistry(codecRegistry27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder30.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder33 = builder30.heartbeatConnectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder35 = builder30.minHeartbeatFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.socketTimeout((-1));
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test4559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4559");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.serverSelectionTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        int int31 = mongoClientOptions30.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory32 = mongoClientOptions30.getSocketFactory();
        int int33 = mongoClientOptions30.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory34 = mongoClientOptions30.getDbDecoderFactory();
        java.lang.String str35 = mongoClientOptions30.getDescription();
        com.mongodb.WriteConcern writeConcern36 = mongoClientOptions30.getWriteConcern();
        java.lang.String str37 = mongoClientOptions30.getRequiredReplicaSetName();
        com.mongodb.ReadPreference readPreference38 = mongoClientOptions30.getReadPreference();
        boolean boolean39 = mongoClientOptions30.isAlwaysUseMBeans();
        org.bson.codecs.configuration.CodecRegistry codecRegistry40 = mongoClientOptions30.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder41 = builder10.codecRegistry(codecRegistry40);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(socketFactory32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 120000 + "'", int33 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(writeConcern36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(readPreference38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(codecRegistry40);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test4560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4560");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((-1));
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: state should be: maxConnectionIdleTime >= 0");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4561");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder32.build();
        int int34 = mongoClientOptions33.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory35 = mongoClientOptions33.getSocketFactory();
        com.mongodb.WriteConcern writeConcern36 = mongoClientOptions33.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder37 = builder15.writeConcern(writeConcern36);
        com.mongodb.MongoClientOptions.Builder builder38 = builder8.writeConcern(writeConcern36);
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder45 = builder41.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.connectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder51 = builder47.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.description("");
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder58 = builder54.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder59 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder65 = builder61.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions72 = builder71.build();
        int int73 = mongoClientOptions72.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory74 = mongoClientOptions72.getSocketFactory();
        com.mongodb.WriteConcern writeConcern75 = mongoClientOptions72.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder76 = builder54.writeConcern(writeConcern75);
        com.mongodb.MongoClientOptions.Builder builder77 = builder47.writeConcern(writeConcern75);
        com.mongodb.MongoClientOptions.Builder builder78 = builder38.writeConcern(writeConcern75);
        com.mongodb.MongoClientOptions.Builder builder80 = builder38.heartbeatSocketTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder82 = builder38.maxWaitTime(20000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(socketFactory35);
        org.junit.Assert.assertNotNull(writeConcern36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(mongoClientOptions72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(socketFactory74);
        org.junit.Assert.assertNotNull(writeConcern75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test4562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4562");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions20.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory23 = mongoClientOptions20.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = builder12.socketFactory(socketFactory23);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        java.lang.String str26 = mongoClientOptions25.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "mongodb://localhost/test" + "'", str26, "mongodb://localhost/test");
    }

    @Test
    public void test4563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4563");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry25 = mongoClientOptions23.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder26 = builder9.codecRegistry(codecRegistry25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder9.heartbeatSocketTimeout((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(codecRegistry25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test4564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4564");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("");
        java.lang.Integer int3 = mongoProperties0.getPort();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        org.springframework.core.env.Environment environment5 = null;
        com.mongodb.MongoClient mongoClient6 = mongoProperties0.createMongoClient(mongoClientOptions4, environment5);
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setUri("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str12 = mongoProperties11.getGridFsDatabase();
        java.lang.String str13 = mongoProperties11.getHost();
        java.lang.String str14 = mongoProperties11.getHost();
        java.lang.String str15 = mongoProperties11.getUri();
        mongoProperties11.setUsername("hi!");
        mongoProperties11.setUsername("");
        mongoProperties11.clearPassword();
        mongoProperties11.setGridFsDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory38 = mongoClientOptions36.getSocketFactory();
        com.mongodb.WriteConcern writeConcern39 = mongoClientOptions36.getWriteConcern();
        int int40 = mongoClientOptions36.getMaxConnectionLifeTime();
        org.springframework.core.env.Environment environment41 = null;
        com.mongodb.MongoClient mongoClient42 = mongoProperties11.createMongoClient(mongoClientOptions36, environment41);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties43 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str44 = mongoProperties43.getGridFsDatabase();
        java.lang.String str45 = mongoProperties43.getGridFsDatabase();
        mongoProperties43.setPort((java.lang.Integer) 0);
        java.lang.String str48 = mongoProperties43.getGridFsDatabase();
        mongoProperties43.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties50 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str51 = mongoProperties50.getAuthenticationDatabase();
        mongoProperties50.setAuthenticationDatabase("hi!");
        java.lang.String str54 = mongoProperties50.getHost();
        java.lang.String str55 = mongoProperties50.getMongoClientDatabase();
        char[] charArray56 = mongoProperties50.getPassword();
        char[] charArray57 = mongoProperties50.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties58 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str59 = mongoProperties58.getGridFsDatabase();
        java.lang.String str60 = mongoProperties58.getGridFsDatabase();
        java.lang.String str61 = mongoProperties58.getUsername();
        java.lang.String str62 = mongoProperties58.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass63 = mongoProperties58.getFieldNamingStrategy();
        char[] charArray68 = new char[] { 'a', '#', '#', '4' };
        mongoProperties58.setPassword(charArray68);
        mongoProperties50.setPassword(charArray68);
        mongoProperties43.setPassword(charArray68);
        mongoProperties11.setPassword(charArray68);
        mongoProperties0.setPassword(charArray68);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(mongoClient6);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb://localhost/test" + "'", str15, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(socketFactory38);
        org.junit.Assert.assertNotNull(writeConcern39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(mongoClient42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "test" + "'", str55, "test");
        org.junit.Assert.assertNull(charArray56);
        org.junit.Assert.assertNull(charArray57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(wildcardClass63);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[a, #, #, 4]");
    }

    @Test
    public void test4565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4565");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        java.lang.String str16 = mongoClientOptions13.getDescription();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        boolean boolean18 = mongoClientOptions13.isSocketKeepAlive();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern20 = mongoClientOptions13.getReadConcern();
        int int21 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int22 = mongoClientOptions13.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        javax.net.SocketFactory socketFactory24 = mongoClientOptions13.getSocketFactory();
        int int25 = mongoClientOptions13.getMinConnectionsPerHost();
        int int26 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(readConcern20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertNotNull(socketFactory24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
    }

    @Test
    public void test4566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4566");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatFrequency(5);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test4567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4567");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        com.mongodb.DBDecoderFactory dBDecoderFactory9 = mongoClientOptions7.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder(mongoClientOptions7);
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions7.getWriteConcern();
        boolean boolean12 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int13 = mongoClientOptions7.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test4568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4568");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getMinHeartbeatFrequency();
        int int17 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 500 + "'", int16 == 500);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test4569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4569");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        java.lang.String str4 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str5 = mongoProperties0.getHost();
        mongoProperties0.setUsername("hi!");
        java.lang.String str8 = mongoProperties0.getMongoClientDatabase();
        java.lang.Integer int9 = mongoProperties0.getPort();
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "test" + "'", str4, "test");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "test" + "'", str8, "test");
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test4570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4570");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getUsername();
        mongoProperties0.setPort((java.lang.Integer) 10);
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(false);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder19.build();
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions22, environment23);
        java.lang.Class<?> wildcardClass25 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNull(wildcardClass25);
    }

    @Test
    public void test4571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4571");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        com.mongodb.ReadConcern readConcern8 = mongoClientOptions7.getReadConcern();
        java.lang.String str9 = mongoClientOptions7.getDescription();
        int int10 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int11 = mongoClientOptions7.getHeartbeatFrequency();
        boolean boolean12 = mongoClientOptions7.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(readConcern8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "test" + "'", str9, "test");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test4572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4572");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.connectionsPerHost(10);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory28 = mongoClientOptions26.getSocketFactory();
        com.mongodb.WriteConcern writeConcern29 = mongoClientOptions26.getWriteConcern();
        com.mongodb.ReadConcern readConcern30 = mongoClientOptions26.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder31 = builder12.readConcern(readConcern30);
        com.mongodb.MongoClientOptions.Builder builder33 = builder12.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder33.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.maxConnectionLifeTime(0);
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder51 = builder47.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions52 = builder51.build();
        com.mongodb.MongoClientOptions.Builder builder54 = builder51.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.maxWaitTime(10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties57 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str58 = mongoProperties57.getGridFsDatabase();
        java.lang.String str59 = mongoProperties57.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder60 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder66 = builder62.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions73 = builder72.build();
        boolean boolean74 = mongoClientOptions73.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory75 = mongoClientOptions73.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList76 = mongoClientOptions73.getCommandListeners();
        int int77 = mongoClientOptions73.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry78 = mongoClientOptions73.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder79 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions73);
        org.springframework.core.env.Environment environment80 = null;
        com.mongodb.MongoClient mongoClient81 = mongoProperties57.createMongoClient(mongoClientOptions73, environment80);
        int int82 = mongoClientOptions73.getMinHeartbeatFrequency();
        int int83 = mongoClientOptions73.getConnectionsPerHost();
        int int84 = mongoClientOptions73.getMinHeartbeatFrequency();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties85 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str86 = mongoProperties85.getGridFsDatabase();
        mongoProperties85.setAuthenticationDatabase("");
        char[] charArray89 = mongoProperties85.getPassword();
        java.lang.String str90 = mongoProperties85.getGridFsDatabase();
        mongoProperties85.clearPassword();
        java.lang.String str92 = mongoProperties85.getAuthenticationDatabase();
        boolean boolean93 = mongoClientOptions73.equals((java.lang.Object) mongoProperties85);
        com.mongodb.DBDecoderFactory dBDecoderFactory94 = mongoClientOptions73.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder95 = builder56.dbDecoderFactory(dBDecoderFactory94);
        com.mongodb.MongoClientOptions.Builder builder96 = builder34.dbDecoderFactory(dBDecoderFactory94);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(socketFactory28);
        org.junit.Assert.assertNotNull(writeConcern29);
        org.junit.Assert.assertNotNull(readConcern30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(mongoClientOptions52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(mongoClientOptions73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory75);
        org.junit.Assert.assertNotNull(commandListenerList76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(codecRegistry78);
        org.junit.Assert.assertNotNull(mongoClient81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 500 + "'", int82 == 500);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 100 + "'", int83 == 100);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 500 + "'", int84 == 500);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNull(charArray89);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test4573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4573");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getRequiredReplicaSetName();
        int int16 = mongoClientOptions13.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        int int18 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean19 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        boolean boolean21 = mongoClientOptions13.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory22 = mongoClientOptions13.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120000 + "'", int18 == 120000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory22);
    }

    @Test
    public void test4574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4574");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        org.bson.codecs.configuration.CodecRegistry codecRegistry10 = mongoClientOptions7.getCodecRegistry();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions7.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        boolean boolean13 = mongoClientOptions7.isAlwaysUseMBeans();
        com.mongodb.DBDecoderFactory dBDecoderFactory14 = mongoClientOptions7.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertNotNull(codecRegistry10);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory14);
    }

    @Test
    public void test4575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4575");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.String str4 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "test" + "'", str4, "test");
    }

    @Test
    public void test4576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4576");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.serverSelectionTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.socketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        boolean boolean23 = mongoClientOptions22.isSocketKeepAlive();
        int int24 = mongoClientOptions22.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions22.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder8.dbEncoderFactory(dBEncoderFactory25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder43.build();
        int int45 = mongoClientOptions44.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory46 = mongoClientOptions44.getSocketFactory();
        int int47 = mongoClientOptions44.getMaxWaitTime();
        boolean boolean48 = mongoClientOptions44.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties49 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str50 = mongoProperties49.getGridFsDatabase();
        java.lang.String str51 = mongoProperties49.getGridFsDatabase();
        java.lang.String str52 = mongoProperties49.getUsername();
        mongoProperties49.setHost("hi!");
        mongoProperties49.setGridFsDatabase("hi!");
        boolean boolean57 = mongoClientOptions44.equals((java.lang.Object) mongoProperties49);
        com.mongodb.ReadPreference readPreference58 = mongoClientOptions44.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder59 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder65 = builder61.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions72 = builder71.build();
        int int73 = mongoClientOptions72.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory74 = mongoClientOptions72.getSocketFactory();
        boolean boolean75 = mongoClientOptions72.isSslInvalidHostNameAllowed();
        com.mongodb.ReadPreference readPreference76 = mongoClientOptions72.getReadPreference();
        boolean boolean77 = mongoClientOptions44.equals((java.lang.Object) readPreference76);
        int int78 = mongoClientOptions44.getHeartbeatFrequency();
        org.bson.codecs.configuration.CodecRegistry codecRegistry79 = mongoClientOptions44.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder80 = builder26.codecRegistry(codecRegistry79);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 120000 + "'", int24 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(socketFactory46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 120000 + "'", int47 == 120000);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(readPreference58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(mongoClientOptions72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(socketFactory74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(readPreference76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(codecRegistry79);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test4577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4577");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions13.getCommandListeners();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions13.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxWaitTime((int) (byte) 10);
        boolean boolean27 = mongoClientOptions13.equals((java.lang.Object) builder24);
        boolean boolean28 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        int int29 = mongoClientOptions13.getConnectionsPerHost();
        int int30 = mongoClientOptions13.getLocalThreshold();
        int int31 = mongoClientOptions13.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 15 + "'", int30 == 15);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test4578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4578");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions24.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern26 = mongoClientOptions24.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder27 = builder16.writeConcern(writeConcern26);
        com.mongodb.MongoClientOptions.Builder builder29 = builder16.heartbeatFrequency(32);
        com.mongodb.MongoClientOptions.Builder builder31 = builder16.maxConnectionLifeTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder44.build();
        com.mongodb.MongoClientOptions.Builder builder46 = com.mongodb.MongoClientOptions.builder(mongoClientOptions45);
        int int47 = mongoClientOptions45.getHeartbeatConnectTimeout();
        int int48 = mongoClientOptions45.getThreadsAllowedToBlockForConnectionMultiplier();
        int int49 = mongoClientOptions45.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean50 = mongoClientOptions45.isSslInvalidHostNameAllowed();
        javax.net.SocketFactory socketFactory51 = mongoClientOptions45.getSocketFactory();
        int int52 = mongoClientOptions45.getMinConnectionsPerHost();
        com.mongodb.WriteConcern writeConcern53 = mongoClientOptions45.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder54 = builder31.writeConcern(writeConcern53);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.sslInvalidHostNameAllowed(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertNotNull(writeConcern26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 20000 + "'", int47 == 20000);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(socketFactory51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(writeConcern53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test4579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4579");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((-1));
        java.lang.Class<?> wildcardClass13 = builder12.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test4580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4580");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionIdleTime();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean10 = mongoClientOptions7.isSocketKeepAlive();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int12 = mongoClientOptions7.getMaxWaitTime();
        int int13 = mongoClientOptions7.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test4581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4581");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder2.build();
        com.mongodb.MongoClientOptions.Builder builder9 = builder2.maxConnectionLifeTime(500);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.minHeartbeatFrequency(52);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder35 = builder29.localThreshold((int) '#');
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder48.build();
        int int50 = mongoClientOptions49.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory51 = mongoClientOptions49.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder52 = builder29.socketFactory(socketFactory51);
        com.mongodb.MongoClientOptions.Builder builder53 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder59 = builder55.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder70 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder76 = builder74.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions77 = builder76.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory78 = mongoClientOptions77.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern79 = mongoClientOptions77.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder80 = builder69.writeConcern(writeConcern79);
        com.mongodb.MongoClientOptions.Builder builder81 = builder29.writeConcern(writeConcern79);
        com.mongodb.MongoClientOptions.Builder builder82 = builder18.writeConcern(writeConcern79);
        com.mongodb.MongoClientOptions.Builder builder83 = builder2.writeConcern(writeConcern79);
        com.mongodb.MongoClientOptions.Builder builder85 = builder83.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder87 = builder83.socketTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder89 = builder83.minHeartbeatFrequency((int) '4');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(socketFactory51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(mongoClientOptions77);
        org.junit.Assert.assertNotNull(dBEncoderFactory78);
        org.junit.Assert.assertNotNull(writeConcern79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test4582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4582");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getUri();
        mongoProperties0.setUsername("hi!");
        mongoProperties0.setUsername("");
        mongoProperties0.clearPassword();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory27 = mongoClientOptions25.getSocketFactory();
        com.mongodb.WriteConcern writeConcern28 = mongoClientOptions25.getWriteConcern();
        int int29 = mongoClientOptions25.getMaxConnectionLifeTime();
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties0.createMongoClient(mongoClientOptions25, environment30);
        java.lang.String str32 = mongoProperties0.getDatabase();
        java.lang.Integer int33 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(socketFactory27);
        org.junit.Assert.assertNotNull(writeConcern28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(int33);
    }

    @Test
    public void test4583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4583");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.setHost("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory25 = mongoClientOptions23.getSocketFactory();
        boolean boolean26 = mongoClientOptions23.isSslInvalidHostNameAllowed();
        java.lang.String str27 = mongoClientOptions23.getDescription();
        java.lang.String str28 = mongoClientOptions23.getRequiredReplicaSetName();
        int int29 = mongoClientOptions23.getHeartbeatConnectTimeout();
        int int30 = mongoClientOptions23.getMaxWaitTime();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties0.createMongoClient(mongoClientOptions23, environment31);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(socketFactory25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 120000 + "'", int30 == 120000);
        org.junit.Assert.assertNotNull(mongoClient32);
    }

    @Test
    public void test4584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4584");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        char[] charArray4 = mongoProperties0.getPassword();
        java.lang.String str5 = mongoProperties0.getHost();
        mongoProperties0.setDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(charArray4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test4585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4585");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions13.getWriteConcern();
        com.mongodb.ReadConcern readConcern17 = mongoClientOptions13.getReadConcern();
        boolean boolean18 = mongoClientOptions13.isCursorFinalizerEnabled();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList19 = mongoClientOptions13.getCommandListeners();
        int int20 = mongoClientOptions13.getHeartbeatFrequency();
        int int21 = mongoClientOptions13.getConnectTimeout();
        boolean boolean22 = mongoClientOptions13.isSocketKeepAlive();
        java.lang.String str23 = mongoClientOptions13.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertNotNull(readConcern17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(commandListenerList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
    }

    @Test
    public void test4586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4586");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int17 = mongoClientOptions13.getLocalThreshold();
        javax.net.SocketFactory socketFactory18 = mongoClientOptions13.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 15 + "'", int17 == 15);
        org.junit.Assert.assertNotNull(socketFactory18);
    }

    @Test
    public void test4587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4587");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions20.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder23 = builder2.readPreference(readPreference22);
        com.mongodb.MongoClientOptions.Builder builder25 = builder2.localThreshold(100);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.requiredReplicaSetName("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test4588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4588");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions13.getCommandListeners();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions13.getReadPreference();
        boolean boolean18 = mongoClientOptions13.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxConnectionIdleTime((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test4589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4589");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int10 = mongoClientOptions7.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry11 = mongoClientOptions7.getCodecRegistry();
        java.lang.String str12 = mongoClientOptions7.getRequiredReplicaSetName();
        boolean boolean13 = mongoClientOptions7.isCursorFinalizerEnabled();
        boolean boolean14 = mongoClientOptions7.isCursorFinalizerEnabled();
        com.mongodb.WriteConcern writeConcern15 = mongoClientOptions7.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(codecRegistry11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(writeConcern15);
    }

    @Test
    public void test4590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4590");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectTimeout(500);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test4591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4591");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Integer int5 = mongoProperties0.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str7 = mongoProperties6.getGridFsDatabase();
        java.lang.String str8 = mongoProperties6.getHost();
        java.lang.String str9 = mongoProperties6.getGridFsDatabase();
        java.lang.String str10 = mongoProperties6.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties6.getHost();
        java.lang.String str12 = mongoProperties6.getDatabase();
        java.lang.String str13 = mongoProperties6.getHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str15 = mongoProperties14.getGridFsDatabase();
        java.lang.String str16 = mongoProperties14.getGridFsDatabase();
        java.lang.String str17 = mongoProperties14.getUsername();
        java.lang.String str18 = mongoProperties14.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass19 = mongoProperties14.getFieldNamingStrategy();
        char[] charArray24 = new char[] { 'a', '#', '#', '4' };
        mongoProperties14.setPassword(charArray24);
        mongoProperties6.setPassword(charArray24);
        mongoProperties0.setPassword(charArray24);
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str30 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "test" + "'", str10, "test");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[a, #, #, 4]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "test" + "'", str30, "test");
    }

    @Test
    public void test4592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4592");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getUsername();
        mongoProperties0.setPort((java.lang.Integer) 10);
        mongoProperties0.setDatabase("hi!");
        java.lang.String str7 = mongoProperties0.getUsername();
        java.lang.String str8 = mongoProperties0.getUri();
        mongoProperties0.setUri("test");
        java.lang.String str11 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test4593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4593");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions13.getCommandListeners();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions13.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxWaitTime((int) (byte) 10);
        boolean boolean27 = mongoClientOptions13.equals((java.lang.Object) builder24);
        com.mongodb.MongoClientOptions.Builder builder29 = builder24.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test4594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4594");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        boolean boolean11 = mongoClientOptions7.isSslInvalidHostNameAllowed();
        boolean boolean12 = mongoClientOptions7.isSslInvalidHostNameAllowed();
        int int13 = mongoClientOptions7.getLocalThreshold();
        boolean boolean14 = mongoClientOptions7.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 15 + "'", int13 == 15);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test4595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4595");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("");
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
    }

    @Test
    public void test4596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4596");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        int int33 = mongoClientOptions32.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry34 = mongoClientOptions32.getCodecRegistry();
        java.lang.String str35 = mongoClientOptions32.getDescription();
        boolean boolean36 = mongoClientOptions32.isAlwaysUseMBeans();
        boolean boolean37 = mongoClientOptions32.isSocketKeepAlive();
        int int38 = mongoClientOptions32.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern39 = mongoClientOptions32.getReadConcern();
        int int40 = mongoClientOptions32.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.DBEncoderFactory dBEncoderFactory41 = mongoClientOptions32.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder42 = builder18.dbEncoderFactory(dBEncoderFactory41);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.minHeartbeatFrequency(15);
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder48 = builder42.minHeartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder50 = builder42.minHeartbeatFrequency(15);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(codecRegistry34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertNotNull(readConcern39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(dBEncoderFactory41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test4597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4597");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionIdleTime();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean10 = mongoClientOptions7.isAlwaysUseMBeans();
        int int11 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int12 = mongoClientOptions7.getServerSelectionTimeout();
        int int13 = mongoClientOptions7.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 30000 + "'", int12 == 30000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
    }

    @Test
    public void test4598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4598");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        com.mongodb.MongoClientOptions.Builder builder17 = builder14.threadsAllowedToBlockForConnectionMultiplier(52);
        com.mongodb.MongoClientOptions.Builder builder19 = builder14.connectionsPerHost(120000);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder14.build();
        int int21 = mongoClientOptions20.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test4599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4599");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.socketTimeout(32);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionLifeTime(100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test4600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4600");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass5 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str6 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test4601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4601");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getDatabase();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.String str6 = mongoProperties0.getUsername();
        java.lang.Integer int7 = mongoProperties0.getPort();
        mongoProperties0.setUsername("mongodb://localhost/test");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test4602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4602");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str4 = mongoProperties0.getHost();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setDatabase("");
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        java.lang.String str9 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
    }

    @Test
    public void test4603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4603");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        boolean boolean31 = mongoClientOptions30.isSocketKeepAlive();
        int int32 = mongoClientOptions30.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions30);
        boolean boolean34 = mongoClientOptions30.isSslInvalidHostNameAllowed();
        int int35 = mongoClientOptions30.getServerSelectionTimeout();
        int int36 = mongoClientOptions30.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory37 = mongoClientOptions30.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder38 = builder18.dbDecoderFactory(dBDecoderFactory37);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatConnectTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.maxWaitTime(500);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.minConnectionsPerHost((int) (short) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10000 + "'", int32 == 10000);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 30000 + "'", int35 == 30000);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 120000 + "'", int36 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test4604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4604");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.serverSelectionTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        boolean boolean37 = mongoClientOptions36.isSocketKeepAlive();
        int int38 = mongoClientOptions36.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory39 = mongoClientOptions36.getDbEncoderFactory();
        int int40 = mongoClientOptions36.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions36);
        javax.net.SocketFactory socketFactory42 = mongoClientOptions36.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder43 = builder22.socketFactory(socketFactory42);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.connectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder49 = builder45.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.localThreshold(10);
        com.mongodb.MongoClientOptions.Builder builder57 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder63 = builder59.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions70 = builder69.build();
        int int71 = mongoClientOptions70.getHeartbeatSocketTimeout();
        java.lang.String str72 = mongoClientOptions70.getRequiredReplicaSetName();
        java.lang.String str73 = mongoClientOptions70.getRequiredReplicaSetName();
        int int74 = mongoClientOptions70.getHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern75 = mongoClientOptions70.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder76 = builder56.writeConcern(writeConcern75);
        com.mongodb.MongoClientOptions.Builder builder77 = builder49.writeConcern(writeConcern75);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 120000 + "'", int38 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 120000 + "'", int40 == 120000);
        org.junit.Assert.assertNotNull(socketFactory42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(mongoClientOptions70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(writeConcern75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test4605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4605");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setGridFsDatabase("hi!");
        char[] charArray9 = new char[] { '#' };
        mongoProperties0.setPassword(charArray9);
        java.lang.String str11 = mongoProperties0.getMongoClientDatabase();
        char[] charArray12 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry28 = mongoClientOptions26.getCodecRegistry();
        int int29 = mongoClientOptions26.getSocketTimeout();
        java.lang.String str30 = mongoClientOptions26.getRequiredReplicaSetName();
        int int31 = mongoClientOptions26.getThreadsAllowedToBlockForConnectionMultiplier();
        org.bson.codecs.configuration.CodecRegistry codecRegistry32 = mongoClientOptions26.getCodecRegistry();
        int int33 = mongoClientOptions26.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment34 = null;
        com.mongodb.MongoClient mongoClient35 = mongoProperties0.createMongoClient(mongoClientOptions26, environment34);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[\000]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "test" + "'", str11, "test");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[\000]");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(codecRegistry28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertNotNull(codecRegistry32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(mongoClient35);
    }

    @Test
    public void test4606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4606");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatFrequency(32);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.serverSelectionTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder13 = builder7.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions14);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
    }

    @Test
    public void test4607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4607");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.maxWaitTime((int) (short) 1);
        com.mongodb.event.CommandListener commandListener10 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder11 = builder9.addCommandListener(commandListener10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test4608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4608");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        org.bson.codecs.configuration.CodecRegistry codecRegistry10 = mongoClientOptions7.getCodecRegistry();
        int int11 = mongoClientOptions7.getConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        int int13 = mongoClientOptions7.getLocalThreshold();
        int int14 = mongoClientOptions7.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertNotNull(codecRegistry10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 15 + "'", int13 == 15);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test4609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4609");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Integer int4 = mongoProperties0.getPort();
        mongoProperties0.setGridFsDatabase("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str8 = mongoProperties7.getAuthenticationDatabase();
        mongoProperties7.setAuthenticationDatabase("hi!");
        char[] charArray11 = mongoProperties7.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties12.setHost("");
        java.lang.String str15 = mongoProperties12.getGridFsDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str17 = mongoProperties16.getAuthenticationDatabase();
        mongoProperties16.setAuthenticationDatabase("hi!");
        char[] charArray20 = mongoProperties16.getPassword();
        java.lang.String str21 = mongoProperties16.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str23 = mongoProperties22.getAuthenticationDatabase();
        mongoProperties22.setAuthenticationDatabase("hi!");
        java.lang.String str26 = mongoProperties22.getHost();
        java.lang.String str27 = mongoProperties22.getMongoClientDatabase();
        char[] charArray28 = mongoProperties22.getPassword();
        char[] charArray29 = mongoProperties22.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties30 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str31 = mongoProperties30.getGridFsDatabase();
        java.lang.String str32 = mongoProperties30.getGridFsDatabase();
        java.lang.String str33 = mongoProperties30.getUsername();
        java.lang.String str34 = mongoProperties30.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass35 = mongoProperties30.getFieldNamingStrategy();
        char[] charArray40 = new char[] { 'a', '#', '#', '4' };
        mongoProperties30.setPassword(charArray40);
        mongoProperties22.setPassword(charArray40);
        mongoProperties16.setPassword(charArray40);
        mongoProperties12.setPassword(charArray40);
        mongoProperties7.setPassword(charArray40);
        mongoProperties0.setPassword(charArray40);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(charArray11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(charArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "test" + "'", str21, "test");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "test" + "'", str27, "test");
        org.junit.Assert.assertNull(charArray28);
        org.junit.Assert.assertNull(charArray29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[a, #, #, 4]");
    }

    @Test
    public void test4610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4610");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int17 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int18 = mongoClientOptions13.getMaxConnectionIdleTime();
        int int19 = mongoClientOptions13.getMinConnectionsPerHost();
        int int20 = mongoClientOptions13.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test4611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4611");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions7.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern9 = mongoClientOptions7.getWriteConcern();
        int int10 = mongoClientOptions7.getSocketTimeout();
        int int11 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNotNull(writeConcern9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test4612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4612");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        int int17 = mongoClientOptions13.getConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions13.getDbEncoderFactory();
        int int19 = mongoClientOptions13.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
    }

    @Test
    public void test4613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4613");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int17 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int18 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions13.getDbDecoderFactory();
        int int20 = mongoClientOptions13.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
    }

    @Test
    public void test4614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4614");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getUsername();
        mongoProperties0.setUsername("");
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        boolean boolean19 = mongoClientOptions18.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        boolean boolean28 = mongoClientOptions18.equals((java.lang.Object) builder26);
        int int29 = mongoClientOptions18.getMaxConnectionIdleTime();
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties0.createMongoClient(mongoClientOptions18, environment30);
        int int32 = mongoClientOptions18.getMinHeartbeatFrequency();
        int int33 = mongoClientOptions18.getSocketTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 500 + "'", int32 == 500);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test4615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4615");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.description("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.sslInvalidHostNameAllowed(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4616");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.serverSelectionTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.socketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        boolean boolean23 = mongoClientOptions22.isSocketKeepAlive();
        int int24 = mongoClientOptions22.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions22.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder8.dbEncoderFactory(dBEncoderFactory25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.connectTimeout((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder34 = builder32.connectionsPerHost((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: connectionPerHost must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 120000 + "'", int24 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test4617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4617");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        java.lang.String str2 = mongoProperties0.getHost();
        mongoProperties0.setDatabase("test");
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setDatabase("test");
        mongoProperties0.setHost("");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
    }

    @Test
    public void test4618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4618");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions13.getSocketFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions13.getDbDecoderFactory();
        boolean boolean19 = mongoClientOptions13.isCursorFinalizerEnabled();
        java.lang.String str20 = mongoClientOptions13.getRequiredReplicaSetName();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str22 = mongoProperties21.getGridFsDatabase();
        java.lang.String str23 = mongoProperties21.getHost();
        java.lang.String str24 = mongoProperties21.getHost();
        java.lang.String str25 = mongoProperties21.getUri();
        java.lang.String str26 = mongoProperties21.getGridFsDatabase();
        char[] charArray32 = new char[] { 'a', '4', ' ', '#', 'a' };
        mongoProperties21.setPassword(charArray32);
        java.lang.String str34 = mongoProperties21.getDatabase();
        java.lang.String str35 = mongoProperties21.getUsername();
        java.lang.String str36 = mongoProperties21.getUri();
        boolean boolean37 = mongoClientOptions13.equals((java.lang.Object) mongoProperties21);
        int int38 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "mongodb://localhost/test" + "'", str25, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "a4 #a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "a4 #a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[a, 4,  , #, a]");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "mongodb://localhost/test" + "'", str36, "mongodb://localhost/test");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
    }

    @Test
    public void test4619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4619");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        com.mongodb.MongoClientOptions.Builder builder27 = com.mongodb.MongoClientOptions.builder(mongoClientOptions26);
        java.lang.String str28 = mongoClientOptions26.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry29 = mongoClientOptions26.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder30 = builder8.codecRegistry(codecRegistry29);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.heartbeatFrequency((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder45 = builder41.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions52 = builder51.build();
        int int53 = mongoClientOptions52.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory54 = mongoClientOptions52.getSocketFactory();
        boolean boolean55 = mongoClientOptions52.isSslInvalidHostNameAllowed();
        java.lang.String str56 = mongoClientOptions52.getDescription();
        java.lang.String str57 = mongoClientOptions52.getRequiredReplicaSetName();
        java.lang.String str58 = mongoClientOptions52.getRequiredReplicaSetName();
        int int59 = mongoClientOptions52.getMinHeartbeatFrequency();
        int int60 = mongoClientOptions52.getServerSelectionTimeout();
        int int61 = mongoClientOptions52.getConnectionsPerHost();
        boolean boolean62 = mongoClientOptions52.isSslInvalidHostNameAllowed();
        com.mongodb.ReadConcern readConcern63 = mongoClientOptions52.getReadConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory64 = mongoClientOptions52.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder65 = builder38.dbEncoderFactory(dBEncoderFactory64);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(mongoClientOptions52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(socketFactory54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 500 + "'", int59 == 500);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(readConcern63);
        org.junit.Assert.assertNotNull(dBEncoderFactory64);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test4620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4620");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.connectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatSocketTimeout((int) (short) -1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxWaitTime(20000);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.threadsAllowedToBlockForConnectionMultiplier(20000);
        com.mongodb.event.CommandListener commandListener17 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder18 = builder10.addCommandListener(commandListener17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4621");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions7.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern9 = mongoClientOptions7.getWriteConcern();
        boolean boolean10 = mongoClientOptions7.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNotNull(writeConcern9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test4622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4622");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getServerSelectionTimeout();
        int int16 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry17 = mongoClientOptions13.getCodecRegistry();
        int int18 = mongoClientOptions13.getLocalThreshold();
        boolean boolean19 = mongoClientOptions13.isSslEnabled();
        int int20 = mongoClientOptions13.getMinConnectionsPerHost();
        int int21 = mongoClientOptions13.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(codecRegistry17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test4623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4623");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions13.getReadPreference();
        int int18 = mongoClientOptions13.getMinConnectionsPerHost();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList19 = mongoClientOptions13.getCommandListeners();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(commandListenerList19);
    }

    @Test
    public void test4624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4624");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setHost("");
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setDatabase("mongodb://localhost/test");
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test4625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4625");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        org.bson.codecs.configuration.CodecRegistry codecRegistry10 = mongoClientOptions9.getCodecRegistry();
        boolean boolean11 = mongoClientOptions9.isSslEnabled();
        int int12 = mongoClientOptions9.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions9);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertNotNull(codecRegistry10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test4626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4626");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.serverSelectionTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.socketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test4627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4627");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder2.build();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList8 = mongoClientOptions7.getCommandListeners();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(commandListenerList8);
    }

    @Test
    public void test4628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4628");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.threadsAllowedToBlockForConnectionMultiplier((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((-1));
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.connectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.serverSelectionTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder29 = builder23.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.minHeartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.maxConnectionLifeTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.maxConnectionIdleTime((-1));
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions51 = builder50.build();
        int int52 = mongoClientOptions51.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry53 = mongoClientOptions51.getCodecRegistry();
        java.lang.String str54 = mongoClientOptions51.getDescription();
        boolean boolean55 = mongoClientOptions51.isAlwaysUseMBeans();
        boolean boolean56 = mongoClientOptions51.isSocketKeepAlive();
        int int57 = mongoClientOptions51.getConnectionsPerHost();
        java.lang.String str58 = mongoClientOptions51.getRequiredReplicaSetName();
        int int59 = mongoClientOptions51.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry60 = mongoClientOptions51.getCodecRegistry();
        com.mongodb.DBEncoderFactory dBEncoderFactory61 = mongoClientOptions51.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder62 = builder35.dbEncoderFactory(dBEncoderFactory61);
        com.mongodb.MongoClientOptions.Builder builder63 = builder12.dbEncoderFactory(dBEncoderFactory61);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoClientOptions51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(codecRegistry53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(codecRegistry60);
        org.junit.Assert.assertNotNull(dBEncoderFactory61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test4629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4629");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int10 = mongoClientOptions7.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry11 = mongoClientOptions7.getCodecRegistry();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        int int13 = mongoClientOptions7.getHeartbeatFrequency();
        int int14 = mongoClientOptions7.getLocalThreshold();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions7.getDbDecoderFactory();
        int int16 = mongoClientOptions7.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(codecRegistry11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15 + "'", int16 == 15);
    }

    @Test
    public void test4630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4630");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        int int10 = mongoClientOptions9.getConnectTimeout();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions9.getSocketFactory();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str13 = mongoProperties12.getGridFsDatabase();
        java.lang.String str14 = mongoProperties12.getHost();
        java.lang.String str15 = mongoProperties12.getGridFsDatabase();
        java.lang.String str16 = mongoProperties12.getMongoClientDatabase();
        char[] charArray17 = mongoProperties12.getPassword();
        mongoProperties12.setGridFsDatabase("");
        char[] charArray20 = mongoProperties12.getPassword();
        java.lang.String str21 = mongoProperties12.getAuthenticationDatabase();
        boolean boolean22 = mongoClientOptions9.equals((java.lang.Object) mongoProperties12);
        com.mongodb.DBDecoderFactory dBDecoderFactory23 = mongoClientOptions9.getDbDecoderFactory();
        int int24 = mongoClientOptions9.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "test" + "'", str16, "test");
        org.junit.Assert.assertNull(charArray17);
        org.junit.Assert.assertNull(charArray20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
    }

    @Test
    public void test4631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4631");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.connectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder44.build();
        com.mongodb.MongoClientOptions.Builder builder46 = com.mongodb.MongoClientOptions.builder(mongoClientOptions45);
        java.lang.String str47 = mongoClientOptions45.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry48 = mongoClientOptions45.getCodecRegistry();
        boolean boolean49 = mongoClientOptions45.isAlwaysUseMBeans();
        com.mongodb.ReadConcern readConcern50 = mongoClientOptions45.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder51 = builder27.readConcern(readConcern50);
        com.mongodb.MongoClientOptions.Builder builder52 = builder18.readConcern(readConcern50);
        com.mongodb.MongoClientOptions.Builder builder53 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions60 = builder59.build();
        boolean boolean61 = mongoClientOptions60.isSocketKeepAlive();
        int int62 = mongoClientOptions60.getThreadsAllowedToBlockForConnectionMultiplier();
        int int63 = mongoClientOptions60.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry64 = mongoClientOptions60.getCodecRegistry();
        com.mongodb.DBEncoderFactory dBEncoderFactory65 = mongoClientOptions60.getDbEncoderFactory();
        int int66 = mongoClientOptions60.getHeartbeatSocketTimeout();
        com.mongodb.ReadConcern readConcern67 = mongoClientOptions60.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder68 = builder18.readConcern(readConcern67);
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(readConcern50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(mongoClientOptions60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 5 + "'", int62 == 5);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertNotNull(codecRegistry64);
        org.junit.Assert.assertNotNull(dBEncoderFactory65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(readConcern67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test4632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4632");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getSocketTimeout();
        java.lang.String str17 = mongoClientOptions13.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions13.getDbEncoderFactory();
        org.bson.codecs.configuration.CodecRegistry codecRegistry19 = mongoClientOptions13.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry20 = mongoClientOptions13.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder43.build();
        com.mongodb.MongoClientOptions.Builder builder45 = com.mongodb.MongoClientOptions.builder(mongoClientOptions44);
        java.lang.String str46 = mongoClientOptions44.getRequiredReplicaSetName();
        int int47 = mongoClientOptions44.getConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory48 = mongoClientOptions44.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder49 = builder29.dbEncoderFactory(dBEncoderFactory48);
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder57 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder63 = builder59.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions70 = builder69.build();
        int int71 = mongoClientOptions70.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference72 = mongoClientOptions70.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder73 = builder56.readPreference(readPreference72);
        com.mongodb.MongoClientOptions.Builder builder74 = builder49.readPreference(readPreference72);
        com.mongodb.MongoClientOptions.Builder builder76 = builder49.heartbeatSocketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder78 = builder76.heartbeatSocketTimeout((int) (short) 0);
        boolean boolean79 = mongoClientOptions13.equals((java.lang.Object) (short) 0);
        int int80 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int81 = mongoClientOptions13.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertNotNull(codecRegistry19);
        org.junit.Assert.assertNotNull(codecRegistry20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10000 + "'", int47 == 10000);
        org.junit.Assert.assertNotNull(dBEncoderFactory48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(mongoClientOptions70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(readPreference72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 5 + "'", int80 == 5);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test4633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4633");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions13.getWriteConcern();
        boolean boolean19 = mongoClientOptions13.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test4634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4634");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions16.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder19 = builder8.dbDecoderFactory(dBDecoderFactory18);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionIdleTime(120000);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.minConnectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder36.build();
        int int38 = mongoClientOptions37.getHeartbeatSocketTimeout();
        java.lang.String str39 = mongoClientOptions37.getRequiredReplicaSetName();
        java.lang.String str40 = mongoClientOptions37.getRequiredReplicaSetName();
        int int41 = mongoClientOptions37.getHeartbeatFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory42 = mongoClientOptions37.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder43 = builder23.dbEncoderFactory(dBEncoderFactory42);
        com.mongodb.MongoClientOptions.Builder builder45 = builder23.heartbeatSocketTimeout((int) (short) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties46 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str47 = mongoProperties46.getAuthenticationDatabase();
        java.lang.String str48 = mongoProperties46.getDatabase();
        java.lang.String str49 = mongoProperties46.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder56 = builder52.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder62.build();
        int int64 = mongoClientOptions63.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory65 = mongoClientOptions63.getSocketFactory();
        org.springframework.core.env.Environment environment66 = null;
        com.mongodb.MongoClient mongoClient67 = mongoProperties46.createMongoClient(mongoClientOptions63, environment66);
        org.bson.codecs.configuration.CodecRegistry codecRegistry68 = mongoClientOptions63.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder69 = builder45.codecRegistry(codecRegistry68);
        com.mongodb.MongoClientOptions.Builder builder70 = builder45.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dBEncoderFactory42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "test" + "'", str49, "test");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoClientOptions63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(socketFactory65);
        org.junit.Assert.assertNotNull(mongoClient67);
        org.junit.Assert.assertNotNull(codecRegistry68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test4635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4635");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.maxConnectionLifeTime((int) '4');
        com.mongodb.MongoClientOptions.Builder builder16 = builder6.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder6.maxWaitTime(27017);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test4636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4636");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str4 = mongoProperties0.getHost();
        java.lang.String str5 = mongoProperties0.getHost();
        mongoProperties0.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        boolean boolean15 = mongoClientOptions14.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions14.getDbEncoderFactory();
        int int17 = mongoClientOptions14.getHeartbeatSocketTimeout();
        int int18 = mongoClientOptions14.getConnectionsPerHost();
        int int19 = mongoClientOptions14.getConnectTimeout();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions14, environment20);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertNotNull(mongoClient21);
    }

    @Test
    public void test4637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4637");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder(mongoClientOptions24);
        java.lang.String str26 = mongoClientOptions24.getRequiredReplicaSetName();
        int int27 = mongoClientOptions24.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions24);
        int int29 = mongoClientOptions24.getMaxWaitTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry30 = mongoClientOptions24.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder31 = builder6.codecRegistry(codecRegistry30);
        com.mongodb.MongoClientOptions.Builder builder33 = builder6.minHeartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder34 = builder33.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 120000 + "'", int29 == 120000);
        org.junit.Assert.assertNotNull(codecRegistry30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test4638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4638");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        int int25 = mongoClientOptions24.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions24.getSocketFactory();
        int int27 = mongoClientOptions24.getMaxWaitTime();
        boolean boolean28 = mongoClientOptions24.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties29 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str30 = mongoProperties29.getGridFsDatabase();
        java.lang.String str31 = mongoProperties29.getGridFsDatabase();
        java.lang.String str32 = mongoProperties29.getUsername();
        mongoProperties29.setHost("hi!");
        mongoProperties29.setGridFsDatabase("hi!");
        boolean boolean37 = mongoClientOptions24.equals((java.lang.Object) mongoProperties29);
        boolean boolean38 = mongoClientOptions24.isSslInvalidHostNameAllowed();
        com.mongodb.ReadConcern readConcern39 = mongoClientOptions24.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder40 = builder8.readConcern(readConcern39);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.localThreshold((int) '#');
        com.mongodb.MongoClientOptions.Builder builder43 = builder42.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 120000 + "'", int27 == 120000);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(readConcern39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test4639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4639");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.serverSelectionTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        boolean boolean25 = mongoClientOptions24.isSocketKeepAlive();
        int int26 = mongoClientOptions24.getThreadsAllowedToBlockForConnectionMultiplier();
        int int27 = mongoClientOptions24.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry28 = mongoClientOptions24.getCodecRegistry();
        com.mongodb.DBEncoderFactory dBEncoderFactory29 = mongoClientOptions24.getDbEncoderFactory();
        int int30 = mongoClientOptions24.getHeartbeatFrequency();
        int int31 = mongoClientOptions24.getLocalThreshold();
        com.mongodb.DBDecoderFactory dBDecoderFactory32 = mongoClientOptions24.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder33 = builder16.dbDecoderFactory(dBDecoderFactory32);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(codecRegistry28);
        org.junit.Assert.assertNotNull(dBEncoderFactory29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10000 + "'", int30 == 10000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 15 + "'", int31 == 15);
        org.junit.Assert.assertNotNull(dBDecoderFactory32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test4640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4640");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.heartbeatFrequency(52);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionLifeTime((int) (short) -1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxConnectionLifeTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry28 = mongoClientOptions26.getCodecRegistry();
        java.lang.String str29 = mongoClientOptions26.getDescription();
        boolean boolean30 = mongoClientOptions26.isAlwaysUseMBeans();
        java.lang.String str31 = mongoClientOptions26.getRequiredReplicaSetName();
        int int32 = mongoClientOptions26.getConnectionsPerHost();
        boolean boolean33 = mongoClientOptions26.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory34 = mongoClientOptions26.getSocketFactory();
        boolean boolean35 = mongoClientOptions26.isSslInvalidHostNameAllowed();
        com.mongodb.DBEncoderFactory dBEncoderFactory36 = mongoClientOptions26.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder37 = builder12.dbEncoderFactory(dBEncoderFactory36);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(codecRegistry28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(socketFactory34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory36);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test4641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4641");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions7.getSocketFactory();
        int int9 = mongoClientOptions7.getMaxWaitTime();
        boolean boolean10 = mongoClientOptions7.isCursorFinalizerEnabled();
        java.lang.String str11 = mongoClientOptions7.getRequiredReplicaSetName();
        com.mongodb.ReadConcern readConcern12 = mongoClientOptions7.getReadConcern();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions7.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 120000 + "'", int9 == 120000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(readConcern12);
        org.junit.Assert.assertNotNull(readPreference13);
    }

    @Test
    public void test4642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4642");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions16.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder19 = builder8.dbDecoderFactory(dBDecoderFactory18);
        com.mongodb.MongoClientOptions.Builder builder20 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        int int35 = mongoClientOptions34.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry36 = mongoClientOptions34.getCodecRegistry();
        java.lang.String str37 = mongoClientOptions34.getDescription();
        boolean boolean38 = mongoClientOptions34.isAlwaysUseMBeans();
        boolean boolean39 = mongoClientOptions34.isSocketKeepAlive();
        int int40 = mongoClientOptions34.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern41 = mongoClientOptions34.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder42 = builder8.readConcern(readConcern41);
        java.lang.Class<?> wildcardClass43 = builder8.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(codecRegistry36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(readConcern41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test4643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4643");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        boolean boolean25 = mongoClientOptions24.isSocketKeepAlive();
        int int26 = mongoClientOptions24.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions24.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder4.dbEncoderFactory(dBEncoderFactory27);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder4.build();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties30 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str31 = mongoProperties30.getGridFsDatabase();
        java.lang.String str32 = mongoProperties30.getGridFsDatabase();
        java.lang.String str33 = mongoProperties30.getUsername();
        java.lang.String str34 = mongoProperties30.getAuthenticationDatabase();
        java.lang.String str35 = mongoProperties30.getMongoClientDatabase();
        java.lang.String str36 = mongoProperties30.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties30.createMongoClient(mongoClientOptions37, environment38);
        java.lang.String str40 = mongoProperties30.getGridFsDatabase();
        mongoProperties30.setDatabase("test");
        boolean boolean43 = mongoClientOptions29.equals((java.lang.Object) mongoProperties30);
        com.mongodb.MongoClientOptions.Builder builder44 = com.mongodb.MongoClientOptions.builder(mongoClientOptions29);
        boolean boolean45 = mongoClientOptions29.isSocketKeepAlive();
        int int46 = mongoClientOptions29.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "test" + "'", str35, "test");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 32 + "'", int46 == 32);
    }

    @Test
    public void test4644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4644");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) -1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.minHeartbeatFrequency((int) 'a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4645");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        char[] charArray11 = new char[] { 'a', '4', ' ', '#', 'a' };
        mongoProperties0.setPassword(charArray11);
        java.lang.String str13 = mongoProperties0.getDatabase();
        java.lang.String str14 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray15 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a4 #a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a4 #a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, 4,  , #, a]");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a4 #a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a4 #a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, 4,  , #, a]");
    }

    @Test
    public void test4646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4646");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions13.getWriteConcern();
        com.mongodb.ReadConcern readConcern17 = mongoClientOptions13.getReadConcern();
        boolean boolean18 = mongoClientOptions13.isCursorFinalizerEnabled();
        int int19 = mongoClientOptions13.getLocalThreshold();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.connectTimeout((int) (byte) 1);
        boolean boolean33 = mongoClientOptions13.equals((java.lang.Object) builder28);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertNotNull(readConcern17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 15 + "'", int19 == 15);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test4647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4647");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str10 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions20, environment21);
        boolean boolean23 = mongoClientOptions20.isSslEnabled();
        com.mongodb.ReadConcern readConcern24 = mongoClientOptions20.getReadConcern();
        int int25 = mongoClientOptions20.getServerSelectionTimeout();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList26 = mongoClientOptions20.getCommandListeners();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(readConcern24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 30000 + "'", int25 == 30000);
        org.junit.Assert.assertNotNull(commandListenerList26);
    }

    @Test
    public void test4648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4648");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUsername("hi!");
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.clearPassword();
        java.lang.String str8 = mongoProperties0.getUri();
        mongoProperties0.setUri("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str12 = mongoProperties11.getGridFsDatabase();
        java.lang.String str13 = mongoProperties11.getGridFsDatabase();
        java.lang.String str14 = mongoProperties11.getUsername();
        mongoProperties11.setHost("hi!");
        mongoProperties11.setGridFsDatabase("hi!");
        char[] charArray20 = new char[] { '#' };
        mongoProperties11.setPassword(charArray20);
        mongoProperties11.clearPassword();
        java.lang.String str23 = mongoProperties11.getMongoClientDatabase();
        java.lang.String str24 = mongoProperties11.getGridFsDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties25 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str26 = mongoProperties25.getGridFsDatabase();
        java.lang.String str27 = mongoProperties25.getGridFsDatabase();
        java.lang.String str28 = mongoProperties25.getUsername();
        java.lang.String str29 = mongoProperties25.getAuthenticationDatabase();
        java.lang.String str30 = mongoProperties25.getMongoClientDatabase();
        java.lang.String str31 = mongoProperties25.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions32 = null;
        org.springframework.core.env.Environment environment33 = null;
        com.mongodb.MongoClient mongoClient34 = mongoProperties25.createMongoClient(mongoClientOptions32, environment33);
        mongoProperties25.setAuthenticationDatabase("test");
        java.lang.String str37 = mongoProperties25.getAuthenticationDatabase();
        java.lang.String str38 = mongoProperties25.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties39 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str40 = mongoProperties39.getGridFsDatabase();
        java.lang.String str41 = mongoProperties39.getGridFsDatabase();
        java.lang.String str42 = mongoProperties39.getUsername();
        mongoProperties39.setHost("hi!");
        mongoProperties39.setGridFsDatabase("hi!");
        char[] charArray48 = new char[] { '#' };
        mongoProperties39.setPassword(charArray48);
        mongoProperties39.setHost("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties52 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str53 = mongoProperties52.getGridFsDatabase();
        java.lang.String str54 = mongoProperties52.getGridFsDatabase();
        mongoProperties52.setPort((java.lang.Integer) 0);
        java.lang.String str57 = mongoProperties52.getGridFsDatabase();
        mongoProperties52.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties59 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str60 = mongoProperties59.getGridFsDatabase();
        java.lang.String str61 = mongoProperties59.getGridFsDatabase();
        java.lang.String str62 = mongoProperties59.getUsername();
        java.lang.String str63 = mongoProperties59.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass64 = mongoProperties59.getFieldNamingStrategy();
        char[] charArray69 = new char[] { 'a', '#', '#', '4' };
        mongoProperties59.setPassword(charArray69);
        mongoProperties52.setPassword(charArray69);
        mongoProperties39.setPassword(charArray69);
        mongoProperties25.setPassword(charArray69);
        mongoProperties11.setPassword(charArray69);
        mongoProperties0.setPassword(charArray69);
        java.lang.String str76 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "test" + "'", str6, "test");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "test" + "'", str23, "test");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "test" + "'", str30, "test");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(mongoClient34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "test" + "'", str37, "test");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "mongodb://localhost/test" + "'", str38, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[#]");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(wildcardClass64);
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[a, #, #, 4]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "test" + "'", str76, "test");
    }

    @Test
    public void test4649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4649");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions13.getCommandListeners();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions13.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxWaitTime((int) (byte) 10);
        boolean boolean27 = mongoClientOptions13.equals((java.lang.Object) builder24);
        int int28 = mongoClientOptions13.getMaxConnectionLifeTime();
        boolean boolean29 = mongoClientOptions13.isSocketKeepAlive();
        boolean boolean30 = mongoClientOptions13.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test4650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4650");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getSocketTimeout();
        java.lang.String str17 = mongoClientOptions13.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions13.getDbEncoderFactory();
        boolean boolean19 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions13.getDbDecoderFactory();
        int int21 = mongoClientOptions13.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions13.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(readPreference22);
    }

    @Test
    public void test4651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4651");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder8.build();
        int int12 = mongoClientOptions11.getConnectionsPerHost();
        int int13 = mongoClientOptions11.getHeartbeatConnectTimeout();
        int int14 = mongoClientOptions11.getSocketTimeout();
        boolean boolean15 = mongoClientOptions11.isSslInvalidHostNameAllowed();
        int int16 = mongoClientOptions11.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory17 = mongoClientOptions11.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions11.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory17);
        org.junit.Assert.assertNotNull(readPreference18);
    }

    @Test
    public void test4652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4652");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getRequiredReplicaSetName();
        int int16 = mongoClientOptions13.getConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry17 = mongoClientOptions13.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        int int36 = mongoClientOptions35.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory37 = mongoClientOptions35.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder38 = builder27.dbDecoderFactory(dBDecoderFactory37);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.maxConnectionIdleTime(120000);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.minConnectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder49 = builder45.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions56 = builder55.build();
        int int57 = mongoClientOptions56.getHeartbeatSocketTimeout();
        java.lang.String str58 = mongoClientOptions56.getRequiredReplicaSetName();
        java.lang.String str59 = mongoClientOptions56.getRequiredReplicaSetName();
        int int60 = mongoClientOptions56.getHeartbeatFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory61 = mongoClientOptions56.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder62 = builder42.dbEncoderFactory(dBEncoderFactory61);
        com.mongodb.MongoClientOptions.Builder builder63 = builder18.dbEncoderFactory(dBEncoderFactory61);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(codecRegistry17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoClientOptions56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dBEncoderFactory61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test4653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4653");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionIdleTime();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean10 = mongoClientOptions7.isAlwaysUseMBeans();
        int int11 = mongoClientOptions7.getMinHeartbeatFrequency();
        int int12 = mongoClientOptions7.getServerSelectionTimeout();
        int int13 = mongoClientOptions7.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 30000 + "'", int12 == 30000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 120000 + "'", int13 == 120000);
    }

    @Test
    public void test4654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4654");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder23.localThreshold((int) '#');
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions43 = builder42.build();
        int int44 = mongoClientOptions43.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory45 = mongoClientOptions43.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder46 = builder23.socketFactory(socketFactory45);
        com.mongodb.MongoClientOptions.Builder builder47 = builder12.socketFactory(socketFactory45);
        com.mongodb.MongoClientOptions.Builder builder49 = builder12.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.requiredReplicaSetName("test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoClientOptions43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(socketFactory45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test4655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4655");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.maxConnectionLifeTime((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test4656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4656");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        int int16 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean17 = mongoClientOptions13.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str19 = mongoProperties18.getGridFsDatabase();
        java.lang.String str20 = mongoProperties18.getGridFsDatabase();
        java.lang.String str21 = mongoProperties18.getUsername();
        mongoProperties18.setHost("hi!");
        mongoProperties18.setGridFsDatabase("hi!");
        boolean boolean26 = mongoClientOptions13.equals((java.lang.Object) mongoProperties18);
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions13.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder40.build();
        int int42 = mongoClientOptions41.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory43 = mongoClientOptions41.getSocketFactory();
        boolean boolean44 = mongoClientOptions41.isSslInvalidHostNameAllowed();
        com.mongodb.ReadPreference readPreference45 = mongoClientOptions41.getReadPreference();
        boolean boolean46 = mongoClientOptions13.equals((java.lang.Object) readPreference45);
        org.bson.codecs.configuration.CodecRegistry codecRegistry47 = mongoClientOptions13.getCodecRegistry();
        com.mongodb.WriteConcern writeConcern48 = mongoClientOptions13.getWriteConcern();
        boolean boolean49 = mongoClientOptions13.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(socketFactory43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(readPreference45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(codecRegistry47);
        org.junit.Assert.assertNotNull(writeConcern48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test4657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4657");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder29.description("");
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.serverSelectionTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder47 = builder46.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder49 = builder46.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder56 = builder52.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder58 = builder52.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder59 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder65 = builder61.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions72 = builder71.build();
        boolean boolean73 = mongoClientOptions72.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory74 = mongoClientOptions72.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder75 = builder52.dbEncoderFactory(dBEncoderFactory74);
        com.mongodb.MongoClientOptions.Builder builder76 = builder49.dbEncoderFactory(dBEncoderFactory74);
        com.mongodb.MongoClientOptions.Builder builder77 = builder39.dbEncoderFactory(dBEncoderFactory74);
        com.mongodb.MongoClientOptions.Builder builder78 = builder14.dbEncoderFactory(dBEncoderFactory74);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder80 = builder78.minHeartbeatFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: minHeartbeatFrequency must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(mongoClientOptions72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test4658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4658");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.clearPassword();
        char[] charArray4 = mongoProperties0.getPassword();
        mongoProperties0.setPort((java.lang.Integer) 15);
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(charArray4);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test4659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4659");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int10 = mongoClientOptions7.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry11 = mongoClientOptions7.getCodecRegistry();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        int int13 = mongoClientOptions7.getHeartbeatFrequency();
        int int14 = mongoClientOptions7.getConnectionsPerHost();
        int int15 = mongoClientOptions7.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder16 = com.mongodb.MongoClientOptions.builder(mongoClientOptions7);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(codecRegistry11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4660");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUsername("hi!");
        mongoProperties0.setPort((java.lang.Integer) 10);
        java.lang.String str8 = mongoProperties0.getDatabase();
        mongoProperties0.setDatabase("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setHost("");
        java.lang.String str14 = mongoProperties11.getGridFsDatabase();
        mongoProperties11.setUsername("hi!");
        java.lang.String str17 = mongoProperties11.getMongoClientDatabase();
        java.lang.String str18 = mongoProperties11.getMongoClientDatabase();
        char[] charArray25 = new char[] { ' ', '4', '4', 'a', '#', 'a' };
        mongoProperties11.setPassword(charArray25);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties27 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str28 = mongoProperties27.getGridFsDatabase();
        java.lang.String str29 = mongoProperties27.getGridFsDatabase();
        java.lang.String str30 = mongoProperties27.getUsername();
        mongoProperties27.setHost("hi!");
        mongoProperties27.setGridFsDatabase("hi!");
        java.lang.Integer int35 = mongoProperties27.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties36 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str37 = mongoProperties36.getGridFsDatabase();
        java.lang.String str38 = mongoProperties36.getHost();
        java.lang.String str39 = mongoProperties36.getGridFsDatabase();
        java.lang.String str40 = mongoProperties36.getMongoClientDatabase();
        java.lang.String str41 = mongoProperties36.getHost();
        java.lang.String str42 = mongoProperties36.getDatabase();
        java.lang.String str43 = mongoProperties36.getHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties44 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str45 = mongoProperties44.getGridFsDatabase();
        java.lang.String str46 = mongoProperties44.getGridFsDatabase();
        java.lang.String str47 = mongoProperties44.getUsername();
        java.lang.String str48 = mongoProperties44.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass49 = mongoProperties44.getFieldNamingStrategy();
        char[] charArray54 = new char[] { 'a', '#', '#', '4' };
        mongoProperties44.setPassword(charArray54);
        mongoProperties36.setPassword(charArray54);
        mongoProperties27.setPassword(charArray54);
        mongoProperties11.setPassword(charArray54);
        char[] charArray59 = mongoProperties11.getPassword();
        mongoProperties0.setPassword(charArray59);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "test" + "'", str17, "test");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "test" + "'", str18, "test");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " 44a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " 44a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , 4, 4, a, #, a]");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "test" + "'", str40, "test");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(wildcardClass49);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[a, #, #, 4]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[a, #, #, 4]");
    }

    @Test
    public void test4661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4661");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean17 = mongoClientOptions13.isCursorFinalizerEnabled();
        boolean boolean18 = mongoClientOptions13.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test4662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4662");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions7.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern9 = mongoClientOptions7.getWriteConcern();
        int int10 = mongoClientOptions7.getSocketTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions7.getDbDecoderFactory();
        int int12 = mongoClientOptions7.getMinConnectionsPerHost();
        int int13 = mongoClientOptions7.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNotNull(writeConcern9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
    }

    @Test
    public void test4663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4663");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder13 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder37.build();
        int int39 = mongoClientOptions38.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory40 = mongoClientOptions38.getSocketFactory();
        int int41 = mongoClientOptions38.getMaxWaitTime();
        boolean boolean42 = mongoClientOptions38.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties43 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str44 = mongoProperties43.getGridFsDatabase();
        java.lang.String str45 = mongoProperties43.getGridFsDatabase();
        java.lang.String str46 = mongoProperties43.getUsername();
        mongoProperties43.setHost("hi!");
        mongoProperties43.setGridFsDatabase("hi!");
        boolean boolean51 = mongoClientOptions38.equals((java.lang.Object) mongoProperties43);
        boolean boolean52 = mongoClientOptions38.isSslInvalidHostNameAllowed();
        com.mongodb.ReadConcern readConcern53 = mongoClientOptions38.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder54 = builder22.readConcern(readConcern53);
        com.mongodb.MongoClientOptions.Builder builder55 = builder10.readConcern(readConcern53);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.maxWaitTime(5);
        com.mongodb.MongoClientOptions.Builder builder59 = builder55.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder61 = builder55.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(socketFactory40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 120000 + "'", int41 == 120000);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(readConcern53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test4664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4664");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getConnectTimeout();
        int int10 = mongoClientOptions7.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionLifeTime(1);
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        com.mongodb.MongoClientOptions.Builder builder28 = com.mongodb.MongoClientOptions.builder(mongoClientOptions27);
        org.bson.codecs.configuration.CodecRegistry codecRegistry29 = mongoClientOptions27.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder30 = builder11.codecRegistry(codecRegistry29);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.connectTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder30.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.description("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(codecRegistry29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test4665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4665");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.threadsAllowedToBlockForConnectionMultiplier(10000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.threadsAllowedToBlockForConnectionMultiplier((int) '4');
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.threadsAllowedToBlockForConnectionMultiplier(20000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test4666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4666");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        boolean boolean15 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions13.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
    }

    @Test
    public void test4667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4667");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int10 = mongoClientOptions7.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry11 = mongoClientOptions7.getCodecRegistry();
        java.lang.String str12 = mongoClientOptions7.getRequiredReplicaSetName();
        javax.net.SocketFactory socketFactory13 = mongoClientOptions7.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        boolean boolean26 = mongoClientOptions7.equals((java.lang.Object) builder22);
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(codecRegistry11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(socketFactory13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test4668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4668");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        java.lang.String str16 = mongoClientOptions13.getDescription();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        boolean boolean18 = mongoClientOptions13.isSocketKeepAlive();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        int int20 = mongoClientOptions13.getServerSelectionTimeout();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList21 = mongoClientOptions13.getCommandListeners();
        com.mongodb.DBEncoderFactory dBEncoderFactory22 = mongoClientOptions13.getDbEncoderFactory();
        int int23 = mongoClientOptions13.getServerSelectionTimeout();
        int int24 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(commandListenerList21);
        org.junit.Assert.assertNotNull(dBEncoderFactory22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
    }

    @Test
    public void test4669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4669");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        boolean boolean25 = mongoClientOptions24.isSocketKeepAlive();
        int int26 = mongoClientOptions24.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions24.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder4.dbEncoderFactory(dBEncoderFactory27);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder4.build();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties30 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str31 = mongoProperties30.getGridFsDatabase();
        java.lang.String str32 = mongoProperties30.getGridFsDatabase();
        java.lang.String str33 = mongoProperties30.getUsername();
        java.lang.String str34 = mongoProperties30.getAuthenticationDatabase();
        java.lang.String str35 = mongoProperties30.getMongoClientDatabase();
        java.lang.String str36 = mongoProperties30.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties30.createMongoClient(mongoClientOptions37, environment38);
        java.lang.String str40 = mongoProperties30.getGridFsDatabase();
        mongoProperties30.setDatabase("test");
        boolean boolean43 = mongoClientOptions29.equals((java.lang.Object) mongoProperties30);
        com.mongodb.DBDecoderFactory dBDecoderFactory44 = mongoClientOptions29.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder45 = com.mongodb.MongoClientOptions.builder(mongoClientOptions29);
        com.mongodb.MongoClientOptions.Builder builder46 = builder45.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "test" + "'", str35, "test");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test4670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4670");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.connectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.minConnectionsPerHost(500);
        com.mongodb.MongoClientOptions.Builder builder22 = builder16.description("test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test4671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4671");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.WriteConcern writeConcern14 = mongoClientOptions13.getWriteConcern();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(writeConcern14);
        org.junit.Assert.assertNotNull(socketFactory15);
    }

    @Test
    public void test4672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4672");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        boolean boolean25 = mongoClientOptions24.isSocketKeepAlive();
        int int26 = mongoClientOptions24.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions24.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder4.dbEncoderFactory(dBEncoderFactory27);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder4.build();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties30 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str31 = mongoProperties30.getGridFsDatabase();
        java.lang.String str32 = mongoProperties30.getGridFsDatabase();
        java.lang.String str33 = mongoProperties30.getUsername();
        java.lang.String str34 = mongoProperties30.getAuthenticationDatabase();
        java.lang.String str35 = mongoProperties30.getMongoClientDatabase();
        java.lang.String str36 = mongoProperties30.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties30.createMongoClient(mongoClientOptions37, environment38);
        java.lang.String str40 = mongoProperties30.getGridFsDatabase();
        mongoProperties30.setDatabase("test");
        boolean boolean43 = mongoClientOptions29.equals((java.lang.Object) mongoProperties30);
        com.mongodb.ReadPreference readPreference44 = mongoClientOptions29.getReadPreference();
        boolean boolean45 = mongoClientOptions29.isSslInvalidHostNameAllowed();
        int int46 = mongoClientOptions29.getMinHeartbeatFrequency();
        int int47 = mongoClientOptions29.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "test" + "'", str35, "test");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(readPreference44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 500 + "'", int46 == 500);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
    }

    @Test
    public void test4673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4673");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions13.getCommandListeners();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions13.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxWaitTime((int) (byte) 10);
        boolean boolean27 = mongoClientOptions13.equals((java.lang.Object) builder24);
        int int28 = mongoClientOptions13.getMaxConnectionIdleTime();
        int int29 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.DBEncoderFactory dBEncoderFactory30 = mongoClientOptions13.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference31 = mongoClientOptions13.getReadPreference();
        boolean boolean32 = mongoClientOptions13.isAlwaysUseMBeans();
        int int33 = mongoClientOptions13.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertNotNull(dBEncoderFactory30);
        org.junit.Assert.assertNotNull(readPreference31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 15 + "'", int33 == 15);
    }

    @Test
    public void test4674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4674");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.connectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatSocketTimeout((int) (short) -1);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        boolean boolean36 = mongoClientOptions35.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory37 = mongoClientOptions35.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList38 = mongoClientOptions35.getCommandListeners();
        com.mongodb.ReadPreference readPreference39 = mongoClientOptions35.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder40 = builder21.readPreference(readPreference39);
        com.mongodb.MongoClientOptions.Builder builder41 = builder6.readPreference(readPreference39);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.socketKeepAlive(true);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder43.build();
        int int45 = mongoClientOptions44.getSocketTimeout();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList46 = mongoClientOptions44.getCommandListeners();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory37);
        org.junit.Assert.assertNotNull(commandListenerList38);
        org.junit.Assert.assertNotNull(readPreference39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(commandListenerList46);
    }

    @Test
    public void test4675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4675");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.minHeartbeatFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.localThreshold((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        int int31 = mongoClientOptions30.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory32 = mongoClientOptions30.getSocketFactory();
        int int33 = mongoClientOptions30.getMaxWaitTime();
        boolean boolean34 = mongoClientOptions30.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str36 = mongoProperties35.getGridFsDatabase();
        java.lang.String str37 = mongoProperties35.getGridFsDatabase();
        java.lang.String str38 = mongoProperties35.getUsername();
        mongoProperties35.setHost("hi!");
        mongoProperties35.setGridFsDatabase("hi!");
        boolean boolean43 = mongoClientOptions30.equals((java.lang.Object) mongoProperties35);
        com.mongodb.ReadPreference readPreference44 = mongoClientOptions30.getReadPreference();
        boolean boolean45 = mongoClientOptions30.isSslEnabled();
        javax.net.SocketFactory socketFactory46 = mongoClientOptions30.getSocketFactory();
        boolean boolean47 = mongoClientOptions30.isSslEnabled();
        boolean boolean48 = mongoClientOptions30.isSslInvalidHostNameAllowed();
        int int49 = mongoClientOptions30.getLocalThreshold();
        org.bson.codecs.configuration.CodecRegistry codecRegistry50 = mongoClientOptions30.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder51 = builder16.codecRegistry(codecRegistry50);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(socketFactory32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 120000 + "'", int33 == 120000);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(readPreference44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(socketFactory46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 15 + "'", int49 == 15);
        org.junit.Assert.assertNotNull(codecRegistry50);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test4676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4676");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getRequiredReplicaSetName();
        int int16 = mongoClientOptions13.getMinConnectionsPerHost();
        int int17 = mongoClientOptions13.getMaxWaitTime();
        int int18 = mongoClientOptions13.getHeartbeatConnectTimeout();
        boolean boolean19 = mongoClientOptions13.isCursorFinalizerEnabled();
        int int20 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 120000 + "'", int17 == 120000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test4677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4677");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = builder7.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder15 = builder7.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder28.build();
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder(mongoClientOptions29);
        java.lang.String str31 = mongoClientOptions29.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry32 = mongoClientOptions29.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder33 = builder7.codecRegistry(codecRegistry32);
        com.mongodb.MongoClientOptions.Builder builder35 = builder7.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.serverSelectionTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder46.build();
        int int48 = mongoClientOptions47.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory49 = mongoClientOptions47.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder50 = builder37.dbDecoderFactory(dBDecoderFactory49);
        com.mongodb.MongoClientOptions.Builder builder51 = builder6.dbDecoderFactory(dBDecoderFactory49);
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder58 = builder54.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions65 = builder64.build();
        com.mongodb.MongoClientOptions.Builder builder66 = com.mongodb.MongoClientOptions.builder(mongoClientOptions65);
        java.lang.String str67 = mongoClientOptions65.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry68 = mongoClientOptions65.getCodecRegistry();
        javax.net.SocketFactory socketFactory69 = mongoClientOptions65.getSocketFactory();
        int int70 = mongoClientOptions65.getHeartbeatSocketTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory71 = mongoClientOptions65.getDbDecoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory72 = mongoClientOptions65.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder73 = builder6.dbEncoderFactory(dBEncoderFactory72);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(mongoClientOptions47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(mongoClientOptions65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry68);
        org.junit.Assert.assertNotNull(socketFactory69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(dBDecoderFactory71);
        org.junit.Assert.assertNotNull(dBEncoderFactory72);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test4678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4678");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions15.getCommandListeners();
        com.mongodb.DBEncoderFactory dBEncoderFactory17 = mongoClientOptions15.getDbEncoderFactory();
        int int18 = mongoClientOptions15.getConnectTimeout();
        boolean boolean19 = mongoClientOptions15.isSocketKeepAlive();
        com.mongodb.WriteConcern writeConcern20 = mongoClientOptions15.getWriteConcern();
        int int21 = mongoClientOptions15.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertNotNull(dBEncoderFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(writeConcern20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 15 + "'", int21 == 15);
    }

    @Test
    public void test4679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4679");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean17 = mongoClientOptions13.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        int int19 = mongoClientOptions13.getMaxWaitTime();
        int int20 = mongoClientOptions13.getMaxConnectionLifeTime();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList21 = mongoClientOptions13.getCommandListeners();
        boolean boolean22 = mongoClientOptions13.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(commandListenerList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test4680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4680");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.connectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatSocketTimeout((int) (short) -1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxWaitTime(30000);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        com.mongodb.MongoClientOptions.Builder builder30 = builder27.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder43.build();
        int int45 = mongoClientOptions44.getHeartbeatSocketTimeout();
        java.lang.String str46 = mongoClientOptions44.getRequiredReplicaSetName();
        java.lang.String str47 = mongoClientOptions44.getRequiredReplicaSetName();
        int int48 = mongoClientOptions44.getHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern49 = mongoClientOptions44.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder50 = builder27.writeConcern(writeConcern49);
        com.mongodb.MongoClientOptions.Builder builder51 = builder12.writeConcern(writeConcern49);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.maxWaitTime((int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(writeConcern49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test4681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4681");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        java.lang.String str16 = mongoClientOptions13.getDescription();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        java.lang.String str18 = mongoClientOptions13.getRequiredReplicaSetName();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        boolean boolean20 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.ReadPreference readPreference21 = mongoClientOptions13.getReadPreference();
        int int22 = mongoClientOptions13.getConnectTimeout();
        int int23 = mongoClientOptions13.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(readPreference21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 15 + "'", int23 == 15);
    }

    @Test
    public void test4682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4682");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        boolean boolean33 = mongoClientOptions32.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory34 = mongoClientOptions32.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder12.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder36 = builder9.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder38 = builder9.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder43 = builder42.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test4683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4683");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minConnectionsPerHost((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.sslInvalidHostNameAllowed(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test4684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4684");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        boolean boolean16 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        java.lang.String str17 = mongoClientOptions13.getDescription();
        java.lang.String str18 = mongoClientOptions13.getRequiredReplicaSetName();
        java.lang.String str19 = mongoClientOptions13.getRequiredReplicaSetName();
        int int20 = mongoClientOptions13.getMinHeartbeatFrequency();
        int int21 = mongoClientOptions13.getServerSelectionTimeout();
        int int22 = mongoClientOptions13.getConnectionsPerHost();
        int int23 = mongoClientOptions13.getMaxConnectionLifeTime();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList24 = mongoClientOptions13.getCommandListeners();
        int int25 = mongoClientOptions13.getMaxConnectionLifeTime();
        int int26 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int27 = mongoClientOptions13.getConnectionsPerHost();
        int int28 = mongoClientOptions13.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(commandListenerList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test4685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4685");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder(mongoClientOptions20);
        int int22 = mongoClientOptions20.getHeartbeatConnectTimeout();
        int int23 = mongoClientOptions20.getThreadsAllowedToBlockForConnectionMultiplier();
        int int24 = mongoClientOptions20.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean25 = mongoClientOptions20.isSslInvalidHostNameAllowed();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions20.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder27 = builder4.socketFactory(socketFactory26);
        com.mongodb.MongoClientOptions.Builder builder29 = builder4.heartbeatSocketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder30.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.localThreshold(100);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.serverSelectionTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder39 = builder33.minHeartbeatFrequency(500);
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder46.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory48 = mongoClientOptions47.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern49 = mongoClientOptions47.getWriteConcern();
        int int50 = mongoClientOptions47.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern51 = mongoClientOptions47.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder52 = builder39.writeConcern(writeConcern51);
        com.mongodb.MongoClientOptions mongoClientOptions53 = builder39.build();
        com.mongodb.ReadPreference readPreference54 = mongoClientOptions53.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder55 = builder4.readPreference(readPreference54);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(mongoClientOptions47);
        org.junit.Assert.assertNotNull(dBEncoderFactory48);
        org.junit.Assert.assertNotNull(writeConcern49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(writeConcern51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(mongoClientOptions53);
        org.junit.Assert.assertNotNull(readPreference54);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test4686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4686");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int10 = mongoClientOptions7.getConnectionsPerHost();
        int int11 = mongoClientOptions7.getSocketTimeout();
        int int12 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions7.getDbEncoderFactory();
        boolean boolean14 = mongoClientOptions7.isSslEnabled();
        int int15 = mongoClientOptions7.getHeartbeatFrequency();
        int int16 = mongoClientOptions7.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test4687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4687");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionIdleTime();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean10 = mongoClientOptions7.isSocketKeepAlive();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions7.getDbDecoderFactory();
        int int12 = mongoClientOptions7.getMaxConnectionIdleTime();
        com.mongodb.WriteConcern writeConcern13 = mongoClientOptions7.getWriteConcern();
        int int14 = mongoClientOptions7.getMinConnectionsPerHost();
        int int15 = mongoClientOptions7.getLocalThreshold();
        int int16 = mongoClientOptions7.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(writeConcern13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 15 + "'", int15 == 15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 500 + "'", int16 == 500);
    }

    @Test
    public void test4688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4688");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        boolean boolean25 = mongoClientOptions24.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory26 = mongoClientOptions24.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList27 = mongoClientOptions24.getCommandListeners();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions24.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder29 = builder10.readPreference(readPreference28);
        com.mongodb.MongoClientOptions.Builder builder31 = builder10.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder10.socketKeepAlive(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder35 = builder10.heartbeatFrequency((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: heartbeatFrequency must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory26);
        org.junit.Assert.assertNotNull(commandListenerList27);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test4689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4689");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionLifeTime(32);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4690");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str7 = mongoProperties0.getDatabase();
        java.lang.String str8 = mongoProperties0.getUri();
        char[] charArray9 = mongoProperties0.getPassword();
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str12 = mongoProperties0.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass13 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "test" + "'", str10, "test");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(wildcardClass13);
    }

    @Test
    public void test4691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4691");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getSocketTimeout();
        boolean boolean17 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions13.getWriteConcern();
        int int19 = mongoClientOptions13.getSocketTimeout();
        boolean boolean20 = mongoClientOptions13.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test4692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4692");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getSocketTimeout();
        java.lang.String str17 = mongoClientOptions13.getDescription();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.cursorFinalizerEnabled(false);
        boolean boolean37 = mongoClientOptions13.equals((java.lang.Object) builder36);
        com.mongodb.MongoClientOptions.Builder builder38 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder38.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.localThreshold(100);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder61 = builder57.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions68 = builder67.build();
        int int69 = mongoClientOptions68.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory70 = mongoClientOptions68.getSocketFactory();
        int int71 = mongoClientOptions68.getMaxWaitTime();
        boolean boolean72 = mongoClientOptions68.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties73 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str74 = mongoProperties73.getGridFsDatabase();
        java.lang.String str75 = mongoProperties73.getGridFsDatabase();
        java.lang.String str76 = mongoProperties73.getUsername();
        mongoProperties73.setHost("hi!");
        mongoProperties73.setGridFsDatabase("hi!");
        boolean boolean81 = mongoClientOptions68.equals((java.lang.Object) mongoProperties73);
        com.mongodb.ReadPreference readPreference82 = mongoClientOptions68.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder83 = builder54.readPreference(readPreference82);
        com.mongodb.MongoClientOptions.Builder builder84 = builder41.readPreference(readPreference82);
        com.mongodb.MongoClientOptions.Builder builder85 = builder36.readPreference(readPreference82);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(mongoClientOptions68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(socketFactory70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 120000 + "'", int71 == 120000);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(readPreference82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test4693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4693");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        boolean boolean16 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        java.lang.String str17 = mongoClientOptions13.getDescription();
        java.lang.String str18 = mongoClientOptions13.getRequiredReplicaSetName();
        java.lang.String str19 = mongoClientOptions13.getRequiredReplicaSetName();
        int int20 = mongoClientOptions13.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        com.mongodb.event.CommandListener commandListener22 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder23 = builder21.addCommandListener(commandListener22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
    }

    @Test
    public void test4694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4694");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getHeartbeatSocketTimeout();
        java.lang.String str20 = mongoClientOptions18.getRequiredReplicaSetName();
        java.lang.String str21 = mongoClientOptions18.getRequiredReplicaSetName();
        int int22 = mongoClientOptions18.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions18, environment23);
        java.lang.String str25 = mongoClientOptions18.getRequiredReplicaSetName();
        int int26 = mongoClientOptions18.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder27 = com.mongodb.MongoClientOptions.builder(mongoClientOptions18);
        java.lang.String str28 = mongoClientOptions18.getDescription();
        com.mongodb.MongoClientOptions.Builder builder29 = com.mongodb.MongoClientOptions.builder(mongoClientOptions18);
        int int30 = mongoClientOptions18.getConnectTimeout();
        com.mongodb.ReadConcern readConcern31 = mongoClientOptions18.getReadConcern();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "test" + "'", str4, "test");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10000 + "'", int30 == 10000);
        org.junit.Assert.assertNotNull(readConcern31);
    }

    @Test
    public void test4695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4695");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        boolean boolean25 = mongoClientOptions24.isSocketKeepAlive();
        int int26 = mongoClientOptions24.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions24.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder4.dbEncoderFactory(dBEncoderFactory27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder4.socketTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.connectionsPerHost(30000);
        com.mongodb.MongoClientOptions.Builder builder33 = builder32.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test4696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4696");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setPort((java.lang.Integer) 100);
        mongoProperties0.setPort((java.lang.Integer) (-1));
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test4697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4697");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getConnectTimeout();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        boolean boolean11 = mongoClientOptions7.isSslEnabled();
        int int12 = mongoClientOptions7.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test4698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4698");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setHost("hi!");
        char[] charArray10 = mongoProperties0.getPassword();
        mongoProperties0.setGridFsDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList29 = mongoClientOptions28.getCommandListeners();
        boolean boolean30 = mongoClientOptions28.isSslInvalidHostNameAllowed();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties0.createMongoClient(mongoClientOptions28, environment31);
        java.lang.String str33 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(charArray10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(commandListenerList29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test4699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4699");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getUsername();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.serverSelectionTimeout(0);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        org.springframework.core.env.Environment environment19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties0.createMongoClient(mongoClientOptions18, environment19);
        mongoProperties0.setUsername("");
        java.lang.Integer int23 = mongoProperties0.getPort();
        java.lang.Class<?> wildcardClass24 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str25 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test4700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4700");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUsername("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties6 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str7 = mongoProperties6.getGridFsDatabase();
        java.lang.String str8 = mongoProperties6.getGridFsDatabase();
        mongoProperties6.setPort((java.lang.Integer) 0);
        java.lang.String str11 = mongoProperties6.getGridFsDatabase();
        mongoProperties6.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str14 = mongoProperties13.getAuthenticationDatabase();
        mongoProperties13.setAuthenticationDatabase("hi!");
        java.lang.String str17 = mongoProperties13.getHost();
        java.lang.String str18 = mongoProperties13.getMongoClientDatabase();
        char[] charArray19 = mongoProperties13.getPassword();
        char[] charArray20 = mongoProperties13.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str22 = mongoProperties21.getGridFsDatabase();
        java.lang.String str23 = mongoProperties21.getGridFsDatabase();
        java.lang.String str24 = mongoProperties21.getUsername();
        java.lang.String str25 = mongoProperties21.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass26 = mongoProperties21.getFieldNamingStrategy();
        char[] charArray31 = new char[] { 'a', '#', '#', '4' };
        mongoProperties21.setPassword(charArray31);
        mongoProperties13.setPassword(charArray31);
        mongoProperties6.setPassword(charArray31);
        mongoProperties0.setPassword(charArray31);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder48.build();
        com.mongodb.MongoClientOptions.Builder builder50 = com.mongodb.MongoClientOptions.builder(mongoClientOptions49);
        java.lang.String str51 = mongoClientOptions49.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry52 = mongoClientOptions49.getCodecRegistry();
        com.mongodb.ReadPreference readPreference53 = mongoClientOptions49.getReadPreference();
        boolean boolean54 = mongoClientOptions49.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment55 = null;
        com.mongodb.MongoClient mongoClient56 = mongoProperties0.createMongoClient(mongoClientOptions49, environment55);
        com.mongodb.DBEncoderFactory dBEncoderFactory57 = mongoClientOptions49.getDbEncoderFactory();
        int int58 = mongoClientOptions49.getServerSelectionTimeout();
        int int59 = mongoClientOptions49.getServerSelectionTimeout();
        int int60 = mongoClientOptions49.getConnectionsPerHost();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "test" + "'", str18, "test");
        org.junit.Assert.assertNull(charArray19);
        org.junit.Assert.assertNull(charArray20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry52);
        org.junit.Assert.assertNotNull(readPreference53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(mongoClient56);
        org.junit.Assert.assertNotNull(dBEncoderFactory57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
    }

    @Test
    public void test4701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4701");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getRequiredReplicaSetName();
        int int16 = mongoClientOptions13.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        int int18 = mongoClientOptions13.getMaxWaitTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry19 = mongoClientOptions13.getCodecRegistry();
        int int20 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int21 = mongoClientOptions13.getLocalThreshold();
        boolean boolean22 = mongoClientOptions13.isAlwaysUseMBeans();
        com.mongodb.DBEncoderFactory dBEncoderFactory23 = mongoClientOptions13.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120000 + "'", int18 == 120000);
        org.junit.Assert.assertNotNull(codecRegistry19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 15 + "'", int21 == 15);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory23);
    }

    @Test
    public void test4702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4702");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        mongoProperties0.setPort((java.lang.Integer) 0);
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str6 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str7 = mongoProperties0.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str9 = mongoProperties8.getGridFsDatabase();
        java.lang.String str10 = mongoProperties8.getGridFsDatabase();
        mongoProperties8.clearPassword();
        java.lang.Class<?> wildcardClass12 = mongoProperties8.getFieldNamingStrategy();
        java.lang.Integer int13 = mongoProperties8.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str15 = mongoProperties14.getGridFsDatabase();
        java.lang.String str16 = mongoProperties14.getHost();
        java.lang.String str17 = mongoProperties14.getGridFsDatabase();
        java.lang.String str18 = mongoProperties14.getMongoClientDatabase();
        java.lang.String str19 = mongoProperties14.getHost();
        java.lang.String str20 = mongoProperties14.getDatabase();
        java.lang.String str21 = mongoProperties14.getHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties22 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str23 = mongoProperties22.getGridFsDatabase();
        java.lang.String str24 = mongoProperties22.getGridFsDatabase();
        java.lang.String str25 = mongoProperties22.getUsername();
        java.lang.String str26 = mongoProperties22.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass27 = mongoProperties22.getFieldNamingStrategy();
        char[] charArray32 = new char[] { 'a', '#', '#', '4' };
        mongoProperties22.setPassword(charArray32);
        mongoProperties14.setPassword(charArray32);
        mongoProperties8.setPassword(charArray32);
        mongoProperties0.setPassword(charArray32);
        java.lang.String str37 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "test" + "'", str18, "test");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[a, #, #, 4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test4703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4703");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions13.getSocketFactory();
        boolean boolean18 = mongoClientOptions13.isAlwaysUseMBeans();
        boolean boolean19 = mongoClientOptions13.isSocketKeepAlive();
        int int20 = mongoClientOptions13.getSocketTimeout();
        boolean boolean21 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        boolean boolean22 = mongoClientOptions13.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test4704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4704");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setGridFsDatabase("hi!");
        char[] charArray8 = mongoProperties0.getPassword();
        mongoProperties0.setDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(charArray8);
    }

    @Test
    public void test4705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4705");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatFrequency(27017);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.build();
        boolean boolean12 = mongoClientOptions11.isAlwaysUseMBeans();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions11.getDbEncoderFactory();
        java.lang.Class<?> wildcardClass14 = dBEncoderFactory13.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test4706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4706");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getSocketTimeout();
        boolean boolean17 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions13.getWriteConcern();
        int int19 = mongoClientOptions13.getSocketTimeout();
        javax.net.SocketFactory socketFactory20 = mongoClientOptions13.getSocketFactory();
        com.mongodb.WriteConcern writeConcern21 = mongoClientOptions13.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(socketFactory20);
        org.junit.Assert.assertNotNull(writeConcern21);
    }

    @Test
    public void test4707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4707");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions13.getCommandListeners();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions13.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxWaitTime((int) (byte) 10);
        boolean boolean27 = mongoClientOptions13.equals((java.lang.Object) builder24);
        boolean boolean28 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList29 = mongoClientOptions13.getCommandListeners();
        org.bson.codecs.configuration.CodecRegistry codecRegistry30 = mongoClientOptions13.getCodecRegistry();
        boolean boolean31 = mongoClientOptions13.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(commandListenerList29);
        org.junit.Assert.assertNotNull(codecRegistry30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test4708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4708");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions13.getWriteConcern();
        com.mongodb.ReadConcern readConcern17 = mongoClientOptions13.getReadConcern();
        boolean boolean18 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        int int19 = mongoClientOptions13.getHeartbeatSocketTimeout();
        int int20 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int21 = mongoClientOptions13.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertNotNull(readConcern17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test4709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4709");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str4 = mongoProperties0.getHost();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str7 = mongoProperties0.getUri();
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass8);
    }

    @Test
    public void test4710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4710");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getSocketTimeout();
        int int16 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern17 = mongoClientOptions13.getReadConcern();
        int int18 = mongoClientOptions13.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions13.getConnectTimeout();
        boolean boolean20 = mongoClientOptions13.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(readConcern17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test4711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4711");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minHeartbeatFrequency(32);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        com.mongodb.MongoClientOptions.Builder builder36 = com.mongodb.MongoClientOptions.builder(mongoClientOptions35);
        java.lang.String str37 = mongoClientOptions35.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry38 = mongoClientOptions35.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder39 = builder17.codecRegistry(codecRegistry38);
        com.mongodb.MongoClientOptions.Builder builder41 = builder17.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.description("test");
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder46 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions53 = builder52.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory54 = mongoClientOptions53.getDbEncoderFactory();
        com.mongodb.ReadConcern readConcern55 = mongoClientOptions53.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder56 = builder43.readConcern(readConcern55);
        com.mongodb.MongoClientOptions.Builder builder57 = builder8.readConcern(readConcern55);
        com.mongodb.MongoClientOptions.Builder builder59 = builder8.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder60 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder66 = builder62.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions73 = builder72.build();
        int int74 = mongoClientOptions73.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory75 = mongoClientOptions73.getSocketFactory();
        int int76 = mongoClientOptions73.getMaxWaitTime();
        boolean boolean77 = mongoClientOptions73.isSocketKeepAlive();
        int int78 = mongoClientOptions73.getThreadsAllowedToBlockForConnectionMultiplier();
        int int79 = mongoClientOptions73.getMinHeartbeatFrequency();
        java.lang.String str80 = mongoClientOptions73.getDescription();
        javax.net.SocketFactory socketFactory81 = mongoClientOptions73.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder82 = builder59.socketFactory(socketFactory81);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(mongoClientOptions53);
        org.junit.Assert.assertNotNull(dBEncoderFactory54);
        org.junit.Assert.assertNotNull(readConcern55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(mongoClientOptions73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(socketFactory75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 120000 + "'", int76 == 120000);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 5 + "'", int78 == 5);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 500 + "'", int79 == 500);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertNotNull(socketFactory81);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test4712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4712");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder(mongoClientOptions20);
        java.lang.String str22 = mongoClientOptions20.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry23 = mongoClientOptions20.getCodecRegistry();
        javax.net.SocketFactory socketFactory24 = mongoClientOptions20.getSocketFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions20.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder6.dbDecoderFactory(dBDecoderFactory25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.serverSelectionTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.minHeartbeatFrequency(15);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry23);
        org.junit.Assert.assertNotNull(socketFactory24);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test4713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4713");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.threadsAllowedToBlockForConnectionMultiplier(10000);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        com.mongodb.MongoClientOptions.Builder builder31 = com.mongodb.MongoClientOptions.builder(mongoClientOptions30);
        int int32 = mongoClientOptions30.getHeartbeatConnectTimeout();
        int int33 = mongoClientOptions30.getThreadsAllowedToBlockForConnectionMultiplier();
        int int34 = mongoClientOptions30.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern35 = mongoClientOptions30.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder36 = builder16.writeConcern(writeConcern35);
        com.mongodb.MongoClientOptions.Builder builder38 = builder16.localThreshold((int) '4');
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.maxWaitTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.threadsAllowedToBlockForConnectionMultiplier(120000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20000 + "'", int32 == 20000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNotNull(writeConcern35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test4714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4714");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionLifeTime(20000);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxWaitTime(500);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.localThreshold(100);
        com.mongodb.MongoClientOptions.Builder builder26 = builder20.sslEnabled(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test4715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4715");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.localThreshold((int) '#');
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        boolean boolean29 = mongoClientOptions28.isSocketKeepAlive();
        int int30 = mongoClientOptions28.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions28);
        boolean boolean32 = mongoClientOptions28.isSslInvalidHostNameAllowed();
        int int33 = mongoClientOptions28.getServerSelectionTimeout();
        int int34 = mongoClientOptions28.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory35 = mongoClientOptions28.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder36 = builder20.dbDecoderFactory(dBDecoderFactory35);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.maxWaitTime(30000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10000 + "'", int30 == 10000);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 30000 + "'", int33 == 30000);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 120000 + "'", int34 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test4716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4716");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getGridFsDatabase();
        java.lang.String str11 = mongoProperties0.getHost();
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str14 = mongoProperties0.getHost();
        java.lang.String str15 = mongoProperties0.getHost();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setDatabase("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test4717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4717");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        java.lang.String str16 = mongoClientOptions13.getDescription();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test4718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4718");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        mongoProperties0.setAuthenticationDatabase("test");
        java.lang.String str12 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str13 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str15 = mongoProperties14.getGridFsDatabase();
        java.lang.String str16 = mongoProperties14.getGridFsDatabase();
        java.lang.String str17 = mongoProperties14.getUsername();
        mongoProperties14.setHost("hi!");
        mongoProperties14.setGridFsDatabase("hi!");
        java.lang.Integer int22 = mongoProperties14.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str24 = mongoProperties23.getGridFsDatabase();
        java.lang.String str25 = mongoProperties23.getHost();
        java.lang.String str26 = mongoProperties23.getGridFsDatabase();
        java.lang.String str27 = mongoProperties23.getMongoClientDatabase();
        java.lang.String str28 = mongoProperties23.getHost();
        java.lang.String str29 = mongoProperties23.getDatabase();
        java.lang.String str30 = mongoProperties23.getHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties31 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str32 = mongoProperties31.getGridFsDatabase();
        java.lang.String str33 = mongoProperties31.getGridFsDatabase();
        java.lang.String str34 = mongoProperties31.getUsername();
        java.lang.String str35 = mongoProperties31.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass36 = mongoProperties31.getFieldNamingStrategy();
        char[] charArray41 = new char[] { 'a', '#', '#', '4' };
        mongoProperties31.setPassword(charArray41);
        mongoProperties23.setPassword(charArray41);
        mongoProperties14.setPassword(charArray41);
        mongoProperties0.setPassword(charArray41);
        java.lang.Class<?> wildcardClass46 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str47 = mongoProperties0.getGridFsDatabase();
        char[] charArray48 = mongoProperties0.getPassword();
        mongoProperties0.setGridFsDatabase("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "test" + "'", str12, "test");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "test" + "'", str13, "test");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "test" + "'", str27, "test");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a, #, #, 4]");
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[a, #, #, 4]");
    }

    @Test
    public void test4719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4719");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.maxWaitTime(20000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test4720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4720");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int10 = mongoClientOptions7.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry11 = mongoClientOptions7.getCodecRegistry();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        int int13 = mongoClientOptions7.getHeartbeatFrequency();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList14 = mongoClientOptions7.getCommandListeners();
        int int15 = mongoClientOptions7.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        boolean boolean17 = mongoClientOptions7.isCursorFinalizerEnabled();
        com.mongodb.ReadConcern readConcern18 = mongoClientOptions7.getReadConcern();
        int int19 = mongoClientOptions7.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(codecRegistry11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertNotNull(commandListenerList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(readConcern18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
    }

    @Test
    public void test4721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4721");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int10 = mongoClientOptions7.getConnectionsPerHost();
        int int11 = mongoClientOptions7.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.serverSelectionTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder22 = builder12.maxConnectionLifeTime((int) (short) 1);
        boolean boolean23 = mongoClientOptions7.equals((java.lang.Object) builder22);
        int int24 = mongoClientOptions7.getConnectionsPerHost();
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions7.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
    }

    @Test
    public void test4722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4722");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.serverSelectionTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.socketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        boolean boolean23 = mongoClientOptions22.isSocketKeepAlive();
        int int24 = mongoClientOptions22.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions22.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder8.dbEncoderFactory(dBEncoderFactory25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.cursorFinalizerEnabled(false);
        com.mongodb.event.CommandListener commandListener29 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder30 = builder26.addCommandListener(commandListener29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 120000 + "'", int24 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test4723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4723");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        boolean boolean17 = mongoClientOptions16.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions16.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList19 = mongoClientOptions16.getCommandListeners();
        int int20 = mongoClientOptions16.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry21 = mongoClientOptions16.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions16);
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions16, environment23);
        mongoProperties0.setHost("hi!");
        char[] charArray27 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertNotNull(commandListenerList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(codecRegistry21);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNull(charArray27);
    }

    @Test
    public void test4724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4724");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        boolean boolean25 = mongoClientOptions24.isSocketKeepAlive();
        int int26 = mongoClientOptions24.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions24.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder4.dbEncoderFactory(dBEncoderFactory27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder4.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder32 = builder4.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder45.build();
        int int47 = mongoClientOptions46.getHeartbeatSocketTimeout();
        boolean boolean48 = mongoClientOptions46.isAlwaysUseMBeans();
        int int49 = mongoClientOptions46.getMaxConnectionLifeTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry50 = mongoClientOptions46.getCodecRegistry();
        int int51 = mongoClientOptions46.getMinConnectionsPerHost();
        com.mongodb.ReadConcern readConcern52 = mongoClientOptions46.getReadConcern();
        com.mongodb.WriteConcern writeConcern53 = mongoClientOptions46.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder54 = builder4.writeConcern(writeConcern53);
        com.mongodb.MongoClientOptions.Builder builder56 = builder4.connectTimeout(30000);
        com.mongodb.event.CommandListener commandListener57 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder58 = builder56.addCommandListener(commandListener57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(codecRegistry50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(readConcern52);
        org.junit.Assert.assertNotNull(writeConcern53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test4725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4725");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        boolean boolean37 = mongoClientOptions36.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory38 = mongoClientOptions36.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList39 = mongoClientOptions36.getCommandListeners();
        com.mongodb.ReadPreference readPreference40 = mongoClientOptions36.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder41 = builder22.readPreference(readPreference40);
        com.mongodb.MongoClientOptions.Builder builder42 = builder11.readPreference(readPreference40);
        com.mongodb.MongoClientOptions.Builder builder43 = builder6.readPreference(readPreference40);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory38);
        org.junit.Assert.assertNotNull(commandListenerList39);
        org.junit.Assert.assertNotNull(readPreference40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test4726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4726");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getHeartbeatSocketTimeout();
        java.lang.String str20 = mongoClientOptions18.getRequiredReplicaSetName();
        java.lang.String str21 = mongoClientOptions18.getRequiredReplicaSetName();
        int int22 = mongoClientOptions18.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions18, environment23);
        java.lang.String str25 = mongoClientOptions18.getRequiredReplicaSetName();
        int int26 = mongoClientOptions18.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder27 = com.mongodb.MongoClientOptions.builder(mongoClientOptions18);
        java.lang.String str28 = mongoClientOptions18.getDescription();
        com.mongodb.MongoClientOptions.Builder builder29 = com.mongodb.MongoClientOptions.builder(mongoClientOptions18);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatConnectTimeout(1);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "test" + "'", str4, "test");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test4727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4727");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionLifeTime(10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.localThreshold((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (short) -1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test4728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4728");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.localThreshold((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.description("test");
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        int int33 = mongoClientOptions32.getHeartbeatSocketTimeout();
        java.lang.String str34 = mongoClientOptions32.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern35 = mongoClientOptions32.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder36 = builder18.writeConcern(writeConcern35);
        com.mongodb.MongoClientOptions.Builder builder38 = builder18.minHeartbeatFrequency(27017);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(writeConcern35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test4729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4729");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int17 = mongoClientOptions13.getLocalThreshold();
        int int18 = mongoClientOptions13.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        int int33 = mongoClientOptions32.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory34 = mongoClientOptions32.getSocketFactory();
        com.mongodb.WriteConcern writeConcern35 = mongoClientOptions32.getWriteConcern();
        int int36 = mongoClientOptions32.getMaxConnectionLifeTime();
        boolean boolean37 = mongoClientOptions13.equals((java.lang.Object) mongoClientOptions32);
        com.mongodb.DBEncoderFactory dBEncoderFactory38 = mongoClientOptions32.getDbEncoderFactory();
        int int39 = mongoClientOptions32.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 15 + "'", int17 == 15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(socketFactory34);
        org.junit.Assert.assertNotNull(writeConcern35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test4730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4730");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        boolean boolean21 = mongoClientOptions20.isSocketKeepAlive();
        int int22 = mongoClientOptions20.getConnectTimeout();
        java.lang.String str23 = mongoClientOptions20.getDescription();
        boolean boolean24 = mongoClientOptions20.isAlwaysUseMBeans();
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions20.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder12.dbDecoderFactory(dBDecoderFactory25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder12.localThreshold(1);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        boolean boolean37 = mongoClientOptions36.isSocketKeepAlive();
        int int38 = mongoClientOptions36.getThreadsAllowedToBlockForConnectionMultiplier();
        int int39 = mongoClientOptions36.getConnectionsPerHost();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList40 = mongoClientOptions36.getCommandListeners();
        int int41 = mongoClientOptions36.getMinHeartbeatFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory42 = mongoClientOptions36.getDbEncoderFactory();
        javax.net.SocketFactory socketFactory43 = mongoClientOptions36.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder44 = builder12.socketFactory(socketFactory43);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "test" + "'", str23, "test");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertNotNull(commandListenerList40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 500 + "'", int41 == 500);
        org.junit.Assert.assertNotNull(dBEncoderFactory42);
        org.junit.Assert.assertNotNull(socketFactory43);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test4731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4731");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        mongoProperties0.clearPassword();
        mongoProperties0.clearPassword();
        mongoProperties0.setPort((java.lang.Integer) 120000);
        java.lang.String str7 = mongoProperties0.getUsername();
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test4732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4732");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getUsername();
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(wildcardClass6);
    }

    @Test
    public void test4733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4733");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str10 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions20, environment21);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str24 = mongoProperties23.getGridFsDatabase();
        java.lang.String str25 = mongoProperties23.getHost();
        java.lang.String str26 = mongoProperties23.getGridFsDatabase();
        java.lang.String str27 = mongoProperties23.getMongoClientDatabase();
        char[] charArray28 = mongoProperties23.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties29 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str30 = mongoProperties29.getGridFsDatabase();
        java.lang.String str31 = mongoProperties29.getGridFsDatabase();
        java.lang.String str32 = mongoProperties29.getUsername();
        java.lang.String str33 = mongoProperties29.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass34 = mongoProperties29.getFieldNamingStrategy();
        char[] charArray39 = new char[] { 'a', '#', '#', '4' };
        mongoProperties29.setPassword(charArray39);
        mongoProperties23.setPassword(charArray39);
        mongoProperties0.setPassword(charArray39);
        mongoProperties0.setPort((java.lang.Integer) 20000);
        mongoProperties0.setHost("hi!");
        java.lang.String str47 = mongoProperties0.getUsername();
        java.lang.String str48 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "test" + "'", str27, "test");
        org.junit.Assert.assertNull(charArray28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[a, #, #, 4]");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test4734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4734");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions13.getWriteConcern();
        int int17 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test4735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4735");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.String str5 = mongoProperties0.getHost();
        char[] charArray6 = mongoProperties0.getPassword();
        mongoProperties0.setUri("test");
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.setHost("test");
        java.lang.Class<?> wildcardClass13 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertNull(wildcardClass13);
    }

    @Test
    public void test4736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4736");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionIdleTime();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean10 = mongoClientOptions7.isAlwaysUseMBeans();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        com.mongodb.MongoClientOptions.Builder builder26 = com.mongodb.MongoClientOptions.builder(mongoClientOptions25);
        int int27 = mongoClientOptions25.getHeartbeatConnectTimeout();
        int int28 = mongoClientOptions25.getThreadsAllowedToBlockForConnectionMultiplier();
        int int29 = mongoClientOptions25.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean30 = mongoClientOptions25.isSslInvalidHostNameAllowed();
        com.mongodb.ReadConcern readConcern31 = mongoClientOptions25.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.minHeartbeatFrequency(20000);
        boolean boolean51 = mongoClientOptions25.equals((java.lang.Object) 20000);
        boolean boolean52 = mongoClientOptions7.equals((java.lang.Object) mongoClientOptions25);
        com.mongodb.MongoClientOptions.Builder builder53 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions25);
        int int54 = mongoClientOptions25.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(readConcern31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test4737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4737");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(5);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        com.mongodb.MongoClientOptions.Builder builder40 = com.mongodb.MongoClientOptions.builder(mongoClientOptions39);
        java.lang.String str41 = mongoClientOptions39.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry42 = mongoClientOptions39.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder43 = builder21.codecRegistry(codecRegistry42);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder46 = builder45.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder47 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder55 = builder51.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder59 = builder55.serverSelectionTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder61 = builder55.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder63 = builder55.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder64 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder74 = builder70.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder75 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder77 = builder75.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder79 = builder77.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder81 = builder77.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder83 = builder81.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder85 = builder83.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder87 = builder85.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions88 = builder87.build();
        com.mongodb.MongoClientOptions.Builder builder89 = com.mongodb.MongoClientOptions.builder(mongoClientOptions88);
        java.lang.String str90 = mongoClientOptions88.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry91 = mongoClientOptions88.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder92 = builder70.codecRegistry(codecRegistry91);
        com.mongodb.MongoClientOptions.Builder builder93 = builder63.codecRegistry(codecRegistry91);
        com.mongodb.MongoClientOptions.Builder builder94 = builder45.codecRegistry(codecRegistry91);
        com.mongodb.MongoClientOptions.Builder builder95 = builder14.codecRegistry(codecRegistry91);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(mongoClientOptions88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "hi!" + "'", str90, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test4738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4738");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        int int16 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean17 = mongoClientOptions13.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str19 = mongoProperties18.getGridFsDatabase();
        java.lang.String str20 = mongoProperties18.getGridFsDatabase();
        java.lang.String str21 = mongoProperties18.getUsername();
        mongoProperties18.setHost("hi!");
        mongoProperties18.setGridFsDatabase("hi!");
        boolean boolean26 = mongoClientOptions13.equals((java.lang.Object) mongoProperties18);
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions13.getReadPreference();
        boolean boolean28 = mongoClientOptions13.isSslEnabled();
        javax.net.SocketFactory socketFactory29 = mongoClientOptions13.getSocketFactory();
        java.lang.String str30 = mongoClientOptions13.getDescription();
        int int31 = mongoClientOptions13.getServerSelectionTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(socketFactory29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test4739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4739");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder14.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder16.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder48.build();
        com.mongodb.MongoClientOptions.Builder builder50 = com.mongodb.MongoClientOptions.builder(mongoClientOptions49);
        java.lang.String str51 = mongoClientOptions49.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry52 = mongoClientOptions49.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder53 = builder31.codecRegistry(codecRegistry52);
        com.mongodb.MongoClientOptions.Builder builder54 = builder22.codecRegistry(codecRegistry52);
        com.mongodb.MongoClientOptions.Builder builder55 = builder15.codecRegistry(codecRegistry52);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.sslEnabled(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test4740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4740");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray4 = mongoProperties0.getPassword();
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        java.lang.Integer int6 = mongoProperties0.getPort();
        char[] charArray7 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(charArray4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test4741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4741");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.description("");
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        int int36 = mongoClientOptions35.getMaxConnectionIdleTime();
        boolean boolean37 = mongoClientOptions35.isSocketKeepAlive();
        boolean boolean38 = mongoClientOptions35.isSocketKeepAlive();
        com.mongodb.WriteConcern writeConcern39 = mongoClientOptions35.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder40 = builder21.writeConcern(writeConcern39);
        com.mongodb.MongoClientOptions.Builder builder41 = builder10.writeConcern(writeConcern39);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.serverSelectionTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.maxConnectionLifeTime((-1));
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.requiredReplicaSetName("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(writeConcern39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test4742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4742");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str5 = mongoProperties0.getUri();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str8 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb://localhost/test" + "'", str5, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test4743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4743");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getRequiredReplicaSetName();
        int int16 = mongoClientOptions13.getConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory17 = mongoClientOptions13.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList18 = mongoClientOptions13.getCommandListeners();
        int int19 = mongoClientOptions13.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(dBEncoderFactory17);
        org.junit.Assert.assertNotNull(commandListenerList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test4744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4744");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        boolean boolean16 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        java.lang.String str17 = mongoClientOptions13.getDescription();
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test4745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4745");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((-1));
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.maxWaitTime((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test4746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4746");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        boolean boolean25 = mongoClientOptions24.isSocketKeepAlive();
        int int26 = mongoClientOptions24.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions24.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder4.dbEncoderFactory(dBEncoderFactory27);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder4.build();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties30 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str31 = mongoProperties30.getGridFsDatabase();
        java.lang.String str32 = mongoProperties30.getGridFsDatabase();
        java.lang.String str33 = mongoProperties30.getUsername();
        java.lang.String str34 = mongoProperties30.getAuthenticationDatabase();
        java.lang.String str35 = mongoProperties30.getMongoClientDatabase();
        java.lang.String str36 = mongoProperties30.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties30.createMongoClient(mongoClientOptions37, environment38);
        java.lang.String str40 = mongoProperties30.getGridFsDatabase();
        mongoProperties30.setDatabase("test");
        boolean boolean43 = mongoClientOptions29.equals((java.lang.Object) mongoProperties30);
        com.mongodb.WriteConcern writeConcern44 = mongoClientOptions29.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "test" + "'", str35, "test");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(writeConcern44);
    }

    @Test
    public void test4747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4747");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int10 = mongoClientOptions7.getConnectionsPerHost();
        java.lang.String str11 = mongoClientOptions7.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        int int13 = mongoClientOptions7.getMaxConnectionIdleTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions7.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "test" + "'", str11, "test");
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
    }

    @Test
    public void test4748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4748");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionLifeTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        boolean boolean26 = mongoClientOptions25.isSocketKeepAlive();
        int int27 = mongoClientOptions25.getThreadsAllowedToBlockForConnectionMultiplier();
        int int28 = mongoClientOptions25.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry29 = mongoClientOptions25.getCodecRegistry();
        com.mongodb.DBEncoderFactory dBEncoderFactory30 = mongoClientOptions25.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder31 = builder15.dbEncoderFactory(dBEncoderFactory30);
        com.mongodb.MongoClientOptions.Builder builder32 = builder4.dbEncoderFactory(dBEncoderFactory30);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(codecRegistry29);
        org.junit.Assert.assertNotNull(dBEncoderFactory30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test4749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4749");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        boolean boolean16 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        java.lang.String str17 = mongoClientOptions13.getDescription();
        java.lang.String str18 = mongoClientOptions13.getRequiredReplicaSetName();
        java.lang.String str19 = mongoClientOptions13.getRequiredReplicaSetName();
        int int20 = mongoClientOptions13.getMinHeartbeatFrequency();
        int int21 = mongoClientOptions13.getServerSelectionTimeout();
        int int22 = mongoClientOptions13.getConnectionsPerHost();
        int int23 = mongoClientOptions13.getMaxConnectionLifeTime();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList24 = mongoClientOptions13.getCommandListeners();
        int int25 = mongoClientOptions13.getMaxConnectionLifeTime();
        int int26 = mongoClientOptions13.getServerSelectionTimeout();
        boolean boolean27 = mongoClientOptions13.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder28 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(commandListenerList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test4750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4750");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.description("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test4751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4751");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder8.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test4752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4752");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties16.setHost("");
        java.lang.String str19 = mongoProperties16.getGridFsDatabase();
        mongoProperties16.setUsername("hi!");
        java.lang.String str22 = mongoProperties16.getGridFsDatabase();
        mongoProperties16.setHost("");
        java.lang.String str25 = mongoProperties16.getGridFsDatabase();
        boolean boolean26 = mongoClientOptions13.equals((java.lang.Object) mongoProperties16);
        mongoProperties16.setAuthenticationDatabase("mongodb://localhost/test");
        mongoProperties16.setHost("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test4753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4753");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions20.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder23 = builder2.readPreference(readPreference22);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionIdleTime(30000);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.heartbeatConnectTimeout(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test4754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4754");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        org.bson.codecs.configuration.CodecRegistry codecRegistry10 = mongoClientOptions9.getCodecRegistry();
        boolean boolean11 = mongoClientOptions9.isSslEnabled();
        com.mongodb.DBDecoderFactory dBDecoderFactory12 = mongoClientOptions9.getDbDecoderFactory();
        com.mongodb.ReadConcern readConcern13 = mongoClientOptions9.getReadConcern();
        int int14 = mongoClientOptions9.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertNotNull(codecRegistry10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory12);
        org.junit.Assert.assertNotNull(readConcern13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
    }

    @Test
    public void test4755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4755");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        com.mongodb.MongoClientOptions.Builder builder27 = com.mongodb.MongoClientOptions.builder(mongoClientOptions26);
        java.lang.String str28 = mongoClientOptions26.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry29 = mongoClientOptions26.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder30 = builder8.codecRegistry(codecRegistry29);
        com.mongodb.MongoClientOptions.Builder builder32 = builder8.connectTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.maxConnectionIdleTime(97);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test4756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4756");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int10 = mongoClientOptions7.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry11 = mongoClientOptions7.getCodecRegistry();
        int int12 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int13 = mongoClientOptions7.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(codecRegistry11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
    }

    @Test
    public void test4757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4757");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        boolean boolean33 = mongoClientOptions32.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory34 = mongoClientOptions32.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder12.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder36 = builder9.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder45 = builder41.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder47 = builder41.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder56 = builder52.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder62.build();
        boolean boolean64 = mongoClientOptions63.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory65 = mongoClientOptions63.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList66 = mongoClientOptions63.getCommandListeners();
        com.mongodb.ReadPreference readPreference67 = mongoClientOptions63.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder68 = builder49.readPreference(readPreference67);
        com.mongodb.MongoClientOptions.Builder builder69 = builder9.readPreference(readPreference67);
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.serverSelectionTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder73 = builder69.serverSelectionTimeout(20000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoClientOptions63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory65);
        org.junit.Assert.assertNotNull(commandListenerList66);
        org.junit.Assert.assertNotNull(readPreference67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test4758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4758");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getConnectTimeout();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions7.getDbDecoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory12 = mongoClientOptions7.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference13 = mongoClientOptions7.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertNotNull(dBDecoderFactory12);
        org.junit.Assert.assertNotNull(readPreference13);
    }

    @Test
    public void test4759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4759");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        java.lang.String str16 = mongoClientOptions13.getDescription();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        boolean boolean18 = mongoClientOptions13.isSocketKeepAlive();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern20 = mongoClientOptions13.getReadConcern();
        int int21 = mongoClientOptions13.getServerSelectionTimeout();
        int int22 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory23 = mongoClientOptions13.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(readConcern20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dBDecoderFactory23);
    }

    @Test
    public void test4760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4760");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test4761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4761");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        mongoProperties0.setPort((java.lang.Integer) 0);
        mongoProperties0.setDatabase("test");
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setPort((java.lang.Integer) 1);
        mongoProperties0.setDatabase("");
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str14 = mongoProperties0.getUri();
        java.lang.String str15 = mongoProperties0.getHost();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb://localhost/test" + "'", str14, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test4762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4762");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        int int16 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean17 = mongoClientOptions13.isSocketKeepAlive();
        int int18 = mongoClientOptions13.getServerSelectionTimeout();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList19 = mongoClientOptions13.getCommandListeners();
        int int20 = mongoClientOptions13.getHeartbeatConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions13.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(commandListenerList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
    }

    @Test
    public void test4763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4763");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions13.getCommandListeners();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions13.getReadPreference();
        boolean boolean18 = mongoClientOptions13.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.event.CommandListener commandListener21 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder22 = builder20.addCommandListener(commandListener21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test4764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4764");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int17 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean18 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        com.mongodb.ReadConcern readConcern19 = mongoClientOptions13.getReadConcern();
        java.lang.String str20 = mongoClientOptions13.getDescription();
        boolean boolean21 = mongoClientOptions13.isAlwaysUseMBeans();
        int int22 = mongoClientOptions13.getMinHeartbeatFrequency();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList23 = mongoClientOptions13.getCommandListeners();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(readConcern19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 500 + "'", int22 == 500);
        org.junit.Assert.assertNotNull(commandListenerList23);
    }

    @Test
    public void test4765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4765");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getConnectTimeout();
        int int10 = mongoClientOptions7.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder(mongoClientOptions7);
        int int12 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean13 = mongoClientOptions7.isSslInvalidHostNameAllowed();
        boolean boolean14 = mongoClientOptions7.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder(mongoClientOptions7);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder18 = builder16.threadsAllowedToBlockForConnectionMultiplier((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: threadsAllowedToBlockForConnectionMultiplier must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test4766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4766");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        com.mongodb.MongoClientOptions.Builder builder27 = com.mongodb.MongoClientOptions.builder(mongoClientOptions26);
        java.lang.String str28 = mongoClientOptions26.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry29 = mongoClientOptions26.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder30 = builder8.codecRegistry(codecRegistry29);
        com.mongodb.MongoClientOptions.Builder builder32 = builder8.connectTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.serverSelectionTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder47.build();
        com.mongodb.MongoClientOptions.Builder builder49 = com.mongodb.MongoClientOptions.builder(mongoClientOptions48);
        java.lang.String str50 = mongoClientOptions48.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry51 = mongoClientOptions48.getCodecRegistry();
        javax.net.SocketFactory socketFactory52 = mongoClientOptions48.getSocketFactory();
        boolean boolean53 = mongoClientOptions48.isAlwaysUseMBeans();
        int int54 = mongoClientOptions48.getConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory55 = mongoClientOptions48.getDbEncoderFactory();
        boolean boolean56 = mongoClientOptions48.isCursorFinalizerEnabled();
        org.bson.codecs.configuration.CodecRegistry codecRegistry57 = mongoClientOptions48.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder58 = builder34.codecRegistry(codecRegistry57);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties59 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str60 = mongoProperties59.getGridFsDatabase();
        java.lang.String str61 = mongoProperties59.getGridFsDatabase();
        java.lang.String str62 = mongoProperties59.getUsername();
        mongoProperties59.setHost("hi!");
        mongoProperties59.setGridFsDatabase("hi!");
        mongoProperties59.setGridFsDatabase("test");
        java.lang.String str69 = mongoProperties59.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder70 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder74 = builder70.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder76 = builder70.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder78 = builder76.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions mongoClientOptions79 = builder78.build();
        org.springframework.core.env.Environment environment80 = null;
        com.mongodb.MongoClient mongoClient81 = mongoProperties59.createMongoClient(mongoClientOptions79, environment80);
        boolean boolean82 = mongoClientOptions79.isSslEnabled();
        javax.net.SocketFactory socketFactory83 = mongoClientOptions79.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder84 = builder58.socketFactory(socketFactory83);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry51);
        org.junit.Assert.assertNotNull(socketFactory52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(codecRegistry57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(mongoClientOptions79);
        org.junit.Assert.assertNotNull(mongoClient81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(socketFactory83);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test4767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4767");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder30.build();
        int int32 = mongoClientOptions31.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions31.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory34 = mongoClientOptions31.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder21.socketFactory(socketFactory34);
        com.mongodb.MongoClientOptions.Builder builder36 = builder10.socketFactory(socketFactory34);
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.connectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder49 = builder45.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.description("");
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder56 = builder52.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder57 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder63 = builder59.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions70 = builder69.build();
        int int71 = mongoClientOptions70.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory72 = mongoClientOptions70.getSocketFactory();
        com.mongodb.WriteConcern writeConcern73 = mongoClientOptions70.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder74 = builder52.writeConcern(writeConcern73);
        com.mongodb.MongoClientOptions.Builder builder75 = builder45.writeConcern(writeConcern73);
        com.mongodb.MongoClientOptions.Builder builder76 = builder36.writeConcern(writeConcern73);
        com.mongodb.MongoClientOptions.Builder builder78 = builder36.connectionsPerHost((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder80 = builder36.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(socketFactory34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(mongoClientOptions70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(socketFactory72);
        org.junit.Assert.assertNotNull(writeConcern73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test4768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4768");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        boolean boolean33 = mongoClientOptions32.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory34 = mongoClientOptions32.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder12.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder36 = builder9.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder38 = builder9.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder41 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder42 = builder41.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.localThreshold(100);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.serverSelectionTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder50 = builder44.minHeartbeatFrequency(500);
        com.mongodb.MongoClientOptions.Builder builder51 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder57.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory59 = mongoClientOptions58.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern60 = mongoClientOptions58.getWriteConcern();
        int int61 = mongoClientOptions58.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern62 = mongoClientOptions58.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder63 = builder50.writeConcern(writeConcern62);
        com.mongodb.MongoClientOptions.Builder builder64 = builder38.writeConcern(writeConcern62);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder68 = builder64.sslEnabled(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertNotNull(dBEncoderFactory59);
        org.junit.Assert.assertNotNull(writeConcern60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(writeConcern62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test4769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4769");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        boolean boolean33 = mongoClientOptions32.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory34 = mongoClientOptions32.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder12.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder36 = builder9.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder38 = builder9.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder40 = builder9.minConnectionsPerHost((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder41 = builder9.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder43 = builder9.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.connectTimeout((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder47 = builder43.localThreshold((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: localThreshold must be >= 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test4770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4770");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean17 = mongoClientOptions13.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        int int19 = mongoClientOptions13.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern20 = mongoClientOptions13.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertNotNull(writeConcern20);
    }

    @Test
    public void test4771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4771");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionIdleTime();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean10 = mongoClientOptions7.isSocketKeepAlive();
        int int11 = mongoClientOptions7.getServerSelectionTimeout();
        java.lang.String str12 = mongoClientOptions7.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 30000 + "'", int11 == 30000);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "test" + "'", str12, "test");
    }

    @Test
    public void test4772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4772");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getDatabase();
        java.lang.String str3 = mongoProperties0.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory19 = mongoClientOptions17.getSocketFactory();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions17, environment20);
        int int22 = mongoClientOptions17.getMaxWaitTime();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "test" + "'", str3, "test");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(socketFactory19);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 120000 + "'", int22 == 120000);
    }

    @Test
    public void test4773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4773");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.threadsAllowedToBlockForConnectionMultiplier(10000);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        com.mongodb.MongoClientOptions.Builder builder31 = com.mongodb.MongoClientOptions.builder(mongoClientOptions30);
        int int32 = mongoClientOptions30.getHeartbeatConnectTimeout();
        int int33 = mongoClientOptions30.getThreadsAllowedToBlockForConnectionMultiplier();
        int int34 = mongoClientOptions30.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern35 = mongoClientOptions30.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder36 = builder16.writeConcern(writeConcern35);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.localThreshold(100);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.heartbeatSocketTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder45 = builder44.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.connectTimeout(100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20000 + "'", int32 == 20000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNotNull(writeConcern35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test4774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4774");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.threadsAllowedToBlockForConnectionMultiplier(52);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxConnectionLifeTime(20000);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxWaitTime((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test4775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4775");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.build();
        int int9 = mongoClientOptions8.getMaxConnectionLifeTime();
        int int10 = mongoClientOptions8.getServerSelectionTimeout();
        int int11 = mongoClientOptions8.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 30000 + "'", int10 == 30000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test4776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4776");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        int int15 = mongoClientOptions13.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions13.getDbEncoderFactory();
        int int17 = mongoClientOptions13.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        javax.net.SocketFactory socketFactory19 = mongoClientOptions13.getSocketFactory();
        com.mongodb.WriteConcern writeConcern20 = mongoClientOptions13.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 120000 + "'", int15 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 120000 + "'", int17 == 120000);
        org.junit.Assert.assertNotNull(socketFactory19);
        org.junit.Assert.assertNotNull(writeConcern20);
    }

    @Test
    public void test4777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4777");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUsername("hi!");
        mongoProperties0.setPort((java.lang.Integer) 10);
        mongoProperties0.setPort((java.lang.Integer) 0);
        mongoProperties0.setUri("test");
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test4778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4778");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions13.getSocketFactory();
        boolean boolean18 = mongoClientOptions13.isAlwaysUseMBeans();
        boolean boolean19 = mongoClientOptions13.isSocketKeepAlive();
        boolean boolean20 = mongoClientOptions13.isSslEnabled();
        boolean boolean21 = mongoClientOptions13.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test4779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4779");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxWaitTime(20000);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        int int6 = mongoClientOptions5.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions5.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
    }

    @Test
    public void test4780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4780");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        java.lang.String str4 = mongoProperties0.getMongoClientDatabase();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "test" + "'", str4, "test");
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test4781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4781");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        java.lang.String str2 = mongoProperties0.getHost();
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str5 = mongoProperties0.getUri();
        java.lang.String str6 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb://localhost/test" + "'", str5, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test4782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4782");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.clearPassword();
        mongoProperties0.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions12.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern14 = mongoClientOptions12.getWriteConcern();
        boolean boolean15 = mongoClientOptions12.isSslInvalidHostNameAllowed();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions12.getCommandListeners();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions12, environment17);
        java.lang.String str19 = mongoProperties0.getUsername();
        mongoProperties0.setAuthenticationDatabase("hi!");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertNotNull(writeConcern14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test4783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4783");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder1 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder3 = builder1.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        boolean boolean15 = mongoClientOptions14.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions14.getDbEncoderFactory();
        int int17 = mongoClientOptions14.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern18 = mongoClientOptions14.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder19 = builder0.readConcern(readConcern18);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.minConnectionsPerHost(20000);
        com.mongodb.MongoClientOptions.Builder builder26 = builder23.legacyDefaults();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertNotNull(readConcern18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test4784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4784");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        com.mongodb.DBEncoderFactory dBEncoderFactory17 = mongoClientOptions13.getDbEncoderFactory();
        boolean boolean18 = mongoClientOptions13.isCursorFinalizerEnabled();
        boolean boolean19 = mongoClientOptions13.isAlwaysUseMBeans();
        javax.net.SocketFactory socketFactory20 = mongoClientOptions13.getSocketFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList21 = mongoClientOptions13.getCommandListeners();
        boolean boolean22 = mongoClientOptions13.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(dBEncoderFactory17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(socketFactory20);
        org.junit.Assert.assertNotNull(commandListenerList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test4785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4785");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minConnectionsPerHost((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.maxConnectionIdleTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder40.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory42 = mongoClientOptions41.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern43 = mongoClientOptions41.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder44 = builder33.writeConcern(writeConcern43);
        com.mongodb.MongoClientOptions.Builder builder45 = builder10.writeConcern(writeConcern43);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.connectTimeout(32);
        com.mongodb.MongoClientOptions.Builder builder49 = builder45.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.connectionsPerHost(97);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertNotNull(dBEncoderFactory42);
        org.junit.Assert.assertNotNull(writeConcern43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test4786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4786");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder1.localThreshold(100);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        int int15 = mongoClientOptions13.getConnectTimeout();
        java.lang.String str16 = mongoClientOptions13.getDescription();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions13.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder19 = builder3.dbDecoderFactory(dBDecoderFactory18);
        com.mongodb.MongoClientOptions.Builder builder21 = builder3.serverSelectionTimeout(32);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.connectionsPerHost((int) '#');
        com.mongodb.event.CommandListener commandListener24 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder25 = builder21.addCommandListener(commandListener24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "test" + "'", str16, "test");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test4787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4787");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getSocketTimeout();
        java.lang.String str17 = mongoClientOptions13.getDescription();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.cursorFinalizerEnabled(false);
        boolean boolean37 = mongoClientOptions13.equals((java.lang.Object) builder36);
        com.mongodb.MongoClientOptions.Builder builder39 = builder36.heartbeatConnectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxWaitTime((int) 'a');
        org.bson.codecs.configuration.CodecRegistry codecRegistry42 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder43 = builder39.codecRegistry(codecRegistry42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: codecRegistry can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test4788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4788");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionIdleTime();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean10 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean11 = mongoClientOptions7.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test4789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4789");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions13.getCommandListeners();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions13.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxWaitTime((int) (byte) 10);
        boolean boolean27 = mongoClientOptions13.equals((java.lang.Object) builder24);
        int int28 = mongoClientOptions13.getMaxConnectionIdleTime();
        int int29 = mongoClientOptions13.getMaxConnectionLifeTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory30 = mongoClientOptions13.getDbEncoderFactory();
        int int31 = mongoClientOptions13.getHeartbeatFrequency();
        int int32 = mongoClientOptions13.getMaxWaitTime();
        int int33 = mongoClientOptions13.getMaxConnectionIdleTime();
        boolean boolean34 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 120000 + "'", int32 == 120000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test4790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4790");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        boolean boolean16 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        java.lang.String str17 = mongoClientOptions13.getDescription();
        java.lang.String str18 = mongoClientOptions13.getRequiredReplicaSetName();
        java.lang.String str19 = mongoClientOptions13.getRequiredReplicaSetName();
        int int20 = mongoClientOptions13.getMinHeartbeatFrequency();
        int int21 = mongoClientOptions13.getServerSelectionTimeout();
        int int22 = mongoClientOptions13.getConnectionsPerHost();
        int int23 = mongoClientOptions13.getMaxConnectionLifeTime();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList24 = mongoClientOptions13.getCommandListeners();
        int int25 = mongoClientOptions13.getMaxConnectionLifeTime();
        int int26 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder42 = builder39.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.minConnectionsPerHost(120000);
        boolean boolean45 = mongoClientOptions13.equals((java.lang.Object) builder44);
        com.mongodb.MongoClientOptions.Builder builder47 = builder44.heartbeatConnectTimeout((int) (short) -1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(commandListenerList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test4791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4791");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.localThreshold((int) '#');
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.localThreshold(100);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.serverSelectionTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder30 = builder24.minHeartbeatFrequency(500);
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder37.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory39 = mongoClientOptions38.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern40 = mongoClientOptions38.getWriteConcern();
        int int41 = mongoClientOptions38.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern42 = mongoClientOptions38.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder43 = builder30.writeConcern(writeConcern42);
        com.mongodb.MongoClientOptions.Builder builder44 = builder20.writeConcern(writeConcern42);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.maxWaitTime(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertNotNull(dBEncoderFactory39);
        org.junit.Assert.assertNotNull(writeConcern40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(writeConcern42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test4792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4792");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        int int15 = mongoClientOptions13.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions13.getDbEncoderFactory();
        int int17 = mongoClientOptions13.getMinHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions13.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions13.getDbEncoderFactory();
        int int20 = mongoClientOptions13.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions13.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 120000 + "'", int15 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
    }

    @Test
    public void test4793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4793");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int17 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean18 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        javax.net.SocketFactory socketFactory19 = mongoClientOptions13.getSocketFactory();
        int int20 = mongoClientOptions13.getMinConnectionsPerHost();
        com.mongodb.WriteConcern writeConcern21 = mongoClientOptions13.getWriteConcern();
        int int22 = mongoClientOptions13.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory23 = mongoClientOptions13.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(socketFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(writeConcern21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertNotNull(socketFactory23);
    }

    @Test
    public void test4794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4794");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions13.getWriteConcern();
        com.mongodb.ReadConcern readConcern17 = mongoClientOptions13.getReadConcern();
        boolean boolean18 = mongoClientOptions13.isCursorFinalizerEnabled();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList19 = mongoClientOptions13.getCommandListeners();
        int int20 = mongoClientOptions13.getHeartbeatFrequency();
        int int21 = mongoClientOptions13.getConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions13.getDbDecoderFactory();
        int int23 = mongoClientOptions13.getSocketTimeout();
        boolean boolean24 = mongoClientOptions13.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertNotNull(readConcern17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(commandListenerList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test4795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4795");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        boolean boolean16 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        java.lang.String str17 = mongoClientOptions13.getDescription();
        java.lang.String str18 = mongoClientOptions13.getRequiredReplicaSetName();
        int int19 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int20 = mongoClientOptions13.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        javax.net.SocketFactory socketFactory22 = mongoClientOptions13.getSocketFactory();
        boolean boolean23 = mongoClientOptions13.isAlwaysUseMBeans();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions13.getReadPreference();
        com.mongodb.ReadPreference readPreference25 = mongoClientOptions13.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 120000 + "'", int20 == 120000);
        org.junit.Assert.assertNotNull(socketFactory22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertNotNull(readPreference25);
    }

    @Test
    public void test4796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4796");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        com.mongodb.MongoClientOptions.Builder builder29 = com.mongodb.MongoClientOptions.builder(mongoClientOptions28);
        java.lang.String str30 = mongoClientOptions28.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry31 = mongoClientOptions28.getCodecRegistry();
        javax.net.SocketFactory socketFactory32 = mongoClientOptions28.getSocketFactory();
        boolean boolean33 = mongoClientOptions28.isAlwaysUseMBeans();
        int int34 = mongoClientOptions28.getConnectionsPerHost();
        javax.net.SocketFactory socketFactory35 = mongoClientOptions28.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder36 = builder10.socketFactory(socketFactory35);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.connectTimeout((int) (short) 1);
        com.mongodb.event.CommandListener commandListener45 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder46 = builder42.addCommandListener(commandListener45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry31);
        org.junit.Assert.assertNotNull(socketFactory32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertNotNull(socketFactory35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test4797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4797");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getGridFsDatabase();
        java.lang.String str11 = mongoProperties0.getHost();
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.setHost("hi!");
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test4798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4798");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getDatabase();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str5 = mongoProperties0.getUri();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        boolean boolean20 = mongoClientOptions19.isSocketKeepAlive();
        int int21 = mongoClientOptions19.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory22 = mongoClientOptions19.getDbEncoderFactory();
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions19, environment23);
        java.lang.String str25 = mongoProperties0.getGridFsDatabase();
        java.lang.String str26 = mongoProperties0.getDatabase();
        mongoProperties0.clearPassword();
        char[] charArray28 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb://localhost/test" + "'", str5, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 120000 + "'", int21 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory22);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(charArray28);
    }

    @Test
    public void test4799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4799");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.localThreshold(52);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder32.build();
        int int34 = mongoClientOptions33.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory35 = mongoClientOptions33.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder36 = builder19.socketFactory(socketFactory35);
        com.mongodb.MongoClientOptions.Builder builder37 = builder2.socketFactory(socketFactory35);
        com.mongodb.MongoClientOptions.Builder builder39 = builder2.socketTimeout(15);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(socketFactory35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test4800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4800");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.clearPassword();
        mongoProperties0.setDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test4801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4801");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.minConnectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.serverSelectionTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.socketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        boolean boolean36 = mongoClientOptions35.isSocketKeepAlive();
        int int37 = mongoClientOptions35.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory38 = mongoClientOptions35.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder39 = builder21.dbEncoderFactory(dBEncoderFactory38);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions57 = builder56.build();
        int int58 = mongoClientOptions57.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference59 = mongoClientOptions57.getReadPreference();
        int int60 = mongoClientOptions57.getMinConnectionsPerHost();
        boolean boolean61 = mongoClientOptions57.isSslInvalidHostNameAllowed();
        com.mongodb.DBDecoderFactory dBDecoderFactory62 = mongoClientOptions57.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder63 = builder41.dbDecoderFactory(dBDecoderFactory62);
        com.mongodb.MongoClientOptions.Builder builder64 = builder12.dbDecoderFactory(dBDecoderFactory62);
        com.mongodb.MongoClientOptions.Builder builder65 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder71 = builder67.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder77 = builder75.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions78 = builder77.build();
        com.mongodb.MongoClientOptions.Builder builder79 = com.mongodb.MongoClientOptions.builder(mongoClientOptions78);
        java.lang.String str80 = mongoClientOptions78.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry81 = mongoClientOptions78.getCodecRegistry();
        int int82 = mongoClientOptions78.getConnectTimeout();
        int int83 = mongoClientOptions78.getServerSelectionTimeout();
        boolean boolean84 = mongoClientOptions78.isAlwaysUseMBeans();
        int int85 = mongoClientOptions78.getServerSelectionTimeout();
        com.mongodb.ReadConcern readConcern86 = mongoClientOptions78.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder87 = builder12.readConcern(readConcern86);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 120000 + "'", int37 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mongoClientOptions57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(readPreference59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(mongoClientOptions78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10000 + "'", int82 == 10000);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(readConcern86);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test4802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4802");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test4803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4803");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.serverSelectionTimeout(0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getConnectionsPerHost();
        int int15 = mongoClientOptions13.getConnectionsPerHost();
        int int16 = mongoClientOptions13.getMinHeartbeatFrequency();
        int int17 = mongoClientOptions13.getMaxWaitTime();
        int int18 = mongoClientOptions13.getMinHeartbeatFrequency();
        int int19 = mongoClientOptions13.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions13.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 500 + "'", int16 == 500);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 120000 + "'", int17 == 120000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 500 + "'", int18 == 500);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
    }

    @Test
    public void test4804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4804");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder20.localThreshold((int) '#');
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder39.build();
        int int41 = mongoClientOptions40.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory42 = mongoClientOptions40.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder43 = builder20.socketFactory(socketFactory42);
        com.mongodb.MongoClientOptions.Builder builder44 = builder8.socketFactory(socketFactory42);
        com.mongodb.MongoClientOptions.Builder builder46 = builder8.socketTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder48 = builder8.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder50 = builder8.description("");
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.serverSelectionTimeout((int) 'a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(socketFactory42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test4805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4805");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test4806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4806");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        boolean boolean15 = mongoClientOptions13.isAlwaysUseMBeans();
        int int16 = mongoClientOptions13.getMaxConnectionLifeTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry17 = mongoClientOptions13.getCodecRegistry();
        int int18 = mongoClientOptions13.getMinConnectionsPerHost();
        com.mongodb.ReadConcern readConcern19 = mongoClientOptions13.getReadConcern();
        com.mongodb.WriteConcern writeConcern20 = mongoClientOptions13.getWriteConcern();
        java.lang.Object obj21 = null;
        boolean boolean22 = mongoClientOptions13.equals(obj21);
        javax.net.SocketFactory socketFactory23 = mongoClientOptions13.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(codecRegistry17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(readConcern19);
        org.junit.Assert.assertNotNull(writeConcern20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(socketFactory23);
    }

    @Test
    public void test4807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4807");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions20.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder23 = builder2.readPreference(readPreference22);
        com.mongodb.MongoClientOptions.Builder builder25 = builder2.localThreshold(100);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions43 = builder42.build();
        int int44 = mongoClientOptions43.getHeartbeatSocketTimeout();
        java.lang.String str45 = mongoClientOptions43.getRequiredReplicaSetName();
        java.lang.String str46 = mongoClientOptions43.getRequiredReplicaSetName();
        int int47 = mongoClientOptions43.getHeartbeatFrequency();
        int int48 = mongoClientOptions43.getLocalThreshold();
        int int49 = mongoClientOptions43.getMaxWaitTime();
        com.mongodb.ReadConcern readConcern50 = mongoClientOptions43.getReadConcern();
        int int51 = mongoClientOptions43.getServerSelectionTimeout();
        javax.net.SocketFactory socketFactory52 = mongoClientOptions43.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder53 = builder25.socketFactory(socketFactory52);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.description("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoClientOptions43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 15 + "'", int48 == 15);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 120000 + "'", int49 == 120000);
        org.junit.Assert.assertNotNull(readConcern50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(socketFactory52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test4808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4808");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions13.getSocketFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions13.getDbDecoderFactory();
        boolean boolean19 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        com.mongodb.MongoClientOptions.Builder builder20 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test4809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4809");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        int int16 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean17 = mongoClientOptions13.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str19 = mongoProperties18.getGridFsDatabase();
        java.lang.String str20 = mongoProperties18.getGridFsDatabase();
        java.lang.String str21 = mongoProperties18.getUsername();
        mongoProperties18.setHost("hi!");
        mongoProperties18.setGridFsDatabase("hi!");
        boolean boolean26 = mongoClientOptions13.equals((java.lang.Object) mongoProperties18);
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions13.getReadPreference();
        boolean boolean28 = mongoClientOptions13.isSslEnabled();
        javax.net.SocketFactory socketFactory29 = mongoClientOptions13.getSocketFactory();
        boolean boolean30 = mongoClientOptions13.isSslEnabled();
        boolean boolean31 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder32.build();
        com.mongodb.MongoClientOptions.Builder builder35 = builder32.sslInvalidHostNameAllowed(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(socketFactory29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test4810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4810");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getSocketTimeout();
        java.lang.String str17 = mongoClientOptions13.getDescription();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.cursorFinalizerEnabled(false);
        boolean boolean37 = mongoClientOptions13.equals((java.lang.Object) builder36);
        com.mongodb.MongoClientOptions.Builder builder39 = builder36.heartbeatConnectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions57 = builder56.build();
        boolean boolean58 = mongoClientOptions57.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory59 = mongoClientOptions57.getDbEncoderFactory();
        int int60 = mongoClientOptions57.getMinHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference61 = mongoClientOptions57.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder62 = builder43.readPreference(readPreference61);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder66 = builder62.localThreshold((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder68 = builder62.heartbeatConnectTimeout(97);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mongoClientOptions57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 500 + "'", int60 == 500);
        org.junit.Assert.assertNotNull(readPreference61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test4811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4811");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder11 = builder5.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder13 = builder5.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        com.mongodb.MongoClientOptions.Builder builder28 = com.mongodb.MongoClientOptions.builder(mongoClientOptions27);
        java.lang.String str29 = mongoClientOptions27.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry30 = mongoClientOptions27.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder31 = builder5.codecRegistry(codecRegistry30);
        com.mongodb.MongoClientOptions.Builder builder33 = builder5.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.serverSelectionTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.connectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder51 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder57 = builder53.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder58 = builder57.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder60 = builder57.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder63 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder67 = builder63.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder69 = builder63.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder70 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder76 = builder72.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder78 = builder76.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder82 = builder80.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions83 = builder82.build();
        boolean boolean84 = mongoClientOptions83.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory85 = mongoClientOptions83.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder86 = builder63.dbEncoderFactory(dBEncoderFactory85);
        com.mongodb.MongoClientOptions.Builder builder87 = builder60.dbEncoderFactory(dBEncoderFactory85);
        com.mongodb.MongoClientOptions.Builder builder88 = builder46.dbEncoderFactory(dBEncoderFactory85);
        com.mongodb.MongoClientOptions.Builder builder89 = builder37.dbEncoderFactory(dBEncoderFactory85);
        com.mongodb.MongoClientOptions.Builder builder90 = builder4.dbEncoderFactory(dBEncoderFactory85);
        com.mongodb.MongoClientOptions.Builder builder92 = builder90.description("");
        com.mongodb.MongoClientOptions.Builder builder94 = builder92.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(mongoClientOptions83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test4812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4812");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions18.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory21 = mongoClientOptions18.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder22 = builder8.socketFactory(socketFactory21);
        com.mongodb.MongoClientOptions.Builder builder24 = builder8.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.socketTimeout((int) (short) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test4813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4813");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        mongoProperties0.setUsername("hi!");
        mongoProperties0.setUri("");
        java.lang.String str6 = mongoProperties0.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(wildcardClass7);
    }

    @Test
    public void test4814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4814");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions13.getSocketFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions13.getDbDecoderFactory();
        boolean boolean19 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions13.getDbDecoderFactory();
        int int21 = mongoClientOptions13.getConnectTimeout();
        int int22 = mongoClientOptions13.getLocalThreshold();
        com.mongodb.MongoClientOptions.Builder builder23 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder29 = builder28.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder31 = builder28.maxWaitTime(52);
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder44.build();
        com.mongodb.MongoClientOptions.Builder builder46 = com.mongodb.MongoClientOptions.builder(mongoClientOptions45);
        java.lang.String str47 = mongoClientOptions45.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry48 = mongoClientOptions45.getCodecRegistry();
        javax.net.SocketFactory socketFactory49 = mongoClientOptions45.getSocketFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory50 = mongoClientOptions45.getDbDecoderFactory();
        boolean boolean51 = mongoClientOptions45.isSslInvalidHostNameAllowed();
        com.mongodb.DBDecoderFactory dBDecoderFactory52 = mongoClientOptions45.getDbDecoderFactory();
        int int53 = mongoClientOptions45.getConnectTimeout();
        int int54 = mongoClientOptions45.getLocalThreshold();
        com.mongodb.ReadPreference readPreference55 = mongoClientOptions45.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory56 = mongoClientOptions45.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder57 = builder28.dbDecoderFactory(dBDecoderFactory56);
        com.mongodb.MongoClientOptions.Builder builder58 = builder23.dbDecoderFactory(dBDecoderFactory56);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry48);
        org.junit.Assert.assertNotNull(socketFactory49);
        org.junit.Assert.assertNotNull(dBDecoderFactory50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10000 + "'", int53 == 10000);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 15 + "'", int54 == 15);
        org.junit.Assert.assertNotNull(readPreference55);
        org.junit.Assert.assertNotNull(dBDecoderFactory56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test4815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4815");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.minHeartbeatFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.connectionsPerHost((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.minHeartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.connectionsPerHost((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test4816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4816");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionIdleTime();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean10 = mongoClientOptions7.isSocketKeepAlive();
        java.lang.String str11 = mongoClientOptions7.getRequiredReplicaSetName();
        int int12 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
    }

    @Test
    public void test4817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4817");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.clearPassword();
        mongoProperties0.setUsername("");
        java.lang.String str13 = mongoProperties0.getHost();
        mongoProperties0.setUri("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str17 = mongoProperties16.getGridFsDatabase();
        java.lang.String str18 = mongoProperties16.getHost();
        java.lang.String str19 = mongoProperties16.getHost();
        java.lang.String str20 = mongoProperties16.getUri();
        mongoProperties16.setUsername("hi!");
        mongoProperties16.setUsername("");
        mongoProperties16.clearPassword();
        mongoProperties16.setGridFsDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder40.build();
        int int42 = mongoClientOptions41.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory43 = mongoClientOptions41.getSocketFactory();
        com.mongodb.WriteConcern writeConcern44 = mongoClientOptions41.getWriteConcern();
        int int45 = mongoClientOptions41.getMaxConnectionLifeTime();
        org.springframework.core.env.Environment environment46 = null;
        com.mongodb.MongoClient mongoClient47 = mongoProperties16.createMongoClient(mongoClientOptions41, environment46);
        int int48 = mongoClientOptions41.getMaxWaitTime();
        org.springframework.core.env.Environment environment49 = null;
        com.mongodb.MongoClient mongoClient50 = mongoProperties0.createMongoClient(mongoClientOptions41, environment49);
        java.lang.String str51 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "mongodb://localhost/test" + "'", str20, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(socketFactory43);
        org.junit.Assert.assertNotNull(writeConcern44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(mongoClient47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 120000 + "'", int48 == 120000);
        org.junit.Assert.assertNotNull(mongoClient50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "test" + "'", str51, "test");
    }

    @Test
    public void test4818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4818");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUsername("hi!");
        mongoProperties0.setPort((java.lang.Integer) 10);
        java.lang.String str8 = mongoProperties0.getDatabase();
        mongoProperties0.setDatabase("mongodb://localhost/test");
        mongoProperties0.setUsername("mongodb://localhost/test");
        char[] charArray13 = mongoProperties0.getPassword();
        mongoProperties0.setPort((java.lang.Integer) 0);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(charArray13);
    }

    @Test
    public void test4819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4819");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions13.getWriteConcern();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        boolean boolean18 = mongoClientOptions13.isSocketKeepAlive();
        boolean boolean19 = mongoClientOptions13.isAlwaysUseMBeans();
        int int20 = mongoClientOptions13.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test4820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4820");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions13.getSocketFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions13.getDbDecoderFactory();
        boolean boolean19 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions13.getDbDecoderFactory();
        int int21 = mongoClientOptions13.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions13.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions13.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
        org.junit.Assert.assertNotNull(readPreference23);
    }

    @Test
    public void test4821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4821");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder1.localThreshold(100);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        int int15 = mongoClientOptions13.getConnectTimeout();
        java.lang.String str16 = mongoClientOptions13.getDescription();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions13.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder19 = builder3.dbDecoderFactory(dBDecoderFactory18);
        com.mongodb.MongoClientOptions.Builder builder21 = builder3.serverSelectionTimeout(32);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatSocketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.minConnectionsPerHost(100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "test" + "'", str16, "test");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test4822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4822");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass5 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUsername("test");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardClass5);
    }

    @Test
    public void test4823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4823");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str10 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions20, environment21);
        boolean boolean23 = mongoClientOptions20.isAlwaysUseMBeans();
        int int24 = mongoClientOptions20.getConnectTimeout();
        int int25 = mongoClientOptions20.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10000 + "'", int24 == 10000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
    }

    @Test
    public void test4824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4824");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        com.mongodb.MongoClientOptions.Builder builder27 = com.mongodb.MongoClientOptions.builder(mongoClientOptions26);
        java.lang.String str28 = mongoClientOptions26.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry29 = mongoClientOptions26.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder30 = builder8.codecRegistry(codecRegistry29);
        com.mongodb.MongoClientOptions.Builder builder32 = builder8.connectTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder39.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder42 = builder39.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder45 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder49 = builder45.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder51 = builder45.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder58 = builder54.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions65 = builder64.build();
        boolean boolean66 = mongoClientOptions65.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory67 = mongoClientOptions65.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder68 = builder45.dbEncoderFactory(dBEncoderFactory67);
        com.mongodb.MongoClientOptions.Builder builder69 = builder42.dbEncoderFactory(dBEncoderFactory67);
        com.mongodb.MongoClientOptions.Builder builder70 = builder8.dbEncoderFactory(dBEncoderFactory67);
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.maxConnectionIdleTime((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder76 = builder72.heartbeatConnectTimeout((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(mongoClientOptions65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test4825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4825");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.serverSelectionTimeout((int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test4826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4826");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int10 = mongoClientOptions7.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry11 = mongoClientOptions7.getCodecRegistry();
        java.lang.String str12 = mongoClientOptions7.getRequiredReplicaSetName();
        int int13 = mongoClientOptions7.getHeartbeatSocketTimeout();
        boolean boolean14 = mongoClientOptions7.isSocketKeepAlive();
        int int15 = mongoClientOptions7.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(codecRegistry11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
    }

    @Test
    public void test4827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4827");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties4 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str5 = mongoProperties4.getAuthenticationDatabase();
        mongoProperties4.setAuthenticationDatabase("hi!");
        char[] charArray8 = mongoProperties4.getPassword();
        java.lang.String str9 = mongoProperties4.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str11 = mongoProperties10.getAuthenticationDatabase();
        mongoProperties10.setAuthenticationDatabase("hi!");
        java.lang.String str14 = mongoProperties10.getHost();
        java.lang.String str15 = mongoProperties10.getMongoClientDatabase();
        char[] charArray16 = mongoProperties10.getPassword();
        char[] charArray17 = mongoProperties10.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str19 = mongoProperties18.getGridFsDatabase();
        java.lang.String str20 = mongoProperties18.getGridFsDatabase();
        java.lang.String str21 = mongoProperties18.getUsername();
        java.lang.String str22 = mongoProperties18.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass23 = mongoProperties18.getFieldNamingStrategy();
        char[] charArray28 = new char[] { 'a', '#', '#', '4' };
        mongoProperties18.setPassword(charArray28);
        mongoProperties10.setPassword(charArray28);
        mongoProperties4.setPassword(charArray28);
        mongoProperties0.setPassword(charArray28);
        java.lang.String str33 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder46.build();
        int int48 = mongoClientOptions47.getHeartbeatSocketTimeout();
        java.lang.String str49 = mongoClientOptions47.getRequiredReplicaSetName();
        java.lang.String str50 = mongoClientOptions47.getRequiredReplicaSetName();
        int int51 = mongoClientOptions47.getHeartbeatFrequency();
        int int52 = mongoClientOptions47.getLocalThreshold();
        int int53 = mongoClientOptions47.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment54 = null;
        com.mongodb.MongoClient mongoClient55 = mongoProperties0.createMongoClient(mongoClientOptions47, environment54);
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(charArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "test" + "'", str9, "test");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "test" + "'", str15, "test");
        org.junit.Assert.assertNull(charArray16);
        org.junit.Assert.assertNull(charArray17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[\000, \000, \000, \000]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(mongoClientOptions47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 15 + "'", int52 == 15);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(mongoClient55);
    }

    @Test
    public void test4828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4828");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.ReadConcern readConcern16 = mongoClientOptions13.getReadConcern();
        boolean boolean18 = mongoClientOptions13.equals((java.lang.Object) 10);
        int int19 = mongoClientOptions13.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.connectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.heartbeatFrequency((int) (byte) 100);
        boolean boolean37 = mongoClientOptions13.equals((java.lang.Object) builder36);
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder44.build();
        boolean boolean46 = mongoClientOptions45.isSocketKeepAlive();
        int int47 = mongoClientOptions45.getConnectTimeout();
        java.lang.String str48 = mongoClientOptions45.getDescription();
        boolean boolean49 = mongoClientOptions45.isAlwaysUseMBeans();
        com.mongodb.DBDecoderFactory dBDecoderFactory50 = mongoClientOptions45.getDbDecoderFactory();
        int int51 = mongoClientOptions45.getMaxConnectionIdleTime();
        com.mongodb.WriteConcern writeConcern52 = mongoClientOptions45.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder53 = builder36.writeConcern(writeConcern52);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(readConcern16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10000 + "'", int47 == 10000);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "test" + "'", str48, "test");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(writeConcern52);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test4829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4829");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) '#');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minHeartbeatFrequency(100);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder16 = builder10.localThreshold((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: localThreshold must be >= 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test4830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4830");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions13.getCommandListeners();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions13.getReadPreference();
        javax.net.SocketFactory socketFactory18 = mongoClientOptions13.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.socketTimeout(32);
        boolean boolean28 = mongoClientOptions13.equals((java.lang.Object) builder27);
        int int29 = mongoClientOptions13.getServerSelectionTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertNotNull(socketFactory18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test4831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4831");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass5 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str6 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatSocketTimeout();
        java.lang.String str22 = mongoClientOptions20.getRequiredReplicaSetName();
        boolean boolean23 = mongoClientOptions20.isSslEnabled();
        int int24 = mongoClientOptions20.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions20, environment25);
        mongoProperties0.setUsername("hi!");
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder41.build();
        boolean boolean43 = mongoClientOptions42.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory44 = mongoClientOptions42.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList45 = mongoClientOptions42.getCommandListeners();
        int int46 = mongoClientOptions42.getSocketTimeout();
        int int47 = mongoClientOptions42.getConnectionsPerHost();
        int int48 = mongoClientOptions42.getLocalThreshold();
        org.springframework.core.env.Environment environment49 = null;
        com.mongodb.MongoClient mongoClient50 = mongoProperties0.createMongoClient(mongoClientOptions42, environment49);
        java.lang.String str51 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory44);
        org.junit.Assert.assertNotNull(commandListenerList45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 15 + "'", int48 == 15);
        org.junit.Assert.assertNotNull(mongoClient50);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test4832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4832");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        java.lang.String str8 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str9 = mongoProperties0.getDatabase();
        mongoProperties0.setHost("mongodb://localhost/test");
        mongoProperties0.setAuthenticationDatabase("test");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "test" + "'", str8, "test");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test4833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4833");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass5 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray10 = new char[] { 'a', '#', '#', '4' };
        mongoProperties0.setPassword(charArray10);
        java.lang.String str12 = mongoProperties0.getUri();
        java.lang.String str13 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[a, #, #, 4]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test4834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4834");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getSocketTimeout();
        int int16 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern17 = mongoClientOptions13.getReadConcern();
        int int18 = mongoClientOptions13.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions13.getConnectTimeout();
        javax.net.SocketFactory socketFactory20 = mongoClientOptions13.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatConnectTimeout((int) (short) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(readConcern17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertNotNull(socketFactory20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test4835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4835");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.socketTimeout(97);
        com.mongodb.event.CommandListener commandListener23 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder24 = builder22.addCommandListener(commandListener23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test4836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4836");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder1.localThreshold(100);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder6 = builder5.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime(1);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        com.mongodb.MongoClientOptions.Builder builder23 = com.mongodb.MongoClientOptions.builder(mongoClientOptions22);
        int int24 = mongoClientOptions22.getHeartbeatConnectTimeout();
        int int25 = mongoClientOptions22.getMaxWaitTime();
        boolean boolean26 = mongoClientOptions22.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions22);
        int int28 = mongoClientOptions22.getMaxWaitTime();
        com.mongodb.ReadConcern readConcern29 = mongoClientOptions22.getReadConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory30 = mongoClientOptions22.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern31 = mongoClientOptions22.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder32 = builder6.writeConcern(writeConcern31);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout(0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 120000 + "'", int25 == 120000);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 120000 + "'", int28 == 120000);
        org.junit.Assert.assertNotNull(readConcern29);
        org.junit.Assert.assertNotNull(dBEncoderFactory30);
        org.junit.Assert.assertNotNull(writeConcern31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test4837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4837");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        int int29 = mongoClientOptions28.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory30 = mongoClientOptions28.getSocketFactory();
        int int31 = mongoClientOptions28.getMaxWaitTime();
        boolean boolean32 = mongoClientOptions28.isSocketKeepAlive();
        int int33 = mongoClientOptions28.getServerSelectionTimeout();
        java.lang.String str34 = mongoClientOptions28.getRequiredReplicaSetName();
        com.mongodb.ReadConcern readConcern35 = mongoClientOptions28.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder36 = builder14.readConcern(readConcern35);
        com.mongodb.MongoClientOptions.Builder builder37 = builder14.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(socketFactory30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 120000 + "'", int31 == 120000);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(readConcern35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test4838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4838");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.minHeartbeatFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder40.build();
        int int42 = mongoClientOptions41.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory43 = mongoClientOptions41.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder44 = builder33.dbDecoderFactory(dBDecoderFactory43);
        com.mongodb.MongoClientOptions.Builder builder45 = builder14.dbDecoderFactory(dBDecoderFactory43);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.localThreshold(97);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.heartbeatSocketTimeout((-1));
        com.mongodb.event.CommandListener commandListener50 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder51 = builder47.addCommandListener(commandListener50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test4839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4839");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean17 = mongoClientOptions13.isCursorFinalizerEnabled();
        int int18 = mongoClientOptions13.getMaxConnectionIdleTime();
        int int19 = mongoClientOptions13.getHeartbeatFrequency();
        boolean boolean20 = mongoClientOptions13.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test4840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4840");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.serverSelectionTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.socketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        boolean boolean27 = mongoClientOptions26.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory28 = mongoClientOptions26.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList29 = mongoClientOptions26.getCommandListeners();
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions26.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxWaitTime((int) (byte) 10);
        boolean boolean40 = mongoClientOptions26.equals((java.lang.Object) builder37);
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder47.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory49 = mongoClientOptions48.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern50 = mongoClientOptions48.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder51 = builder37.writeConcern(writeConcern50);
        com.mongodb.MongoClientOptions.Builder builder52 = builder12.writeConcern(writeConcern50);
        com.mongodb.MongoClientOptions.Builder builder53 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions60 = builder59.build();
        boolean boolean61 = mongoClientOptions60.isSocketKeepAlive();
        int int62 = mongoClientOptions60.getThreadsAllowedToBlockForConnectionMultiplier();
        int int63 = mongoClientOptions60.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry64 = mongoClientOptions60.getCodecRegistry();
        com.mongodb.DBEncoderFactory dBEncoderFactory65 = mongoClientOptions60.getDbEncoderFactory();
        int int66 = mongoClientOptions60.getHeartbeatFrequency();
        int int67 = mongoClientOptions60.getLocalThreshold();
        int int68 = mongoClientOptions60.getMaxConnectionIdleTime();
        java.lang.String str69 = mongoClientOptions60.getRequiredReplicaSetName();
        com.mongodb.ReadConcern readConcern70 = mongoClientOptions60.getReadConcern();
        javax.net.SocketFactory socketFactory71 = mongoClientOptions60.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder72 = builder12.socketFactory(socketFactory71);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory28);
        org.junit.Assert.assertNotNull(commandListenerList29);
        org.junit.Assert.assertNotNull(readPreference30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertNotNull(dBEncoderFactory49);
        org.junit.Assert.assertNotNull(writeConcern50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(mongoClientOptions60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 5 + "'", int62 == 5);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertNotNull(codecRegistry64);
        org.junit.Assert.assertNotNull(dBEncoderFactory65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10000 + "'", int66 == 10000);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 15 + "'", int67 == 15);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(readConcern70);
        org.junit.Assert.assertNotNull(socketFactory71);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test4841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4841");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        boolean boolean27 = mongoClientOptions26.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory28 = mongoClientOptions26.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList29 = mongoClientOptions26.getCommandListeners();
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions26.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder31 = builder12.readPreference(readPreference30);
        com.mongodb.MongoClientOptions.Builder builder33 = builder12.connectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder35 = builder12.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.maxConnectionLifeTime(0);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxWaitTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.connectionsPerHost(120000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory28);
        org.junit.Assert.assertNotNull(commandListenerList29);
        org.junit.Assert.assertNotNull(readPreference30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test4842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4842");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        java.lang.String str2 = mongoProperties0.getHost();
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str5 = mongoProperties0.getUri();
        java.lang.String str6 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str8 = mongoProperties7.getGridFsDatabase();
        java.lang.String str9 = mongoProperties7.getGridFsDatabase();
        java.lang.String str10 = mongoProperties7.getUsername();
        mongoProperties7.setHost("hi!");
        mongoProperties7.setGridFsDatabase("hi!");
        char[] charArray16 = new char[] { '#' };
        mongoProperties7.setPassword(charArray16);
        mongoProperties7.clearPassword();
        java.lang.String str19 = mongoProperties7.getMongoClientDatabase();
        java.lang.String str20 = mongoProperties7.getGridFsDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str22 = mongoProperties21.getGridFsDatabase();
        java.lang.String str23 = mongoProperties21.getGridFsDatabase();
        java.lang.String str24 = mongoProperties21.getUsername();
        java.lang.String str25 = mongoProperties21.getAuthenticationDatabase();
        java.lang.String str26 = mongoProperties21.getMongoClientDatabase();
        java.lang.String str27 = mongoProperties21.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions28 = null;
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties21.createMongoClient(mongoClientOptions28, environment29);
        mongoProperties21.setAuthenticationDatabase("test");
        java.lang.String str33 = mongoProperties21.getAuthenticationDatabase();
        java.lang.String str34 = mongoProperties21.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str36 = mongoProperties35.getGridFsDatabase();
        java.lang.String str37 = mongoProperties35.getGridFsDatabase();
        java.lang.String str38 = mongoProperties35.getUsername();
        mongoProperties35.setHost("hi!");
        mongoProperties35.setGridFsDatabase("hi!");
        char[] charArray44 = new char[] { '#' };
        mongoProperties35.setPassword(charArray44);
        mongoProperties35.setHost("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties48 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str49 = mongoProperties48.getGridFsDatabase();
        java.lang.String str50 = mongoProperties48.getGridFsDatabase();
        mongoProperties48.setPort((java.lang.Integer) 0);
        java.lang.String str53 = mongoProperties48.getGridFsDatabase();
        mongoProperties48.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties55 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str56 = mongoProperties55.getGridFsDatabase();
        java.lang.String str57 = mongoProperties55.getGridFsDatabase();
        java.lang.String str58 = mongoProperties55.getUsername();
        java.lang.String str59 = mongoProperties55.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass60 = mongoProperties55.getFieldNamingStrategy();
        char[] charArray65 = new char[] { 'a', '#', '#', '4' };
        mongoProperties55.setPassword(charArray65);
        mongoProperties48.setPassword(charArray65);
        mongoProperties35.setPassword(charArray65);
        mongoProperties21.setPassword(charArray65);
        mongoProperties7.setPassword(charArray65);
        mongoProperties0.setPassword(charArray65);
        java.lang.Class<?> wildcardClass72 = mongoProperties0.getClass();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb://localhost/test" + "'", str5, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[\000]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "test" + "'", str19, "test");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "test" + "'", str26, "test");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "test" + "'", str33, "test");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "mongodb://localhost/test" + "'", str34, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[#]");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(wildcardClass60);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[a, #, #, 4]");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test4843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4843");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        boolean boolean25 = mongoClientOptions24.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory26 = mongoClientOptions24.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList27 = mongoClientOptions24.getCommandListeners();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions24.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.maxWaitTime((int) (byte) 10);
        boolean boolean38 = mongoClientOptions24.equals((java.lang.Object) builder35);
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder45.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory47 = mongoClientOptions46.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern48 = mongoClientOptions46.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder49 = builder35.writeConcern(writeConcern48);
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder56 = builder52.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder62.build();
        int int64 = mongoClientOptions63.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry65 = mongoClientOptions63.getCodecRegistry();
        int int66 = mongoClientOptions63.getSocketTimeout();
        java.lang.String str67 = mongoClientOptions63.getRequiredReplicaSetName();
        com.mongodb.ReadPreference readPreference68 = mongoClientOptions63.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory69 = mongoClientOptions63.getDbEncoderFactory();
        int int70 = mongoClientOptions63.getMinHeartbeatFrequency();
        int int71 = mongoClientOptions63.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern72 = mongoClientOptions63.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder73 = builder49.writeConcern(writeConcern72);
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder76 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder78 = builder76.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder82 = builder80.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder84 = builder80.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder86 = builder84.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder88 = builder84.serverSelectionTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder90 = builder84.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder92 = builder84.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions93 = builder92.build();
        int int94 = mongoClientOptions93.getMaxConnectionLifeTime();
        com.mongodb.ReadConcern readConcern95 = mongoClientOptions93.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder96 = builder73.readConcern(readConcern95);
        com.mongodb.MongoClientOptions.Builder builder97 = builder8.readConcern(readConcern95);
        com.mongodb.MongoClientOptions.Builder builder99 = builder97.maxConnectionIdleTime((int) 'a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory26);
        org.junit.Assert.assertNotNull(commandListenerList27);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertNotNull(dBEncoderFactory47);
        org.junit.Assert.assertNotNull(writeConcern48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoClientOptions63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(codecRegistry65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(readPreference68);
        org.junit.Assert.assertNotNull(dBEncoderFactory69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 500 + "'", int70 == 500);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 120000 + "'", int71 == 120000);
        org.junit.Assert.assertNotNull(writeConcern72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(mongoClientOptions93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(readConcern95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test4844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4844");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        int int16 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean17 = mongoClientOptions13.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str19 = mongoProperties18.getGridFsDatabase();
        java.lang.String str20 = mongoProperties18.getGridFsDatabase();
        java.lang.String str21 = mongoProperties18.getUsername();
        mongoProperties18.setHost("hi!");
        mongoProperties18.setGridFsDatabase("hi!");
        boolean boolean26 = mongoClientOptions13.equals((java.lang.Object) mongoProperties18);
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions13.getReadPreference();
        boolean boolean28 = mongoClientOptions13.isSslEnabled();
        javax.net.SocketFactory socketFactory29 = mongoClientOptions13.getSocketFactory();
        com.mongodb.WriteConcern writeConcern30 = mongoClientOptions13.getWriteConcern();
        int int31 = mongoClientOptions13.getSocketTimeout();
        int int32 = mongoClientOptions13.getHeartbeatFrequency();
        int int33 = mongoClientOptions13.getLocalThreshold();
        java.lang.String str34 = mongoClientOptions13.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(socketFactory29);
        org.junit.Assert.assertNotNull(writeConcern30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 15 + "'", int33 == 15);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test4845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4845");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder15 = builder12.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder28.build();
        int int30 = mongoClientOptions29.getHeartbeatSocketTimeout();
        java.lang.String str31 = mongoClientOptions29.getRequiredReplicaSetName();
        java.lang.String str32 = mongoClientOptions29.getRequiredReplicaSetName();
        int int33 = mongoClientOptions29.getHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern34 = mongoClientOptions29.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder35 = builder12.writeConcern(writeConcern34);
        com.mongodb.MongoClientOptions.Builder builder37 = builder12.minConnectionsPerHost(10000);
        com.mongodb.MongoClientOptions.Builder builder39 = builder12.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder41 = builder12.socketKeepAlive(true);
        com.mongodb.DBDecoderFactory dBDecoderFactory42 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder43 = builder12.dbDecoderFactory(dBDecoderFactory42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(writeConcern34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test4846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4846");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getUsername();
        java.lang.String str3 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setHost("hi!");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        boolean boolean16 = mongoClientOptions15.isSocketKeepAlive();
        int int17 = mongoClientOptions15.getThreadsAllowedToBlockForConnectionMultiplier();
        int int18 = mongoClientOptions15.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry19 = mongoClientOptions15.getCodecRegistry();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions15.getDbEncoderFactory();
        int int21 = mongoClientOptions15.getHeartbeatFrequency();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList22 = mongoClientOptions15.getCommandListeners();
        int int23 = mongoClientOptions15.getMaxConnectionIdleTime();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions15, environment24);
        java.lang.Integer int26 = mongoProperties0.getPort();
        mongoProperties0.setHost("mongodb://localhost/test");
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        java.lang.String str33 = mongoProperties0.getHost();
        java.lang.Class<?> wildcardClass34 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(codecRegistry19);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertNotNull(commandListenerList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "mongodb://localhost/test" + "'", str33, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass34);
    }

    @Test
    public void test4847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4847");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getDatabase();
        java.lang.String str3 = mongoProperties0.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory19 = mongoClientOptions17.getSocketFactory();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions17, environment20);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions17);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.connectTimeout(120000);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "test" + "'", str3, "test");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(socketFactory19);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
    }

    @Test
    public void test4848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4848");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        com.mongodb.DBDecoderFactory dBDecoderFactory9 = mongoClientOptions7.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder(mongoClientOptions7);
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions7.getWriteConcern();
        boolean boolean12 = mongoClientOptions7.isCursorFinalizerEnabled();
        int int13 = mongoClientOptions7.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test4849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4849");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatFrequency((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minConnectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.maxConnectionIdleTime((int) (byte) 10);
        java.lang.Class<?> wildcardClass17 = builder10.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test4850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4850");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.connectTimeout(15);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test4851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4851");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        java.lang.String str16 = mongoClientOptions13.getDescription();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        boolean boolean18 = mongoClientOptions13.isSocketKeepAlive();
        java.lang.String str19 = mongoClientOptions13.getRequiredReplicaSetName();
        boolean boolean20 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test4852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4852");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.socketTimeout(52);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minConnectionsPerHost((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test4853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4853");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.minConnectionsPerHost(5);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test4854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4854");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getDatabase();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str5 = mongoProperties0.getUri();
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setUsername("test");
        mongoProperties0.setHost("hi!");
        java.lang.String str12 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb://localhost/test" + "'", str5, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test4855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4855");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder36.build();
        int int38 = mongoClientOptions37.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory39 = mongoClientOptions37.getSocketFactory();
        com.mongodb.WriteConcern writeConcern40 = mongoClientOptions37.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder41 = builder19.writeConcern(writeConcern40);
        com.mongodb.MongoClientOptions.Builder builder42 = builder16.writeConcern(writeConcern40);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.description("");
        com.mongodb.MongoClientOptions.Builder builder47 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder53 = builder49.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder56 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder62.build();
        boolean boolean64 = mongoClientOptions63.isSocketKeepAlive();
        int int65 = mongoClientOptions63.getThreadsAllowedToBlockForConnectionMultiplier();
        int int66 = mongoClientOptions63.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry67 = mongoClientOptions63.getCodecRegistry();
        com.mongodb.DBEncoderFactory dBEncoderFactory68 = mongoClientOptions63.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder69 = builder53.dbEncoderFactory(dBEncoderFactory68);
        com.mongodb.MongoClientOptions.Builder builder70 = builder44.dbEncoderFactory(dBEncoderFactory68);
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.heartbeatFrequency(52);
        com.mongodb.MongoClientOptions.Builder builder74 = builder70.threadsAllowedToBlockForConnectionMultiplier(10);
        com.mongodb.MongoClientOptions.Builder builder76 = builder74.serverSelectionTimeout((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(socketFactory39);
        org.junit.Assert.assertNotNull(writeConcern40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoClientOptions63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5 + "'", int65 == 5);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertNotNull(codecRegistry67);
        org.junit.Assert.assertNotNull(dBEncoderFactory68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test4856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4856");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionLifeTime(10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder8.connectTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getHeartbeatSocketTimeout();
        int int18 = mongoClientOptions16.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test4857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4857");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray4 = mongoProperties0.getPassword();
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        java.lang.Integer int6 = mongoProperties0.getPort();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        boolean boolean21 = mongoClientOptions20.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory22 = mongoClientOptions20.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList23 = mongoClientOptions20.getCommandListeners();
        int int24 = mongoClientOptions20.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry25 = mongoClientOptions20.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions20);
        int int27 = mongoClientOptions20.getMinHeartbeatFrequency();
        org.springframework.core.env.Environment environment28 = null;
        com.mongodb.MongoClient mongoClient29 = mongoProperties0.createMongoClient(mongoClientOptions20, environment28);
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions20.getReadPreference();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(charArray4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory22);
        org.junit.Assert.assertNotNull(commandListenerList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(codecRegistry25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 500 + "'", int27 == 500);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertNotNull(readPreference30);
    }

    @Test
    public void test4858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4858");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        java.lang.String str16 = mongoClientOptions13.getDescription();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        boolean boolean18 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions13.getWriteConcern();
        int int20 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test4859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4859");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setGridFsDatabase("hi!");
        char[] charArray9 = new char[] { '#' };
        mongoProperties0.setPassword(charArray9);
        mongoProperties0.setHost("");
        java.lang.String str13 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str16 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test4860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4860");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        boolean boolean23 = mongoClientOptions13.equals((java.lang.Object) builder21);
        int int24 = mongoClientOptions13.getMaxConnectionIdleTime();
        javax.net.SocketFactory socketFactory25 = mongoClientOptions13.getSocketFactory();
        int int26 = mongoClientOptions13.getMaxWaitTime();
        java.lang.String str27 = mongoClientOptions13.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory28 = mongoClientOptions13.getDbEncoderFactory();
        int int29 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(socketFactory25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(dBEncoderFactory28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test4861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4861");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatSocketTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.maxWaitTime(100);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        com.mongodb.MongoClientOptions.Builder builder31 = com.mongodb.MongoClientOptions.builder(mongoClientOptions30);
        java.lang.String str32 = mongoClientOptions30.getRequiredReplicaSetName();
        int int33 = mongoClientOptions30.getConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry34 = mongoClientOptions30.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder35 = builder10.codecRegistry(codecRegistry34);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10000 + "'", int33 == 10000);
        org.junit.Assert.assertNotNull(codecRegistry34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test4862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4862");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions13.getWriteConcern();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        boolean boolean18 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions13.getWriteConcern();
        int int20 = mongoClientOptions13.getConnectTimeout();
        int int21 = mongoClientOptions13.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 500 + "'", int21 == 500);
    }

    @Test
    public void test4863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4863");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getConnectTimeout();
        int int10 = mongoClientOptions7.getConnectTimeout();
        int int11 = mongoClientOptions7.getConnectTimeout();
        int int12 = mongoClientOptions7.getSocketTimeout();
        boolean boolean13 = mongoClientOptions7.isSslInvalidHostNameAllowed();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test4864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4864");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        char[] charArray11 = new char[] { 'a', '4', ' ', '#', 'a' };
        mongoProperties0.setPassword(charArray11);
        java.lang.String str13 = mongoProperties0.getDatabase();
        java.lang.String str14 = mongoProperties0.getUsername();
        java.lang.String str15 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str16 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 100);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a4 #a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a4 #a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, 4,  , #, a]");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test4865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4865");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test4866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4866");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str5 = mongoProperties0.getHost();
        mongoProperties0.clearPassword();
        mongoProperties0.setUri("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test4867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4867");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        com.mongodb.MongoClientOptions.Builder builder27 = com.mongodb.MongoClientOptions.builder(mongoClientOptions26);
        java.lang.String str28 = mongoClientOptions26.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry29 = mongoClientOptions26.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder30 = builder8.codecRegistry(codecRegistry29);
        com.mongodb.MongoClientOptions.Builder builder32 = builder8.connectTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.serverSelectionTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder32.maxConnectionIdleTime(10);
        com.mongodb.MongoClientOptions.Builder builder40 = builder32.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder42 = builder32.description("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test4868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4868");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder36.build();
        int int38 = mongoClientOptions37.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory39 = mongoClientOptions37.getSocketFactory();
        com.mongodb.WriteConcern writeConcern40 = mongoClientOptions37.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder41 = builder19.writeConcern(writeConcern40);
        com.mongodb.MongoClientOptions.Builder builder42 = builder16.writeConcern(writeConcern40);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder45 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder51 = builder47.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder57.build();
        com.mongodb.MongoClientOptions.Builder builder59 = com.mongodb.MongoClientOptions.builder(mongoClientOptions58);
        int int60 = mongoClientOptions58.getHeartbeatConnectTimeout();
        com.mongodb.ReadPreference readPreference61 = mongoClientOptions58.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder62 = builder42.readPreference(readPreference61);
        com.mongodb.MongoClientOptions.Builder builder63 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder71 = builder67.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder73 = builder67.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder74 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder76 = builder74.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder78 = builder76.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder80 = builder76.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder82 = builder80.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder84 = builder82.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder86 = builder84.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions87 = builder86.build();
        boolean boolean88 = mongoClientOptions87.isSocketKeepAlive();
        int int89 = mongoClientOptions87.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory90 = mongoClientOptions87.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder91 = builder67.dbEncoderFactory(dBEncoderFactory90);
        com.mongodb.MongoClientOptions.Builder builder92 = builder62.dbEncoderFactory(dBEncoderFactory90);
        com.mongodb.MongoClientOptions.Builder builder94 = builder62.serverSelectionTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder96 = builder62.maxConnectionIdleTime((int) (byte) -1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(socketFactory39);
        org.junit.Assert.assertNotNull(writeConcern40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 20000 + "'", int60 == 20000);
        org.junit.Assert.assertNotNull(readPreference61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(mongoClientOptions87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 120000 + "'", int89 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test4869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4869");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        int int15 = mongoClientOptions13.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions13.getDbEncoderFactory();
        int int17 = mongoClientOptions13.getMinHeartbeatFrequency();
        boolean boolean18 = mongoClientOptions13.isAlwaysUseMBeans();
        int int19 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int20 = mongoClientOptions13.getMaxWaitTime();
        javax.net.SocketFactory socketFactory21 = mongoClientOptions13.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 120000 + "'", int15 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 120000 + "'", int20 == 120000);
        org.junit.Assert.assertNotNull(socketFactory21);
    }

    @Test
    public void test4870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4870");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionLifeTime(10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.localThreshold((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder30.build();
        int int32 = mongoClientOptions31.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions31.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder23.dbDecoderFactory(dBDecoderFactory33);
        com.mongodb.MongoClientOptions.Builder builder35 = builder8.dbDecoderFactory(dBDecoderFactory33);
        com.mongodb.event.CommandListener commandListener36 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder37 = builder8.addCommandListener(commandListener36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test4871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4871");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int10 = mongoClientOptions7.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry11 = mongoClientOptions7.getCodecRegistry();
        java.lang.String str12 = mongoClientOptions7.getRequiredReplicaSetName();
        javax.net.SocketFactory socketFactory13 = mongoClientOptions7.getSocketFactory();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions7.getReadPreference();
        int int15 = mongoClientOptions7.getMaxConnectionLifeTime();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions7.getCommandListeners();
        boolean boolean17 = mongoClientOptions7.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(codecRegistry11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(socketFactory13);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test4872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4872");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        boolean boolean16 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        java.lang.String str17 = mongoClientOptions13.getDescription();
        java.lang.String str18 = mongoClientOptions13.getRequiredReplicaSetName();
        java.lang.String str19 = mongoClientOptions13.getRequiredReplicaSetName();
        boolean boolean20 = mongoClientOptions13.isSocketKeepAlive();
        int int21 = mongoClientOptions13.getMinHeartbeatFrequency();
        int int22 = mongoClientOptions13.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 500 + "'", int21 == 500);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 120000 + "'", int22 == 120000);
    }

    @Test
    public void test4873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4873");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int17 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean18 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        javax.net.SocketFactory socketFactory19 = mongoClientOptions13.getSocketFactory();
        int int20 = mongoClientOptions13.getMinConnectionsPerHost();
        boolean boolean21 = mongoClientOptions13.isSslEnabled();
        int int22 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions13.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(socketFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(readPreference23);
    }

    @Test
    public void test4874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4874");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatFrequency(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry28 = mongoClientOptions26.getCodecRegistry();
        int int29 = mongoClientOptions26.getSocketTimeout();
        java.lang.String str30 = mongoClientOptions26.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory31 = mongoClientOptions26.getDbEncoderFactory();
        boolean boolean32 = mongoClientOptions26.isSocketKeepAlive();
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions26.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder6.dbDecoderFactory(dBDecoderFactory33);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        com.mongodb.MongoClientOptions.Builder builder37 = builder34.maxWaitTime((int) (byte) -1);
        org.bson.codecs.configuration.CodecRegistry codecRegistry38 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder39 = builder37.codecRegistry(codecRegistry38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: codecRegistry can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(codecRegistry28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(dBEncoderFactory31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test4875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4875");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.threadsAllowedToBlockForConnectionMultiplier(120000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.description("test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test4876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4876");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.clearPassword();
        mongoProperties0.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions12.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern14 = mongoClientOptions12.getWriteConcern();
        boolean boolean15 = mongoClientOptions12.isSslInvalidHostNameAllowed();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions12.getCommandListeners();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions12, environment17);
        mongoProperties0.setHost("test");
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        org.springframework.core.env.Environment environment22 = null;
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions21, environment22);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertNotNull(writeConcern14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNotNull(mongoClient23);
    }

    @Test
    public void test4877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4877");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions13.getWriteConcern();
        int int17 = mongoClientOptions13.getMaxConnectionLifeTime();
        int int18 = mongoClientOptions13.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions13.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder20 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str21 = mongoClientOptions13.getDescription();
        int int22 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        javax.net.SocketFactory socketFactory23 = mongoClientOptions13.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertNotNull(socketFactory23);
    }

    @Test
    public void test4878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4878");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder31 = builder25.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder44.build();
        boolean boolean46 = mongoClientOptions45.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory47 = mongoClientOptions45.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder48 = builder25.dbEncoderFactory(dBEncoderFactory47);
        com.mongodb.MongoClientOptions.Builder builder49 = builder22.dbEncoderFactory(dBEncoderFactory47);
        com.mongodb.MongoClientOptions.Builder builder50 = builder8.dbEncoderFactory(dBEncoderFactory47);
        com.mongodb.MongoClientOptions.Builder builder52 = builder8.maxConnectionIdleTime((int) (short) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties53 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str54 = mongoProperties53.getGridFsDatabase();
        java.lang.String str55 = mongoProperties53.getGridFsDatabase();
        mongoProperties53.clearPassword();
        mongoProperties53.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder58 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions65 = builder64.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory66 = mongoClientOptions65.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern67 = mongoClientOptions65.getWriteConcern();
        boolean boolean68 = mongoClientOptions65.isSslInvalidHostNameAllowed();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList69 = mongoClientOptions65.getCommandListeners();
        org.springframework.core.env.Environment environment70 = null;
        com.mongodb.MongoClient mongoClient71 = mongoProperties53.createMongoClient(mongoClientOptions65, environment70);
        com.mongodb.ReadConcern readConcern72 = mongoClientOptions65.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder73 = builder52.readConcern(readConcern72);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(mongoClientOptions65);
        org.junit.Assert.assertNotNull(dBEncoderFactory66);
        org.junit.Assert.assertNotNull(writeConcern67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(commandListenerList69);
        org.junit.Assert.assertNotNull(mongoClient71);
        org.junit.Assert.assertNotNull(readConcern72);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test4879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4879");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.serverSelectionTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder0.maxConnectionLifeTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.serverSelectionTimeout((int) (short) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4880");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.minHeartbeatFrequency(52);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test4881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4881");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions20.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder23 = builder2.readPreference(readPreference22);
        com.mongodb.MongoClientOptions.Builder builder25 = builder2.localThreshold(100);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder25.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.minConnectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.maxConnectionLifeTime(1);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder48.build();
        int int50 = mongoClientOptions49.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory51 = mongoClientOptions49.getSocketFactory();
        boolean boolean52 = mongoClientOptions49.isSslInvalidHostNameAllowed();
        java.lang.String str53 = mongoClientOptions49.getDescription();
        java.lang.String str54 = mongoClientOptions49.getRequiredReplicaSetName();
        int int55 = mongoClientOptions49.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory56 = mongoClientOptions49.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder57 = builder33.socketFactory(socketFactory56);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(socketFactory51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 20000 + "'", int55 == 20000);
        org.junit.Assert.assertNotNull(socketFactory56);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test4882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4882");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        mongoProperties0.setPort((java.lang.Integer) 0);
        char[] charArray9 = mongoProperties0.getPassword();
        mongoProperties0.setUsername("test");
        java.lang.String str12 = mongoProperties0.getDatabase();
        mongoProperties0.setUri("test");
        char[] charArray15 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(charArray9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(charArray15);
    }

    @Test
    public void test4883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4883");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getDatabase();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str5 = mongoProperties0.getUri();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        boolean boolean20 = mongoClientOptions19.isSocketKeepAlive();
        int int21 = mongoClientOptions19.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory22 = mongoClientOptions19.getDbEncoderFactory();
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions19, environment23);
        int int25 = mongoClientOptions19.getLocalThreshold();
        boolean boolean26 = mongoClientOptions19.isSocketKeepAlive();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb://localhost/test" + "'", str5, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 120000 + "'", int21 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory22);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 15 + "'", int25 == 15);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test4884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4884");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getHeartbeatSocketTimeout();
        java.lang.String str20 = mongoClientOptions18.getRequiredReplicaSetName();
        java.lang.String str21 = mongoClientOptions18.getRequiredReplicaSetName();
        int int22 = mongoClientOptions18.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions18, environment23);
        int int25 = mongoClientOptions18.getMaxConnectionIdleTime();
        java.lang.String str26 = mongoClientOptions18.getDescription();
        int int27 = mongoClientOptions18.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "test" + "'", str4, "test");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
    }

    @Test
    public void test4885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4885");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str9 = mongoProperties0.getHost();
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setHost("test");
        java.lang.String str13 = mongoProperties0.getGridFsDatabase();
        java.lang.String str14 = mongoProperties0.getDatabase();
        mongoProperties0.setHost("hi!");
        java.lang.String str17 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "test" + "'", str13, "test");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "test" + "'", str17, "test");
    }

    @Test
    public void test4886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4886");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions13.getSocketFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions13.getDbDecoderFactory();
        boolean boolean19 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        int int20 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int21 = mongoClientOptions13.getHeartbeatFrequency();
        org.bson.codecs.configuration.CodecRegistry codecRegistry22 = mongoClientOptions13.getCodecRegistry();
        boolean boolean23 = mongoClientOptions13.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(codecRegistry22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test4887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4887");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int17 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions13.getWriteConcern();
        int int19 = mongoClientOptions13.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern20 = mongoClientOptions13.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(writeConcern20);
    }

    @Test
    public void test4888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4888");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        char[] charArray4 = mongoProperties0.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties5.setHost("");
        java.lang.String str8 = mongoProperties5.getGridFsDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str10 = mongoProperties9.getAuthenticationDatabase();
        mongoProperties9.setAuthenticationDatabase("hi!");
        char[] charArray13 = mongoProperties9.getPassword();
        java.lang.String str14 = mongoProperties9.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str16 = mongoProperties15.getAuthenticationDatabase();
        mongoProperties15.setAuthenticationDatabase("hi!");
        java.lang.String str19 = mongoProperties15.getHost();
        java.lang.String str20 = mongoProperties15.getMongoClientDatabase();
        char[] charArray21 = mongoProperties15.getPassword();
        char[] charArray22 = mongoProperties15.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str24 = mongoProperties23.getGridFsDatabase();
        java.lang.String str25 = mongoProperties23.getGridFsDatabase();
        java.lang.String str26 = mongoProperties23.getUsername();
        java.lang.String str27 = mongoProperties23.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass28 = mongoProperties23.getFieldNamingStrategy();
        char[] charArray33 = new char[] { 'a', '#', '#', '4' };
        mongoProperties23.setPassword(charArray33);
        mongoProperties15.setPassword(charArray33);
        mongoProperties9.setPassword(charArray33);
        mongoProperties5.setPassword(charArray33);
        mongoProperties0.setPassword(charArray33);
        java.lang.Integer int39 = mongoProperties0.getPort();
        mongoProperties0.setUsername("mongodb://localhost/test");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(charArray4);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(charArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "test" + "'", str14, "test");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "test" + "'", str20, "test");
        org.junit.Assert.assertNull(charArray21);
        org.junit.Assert.assertNull(charArray22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[a, #, #, 4]");
        org.junit.Assert.assertNull(int39);
    }

    @Test
    public void test4889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4889");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        boolean boolean16 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        java.lang.String str17 = mongoClientOptions13.getDescription();
        java.lang.String str18 = mongoClientOptions13.getRequiredReplicaSetName();
        java.lang.String str19 = mongoClientOptions13.getRequiredReplicaSetName();
        int int20 = mongoClientOptions13.getMinHeartbeatFrequency();
        int int21 = mongoClientOptions13.getServerSelectionTimeout();
        int int22 = mongoClientOptions13.getConnectionsPerHost();
        int int23 = mongoClientOptions13.getMaxConnectionLifeTime();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList24 = mongoClientOptions13.getCommandListeners();
        int int25 = mongoClientOptions13.getMaxConnectionLifeTime();
        int int26 = mongoClientOptions13.getHeartbeatConnectTimeout();
        java.lang.String str27 = mongoClientOptions13.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(commandListenerList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test4890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4890");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions7.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern9 = mongoClientOptions7.getWriteConcern();
        int int10 = mongoClientOptions7.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder(mongoClientOptions24);
        int int26 = mongoClientOptions24.getHeartbeatConnectTimeout();
        int int27 = mongoClientOptions24.getThreadsAllowedToBlockForConnectionMultiplier();
        int int28 = mongoClientOptions24.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean29 = mongoClientOptions24.isSslInvalidHostNameAllowed();
        com.mongodb.ReadConcern readConcern30 = mongoClientOptions24.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder45 = builder41.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.minHeartbeatFrequency(20000);
        boolean boolean50 = mongoClientOptions24.equals((java.lang.Object) 20000);
        int int51 = mongoClientOptions24.getHeartbeatSocketTimeout();
        boolean boolean52 = mongoClientOptions7.equals((java.lang.Object) int51);
        javax.net.SocketFactory socketFactory53 = mongoClientOptions7.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNotNull(writeConcern9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(readConcern30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(socketFactory53);
    }

    @Test
    public void test4891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4891");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str10 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions20, environment21);
        int int23 = mongoClientOptions20.getMinConnectionsPerHost();
        com.mongodb.ReadConcern readConcern24 = mongoClientOptions20.getReadConcern();
        int int25 = mongoClientOptions20.getSocketTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(readConcern24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test4892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4892");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean17 = mongoClientOptions13.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        int int19 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean20 = mongoClientOptions13.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test4893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4893");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        boolean boolean17 = mongoClientOptions16.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions16.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList19 = mongoClientOptions16.getCommandListeners();
        int int20 = mongoClientOptions16.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry21 = mongoClientOptions16.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions16);
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions16, environment23);
        mongoProperties0.setHost("hi!");
        java.lang.Class<?> wildcardClass27 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertNotNull(commandListenerList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(codecRegistry21);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNull(wildcardClass27);
    }

    @Test
    public void test4894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4894");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getConnectTimeout();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        int int11 = mongoClientOptions7.getConnectTimeout();
        int int12 = mongoClientOptions7.getConnectTimeout();
        int int13 = mongoClientOptions7.getServerSelectionTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 30000 + "'", int13 == 30000);
    }

    @Test
    public void test4895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4895");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((-1));
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.serverSelectionTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder22 = builder16.connectTimeout(52);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test4896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4896");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setGridFsDatabase("test");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test4897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4897");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder28.build();
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder(mongoClientOptions29);
        java.lang.String str31 = mongoClientOptions29.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry32 = mongoClientOptions29.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder33 = builder11.codecRegistry(codecRegistry32);
        com.mongodb.MongoClientOptions.Builder builder34 = builder2.codecRegistry(codecRegistry32);
        com.mongodb.MongoClientOptions.Builder builder36 = builder2.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.alwaysUseMBeans(false);
        com.mongodb.event.CommandListener commandListener41 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder42 = builder40.addCommandListener(commandListener41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test4898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4898");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionLifeTime(10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime(120000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4899");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minConnectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder11 = builder6.connectTimeout((int) '4');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test4900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4900");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.clearPassword();
        mongoProperties0.clearPassword();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(wildcardClass7);
    }

    @Test
    public void test4901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4901");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.minConnectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.connectionsPerHost((int) '4');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4902");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions15.getCommandListeners();
        com.mongodb.DBEncoderFactory dBEncoderFactory17 = mongoClientOptions15.getDbEncoderFactory();
        int int18 = mongoClientOptions15.getConnectTimeout();
        boolean boolean19 = mongoClientOptions15.isSocketKeepAlive();
        int int20 = mongoClientOptions15.getMinHeartbeatFrequency();
        boolean boolean21 = mongoClientOptions15.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertNotNull(dBEncoderFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test4903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4903");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions13.getCommandListeners();
        int int17 = mongoClientOptions13.getSocketTimeout();
        boolean boolean18 = mongoClientOptions13.isAlwaysUseMBeans();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder25.description("");
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        int int40 = mongoClientOptions39.getMaxConnectionIdleTime();
        boolean boolean41 = mongoClientOptions39.isSocketKeepAlive();
        boolean boolean42 = mongoClientOptions39.isSocketKeepAlive();
        com.mongodb.WriteConcern writeConcern43 = mongoClientOptions39.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder44 = builder25.writeConcern(writeConcern43);
        com.mongodb.MongoClientOptions.Builder builder46 = builder25.serverSelectionTimeout(30000);
        boolean boolean47 = mongoClientOptions13.equals((java.lang.Object) builder46);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(writeConcern43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test4904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4904");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("");
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setUsername("");
        com.mongodb.MongoClientOptions.Builder builder8 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        int int22 = mongoClientOptions21.getHeartbeatSocketTimeout();
        boolean boolean23 = mongoClientOptions21.isAlwaysUseMBeans();
        int int24 = mongoClientOptions21.getMaxConnectionLifeTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry25 = mongoClientOptions21.getCodecRegistry();
        int int26 = mongoClientOptions21.getMinConnectionsPerHost();
        com.mongodb.WriteConcern writeConcern27 = mongoClientOptions21.getWriteConcern();
        org.springframework.core.env.Environment environment28 = null;
        com.mongodb.MongoClient mongoClient29 = mongoProperties0.createMongoClient(mongoClientOptions21, environment28);
        java.lang.Class<?> wildcardClass30 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(codecRegistry25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(writeConcern27);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertNull(wildcardClass30);
    }

    @Test
    public void test4905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4905");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setGridFsDatabase("hi!");
        char[] charArray9 = new char[] { '#' };
        mongoProperties0.setPassword(charArray9);
        java.lang.String str11 = mongoProperties0.getDatabase();
        mongoProperties0.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList29 = mongoClientOptions28.getCommandListeners();
        boolean boolean30 = mongoClientOptions28.isCursorFinalizerEnabled();
        int int31 = mongoClientOptions28.getHeartbeatSocketTimeout();
        org.springframework.core.env.Environment environment32 = null;
        com.mongodb.MongoClient mongoClient33 = mongoProperties0.createMongoClient(mongoClientOptions28, environment32);
        java.lang.String str34 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[\000]");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(commandListenerList29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(mongoClient33);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test4906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4906");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        int int16 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean17 = mongoClientOptions13.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str19 = mongoProperties18.getGridFsDatabase();
        java.lang.String str20 = mongoProperties18.getGridFsDatabase();
        java.lang.String str21 = mongoProperties18.getUsername();
        mongoProperties18.setHost("hi!");
        mongoProperties18.setGridFsDatabase("hi!");
        boolean boolean26 = mongoClientOptions13.equals((java.lang.Object) mongoProperties18);
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions13.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder40.build();
        int int42 = mongoClientOptions41.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory43 = mongoClientOptions41.getSocketFactory();
        boolean boolean44 = mongoClientOptions41.isSslInvalidHostNameAllowed();
        com.mongodb.ReadPreference readPreference45 = mongoClientOptions41.getReadPreference();
        boolean boolean46 = mongoClientOptions13.equals((java.lang.Object) readPreference45);
        int int47 = mongoClientOptions13.getHeartbeatFrequency();
        org.bson.codecs.configuration.CodecRegistry codecRegistry48 = mongoClientOptions13.getCodecRegistry();
        int int49 = mongoClientOptions13.getHeartbeatFrequency();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList50 = mongoClientOptions13.getCommandListeners();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(socketFactory43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(readPreference45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(codecRegistry48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(commandListenerList50);
    }

    @Test
    public void test4907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4907");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getUsername();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        java.lang.String str5 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb://localhost/test" + "'", str5, "mongodb://localhost/test");
    }

    @Test
    public void test4908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4908");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        boolean boolean25 = mongoClientOptions24.isSocketKeepAlive();
        int int26 = mongoClientOptions24.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions24.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder4.dbEncoderFactory(dBEncoderFactory27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.maxConnectionIdleTime(30000);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder28.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
    }

    @Test
    public void test4909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4909");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        java.lang.String str4 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str5 = mongoProperties0.getHost();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.String str7 = mongoProperties0.getHost();
        java.lang.String str8 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str9 = mongoProperties0.getUsername();
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setUsername("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "test" + "'", str4, "test");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "test" + "'", str8, "test");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "test" + "'", str10, "test");
    }

    @Test
    public void test4910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4910");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions13.getWriteConcern();
        com.mongodb.ReadConcern readConcern17 = mongoClientOptions13.getReadConcern();
        boolean boolean18 = mongoClientOptions13.isCursorFinalizerEnabled();
        int int19 = mongoClientOptions13.getLocalThreshold();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions13.getDbEncoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions13.getDbEncoderFactory();
        int int22 = mongoClientOptions13.getHeartbeatFrequency();
        java.lang.String str23 = mongoClientOptions13.getRequiredReplicaSetName();
        boolean boolean24 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertNotNull(readConcern17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 15 + "'", int19 == 15);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test4911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4911");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder(mongoClientOptions20);
        int int22 = mongoClientOptions20.getHeartbeatConnectTimeout();
        int int23 = mongoClientOptions20.getThreadsAllowedToBlockForConnectionMultiplier();
        int int24 = mongoClientOptions20.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean25 = mongoClientOptions20.isSslInvalidHostNameAllowed();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions20.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder27 = builder4.socketFactory(socketFactory26);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxConnectionLifeTime((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test4912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4912");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions25.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder28 = builder11.readPreference(readPreference27);
        com.mongodb.MongoClientOptions.Builder builder29 = builder4.readPreference(readPreference27);
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions43 = builder42.build();
        int int44 = mongoClientOptions43.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry45 = mongoClientOptions43.getCodecRegistry();
        int int46 = mongoClientOptions43.getSocketTimeout();
        java.lang.String str47 = mongoClientOptions43.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory48 = mongoClientOptions43.getDbEncoderFactory();
        org.bson.codecs.configuration.CodecRegistry codecRegistry49 = mongoClientOptions43.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder50 = builder4.codecRegistry(codecRegistry49);
        com.mongodb.MongoClientOptions.Builder builder52 = builder4.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder54 = builder4.localThreshold(30000);
        com.mongodb.MongoClientOptions.Builder builder56 = builder4.connectionsPerHost((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoClientOptions43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(codecRegistry45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(dBEncoderFactory48);
        org.junit.Assert.assertNotNull(codecRegistry49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test4913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4913");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean17 = mongoClientOptions13.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("test");
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.heartbeatSocketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        boolean boolean37 = mongoClientOptions36.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory38 = mongoClientOptions36.getDbEncoderFactory();
        int int39 = mongoClientOptions36.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern40 = mongoClientOptions36.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder41 = builder22.readConcern(readConcern40);
        com.mongodb.MongoClientOptions.Builder builder43 = builder22.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.localThreshold((int) (short) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertNotNull(readConcern40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test4914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4914");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxConnectionLifeTime((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test4915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4915");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        java.lang.String str2 = mongoProperties0.getHost();
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str5 = mongoProperties0.getUri();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.clearPassword();
        mongoProperties7.setUsername("hi!");
        mongoProperties7.setPort((java.lang.Integer) 52);
        mongoProperties7.setGridFsDatabase("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties15.setHost("");
        java.lang.Integer int18 = mongoProperties15.getPort();
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties15.createMongoClient(mongoClientOptions19, environment20);
        mongoProperties15.setGridFsDatabase("");
        java.lang.String str24 = mongoProperties15.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties25 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str26 = mongoProperties25.getGridFsDatabase();
        java.lang.String str27 = mongoProperties25.getHost();
        java.lang.String str28 = mongoProperties25.getGridFsDatabase();
        java.lang.String str29 = mongoProperties25.getMongoClientDatabase();
        java.lang.String str30 = mongoProperties25.getHost();
        java.lang.String str31 = mongoProperties25.getDatabase();
        java.lang.String str32 = mongoProperties25.getHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties33 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str34 = mongoProperties33.getGridFsDatabase();
        java.lang.String str35 = mongoProperties33.getGridFsDatabase();
        java.lang.String str36 = mongoProperties33.getUsername();
        java.lang.String str37 = mongoProperties33.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass38 = mongoProperties33.getFieldNamingStrategy();
        char[] charArray43 = new char[] { 'a', '#', '#', '4' };
        mongoProperties33.setPassword(charArray43);
        mongoProperties25.setPassword(charArray43);
        mongoProperties15.setPassword(charArray43);
        mongoProperties7.setPassword(charArray43);
        mongoProperties0.setPassword(charArray43);
        char[] charArray49 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb://localhost/test" + "'", str5, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "test" + "'", str24, "test");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "test" + "'", str29, "test");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[a, #, #, 4]");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[a, #, #, 4]");
    }

    @Test
    public void test4916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4916");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        mongoProperties0.setPort((java.lang.Integer) 0);
        char[] charArray9 = mongoProperties0.getPassword();
        mongoProperties0.setPort((java.lang.Integer) 5);
        java.lang.String str12 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str13 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(charArray9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test4917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4917");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions13.getMaxWaitTime();
        int int17 = mongoClientOptions13.getMinHeartbeatFrequency();
        int int18 = mongoClientOptions13.getLocalThreshold();
        int int19 = mongoClientOptions13.getServerSelectionTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test4918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4918");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions13.getCommandListeners();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions13.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxWaitTime((int) (byte) 10);
        boolean boolean27 = mongoClientOptions13.equals((java.lang.Object) builder24);
        int int28 = mongoClientOptions13.getMinConnectionsPerHost();
        boolean boolean29 = mongoClientOptions13.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.requiredReplicaSetName("test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test4919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4919");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        int int40 = mongoClientOptions39.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory41 = mongoClientOptions39.getSocketFactory();
        com.mongodb.WriteConcern writeConcern42 = mongoClientOptions39.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder43 = builder25.writeConcern(writeConcern42);
        com.mongodb.MongoClientOptions.Builder builder44 = builder14.writeConcern(writeConcern42);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.minHeartbeatFrequency(100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(socketFactory41);
        org.junit.Assert.assertNotNull(writeConcern42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test4920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4920");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int10 = mongoClientOptions7.getConnectionsPerHost();
        int int11 = mongoClientOptions7.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.serverSelectionTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder22 = builder12.maxConnectionLifeTime((int) (short) 1);
        boolean boolean23 = mongoClientOptions7.equals((java.lang.Object) builder22);
        int int24 = mongoClientOptions7.getHeartbeatFrequency();
        int int25 = mongoClientOptions7.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10000 + "'", int24 == 10000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 15 + "'", int25 == 15);
    }

    @Test
    public void test4921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4921");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int17 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean18 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        com.mongodb.ReadConcern readConcern19 = mongoClientOptions13.getReadConcern();
        java.lang.String str20 = mongoClientOptions13.getDescription();
        boolean boolean21 = mongoClientOptions13.isAlwaysUseMBeans();
        int int22 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str23 = mongoClientOptions13.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry24 = mongoClientOptions13.getCodecRegistry();
        javax.net.SocketFactory socketFactory25 = mongoClientOptions13.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(readConcern19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry24);
        org.junit.Assert.assertNotNull(socketFactory25);
    }

    @Test
    public void test4922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4922");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder36.build();
        int int38 = mongoClientOptions37.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory39 = mongoClientOptions37.getSocketFactory();
        com.mongodb.WriteConcern writeConcern40 = mongoClientOptions37.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder41 = builder19.writeConcern(writeConcern40);
        com.mongodb.MongoClientOptions.Builder builder42 = builder16.writeConcern(writeConcern40);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.localThreshold(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(socketFactory39);
        org.junit.Assert.assertNotNull(writeConcern40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test4923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4923");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions14.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder2.dbEncoderFactory(dBEncoderFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.build();
        com.mongodb.WriteConcern writeConcern24 = mongoClientOptions23.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(writeConcern24);
    }

    @Test
    public void test4924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4924");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        int int25 = mongoClientOptions24.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions24.getSocketFactory();
        com.mongodb.WriteConcern writeConcern27 = mongoClientOptions24.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder28 = builder10.writeConcern(writeConcern27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder10.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder32 = builder10.serverSelectionTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder32.build();
        boolean boolean34 = mongoClientOptions33.isSocketKeepAlive();
        int int35 = mongoClientOptions33.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertNotNull(writeConcern27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test4925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4925");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getRequiredReplicaSetName();
        int int16 = mongoClientOptions13.getConnectTimeout();
        boolean boolean17 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        int int18 = mongoClientOptions13.getMinConnectionsPerHost();
        int int19 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
    }

    @Test
    public void test4926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4926");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionIdleTime();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean10 = mongoClientOptions7.isAlwaysUseMBeans();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int12 = mongoClientOptions7.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder(mongoClientOptions7);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.serverSelectionTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.localThreshold(10000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test4927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4927");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxConnectionIdleTime(10);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int15 = mongoClientOptions13.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder16 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int17 = mongoClientOptions13.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
    }

    @Test
    public void test4928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4928");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionIdleTime();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean10 = mongoClientOptions7.isAlwaysUseMBeans();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        com.mongodb.MongoClientOptions.Builder builder26 = com.mongodb.MongoClientOptions.builder(mongoClientOptions25);
        int int27 = mongoClientOptions25.getHeartbeatConnectTimeout();
        int int28 = mongoClientOptions25.getThreadsAllowedToBlockForConnectionMultiplier();
        int int29 = mongoClientOptions25.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean30 = mongoClientOptions25.isSslInvalidHostNameAllowed();
        com.mongodb.ReadConcern readConcern31 = mongoClientOptions25.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.minHeartbeatFrequency(20000);
        boolean boolean51 = mongoClientOptions25.equals((java.lang.Object) 20000);
        boolean boolean52 = mongoClientOptions7.equals((java.lang.Object) mongoClientOptions25);
        com.mongodb.MongoClientOptions.Builder builder53 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions25);
        com.mongodb.MongoClientOptions.Builder builder54 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder60 = builder56.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions67 = builder66.build();
        com.mongodb.MongoClientOptions.Builder builder68 = com.mongodb.MongoClientOptions.builder(mongoClientOptions67);
        java.lang.String str69 = mongoClientOptions67.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry70 = mongoClientOptions67.getCodecRegistry();
        javax.net.SocketFactory socketFactory71 = mongoClientOptions67.getSocketFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList72 = mongoClientOptions67.getCommandListeners();
        int int73 = mongoClientOptions67.getLocalThreshold();
        org.bson.codecs.configuration.CodecRegistry codecRegistry74 = mongoClientOptions67.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder75 = builder53.codecRegistry(codecRegistry74);
        com.mongodb.MongoClientOptions.Builder builder77 = builder75.heartbeatFrequency(15);
        com.mongodb.MongoClientOptions.Builder builder79 = builder75.socketTimeout(20000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(readConcern31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(mongoClientOptions67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry70);
        org.junit.Assert.assertNotNull(socketFactory71);
        org.junit.Assert.assertNotNull(commandListenerList72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 15 + "'", int73 == 15);
        org.junit.Assert.assertNotNull(codecRegistry74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test4929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4929");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int10 = mongoClientOptions7.getConnectionsPerHost();
        java.lang.String str11 = mongoClientOptions7.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder19 = builder13.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.requiredReplicaSetName("mongodb://localhost/test");
        boolean boolean26 = mongoClientOptions7.equals((java.lang.Object) builder23);
        java.util.List<com.mongodb.event.CommandListener> commandListenerList27 = mongoClientOptions7.getCommandListeners();
        boolean boolean28 = mongoClientOptions7.isSocketKeepAlive();
        int int29 = mongoClientOptions7.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "test" + "'", str11, "test");
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(commandListenerList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test4930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4930");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        mongoProperties0.setAuthenticationDatabase("test");
        java.lang.String str12 = mongoProperties0.getUri();
        java.lang.String str13 = mongoProperties0.getHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str15 = mongoProperties14.getGridFsDatabase();
        java.lang.String str16 = mongoProperties14.getGridFsDatabase();
        java.lang.String str17 = mongoProperties14.getUsername();
        mongoProperties14.setHost("hi!");
        mongoProperties14.setGridFsDatabase("hi!");
        mongoProperties14.setGridFsDatabase("test");
        java.lang.String str24 = mongoProperties14.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder31 = builder25.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        org.springframework.core.env.Environment environment35 = null;
        com.mongodb.MongoClient mongoClient36 = mongoProperties14.createMongoClient(mongoClientOptions34, environment35);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties37 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str38 = mongoProperties37.getGridFsDatabase();
        java.lang.String str39 = mongoProperties37.getHost();
        java.lang.String str40 = mongoProperties37.getGridFsDatabase();
        java.lang.String str41 = mongoProperties37.getMongoClientDatabase();
        char[] charArray42 = mongoProperties37.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties43 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str44 = mongoProperties43.getGridFsDatabase();
        java.lang.String str45 = mongoProperties43.getGridFsDatabase();
        java.lang.String str46 = mongoProperties43.getUsername();
        java.lang.String str47 = mongoProperties43.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass48 = mongoProperties43.getFieldNamingStrategy();
        char[] charArray53 = new char[] { 'a', '#', '#', '4' };
        mongoProperties43.setPassword(charArray53);
        mongoProperties37.setPassword(charArray53);
        mongoProperties14.setPassword(charArray53);
        mongoProperties0.setPassword(charArray53);
        java.lang.Class<?> wildcardClass58 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str59 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertNotNull(mongoClient36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "test" + "'", str41, "test");
        org.junit.Assert.assertNull(charArray42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(wildcardClass48);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[a, #, #, 4]");
        org.junit.Assert.assertNull(wildcardClass58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "test" + "'", str59, "test");
    }

    @Test
    public void test4931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4931");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getConnectTimeout();
        java.lang.String str10 = mongoClientOptions7.getDescription();
        boolean boolean11 = mongoClientOptions7.isAlwaysUseMBeans();
        com.mongodb.DBDecoderFactory dBDecoderFactory12 = mongoClientOptions7.getDbDecoderFactory();
        int int13 = mongoClientOptions7.getMaxConnectionIdleTime();
        boolean boolean14 = mongoClientOptions7.isSslEnabled();
        int int15 = mongoClientOptions7.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "test" + "'", str10, "test");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 15 + "'", int15 == 15);
    }

    @Test
    public void test4932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4932");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionIdleTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory9 = mongoClientOptions7.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        com.mongodb.MongoClientOptions.Builder builder35 = com.mongodb.MongoClientOptions.builder(mongoClientOptions34);
        java.lang.String str36 = mongoClientOptions34.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry37 = mongoClientOptions34.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder38 = builder16.codecRegistry(codecRegistry37);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder41 = builder40.legacyDefaults();
        boolean boolean42 = mongoClientOptions7.equals((java.lang.Object) builder41);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test4933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4933");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getMongoClientDatabase();
        char[] charArray4 = mongoProperties0.getPassword();
        char[] charArray5 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.serverSelectionTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        boolean boolean36 = mongoClientOptions35.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory37 = mongoClientOptions35.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder38 = builder15.dbEncoderFactory(dBEncoderFactory37);
        com.mongodb.MongoClientOptions.Builder builder39 = builder14.dbEncoderFactory(dBEncoderFactory37);
        com.mongodb.MongoClientOptions.Builder builder41 = builder14.connectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder14.build();
        org.springframework.core.env.Environment environment43 = null;
        com.mongodb.MongoClient mongoClient44 = mongoProperties0.createMongoClient(mongoClientOptions42, environment43);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties45 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str46 = mongoProperties45.getGridFsDatabase();
        java.lang.String str47 = mongoProperties45.getGridFsDatabase();
        mongoProperties45.setPort((java.lang.Integer) 0);
        java.lang.String str50 = mongoProperties45.getGridFsDatabase();
        mongoProperties45.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties52 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str53 = mongoProperties52.getAuthenticationDatabase();
        mongoProperties52.setAuthenticationDatabase("hi!");
        java.lang.String str56 = mongoProperties52.getHost();
        java.lang.String str57 = mongoProperties52.getMongoClientDatabase();
        char[] charArray58 = mongoProperties52.getPassword();
        char[] charArray59 = mongoProperties52.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties60 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str61 = mongoProperties60.getGridFsDatabase();
        java.lang.String str62 = mongoProperties60.getGridFsDatabase();
        java.lang.String str63 = mongoProperties60.getUsername();
        java.lang.String str64 = mongoProperties60.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass65 = mongoProperties60.getFieldNamingStrategy();
        char[] charArray70 = new char[] { 'a', '#', '#', '4' };
        mongoProperties60.setPassword(charArray70);
        mongoProperties52.setPassword(charArray70);
        mongoProperties45.setPassword(charArray70);
        mongoProperties0.setPassword(charArray70);
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setHost("hi!");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "test" + "'", str3, "test");
        org.junit.Assert.assertNull(charArray4);
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertNotNull(mongoClient44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "test" + "'", str57, "test");
        org.junit.Assert.assertNull(charArray58);
        org.junit.Assert.assertNull(charArray59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(wildcardClass65);
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[a, #, #, 4]");
    }

    @Test
    public void test4934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4934");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int17 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean18 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        javax.net.SocketFactory socketFactory19 = mongoClientOptions13.getSocketFactory();
        int int20 = mongoClientOptions13.getMinConnectionsPerHost();
        boolean boolean21 = mongoClientOptions13.isSslEnabled();
        boolean boolean22 = mongoClientOptions13.isAlwaysUseMBeans();
        com.mongodb.DBDecoderFactory dBDecoderFactory23 = mongoClientOptions13.getDbDecoderFactory();
        org.bson.codecs.configuration.CodecRegistry codecRegistry24 = mongoClientOptions13.getCodecRegistry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(socketFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory23);
        org.junit.Assert.assertNotNull(codecRegistry24);
    }

    @Test
    public void test4935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4935");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.connectionsPerHost(52);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        boolean boolean31 = mongoClientOptions30.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory32 = mongoClientOptions30.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList33 = mongoClientOptions30.getCommandListeners();
        com.mongodb.ReadPreference readPreference34 = mongoClientOptions30.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.maxWaitTime((int) (byte) 10);
        boolean boolean44 = mongoClientOptions30.equals((java.lang.Object) builder41);
        int int45 = mongoClientOptions30.getMaxConnectionLifeTime();
        int int46 = mongoClientOptions30.getHeartbeatFrequency();
        int int47 = mongoClientOptions30.getSocketTimeout();
        com.mongodb.ReadPreference readPreference48 = mongoClientOptions30.getReadPreference();
        int int49 = mongoClientOptions30.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern50 = mongoClientOptions30.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder51 = builder14.writeConcern(writeConcern50);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory32);
        org.junit.Assert.assertNotNull(commandListenerList33);
        org.junit.Assert.assertNotNull(readPreference34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(readPreference48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(writeConcern50);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test4936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4936");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder36.build();
        int int38 = mongoClientOptions37.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory39 = mongoClientOptions37.getSocketFactory();
        boolean boolean40 = mongoClientOptions37.isSslInvalidHostNameAllowed();
        com.mongodb.ReadPreference readPreference41 = mongoClientOptions37.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder42 = builder23.readPreference(readPreference41);
        com.mongodb.MongoClientOptions.Builder builder43 = builder10.readPreference(readPreference41);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder46 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder52 = builder48.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions59 = builder58.build();
        com.mongodb.MongoClientOptions.Builder builder60 = com.mongodb.MongoClientOptions.builder(mongoClientOptions59);
        java.lang.String str61 = mongoClientOptions59.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry62 = mongoClientOptions59.getCodecRegistry();
        javax.net.SocketFactory socketFactory63 = mongoClientOptions59.getSocketFactory();
        boolean boolean64 = mongoClientOptions59.isAlwaysUseMBeans();
        int int65 = mongoClientOptions59.getConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory66 = mongoClientOptions59.getDbEncoderFactory();
        boolean boolean67 = mongoClientOptions59.isCursorFinalizerEnabled();
        boolean boolean68 = mongoClientOptions59.isAlwaysUseMBeans();
        int int69 = mongoClientOptions59.getLocalThreshold();
        java.lang.String str70 = mongoClientOptions59.getDescription();
        com.mongodb.DBDecoderFactory dBDecoderFactory71 = mongoClientOptions59.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder72 = builder45.dbDecoderFactory(dBDecoderFactory71);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(socketFactory39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(readPreference41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(mongoClientOptions59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry62);
        org.junit.Assert.assertNotNull(socketFactory63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 15 + "'", int69 == 15);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(dBDecoderFactory71);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test4937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4937");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test4938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4938");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        boolean boolean11 = mongoClientOptions7.isSslInvalidHostNameAllowed();
        boolean boolean12 = mongoClientOptions7.isSocketKeepAlive();
        java.lang.String str13 = mongoClientOptions7.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions7);
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions7.getDbDecoderFactory();
        int int16 = mongoClientOptions7.getConnectTimeout();
        java.lang.String str17 = mongoClientOptions7.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test4939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4939");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str9 = mongoProperties0.getHost();
        java.lang.String str10 = mongoProperties0.getHost();
        mongoProperties0.setPort((java.lang.Integer) 32);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test4940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4940");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str7 = mongoProperties0.getHost();
        java.lang.String str8 = mongoProperties0.getUri();
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test4941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4941");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions13.getWriteConcern();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        javax.net.SocketFactory socketFactory18 = mongoClientOptions13.getSocketFactory();
        int int19 = mongoClientOptions13.getHeartbeatSocketTimeout();
        com.mongodb.WriteConcern writeConcern20 = mongoClientOptions13.getWriteConcern();
        int int21 = mongoClientOptions13.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(socketFactory18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(writeConcern20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 120000 + "'", int21 == 120000);
    }

    @Test
    public void test4942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4942");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.localThreshold(15);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatConnectTimeout(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test4943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4943");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getUsername();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.serverSelectionTimeout(0);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        org.springframework.core.env.Environment environment19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties0.createMongoClient(mongoClientOptions18, environment19);
        java.lang.String str21 = mongoProperties0.getHost();
        mongoProperties0.setPort((java.lang.Integer) 97);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test4944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4944");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        org.bson.codecs.configuration.CodecRegistry codecRegistry10 = mongoClientOptions7.getCodecRegistry();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions7.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertNotNull(codecRegistry10);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4945");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        java.lang.String str4 = mongoProperties0.getMongoClientDatabase();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setHost("mongodb://localhost/test");
        java.lang.String str10 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "test" + "'", str4, "test");
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test4946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4946");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionLifeTime(10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.socketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder8.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        boolean boolean27 = mongoClientOptions26.isSocketKeepAlive();
        int int28 = mongoClientOptions26.getConnectTimeout();
        int int29 = mongoClientOptions26.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder(mongoClientOptions26);
        int int31 = mongoClientOptions26.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean32 = mongoClientOptions26.isSslInvalidHostNameAllowed();
        boolean boolean33 = mongoClientOptions26.isSslEnabled();
        com.mongodb.ReadPreference readPreference34 = mongoClientOptions26.getReadPreference();
        com.mongodb.ReadPreference readPreference35 = mongoClientOptions26.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder36 = builder8.readPreference(readPreference35);
        com.mongodb.MongoClientOptions.Builder builder38 = builder8.connectTimeout((int) '4');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10000 + "'", int29 == 10000);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(readPreference34);
        org.junit.Assert.assertNotNull(readPreference35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test4947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4947");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getRequiredReplicaSetName();
        int int16 = mongoClientOptions13.getConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry17 = mongoClientOptions13.getCodecRegistry();
        boolean boolean18 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        java.lang.String str19 = mongoClientOptions13.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(codecRegistry17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
    }

    @Test
    public void test4948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4948");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int17 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean18 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        com.mongodb.ReadConcern readConcern19 = mongoClientOptions13.getReadConcern();
        java.lang.String str20 = mongoClientOptions13.getDescription();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties21.clearPassword();
        mongoProperties21.setUsername("hi!");
        mongoProperties21.setUri("");
        boolean boolean27 = mongoClientOptions13.equals((java.lang.Object) mongoProperties21);
        java.lang.String str28 = mongoProperties21.getHost();
        mongoProperties21.clearPassword();
        mongoProperties21.setAuthenticationDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(readConcern19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test4949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4949");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        java.lang.String str16 = mongoClientOptions13.getDescription();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        int int18 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int19 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int20 = mongoClientOptions13.getServerSelectionTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test4950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4950");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions16.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder19 = builder8.dbDecoderFactory(dBDecoderFactory18);
        com.mongodb.MongoClientOptions.Builder builder20 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        int int35 = mongoClientOptions34.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory36 = mongoClientOptions34.getSocketFactory();
        com.mongodb.WriteConcern writeConcern37 = mongoClientOptions34.getWriteConcern();
        boolean boolean38 = mongoClientOptions34.isAlwaysUseMBeans();
        boolean boolean39 = mongoClientOptions34.isSocketKeepAlive();
        com.mongodb.WriteConcern writeConcern40 = mongoClientOptions34.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder41 = builder20.writeConcern(writeConcern40);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder47 = builder43.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder49 = builder43.connectionsPerHost((int) (short) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(socketFactory36);
        org.junit.Assert.assertNotNull(writeConcern37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(writeConcern40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test4951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4951");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        boolean boolean17 = mongoClientOptions16.isSocketKeepAlive();
        int int18 = mongoClientOptions16.getThreadsAllowedToBlockForConnectionMultiplier();
        int int19 = mongoClientOptions16.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry20 = mongoClientOptions16.getCodecRegistry();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions16.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder22 = builder6.dbEncoderFactory(dBEncoderFactory21);
        com.mongodb.MongoClientOptions.Builder builder24 = builder6.minConnectionsPerHost(52);
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions43 = builder42.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory44 = mongoClientOptions43.getDbEncoderFactory();
        com.mongodb.ReadConcern readConcern45 = mongoClientOptions43.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder46 = builder35.readConcern(readConcern45);
        com.mongodb.MongoClientOptions.Builder builder47 = builder6.readConcern(readConcern45);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.maxConnectionLifeTime(52);
        com.mongodb.MongoClientOptions.Builder builder51 = builder47.heartbeatConnectTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder58 = builder54.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions65 = builder64.build();
        com.mongodb.MongoClientOptions.Builder builder66 = com.mongodb.MongoClientOptions.builder(mongoClientOptions65);
        java.lang.String str67 = mongoClientOptions65.getRequiredReplicaSetName();
        int int68 = mongoClientOptions65.getConnectTimeout();
        java.lang.String str69 = mongoClientOptions65.getRequiredReplicaSetName();
        int int70 = mongoClientOptions65.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory71 = mongoClientOptions65.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder72 = builder51.dbDecoderFactory(dBDecoderFactory71);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(codecRegistry20);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoClientOptions43);
        org.junit.Assert.assertNotNull(dBEncoderFactory44);
        org.junit.Assert.assertNotNull(readConcern45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(mongoClientOptions65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10000 + "'", int68 == 10000);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 120000 + "'", int70 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory71);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test4952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4952");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.description("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        com.mongodb.MongoClientOptions.Builder builder28 = builder25.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder41.build();
        com.mongodb.MongoClientOptions.Builder builder43 = com.mongodb.MongoClientOptions.builder(mongoClientOptions42);
        java.lang.String str44 = mongoClientOptions42.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry45 = mongoClientOptions42.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder46 = builder25.codecRegistry(codecRegistry45);
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder25.build();
        com.mongodb.ReadPreference readPreference48 = mongoClientOptions47.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder49 = builder10.readPreference(readPreference48);
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder56 = builder52.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder62.build();
        com.mongodb.MongoClientOptions.Builder builder64 = com.mongodb.MongoClientOptions.builder(mongoClientOptions63);
        java.lang.String str65 = mongoClientOptions63.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry66 = mongoClientOptions63.getCodecRegistry();
        boolean boolean67 = mongoClientOptions63.isAlwaysUseMBeans();
        com.mongodb.ReadPreference readPreference68 = mongoClientOptions63.getReadPreference();
        int int69 = mongoClientOptions63.getServerSelectionTimeout();
        java.lang.String str70 = mongoClientOptions63.getDescription();
        int int71 = mongoClientOptions63.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.DBEncoderFactory dBEncoderFactory72 = mongoClientOptions63.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder73 = builder10.dbEncoderFactory(dBEncoderFactory72);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(mongoClientOptions47);
        org.junit.Assert.assertNotNull(readPreference48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoClientOptions63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(readPreference68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 5 + "'", int71 == 5);
        org.junit.Assert.assertNotNull(dBEncoderFactory72);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test4953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4953");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Integer int5 = mongoProperties0.getPort();
        mongoProperties0.setHost("hi!");
        java.lang.String str8 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setHost("hi!");
        java.lang.String str11 = mongoProperties0.getHost();
        char[] charArray12 = mongoProperties0.getPassword();
        java.lang.String str13 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
    }

    @Test
    public void test4954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4954");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str10 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions20, environment21);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.description("test");
        boolean boolean30 = mongoClientOptions20.equals((java.lang.Object) "test");
        int int31 = mongoClientOptions20.getServerSelectionTimeout();
        int int32 = mongoClientOptions20.getMaxWaitTime();
        int int33 = mongoClientOptions20.getMaxConnectionLifeTime();
        javax.net.SocketFactory socketFactory34 = mongoClientOptions20.getSocketFactory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 30000 + "'", int31 == 30000);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(socketFactory34);
    }

    @Test
    public void test4955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4955");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.threadsAllowedToBlockForConnectionMultiplier(10000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.minHeartbeatFrequency((int) 'a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test4956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4956");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.minHeartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder13 = builder12.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatConnectTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.requiredReplicaSetName("test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test4957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4957");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        java.lang.String str15 = mongoClientOptions13.getRequiredReplicaSetName();
        java.lang.String str16 = mongoClientOptions13.getRequiredReplicaSetName();
        int int17 = mongoClientOptions13.getHeartbeatFrequency();
        int int18 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionIdleTime(20000);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.connectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.threadsAllowedToBlockForConnectionMultiplier(20000);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder39.build();
        com.mongodb.ReadConcern readConcern41 = mongoClientOptions40.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder42 = builder30.readConcern(readConcern41);
        com.mongodb.MongoClientOptions.Builder builder43 = builder19.readConcern(readConcern41);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertNotNull(readConcern41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test4958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4958");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionIdleTime();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean10 = mongoClientOptions7.isAlwaysUseMBeans();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int12 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.DBDecoderFactory dBDecoderFactory13 = mongoClientOptions7.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertNotNull(dBDecoderFactory13);
    }

    @Test
    public void test4959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4959");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setGridFsDatabase("hi!");
        char[] charArray9 = new char[] { '#' };
        mongoProperties0.setPassword(charArray9);
        java.lang.String str11 = mongoProperties0.getDatabase();
        java.lang.String str12 = mongoProperties0.getUsername();
        mongoProperties0.setDatabase("");
        java.lang.Integer int15 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#]");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(int15);
    }

    @Test
    public void test4960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4960");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean17 = mongoClientOptions13.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("test");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test4961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4961");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int10 = mongoClientOptions7.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry11 = mongoClientOptions7.getCodecRegistry();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        int int13 = mongoClientOptions7.getHeartbeatFrequency();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList14 = mongoClientOptions7.getCommandListeners();
        int int15 = mongoClientOptions7.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        com.mongodb.DBDecoderFactory dBDecoderFactory17 = mongoClientOptions7.getDbDecoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions7.getDbDecoderFactory();
        int int19 = mongoClientOptions7.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder20 = com.mongodb.MongoClientOptions.builder(mongoClientOptions7);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(codecRegistry11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertNotNull(commandListenerList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory17);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test4962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4962");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int17 = mongoClientOptions13.getLocalThreshold();
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        org.bson.codecs.configuration.CodecRegistry codecRegistry19 = mongoClientOptions13.getCodecRegistry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 15 + "'", int17 == 15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(codecRegistry19);
    }

    @Test
    public void test4963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4963");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions13.getCommandListeners();
        boolean boolean17 = mongoClientOptions13.isCursorFinalizerEnabled();
        boolean boolean18 = mongoClientOptions13.isAlwaysUseMBeans();
        boolean boolean19 = mongoClientOptions13.isSslEnabled();
        int int20 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test4964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4964");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder(mongoClientOptions24);
        java.lang.String str26 = mongoClientOptions24.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry27 = mongoClientOptions24.getCodecRegistry();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions24.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder29 = builder6.readPreference(readPreference28);
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions43 = builder42.build();
        int int44 = mongoClientOptions43.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry45 = mongoClientOptions43.getCodecRegistry();
        java.lang.String str46 = mongoClientOptions43.getDescription();
        boolean boolean47 = mongoClientOptions43.isAlwaysUseMBeans();
        boolean boolean48 = mongoClientOptions43.isSocketKeepAlive();
        int int49 = mongoClientOptions43.getConnectionsPerHost();
        int int50 = mongoClientOptions43.getSocketTimeout();
        int int51 = mongoClientOptions43.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.ReadConcern readConcern52 = mongoClientOptions43.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder53 = builder6.readConcern(readConcern52);
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder6.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry27);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoClientOptions43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(codecRegistry45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(readConcern52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(mongoClientOptions54);
    }

    @Test
    public void test4965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4965");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 0);
        java.lang.String str5 = mongoProperties0.getHost();
        java.lang.String str6 = mongoProperties0.getUsername();
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.setUsername("test");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test4966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4966");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test4967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4967");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getUsername();
        java.lang.String str3 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str6 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory22 = mongoClientOptions20.getSocketFactory();
        int int23 = mongoClientOptions20.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory24 = mongoClientOptions20.getDbDecoderFactory();
        int int25 = mongoClientOptions20.getMaxConnectionLifeTime();
        int int26 = mongoClientOptions20.getMinHeartbeatFrequency();
        java.lang.String str27 = mongoClientOptions20.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder48 = builder42.socketTimeout((int) '4');
        boolean boolean49 = mongoClientOptions20.equals((java.lang.Object) '4');
        int int50 = mongoClientOptions20.getMaxConnectionLifeTime();
        org.springframework.core.env.Environment environment51 = null;
        com.mongodb.MongoClient mongoClient52 = mongoProperties0.createMongoClient(mongoClientOptions20, environment51);
        java.lang.String str53 = mongoProperties0.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties54 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties54.setHost("");
        java.lang.Integer int57 = mongoProperties54.getPort();
        com.mongodb.MongoClientOptions mongoClientOptions58 = null;
        org.springframework.core.env.Environment environment59 = null;
        com.mongodb.MongoClient mongoClient60 = mongoProperties54.createMongoClient(mongoClientOptions58, environment59);
        mongoProperties54.setGridFsDatabase("");
        java.lang.String str63 = mongoProperties54.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties64 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str65 = mongoProperties64.getGridFsDatabase();
        java.lang.String str66 = mongoProperties64.getHost();
        java.lang.String str67 = mongoProperties64.getGridFsDatabase();
        java.lang.String str68 = mongoProperties64.getMongoClientDatabase();
        java.lang.String str69 = mongoProperties64.getHost();
        java.lang.String str70 = mongoProperties64.getDatabase();
        java.lang.String str71 = mongoProperties64.getHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties72 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str73 = mongoProperties72.getGridFsDatabase();
        java.lang.String str74 = mongoProperties72.getGridFsDatabase();
        java.lang.String str75 = mongoProperties72.getUsername();
        java.lang.String str76 = mongoProperties72.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass77 = mongoProperties72.getFieldNamingStrategy();
        char[] charArray82 = new char[] { 'a', '#', '#', '4' };
        mongoProperties72.setPassword(charArray82);
        mongoProperties64.setPassword(charArray82);
        mongoProperties54.setPassword(charArray82);
        mongoProperties0.setPassword(charArray82);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(socketFactory22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 120000 + "'", int23 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 500 + "'", int26 == 500);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(mongoClient52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "mongodb://localhost/test" + "'", str53, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int57);
        org.junit.Assert.assertNotNull(mongoClient60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "test" + "'", str63, "test");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "test" + "'", str68, "test");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNull(wildcardClass77);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[a, #, #, 4]");
    }

    @Test
    public void test4968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4968");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions13.getWriteConcern();
        com.mongodb.ReadConcern readConcern17 = mongoClientOptions13.getReadConcern();
        boolean boolean18 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        boolean boolean19 = mongoClientOptions13.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertNotNull(readConcern17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test4969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4969");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder1.localThreshold(100);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.connectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.connectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.heartbeatSocketTimeout((int) (short) -1);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder46.build();
        com.mongodb.MongoClientOptions.Builder builder48 = com.mongodb.MongoClientOptions.builder(mongoClientOptions47);
        java.lang.String str49 = mongoClientOptions47.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry50 = mongoClientOptions47.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder51 = builder29.codecRegistry(codecRegistry50);
        com.mongodb.MongoClientOptions.Builder builder52 = builder16.codecRegistry(codecRegistry50);
        com.mongodb.MongoClientOptions.Builder builder53 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder59 = builder55.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions66 = builder65.build();
        com.mongodb.MongoClientOptions.Builder builder67 = com.mongodb.MongoClientOptions.builder(mongoClientOptions66);
        java.lang.String str68 = mongoClientOptions66.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry69 = mongoClientOptions66.getCodecRegistry();
        javax.net.SocketFactory socketFactory70 = mongoClientOptions66.getSocketFactory();
        boolean boolean71 = mongoClientOptions66.isAlwaysUseMBeans();
        int int72 = mongoClientOptions66.getConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory73 = mongoClientOptions66.getDbEncoderFactory();
        boolean boolean74 = mongoClientOptions66.isCursorFinalizerEnabled();
        boolean boolean75 = mongoClientOptions66.isAlwaysUseMBeans();
        int int76 = mongoClientOptions66.getLocalThreshold();
        com.mongodb.ReadConcern readConcern77 = mongoClientOptions66.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder78 = builder52.readConcern(readConcern77);
        com.mongodb.MongoClientOptions.Builder builder80 = builder52.serverSelectionTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder81 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder83 = builder81.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder85 = builder83.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder87 = builder85.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions88 = builder87.build();
        boolean boolean89 = mongoClientOptions88.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory90 = mongoClientOptions88.getDbEncoderFactory();
        int int91 = mongoClientOptions88.getConnectionsPerHost();
        boolean boolean92 = mongoClientOptions88.isCursorFinalizerEnabled();
        com.mongodb.DBDecoderFactory dBDecoderFactory93 = mongoClientOptions88.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder94 = builder80.dbDecoderFactory(dBDecoderFactory93);
        com.mongodb.MongoClientOptions.Builder builder95 = builder9.dbDecoderFactory(dBDecoderFactory93);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(mongoClientOptions47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(mongoClientOptions66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry69);
        org.junit.Assert.assertNotNull(socketFactory70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 100 + "'", int72 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 15 + "'", int76 == 15);
        org.junit.Assert.assertNotNull(readConcern77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(mongoClientOptions88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 100 + "'", int91 == 100);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(dBDecoderFactory93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test4970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4970");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.minHeartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.minConnectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.socketTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.serverSelectionTimeout(5);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4971");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder26.build();
        boolean boolean28 = mongoClientOptions27.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory29 = mongoClientOptions27.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList30 = mongoClientOptions27.getCommandListeners();
        com.mongodb.ReadPreference readPreference31 = mongoClientOptions27.getReadPreference();
        int int32 = mongoClientOptions27.getMaxConnectionLifeTime();
        int int33 = mongoClientOptions27.getLocalThreshold();
        com.mongodb.DBDecoderFactory dBDecoderFactory34 = mongoClientOptions27.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder12.dbDecoderFactory(dBDecoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.connectTimeout((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder39 = builder35.minHeartbeatFrequency((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: minHeartbeatFrequency must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory29);
        org.junit.Assert.assertNotNull(commandListenerList30);
        org.junit.Assert.assertNotNull(readPreference31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 15 + "'", int33 == 15);
        org.junit.Assert.assertNotNull(dBDecoderFactory34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test4972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4972");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxWaitTime(20000);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        boolean boolean19 = mongoClientOptions18.isSocketKeepAlive();
        int int20 = mongoClientOptions18.getThreadsAllowedToBlockForConnectionMultiplier();
        int int21 = mongoClientOptions18.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry22 = mongoClientOptions18.getCodecRegistry();
        com.mongodb.DBEncoderFactory dBEncoderFactory23 = mongoClientOptions18.getDbEncoderFactory();
        int int24 = mongoClientOptions18.getHeartbeatFrequency();
        int int25 = mongoClientOptions18.getLocalThreshold();
        int int26 = mongoClientOptions18.getMaxConnectionIdleTime();
        java.lang.String str27 = mongoClientOptions18.getRequiredReplicaSetName();
        com.mongodb.ReadConcern readConcern28 = mongoClientOptions18.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder29 = builder10.readConcern(readConcern28);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertNotNull(codecRegistry22);
        org.junit.Assert.assertNotNull(dBEncoderFactory23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10000 + "'", int24 == 10000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 15 + "'", int25 == 15);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(readConcern28);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test4973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4973");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int17 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean18 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        javax.net.SocketFactory socketFactory19 = mongoClientOptions13.getSocketFactory();
        int int20 = mongoClientOptions13.getMinConnectionsPerHost();
        boolean boolean21 = mongoClientOptions13.isSslEnabled();
        int int22 = mongoClientOptions13.getServerSelectionTimeout();
        boolean boolean23 = mongoClientOptions13.isAlwaysUseMBeans();
        int int24 = mongoClientOptions13.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(socketFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
    }

    @Test
    public void test4974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4974");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getConnectTimeout();
        int int10 = mongoClientOptions7.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder(mongoClientOptions7);
        int int12 = mongoClientOptions7.getConnectTimeout();
        com.mongodb.WriteConcern writeConcern13 = mongoClientOptions7.getWriteConcern();
        boolean boolean14 = mongoClientOptions7.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
        org.junit.Assert.assertNotNull(writeConcern13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test4975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4975");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        com.mongodb.MongoClientOptions.Builder builder24 = com.mongodb.MongoClientOptions.builder(mongoClientOptions23);
        java.lang.String str25 = mongoClientOptions23.getRequiredReplicaSetName();
        int int26 = mongoClientOptions23.getConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions23.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder8.dbEncoderFactory(dBEncoderFactory27);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder48.build();
        int int50 = mongoClientOptions49.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference51 = mongoClientOptions49.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder52 = builder35.readPreference(readPreference51);
        com.mongodb.MongoClientOptions.Builder builder53 = builder28.readPreference(readPreference51);
        com.mongodb.MongoClientOptions.Builder builder55 = builder28.heartbeatSocketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder56 = builder28.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(readPreference51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test4976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4976");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.serverSelectionTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        com.mongodb.MongoClientOptions.Builder builder19 = builder16.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test4977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4977");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        boolean boolean16 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        java.lang.String str17 = mongoClientOptions13.getDescription();
        java.lang.String str18 = mongoClientOptions13.getRequiredReplicaSetName();
        java.lang.String str19 = mongoClientOptions13.getRequiredReplicaSetName();
        int int20 = mongoClientOptions13.getMinHeartbeatFrequency();
        int int21 = mongoClientOptions13.getServerSelectionTimeout();
        int int22 = mongoClientOptions13.getConnectionsPerHost();
        boolean boolean23 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        com.mongodb.ReadConcern readConcern24 = mongoClientOptions13.getReadConcern();
        int int25 = mongoClientOptions13.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions13.getReadPreference();
        int int28 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(readConcern24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test4978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4978");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str4 = mongoProperties0.getHost();
        java.lang.String str5 = mongoProperties0.getHost();
        mongoProperties0.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder(mongoClientOptions20);
        java.lang.String str22 = mongoClientOptions20.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry23 = mongoClientOptions20.getCodecRegistry();
        javax.net.SocketFactory socketFactory24 = mongoClientOptions20.getSocketFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList25 = mongoClientOptions20.getCommandListeners();
        int int26 = mongoClientOptions20.getLocalThreshold();
        org.springframework.core.env.Environment environment27 = null;
        com.mongodb.MongoClient mongoClient28 = mongoProperties0.createMongoClient(mongoClientOptions20, environment27);
        int int29 = mongoClientOptions20.getConnectTimeout();
        javax.net.SocketFactory socketFactory30 = mongoClientOptions20.getSocketFactory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry23);
        org.junit.Assert.assertNotNull(socketFactory24);
        org.junit.Assert.assertNotNull(commandListenerList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 15 + "'", int26 == 15);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10000 + "'", int29 == 10000);
        org.junit.Assert.assertNotNull(socketFactory30);
    }

    @Test
    public void test4979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4979");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.DBEncoderFactory dBEncoderFactory17 = mongoClientOptions13.getDbEncoderFactory();
        boolean boolean18 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.ReadConcern readConcern19 = mongoClientOptions13.getReadConcern();
        int int20 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(dBEncoderFactory17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(readConcern19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test4980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4980");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionIdleTime();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean10 = mongoClientOptions7.isSocketKeepAlive();
        java.lang.String str11 = mongoClientOptions7.getRequiredReplicaSetName();
        java.lang.String str12 = mongoClientOptions7.getDescription();
        int int13 = mongoClientOptions7.getMinConnectionsPerHost();
        int int14 = mongoClientOptions7.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "test" + "'", str12, "test");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
    }

    @Test
    public void test4981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4981");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        int int33 = mongoClientOptions32.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory34 = mongoClientOptions32.getSocketFactory();
        int int35 = mongoClientOptions32.getMaxWaitTime();
        boolean boolean36 = mongoClientOptions32.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties37 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str38 = mongoProperties37.getGridFsDatabase();
        java.lang.String str39 = mongoProperties37.getGridFsDatabase();
        java.lang.String str40 = mongoProperties37.getUsername();
        mongoProperties37.setHost("hi!");
        mongoProperties37.setGridFsDatabase("hi!");
        boolean boolean45 = mongoClientOptions32.equals((java.lang.Object) mongoProperties37);
        com.mongodb.ReadPreference readPreference46 = mongoClientOptions32.getReadPreference();
        boolean boolean47 = mongoClientOptions32.isSslEnabled();
        javax.net.SocketFactory socketFactory48 = mongoClientOptions32.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder49 = builder18.socketFactory(socketFactory48);
        com.mongodb.MongoClientOptions.Builder builder51 = builder18.heartbeatSocketTimeout((int) '4');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(socketFactory34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 120000 + "'", int35 == 120000);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(readPreference46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(socketFactory48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test4982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4982");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getUsername();
        mongoProperties0.setPort((java.lang.Integer) 10);
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory21 = mongoClientOptions19.getSocketFactory();
        com.mongodb.WriteConcern writeConcern22 = mongoClientOptions19.getWriteConcern();
        boolean boolean23 = mongoClientOptions19.isAlwaysUseMBeans();
        javax.net.SocketFactory socketFactory24 = mongoClientOptions19.getSocketFactory();
        int int25 = mongoClientOptions19.getHeartbeatSocketTimeout();
        com.mongodb.WriteConcern writeConcern26 = mongoClientOptions19.getWriteConcern();
        org.bson.codecs.configuration.CodecRegistry codecRegistry27 = mongoClientOptions19.getCodecRegistry();
        org.springframework.core.env.Environment environment28 = null;
        com.mongodb.MongoClient mongoClient29 = mongoProperties0.createMongoClient(mongoClientOptions19, environment28);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertNotNull(writeConcern22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(socketFactory24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(writeConcern26);
        org.junit.Assert.assertNotNull(codecRegistry27);
        org.junit.Assert.assertNotNull(mongoClient29);
    }

    @Test
    public void test4983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4983");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        org.bson.codecs.configuration.CodecRegistry codecRegistry10 = mongoClientOptions7.getCodecRegistry();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions7.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder22 = builder16.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder37.build();
        boolean boolean39 = mongoClientOptions38.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory40 = mongoClientOptions38.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList41 = mongoClientOptions38.getCommandListeners();
        com.mongodb.ReadPreference readPreference42 = mongoClientOptions38.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder43 = builder24.readPreference(readPreference42);
        com.mongodb.MongoClientOptions.Builder builder45 = builder24.connectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder47 = builder24.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder48 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder54 = builder50.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions61 = builder60.build();
        boolean boolean62 = mongoClientOptions61.isSocketKeepAlive();
        int int63 = mongoClientOptions61.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory64 = mongoClientOptions61.getDbEncoderFactory();
        int int65 = mongoClientOptions61.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder66 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions61);
        javax.net.SocketFactory socketFactory67 = mongoClientOptions61.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder68 = builder24.socketFactory(socketFactory67);
        boolean boolean69 = mongoClientOptions7.equals((java.lang.Object) builder68);
        boolean boolean70 = mongoClientOptions7.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertNotNull(codecRegistry10);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory40);
        org.junit.Assert.assertNotNull(commandListenerList41);
        org.junit.Assert.assertNotNull(readPreference42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(mongoClientOptions61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 120000 + "'", int63 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 120000 + "'", int65 == 120000);
        org.junit.Assert.assertNotNull(socketFactory67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test4984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4984");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        com.mongodb.MongoClientOptions.Builder builder27 = com.mongodb.MongoClientOptions.builder(mongoClientOptions26);
        java.lang.String str28 = mongoClientOptions26.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry29 = mongoClientOptions26.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder30 = builder8.codecRegistry(codecRegistry29);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.socketTimeout((int) (short) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test4985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4985");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        java.lang.String str16 = mongoClientOptions13.getDescription();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        java.lang.String str18 = mongoClientOptions13.getRequiredReplicaSetName();
        int int19 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        com.mongodb.ReadConcern readConcern21 = mongoClientOptions13.getReadConcern();
        org.bson.codecs.configuration.CodecRegistry codecRegistry22 = mongoClientOptions13.getCodecRegistry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(readConcern21);
        org.junit.Assert.assertNotNull(codecRegistry22);
    }

    @Test
    public void test4986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4986");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions13.getWriteConcern();
        boolean boolean17 = mongoClientOptions13.isSslEnabled();
        int int18 = mongoClientOptions13.getServerSelectionTimeout();
        boolean boolean19 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test4987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4987");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.connectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatSocketTimeout((int) (short) -1);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        boolean boolean36 = mongoClientOptions35.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory37 = mongoClientOptions35.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList38 = mongoClientOptions35.getCommandListeners();
        com.mongodb.ReadPreference readPreference39 = mongoClientOptions35.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder40 = builder21.readPreference(readPreference39);
        com.mongodb.MongoClientOptions.Builder builder41 = builder6.readPreference(readPreference39);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.socketKeepAlive(true);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder43.build();
        int int45 = mongoClientOptions44.getLocalThreshold();
        int int46 = mongoClientOptions44.getSocketTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory47 = mongoClientOptions44.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory37);
        org.junit.Assert.assertNotNull(commandListenerList38);
        org.junit.Assert.assertNotNull(readPreference39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 15 + "'", int45 == 15);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory47);
    }

    @Test
    public void test4988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4988");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionIdleTime();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean10 = mongoClientOptions7.isSocketKeepAlive();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions7.getWriteConcern();
        com.mongodb.ReadConcern readConcern12 = mongoClientOptions7.getReadConcern();
        boolean boolean13 = mongoClientOptions7.isAlwaysUseMBeans();
        org.bson.codecs.configuration.CodecRegistry codecRegistry14 = mongoClientOptions7.getCodecRegistry();
        int int15 = mongoClientOptions7.getServerSelectionTimeout();
        boolean boolean16 = mongoClientOptions7.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertNotNull(readConcern12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(codecRegistry14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 30000 + "'", int15 == 30000);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test4989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4989");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.serverSelectionTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.socketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder11.maxWaitTime(52);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder32.build();
        int int34 = mongoClientOptions33.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory35 = mongoClientOptions33.getSocketFactory();
        int int36 = mongoClientOptions33.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory37 = mongoClientOptions33.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder38 = builder19.dbDecoderFactory(dBDecoderFactory37);
        com.mongodb.MongoClientOptions.Builder builder39 = builder6.dbDecoderFactory(dBDecoderFactory37);
        com.mongodb.MongoClientOptions.Builder builder41 = builder6.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.serverSelectionTimeout(30000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(socketFactory35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 120000 + "'", int36 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test4990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4990");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getUsername();
        java.lang.String str3 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str6 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory22 = mongoClientOptions20.getSocketFactory();
        int int23 = mongoClientOptions20.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory24 = mongoClientOptions20.getDbDecoderFactory();
        int int25 = mongoClientOptions20.getMaxConnectionLifeTime();
        int int26 = mongoClientOptions20.getMinHeartbeatFrequency();
        java.lang.String str27 = mongoClientOptions20.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder48 = builder42.socketTimeout((int) '4');
        boolean boolean49 = mongoClientOptions20.equals((java.lang.Object) '4');
        int int50 = mongoClientOptions20.getMaxConnectionLifeTime();
        org.springframework.core.env.Environment environment51 = null;
        com.mongodb.MongoClient mongoClient52 = mongoProperties0.createMongoClient(mongoClientOptions20, environment51);
        mongoProperties0.setUri("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(socketFactory22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 120000 + "'", int23 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 500 + "'", int26 == 500);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(mongoClient52);
    }

    @Test
    public void test4991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4991");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str9 = mongoProperties0.getHost();
        java.lang.Integer int10 = mongoProperties0.getPort();
        java.lang.Class<?> wildcardClass11 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.clearPassword();
        java.lang.String str13 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str16 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "test" + "'", str13, "test");
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test4992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4992");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxConnectionIdleTime(10);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.heartbeatSocketTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.threadsAllowedToBlockForConnectionMultiplier((int) '#');
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder51 = builder47.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions52 = builder51.build();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList53 = mongoClientOptions52.getCommandListeners();
        com.mongodb.DBEncoderFactory dBEncoderFactory54 = mongoClientOptions52.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder55 = builder32.dbEncoderFactory(dBEncoderFactory54);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder58 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder64 = builder60.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions71 = builder70.build();
        com.mongodb.MongoClientOptions.Builder builder72 = com.mongodb.MongoClientOptions.builder(mongoClientOptions71);
        java.lang.String str73 = mongoClientOptions71.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry74 = mongoClientOptions71.getCodecRegistry();
        javax.net.SocketFactory socketFactory75 = mongoClientOptions71.getSocketFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory76 = mongoClientOptions71.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder77 = builder55.dbDecoderFactory(dBDecoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder78 = builder27.dbDecoderFactory(dBDecoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder79 = builder8.dbDecoderFactory(dBDecoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder81 = builder79.minHeartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder83 = builder79.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(mongoClientOptions52);
        org.junit.Assert.assertNotNull(commandListenerList53);
        org.junit.Assert.assertNotNull(dBEncoderFactory54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(mongoClientOptions71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry74);
        org.junit.Assert.assertNotNull(socketFactory75);
        org.junit.Assert.assertNotNull(dBDecoderFactory76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test4993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4993");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        boolean boolean33 = mongoClientOptions32.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory34 = mongoClientOptions32.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder12.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder36 = builder9.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatConnectTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.socketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.description("");
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.maxWaitTime(5);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder56 = builder52.localThreshold(10000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test4994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4994");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setHost("test");
        java.lang.String str14 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test4995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4995");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions20.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder23 = builder2.readPreference(readPreference22);
        com.mongodb.MongoClientOptions.Builder builder25 = builder2.localThreshold(100);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder25.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.minConnectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder46.build();
        int int48 = mongoClientOptions47.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory49 = mongoClientOptions47.getSocketFactory();
        boolean boolean50 = mongoClientOptions47.isSslInvalidHostNameAllowed();
        java.lang.String str51 = mongoClientOptions47.getDescription();
        java.lang.String str52 = mongoClientOptions47.getRequiredReplicaSetName();
        int int53 = mongoClientOptions47.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory54 = mongoClientOptions47.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder55 = builder33.socketFactory(socketFactory54);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.socketKeepAlive(true);
        com.mongodb.event.CommandListener commandListener58 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder59 = builder57.addCommandListener(commandListener58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(mongoClientOptions47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(socketFactory49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 20000 + "'", int53 == 20000);
        org.junit.Assert.assertNotNull(socketFactory54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test4996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4996");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions13.getWriteConcern();
        com.mongodb.ReadConcern readConcern17 = mongoClientOptions13.getReadConcern();
        boolean boolean18 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        int int19 = mongoClientOptions13.getHeartbeatSocketTimeout();
        com.mongodb.WriteConcern writeConcern20 = mongoClientOptions13.getWriteConcern();
        int int21 = mongoClientOptions13.getMaxConnectionLifeTime();
        boolean boolean22 = mongoClientOptions13.isAlwaysUseMBeans();
        java.lang.String str23 = mongoClientOptions13.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertNotNull(readConcern17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(writeConcern20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
    }

    @Test
    public void test4997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4997");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        java.lang.Integer int6 = mongoProperties0.getPort();
        mongoProperties0.setUsername("hi!");
        java.lang.String str9 = mongoProperties0.getHost();
        java.lang.String str10 = mongoProperties0.getUsername();
        java.lang.String str11 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test4998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4998");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.DBEncoderFactory dBEncoderFactory17 = mongoClientOptions13.getDbEncoderFactory();
        boolean boolean18 = mongoClientOptions13.isSocketKeepAlive();
        boolean boolean19 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(dBEncoderFactory17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test4999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4999");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatSocketTimeout(10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test5000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test5000");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        boolean boolean15 = mongoClientOptions13.isAlwaysUseMBeans();
        int int16 = mongoClientOptions13.getMaxConnectionLifeTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry17 = mongoClientOptions13.getCodecRegistry();
        java.lang.Class<?> wildcardClass18 = codecRegistry17.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(codecRegistry17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }
}

