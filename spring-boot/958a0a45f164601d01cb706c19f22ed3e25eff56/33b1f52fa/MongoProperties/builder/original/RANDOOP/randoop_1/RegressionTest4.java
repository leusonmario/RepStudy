import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test2001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2001");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions13.getReadPreference();
        int int18 = mongoClientOptions13.getMinConnectionsPerHost();
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions13.getReadPreference();
        boolean boolean20 = mongoClientOptions13.isCursorFinalizerEnabled();
        int int21 = mongoClientOptions13.getMaxWaitTime();
        int int22 = mongoClientOptions13.getHeartbeatSocketTimeout();
        int int23 = mongoClientOptions13.getLocalThreshold();
        int int24 = mongoClientOptions13.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(readPreference19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 120000 + "'", int21 == 120000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 15 + "'", int23 == 15);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
    }

    @Test
    public void test2002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2002");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str9 = mongoProperties0.getHost();
        java.lang.String str10 = mongoProperties0.getHost();
        java.lang.Class<?> wildcardClass11 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(wildcardClass11);
    }

    @Test
    public void test2003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2003");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        int int16 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean17 = mongoClientOptions13.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str19 = mongoProperties18.getGridFsDatabase();
        java.lang.String str20 = mongoProperties18.getGridFsDatabase();
        java.lang.String str21 = mongoProperties18.getUsername();
        mongoProperties18.setHost("hi!");
        mongoProperties18.setGridFsDatabase("hi!");
        boolean boolean26 = mongoClientOptions13.equals((java.lang.Object) mongoProperties18);
        boolean boolean27 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        com.mongodb.ReadConcern readConcern28 = mongoClientOptions13.getReadConcern();
        int int29 = mongoClientOptions13.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(readConcern28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
    }

    @Test
    public void test2004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2004");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        int int16 = mongoClientOptions13.getMinHeartbeatFrequency();
        int int17 = mongoClientOptions13.getConnectTimeout();
        boolean boolean18 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 500 + "'", int16 == 500);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
    }

    @Test
    public void test2005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2005");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionLifeTime(10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.alwaysUseMBeans(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder15 = builder13.threadsAllowedToBlockForConnectionMultiplier((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: threadsAllowedToBlockForConnectionMultiplier must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test2006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2006");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) -1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.description("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2007");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int10 = mongoClientOptions7.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry11 = mongoClientOptions7.getCodecRegistry();
        java.lang.String str12 = mongoClientOptions7.getRequiredReplicaSetName();
        javax.net.SocketFactory socketFactory13 = mongoClientOptions7.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        boolean boolean26 = mongoClientOptions7.equals((java.lang.Object) builder22);
        int int27 = mongoClientOptions7.getServerSelectionTimeout();
        com.mongodb.ReadConcern readConcern28 = mongoClientOptions7.getReadConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(codecRegistry11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(socketFactory13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 30000 + "'", int27 == 30000);
        org.junit.Assert.assertNotNull(readConcern28);
    }

    @Test
    public void test2008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2008");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold(0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder18 = builder14.minHeartbeatFrequency((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: minHeartbeatFrequency must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2009");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("");
        java.lang.Integer int3 = mongoProperties0.getPort();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("");
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test2010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2010");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions13.getCommandListeners();
        int int17 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions13.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        java.lang.String str20 = mongoClientOptions13.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test2011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2011");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getSocketTimeout();
        int int17 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean18 = mongoClientOptions13.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        boolean boolean20 = mongoClientOptions13.isSocketKeepAlive();
        int int21 = mongoClientOptions13.getMinHeartbeatFrequency();
        int int22 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 500 + "'", int21 == 500);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test2012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2012");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.socketTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.minConnectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        com.mongodb.MongoClientOptions.Builder builder33 = com.mongodb.MongoClientOptions.builder(mongoClientOptions32);
        int int34 = mongoClientOptions32.getHeartbeatConnectTimeout();
        int int35 = mongoClientOptions32.getThreadsAllowedToBlockForConnectionMultiplier();
        int int36 = mongoClientOptions32.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean37 = mongoClientOptions32.isSslInvalidHostNameAllowed();
        com.mongodb.ReadConcern readConcern38 = mongoClientOptions32.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder39 = builder18.readConcern(readConcern38);
        com.mongodb.MongoClientOptions.Builder builder41 = builder18.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder42 = builder41.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder44 = builder41.maxWaitTime(30000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20000 + "'", int34 == 20000);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(readConcern38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test2013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2013");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getGridFsDatabase();
        java.lang.String str11 = mongoProperties0.getHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str13 = mongoProperties12.getAuthenticationDatabase();
        mongoProperties12.setAuthenticationDatabase("hi!");
        char[] charArray16 = mongoProperties12.getPassword();
        java.lang.String str17 = mongoProperties12.getUsername();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str19 = mongoProperties18.getGridFsDatabase();
        java.lang.String str20 = mongoProperties18.getGridFsDatabase();
        java.lang.String str21 = mongoProperties18.getUsername();
        mongoProperties18.setHost("hi!");
        mongoProperties18.setGridFsDatabase("hi!");
        char[] charArray27 = new char[] { '#' };
        mongoProperties18.setPassword(charArray27);
        mongoProperties12.setPassword(charArray27);
        mongoProperties0.setPassword(charArray27);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(charArray16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#]");
    }

    @Test
    public void test2014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2014");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setGridFsDatabase("hi!");
        char[] charArray9 = new char[] { '#' };
        mongoProperties0.setPassword(charArray9);
        java.lang.String str11 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass12 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setDatabase("test");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#]");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(wildcardClass12);
    }

    @Test
    public void test2015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2015");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        java.lang.String str16 = mongoClientOptions13.getDescription();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        boolean boolean18 = mongoClientOptions13.isSocketKeepAlive();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        int int20 = mongoClientOptions13.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test2016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2016");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int10 = mongoClientOptions7.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry11 = mongoClientOptions7.getCodecRegistry();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList13 = mongoClientOptions7.getCommandListeners();
        int int14 = mongoClientOptions7.getMaxConnectionLifeTime();
        com.mongodb.ReadConcern readConcern15 = mongoClientOptions7.getReadConcern();
        int int16 = mongoClientOptions7.getLocalThreshold();
        int int17 = mongoClientOptions7.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(codecRegistry11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertNotNull(commandListenerList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(readConcern15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15 + "'", int16 == 15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test2017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2017");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions13.getWriteConcern();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        javax.net.SocketFactory socketFactory18 = mongoClientOptions13.getSocketFactory();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions13.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(socketFactory18);
        org.junit.Assert.assertNotNull(writeConcern19);
    }

    @Test
    public void test2018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2018");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.minHeartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.localThreshold((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test2019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2019");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxWaitTime((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.maxConnectionLifeTime(97);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2020");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions16.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder19 = builder8.dbDecoderFactory(dBDecoderFactory18);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionIdleTime(120000);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.minConnectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder36.build();
        int int38 = mongoClientOptions37.getHeartbeatSocketTimeout();
        java.lang.String str39 = mongoClientOptions37.getRequiredReplicaSetName();
        java.lang.String str40 = mongoClientOptions37.getRequiredReplicaSetName();
        int int41 = mongoClientOptions37.getHeartbeatFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory42 = mongoClientOptions37.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder43 = builder23.dbEncoderFactory(dBEncoderFactory42);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder47 = builder43.socketTimeout(52);
        com.mongodb.MongoClientOptions.Builder builder48 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder54 = builder50.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions61 = builder60.build();
        com.mongodb.MongoClientOptions.Builder builder62 = com.mongodb.MongoClientOptions.builder(mongoClientOptions61);
        java.lang.String str63 = mongoClientOptions61.getRequiredReplicaSetName();
        int int64 = mongoClientOptions61.getMinConnectionsPerHost();
        int int65 = mongoClientOptions61.getMaxWaitTime();
        int int66 = mongoClientOptions61.getHeartbeatConnectTimeout();
        boolean boolean67 = mongoClientOptions61.isSslInvalidHostNameAllowed();
        org.bson.codecs.configuration.CodecRegistry codecRegistry68 = mongoClientOptions61.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder69 = builder43.codecRegistry(codecRegistry68);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dBEncoderFactory42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(mongoClientOptions61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 120000 + "'", int65 == 120000);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 20000 + "'", int66 == 20000);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(codecRegistry68);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test2021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2021");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.maxConnectionLifeTime((int) '4');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.minHeartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.heartbeatSocketTimeout(1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test2022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2022");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getDatabase();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str5 = mongoProperties0.getUsername();
        char[] charArray6 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(charArray6);
    }

    @Test
    public void test2023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2023");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.serverSelectionTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.description("");
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.maxConnectionLifeTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.serverSelectionTimeout(52);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder47.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory49 = mongoClientOptions48.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern50 = mongoClientOptions48.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder51 = builder40.writeConcern(writeConcern50);
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder58 = builder54.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions65 = builder64.build();
        com.mongodb.MongoClientOptions.Builder builder66 = com.mongodb.MongoClientOptions.builder(mongoClientOptions65);
        java.lang.String str67 = mongoClientOptions65.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry68 = mongoClientOptions65.getCodecRegistry();
        javax.net.SocketFactory socketFactory69 = mongoClientOptions65.getSocketFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory70 = mongoClientOptions65.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder71 = builder40.dbDecoderFactory(dBDecoderFactory70);
        com.mongodb.MongoClientOptions.Builder builder72 = builder23.dbDecoderFactory(dBDecoderFactory70);
        com.mongodb.MongoClientOptions.Builder builder73 = builder16.dbDecoderFactory(dBDecoderFactory70);
        com.mongodb.MongoClientOptions.Builder builder75 = builder16.maxConnectionIdleTime(1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertNotNull(dBEncoderFactory49);
        org.junit.Assert.assertNotNull(writeConcern50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(mongoClientOptions65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry68);
        org.junit.Assert.assertNotNull(socketFactory69);
        org.junit.Assert.assertNotNull(dBDecoderFactory70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test2024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2024");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str10 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions20, environment21);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str24 = mongoProperties23.getGridFsDatabase();
        java.lang.String str25 = mongoProperties23.getHost();
        java.lang.String str26 = mongoProperties23.getGridFsDatabase();
        java.lang.String str27 = mongoProperties23.getMongoClientDatabase();
        char[] charArray28 = mongoProperties23.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties29 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str30 = mongoProperties29.getGridFsDatabase();
        java.lang.String str31 = mongoProperties29.getGridFsDatabase();
        java.lang.String str32 = mongoProperties29.getUsername();
        java.lang.String str33 = mongoProperties29.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass34 = mongoProperties29.getFieldNamingStrategy();
        char[] charArray39 = new char[] { 'a', '#', '#', '4' };
        mongoProperties29.setPassword(charArray39);
        mongoProperties23.setPassword(charArray39);
        mongoProperties0.setPassword(charArray39);
        mongoProperties0.setPort((java.lang.Integer) 20000);
        java.lang.String str45 = mongoProperties0.getDatabase();
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str48 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "test" + "'", str27, "test");
        org.junit.Assert.assertNull(charArray28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[a, #, #, 4]");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test2025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2025");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions18.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory21 = mongoClientOptions18.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder22 = builder8.socketFactory(socketFactory21);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.serverSelectionTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxConnectionIdleTime((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getMaxConnectionIdleTime();
        boolean boolean38 = mongoClientOptions36.isSocketKeepAlive();
        boolean boolean39 = mongoClientOptions36.isAlwaysUseMBeans();
        int int40 = mongoClientOptions36.getMaxConnectionLifeTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory41 = mongoClientOptions36.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder42 = builder28.dbEncoderFactory(dBEncoderFactory41);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory41);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test2026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2026");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions13.getSocketFactory();
        boolean boolean18 = mongoClientOptions13.isAlwaysUseMBeans();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions13.getDbEncoderFactory();
        boolean boolean21 = mongoClientOptions13.isCursorFinalizerEnabled();
        boolean boolean22 = mongoClientOptions13.isAlwaysUseMBeans();
        int int23 = mongoClientOptions13.getMinHeartbeatFrequency();
        int int24 = mongoClientOptions13.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 500 + "'", int23 == 500);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10000 + "'", int24 == 10000);
    }

    @Test
    public void test2027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2027");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatSocketTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.requiredReplicaSetName("test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test2028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2028");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.ReadConcern readConcern16 = mongoClientOptions13.getReadConcern();
        int int17 = mongoClientOptions13.getConnectionsPerHost();
        int int18 = mongoClientOptions13.getServerSelectionTimeout();
        int int19 = mongoClientOptions13.getMaxWaitTime();
        int int20 = mongoClientOptions13.getConnectTimeout();
        java.lang.String str21 = mongoClientOptions13.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(readConcern16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test2029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2029");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        int int25 = mongoClientOptions24.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions24.getSocketFactory();
        int int27 = mongoClientOptions24.getMaxWaitTime();
        boolean boolean28 = mongoClientOptions24.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties29 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str30 = mongoProperties29.getGridFsDatabase();
        java.lang.String str31 = mongoProperties29.getGridFsDatabase();
        java.lang.String str32 = mongoProperties29.getUsername();
        mongoProperties29.setHost("hi!");
        mongoProperties29.setGridFsDatabase("hi!");
        boolean boolean37 = mongoClientOptions24.equals((java.lang.Object) mongoProperties29);
        com.mongodb.ReadPreference readPreference38 = mongoClientOptions24.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder39 = builder10.readPreference(readPreference38);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.socketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder45 = builder39.socketTimeout((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 120000 + "'", int27 == 120000);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(readPreference38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test2030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2030");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str4 = mongoProperties0.getHost();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        char[] charArray6 = mongoProperties0.getPassword();
        char[] charArray7 = mongoProperties0.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str9 = mongoProperties8.getGridFsDatabase();
        java.lang.String str10 = mongoProperties8.getGridFsDatabase();
        java.lang.String str11 = mongoProperties8.getUsername();
        java.lang.String str12 = mongoProperties8.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass13 = mongoProperties8.getFieldNamingStrategy();
        char[] charArray18 = new char[] { 'a', '#', '#', '4' };
        mongoProperties8.setPassword(charArray18);
        mongoProperties0.setPassword(charArray18);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties21.clearPassword();
        mongoProperties21.setPort((java.lang.Integer) 0);
        mongoProperties21.setGridFsDatabase("");
        java.lang.String str27 = mongoProperties21.getAuthenticationDatabase();
        java.lang.String str28 = mongoProperties21.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties29 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str30 = mongoProperties29.getGridFsDatabase();
        java.lang.String str31 = mongoProperties29.getGridFsDatabase();
        mongoProperties29.clearPassword();
        java.lang.Class<?> wildcardClass33 = mongoProperties29.getFieldNamingStrategy();
        java.lang.Integer int34 = mongoProperties29.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str36 = mongoProperties35.getGridFsDatabase();
        java.lang.String str37 = mongoProperties35.getHost();
        java.lang.String str38 = mongoProperties35.getGridFsDatabase();
        java.lang.String str39 = mongoProperties35.getMongoClientDatabase();
        java.lang.String str40 = mongoProperties35.getHost();
        java.lang.String str41 = mongoProperties35.getDatabase();
        java.lang.String str42 = mongoProperties35.getHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties43 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str44 = mongoProperties43.getGridFsDatabase();
        java.lang.String str45 = mongoProperties43.getGridFsDatabase();
        java.lang.String str46 = mongoProperties43.getUsername();
        java.lang.String str47 = mongoProperties43.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass48 = mongoProperties43.getFieldNamingStrategy();
        char[] charArray53 = new char[] { 'a', '#', '#', '4' };
        mongoProperties43.setPassword(charArray53);
        mongoProperties35.setPassword(charArray53);
        mongoProperties29.setPassword(charArray53);
        mongoProperties21.setPassword(charArray53);
        mongoProperties0.setPassword(charArray53);
        mongoProperties0.setHost("");
        mongoProperties0.setUsername("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties63 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str64 = mongoProperties63.getGridFsDatabase();
        java.lang.String str65 = mongoProperties63.getGridFsDatabase();
        java.lang.String str66 = mongoProperties63.getUsername();
        mongoProperties63.setHost("hi!");
        mongoProperties63.setGridFsDatabase("hi!");
        char[] charArray72 = new char[] { '#' };
        mongoProperties63.setPassword(charArray72);
        mongoProperties63.setHost("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties76 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str77 = mongoProperties76.getGridFsDatabase();
        java.lang.String str78 = mongoProperties76.getGridFsDatabase();
        mongoProperties76.setPort((java.lang.Integer) 0);
        java.lang.String str81 = mongoProperties76.getGridFsDatabase();
        mongoProperties76.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties83 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str84 = mongoProperties83.getGridFsDatabase();
        java.lang.String str85 = mongoProperties83.getGridFsDatabase();
        java.lang.String str86 = mongoProperties83.getUsername();
        java.lang.String str87 = mongoProperties83.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass88 = mongoProperties83.getFieldNamingStrategy();
        char[] charArray93 = new char[] { 'a', '#', '#', '4' };
        mongoProperties83.setPassword(charArray93);
        mongoProperties76.setPassword(charArray93);
        mongoProperties63.setPassword(charArray93);
        mongoProperties0.setPassword(charArray93);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #, #, 4]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "mongodb://localhost/test" + "'", str28, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "test" + "'", str39, "test");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(wildcardClass48);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[a, #, #, 4]");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[#]");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNull(wildcardClass88);
        org.junit.Assert.assertNotNull(charArray93);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray93), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray93), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray93), "[a, #, #, 4]");
    }

    @Test
    public void test2031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2031");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder36.build();
        int int38 = mongoClientOptions37.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory39 = mongoClientOptions37.getSocketFactory();
        com.mongodb.WriteConcern writeConcern40 = mongoClientOptions37.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder41 = builder19.writeConcern(writeConcern40);
        com.mongodb.MongoClientOptions.Builder builder42 = builder16.writeConcern(writeConcern40);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder45 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder51 = builder47.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder57.build();
        com.mongodb.MongoClientOptions.Builder builder59 = com.mongodb.MongoClientOptions.builder(mongoClientOptions58);
        int int60 = mongoClientOptions58.getHeartbeatConnectTimeout();
        com.mongodb.ReadPreference readPreference61 = mongoClientOptions58.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder62 = builder42.readPreference(readPreference61);
        com.mongodb.MongoClientOptions.Builder builder63 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder71 = builder67.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder73 = builder67.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder74 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder76 = builder74.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder78 = builder76.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder80 = builder76.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder82 = builder80.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder84 = builder82.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder86 = builder84.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions87 = builder86.build();
        boolean boolean88 = mongoClientOptions87.isSocketKeepAlive();
        int int89 = mongoClientOptions87.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory90 = mongoClientOptions87.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder91 = builder67.dbEncoderFactory(dBEncoderFactory90);
        com.mongodb.MongoClientOptions.Builder builder92 = builder62.dbEncoderFactory(dBEncoderFactory90);
        com.mongodb.MongoClientOptions.Builder builder94 = builder62.sslInvalidHostNameAllowed(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(socketFactory39);
        org.junit.Assert.assertNotNull(writeConcern40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 20000 + "'", int60 == 20000);
        org.junit.Assert.assertNotNull(readPreference61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(mongoClientOptions87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 120000 + "'", int89 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test2032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2032");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxWaitTime((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2033");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUsername("hi!");
        mongoProperties0.setPort((java.lang.Integer) 10);
        mongoProperties0.setAuthenticationDatabase("hi!");
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test2034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2034");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxConnectionIdleTime((int) (short) -1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2035");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions13.getCommandListeners();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions13.getReadPreference();
        int int18 = mongoClientOptions13.getMaxConnectionLifeTime();
        int int19 = mongoClientOptions13.getLocalThreshold();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions13.getDbDecoderFactory();
        boolean boolean21 = mongoClientOptions13.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 15 + "'", int19 == 15);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2036");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.alwaysUseMBeans(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder18 = builder16.connectionsPerHost((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: connectionPerHost must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2037");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 0);
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.clearPassword();
        java.lang.String str7 = mongoProperties0.getHost();
        mongoProperties0.setUri("hi!");
        java.lang.String str10 = mongoProperties0.getHost();
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test2038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2038");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        boolean boolean33 = mongoClientOptions32.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory34 = mongoClientOptions32.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder12.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder36 = builder9.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatConnectTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder44 = builder38.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder45 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder49 = builder45.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder51 = builder45.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatFrequency((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder57 = builder53.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder58 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.heartbeatSocketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions mongoClientOptions69 = builder66.build();
        int int70 = mongoClientOptions69.getConnectionsPerHost();
        int int71 = mongoClientOptions69.getHeartbeatConnectTimeout();
        int int72 = mongoClientOptions69.getSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry73 = mongoClientOptions69.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder74 = builder57.codecRegistry(codecRegistry73);
        com.mongodb.MongoClientOptions.Builder builder75 = builder44.codecRegistry(codecRegistry73);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(mongoClientOptions69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(codecRegistry73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test2039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2039");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getDatabase();
        java.lang.String str3 = mongoProperties0.getUri();
        mongoProperties0.clearPassword();
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUri("test");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test2040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2040");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str4 = mongoProperties0.getHost();
        java.lang.String str5 = mongoProperties0.getHost();
        mongoProperties0.clearPassword();
        java.lang.String str7 = mongoProperties0.getDatabase();
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test2041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2041");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        com.mongodb.MongoClientOptions.Builder builder30 = builder27.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder41 = builder35.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder43.build();
        org.bson.codecs.configuration.CodecRegistry codecRegistry45 = mongoClientOptions44.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder46 = builder30.codecRegistry(codecRegistry45);
        com.mongodb.MongoClientOptions.Builder builder47 = builder2.codecRegistry(codecRegistry45);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.serverSelectionTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder56 = builder52.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder62.build();
        int int64 = mongoClientOptions63.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry65 = mongoClientOptions63.getCodecRegistry();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties66 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties66.setHost("");
        java.lang.String str69 = mongoProperties66.getGridFsDatabase();
        mongoProperties66.setUsername("hi!");
        java.lang.String str72 = mongoProperties66.getGridFsDatabase();
        mongoProperties66.setHost("");
        java.lang.String str75 = mongoProperties66.getGridFsDatabase();
        boolean boolean76 = mongoClientOptions63.equals((java.lang.Object) mongoProperties66);
        com.mongodb.DBEncoderFactory dBEncoderFactory77 = mongoClientOptions63.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder78 = builder47.dbEncoderFactory(dBEncoderFactory77);
        com.mongodb.event.CommandListener commandListener79 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder80 = builder78.addCommandListener(commandListener79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertNotNull(codecRegistry45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoClientOptions63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(codecRegistry65);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory77);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test2042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2042");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxWaitTime(20000);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.cursorFinalizerEnabled(false);
        java.lang.Class<?> wildcardClass7 = builder6.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2043");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionLifeTime(500);
        com.mongodb.MongoClientOptions.Builder builder15 = builder14.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test2044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2044");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.description("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder14.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxConnectionLifeTime(10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.maxConnectionIdleTime(5);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder47.build();
        int int49 = mongoClientOptions48.getHeartbeatSocketTimeout();
        boolean boolean50 = mongoClientOptions48.isAlwaysUseMBeans();
        int int51 = mongoClientOptions48.getMaxConnectionLifeTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry52 = mongoClientOptions48.getCodecRegistry();
        int int53 = mongoClientOptions48.getMinConnectionsPerHost();
        com.mongodb.ReadConcern readConcern54 = mongoClientOptions48.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder55 = builder34.readConcern(readConcern54);
        com.mongodb.MongoClientOptions.Builder builder56 = builder15.readConcern(readConcern54);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(codecRegistry52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(readConcern54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test2045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2045");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getUsername();
        mongoProperties0.setUsername("");
        java.lang.String str5 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test2046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2046");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setGridFsDatabase("hi!");
        char[] charArray9 = new char[] { '#' };
        mongoProperties0.setPassword(charArray9);
        mongoProperties0.setHost("");
        java.lang.String str13 = mongoProperties0.getGridFsDatabase();
        java.lang.Integer int14 = mongoProperties0.getPort();
        java.lang.Integer int15 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(int15);
    }

    @Test
    public void test2047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2047");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxWaitTime(20000);
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder4.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory6 = mongoClientOptions5.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClientOptions5);
        org.junit.Assert.assertNotNull(dBEncoderFactory6);
    }

    @Test
    public void test2048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2048");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.serverSelectionTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.serverSelectionTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.socketTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder38 = builder32.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder45 = builder41.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions52 = builder51.build();
        boolean boolean53 = mongoClientOptions52.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory54 = mongoClientOptions52.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder55 = builder32.dbEncoderFactory(dBEncoderFactory54);
        com.mongodb.MongoClientOptions.Builder builder56 = builder31.dbEncoderFactory(dBEncoderFactory54);
        com.mongodb.MongoClientOptions.Builder builder57 = builder18.dbEncoderFactory(dBEncoderFactory54);
        com.mongodb.MongoClientOptions.Builder builder58 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.socketTimeout((int) (short) -1);
        com.mongodb.MongoClientOptions.Builder builder61 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder69 = builder65.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder76 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder78 = builder76.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder82 = builder78.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder84 = builder82.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder86 = builder84.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder88 = builder86.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions89 = builder88.build();
        boolean boolean90 = mongoClientOptions89.isSocketKeepAlive();
        int int91 = mongoClientOptions89.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory92 = mongoClientOptions89.getDbEncoderFactory();
        int int93 = mongoClientOptions89.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder94 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions89);
        javax.net.SocketFactory socketFactory95 = mongoClientOptions89.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder96 = builder73.socketFactory(socketFactory95);
        com.mongodb.MongoClientOptions.Builder builder97 = builder58.socketFactory(socketFactory95);
        com.mongodb.MongoClientOptions.Builder builder98 = builder18.socketFactory(socketFactory95);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(mongoClientOptions52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(mongoClientOptions89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 120000 + "'", int91 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 120000 + "'", int93 == 120000);
        org.junit.Assert.assertNotNull(socketFactory95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test2049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2049");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.minHeartbeatFrequency(20000);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder49 = builder45.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions56 = builder55.build();
        boolean boolean57 = mongoClientOptions56.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory58 = mongoClientOptions56.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList59 = mongoClientOptions56.getCommandListeners();
        com.mongodb.ReadPreference readPreference60 = mongoClientOptions56.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder61 = builder42.readPreference(readPreference60);
        com.mongodb.MongoClientOptions.Builder builder62 = builder31.readPreference(readPreference60);
        com.mongodb.MongoClientOptions.Builder builder63 = builder18.readPreference(readPreference60);
        com.mongodb.MongoClientOptions.Builder builder65 = builder18.maxConnectionLifeTime(52);
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.cursorFinalizerEnabled(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder69 = builder65.connectionsPerHost((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: connectionPerHost must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoClientOptions56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory58);
        org.junit.Assert.assertNotNull(commandListenerList59);
        org.junit.Assert.assertNotNull(readPreference60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test2050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2050");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory9 = mongoClientOptions7.getDbDecoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory10 = mongoClientOptions7.getDbEncoderFactory();
        int int11 = mongoClientOptions7.getMinHeartbeatFrequency();
        boolean boolean12 = mongoClientOptions7.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory9);
        org.junit.Assert.assertNotNull(dBEncoderFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2051");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        boolean boolean11 = mongoClientOptions7.isSslInvalidHostNameAllowed();
        boolean boolean12 = mongoClientOptions7.isSocketKeepAlive();
        java.lang.String str13 = mongoClientOptions7.getRequiredReplicaSetName();
        int int14 = mongoClientOptions7.getHeartbeatSocketTimeout();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList15 = mongoClientOptions7.getCommandListeners();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(commandListenerList15);
    }

    @Test
    public void test2052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2052");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        int int36 = mongoClientOptions35.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory37 = mongoClientOptions35.getSocketFactory();
        int int38 = mongoClientOptions35.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory39 = mongoClientOptions35.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder40 = builder19.dbDecoderFactory(dBDecoderFactory39);
        com.mongodb.MongoClientOptions.Builder builder41 = builder8.dbDecoderFactory(dBDecoderFactory39);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder45 = builder41.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder47 = builder41.serverSelectionTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder48 = builder41.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder50 = builder41.minConnectionsPerHost((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(socketFactory37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 120000 + "'", int38 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test2053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2053");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        java.lang.String str16 = mongoClientOptions13.getDescription();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        java.lang.String str18 = mongoClientOptions13.getRequiredReplicaSetName();
        int int19 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        com.mongodb.ReadConcern readConcern21 = mongoClientOptions13.getReadConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory22 = mongoClientOptions13.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(readConcern21);
        org.junit.Assert.assertNotNull(dBEncoderFactory22);
    }

    @Test
    public void test2054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2054");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("");
        java.lang.Integer int3 = mongoProperties0.getPort();
        java.lang.String str4 = mongoProperties0.getDatabase();
        java.lang.String str5 = mongoProperties0.getDatabase();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test2055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2055");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "test" + "'", str6, "test");
    }

    @Test
    public void test2056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2056");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory10 = mongoClientOptions9.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions9.getWriteConcern();
        boolean boolean12 = mongoClientOptions9.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertNotNull(dBDecoderFactory10);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2057");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass5 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str6 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatSocketTimeout();
        java.lang.String str22 = mongoClientOptions20.getRequiredReplicaSetName();
        boolean boolean23 = mongoClientOptions20.isSslEnabled();
        int int24 = mongoClientOptions20.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions20, environment25);
        mongoProperties0.setUsername("hi!");
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder41.build();
        boolean boolean43 = mongoClientOptions42.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory44 = mongoClientOptions42.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList45 = mongoClientOptions42.getCommandListeners();
        int int46 = mongoClientOptions42.getSocketTimeout();
        int int47 = mongoClientOptions42.getConnectionsPerHost();
        int int48 = mongoClientOptions42.getLocalThreshold();
        org.springframework.core.env.Environment environment49 = null;
        com.mongodb.MongoClient mongoClient50 = mongoProperties0.createMongoClient(mongoClientOptions42, environment49);
        java.util.List<com.mongodb.event.CommandListener> commandListenerList51 = mongoClientOptions42.getCommandListeners();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory44);
        org.junit.Assert.assertNotNull(commandListenerList45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 15 + "'", int48 == 15);
        org.junit.Assert.assertNotNull(mongoClient50);
        org.junit.Assert.assertNotNull(commandListenerList51);
    }

    @Test
    public void test2058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2058");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getSocketTimeout();
        int int17 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean18 = mongoClientOptions13.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        javax.net.SocketFactory socketFactory20 = mongoClientOptions13.getSocketFactory();
        int int21 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int22 = mongoClientOptions13.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(socketFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
    }

    @Test
    public void test2059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2059");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions13.getWriteConcern();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        int int18 = mongoClientOptions13.getLocalThreshold();
        int int19 = mongoClientOptions13.getMaxWaitTime();
        int int20 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean21 = mongoClientOptions13.isSocketKeepAlive();
        int int22 = mongoClientOptions13.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 120000 + "'", int20 == 120000);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
    }

    @Test
    public void test2060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2060");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions25.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder28 = builder11.readPreference(readPreference27);
        com.mongodb.MongoClientOptions.Builder builder29 = builder4.readPreference(readPreference27);
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions43 = builder42.build();
        int int44 = mongoClientOptions43.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry45 = mongoClientOptions43.getCodecRegistry();
        int int46 = mongoClientOptions43.getSocketTimeout();
        java.lang.String str47 = mongoClientOptions43.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory48 = mongoClientOptions43.getDbEncoderFactory();
        org.bson.codecs.configuration.CodecRegistry codecRegistry49 = mongoClientOptions43.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder50 = builder4.codecRegistry(codecRegistry49);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoClientOptions43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(codecRegistry45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(dBEncoderFactory48);
        org.junit.Assert.assertNotNull(codecRegistry49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test2061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2061");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int17 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean18 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        com.mongodb.ReadConcern readConcern19 = mongoClientOptions13.getReadConcern();
        java.lang.String str20 = mongoClientOptions13.getDescription();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties21.clearPassword();
        mongoProperties21.setUsername("hi!");
        mongoProperties21.setUri("");
        boolean boolean27 = mongoClientOptions13.equals((java.lang.Object) mongoProperties21);
        java.lang.String str28 = mongoProperties21.getHost();
        java.lang.Integer int29 = mongoProperties21.getPort();
        mongoProperties21.setGridFsDatabase("test");
        java.lang.String str32 = mongoProperties21.getUsername();
        mongoProperties21.setUsername("hi!");
        java.lang.String str35 = mongoProperties21.getGridFsDatabase();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(readConcern19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "test" + "'", str35, "test");
    }

    @Test
    public void test2062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2062");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.connectTimeout((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test2063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2063");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str9 = mongoProperties0.getHost();
        java.lang.Integer int10 = mongoProperties0.getPort();
        java.lang.Class<?> wildcardClass11 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setGridFsDatabase("test");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(wildcardClass11);
    }

    @Test
    public void test2064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2064");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.localThreshold((int) '#');
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.socketTimeout(32);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.maxWaitTime((int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test2065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2065");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        boolean boolean16 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        java.lang.String str17 = mongoClientOptions13.getDescription();
        java.lang.String str18 = mongoClientOptions13.getRequiredReplicaSetName();
        java.lang.String str19 = mongoClientOptions13.getRequiredReplicaSetName();
        int int20 = mongoClientOptions13.getMinHeartbeatFrequency();
        int int21 = mongoClientOptions13.getServerSelectionTimeout();
        int int22 = mongoClientOptions13.getSocketTimeout();
        int int23 = mongoClientOptions13.getMinHeartbeatFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions13.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 500 + "'", int23 == 500);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
    }

    @Test
    public void test2066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2066");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.ReadConcern readConcern16 = mongoClientOptions13.getReadConcern();
        boolean boolean18 = mongoClientOptions13.equals((java.lang.Object) 10);
        int int19 = mongoClientOptions13.getHeartbeatFrequency();
        int int20 = mongoClientOptions13.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(readConcern16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test2067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2067");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder7 = builder3.minConnectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder3.maxConnectionLifeTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.localThreshold((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder9.heartbeatSocketTimeout(52);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test2068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2068");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        java.util.List<com.mongodb.event.CommandListener> commandListenerList17 = mongoClientOptions13.getCommandListeners();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertNotNull(commandListenerList17);
    }

    @Test
    public void test2069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2069");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        mongoProperties0.setDatabase("mongodb://localhost/test");
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setUsername("");
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray8 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(charArray8);
    }

    @Test
    public void test2070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2070");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        int int29 = mongoClientOptions28.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory30 = mongoClientOptions28.getSocketFactory();
        com.mongodb.ReadConcern readConcern31 = mongoClientOptions28.getReadConcern();
        boolean boolean32 = mongoClientOptions28.isSslInvalidHostNameAllowed();
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions28);
        com.mongodb.WriteConcern writeConcern34 = mongoClientOptions28.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder35 = builder12.writeConcern(writeConcern34);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(socketFactory30);
        org.junit.Assert.assertNotNull(readConcern31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(writeConcern34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test2071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2071");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getUsername();
        java.lang.String str3 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        com.mongodb.MongoClientOptions.Builder builder20 = com.mongodb.MongoClientOptions.builder(mongoClientOptions19);
        int int21 = mongoClientOptions19.getHeartbeatConnectTimeout();
        int int22 = mongoClientOptions19.getThreadsAllowedToBlockForConnectionMultiplier();
        int int23 = mongoClientOptions19.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean24 = mongoClientOptions19.isSslInvalidHostNameAllowed();
        com.mongodb.ReadConcern readConcern25 = mongoClientOptions19.getReadConcern();
        java.lang.String str26 = mongoClientOptions19.getDescription();
        boolean boolean27 = mongoClientOptions19.isAlwaysUseMBeans();
        int int28 = mongoClientOptions19.getThreadsAllowedToBlockForConnectionMultiplier();
        int int29 = mongoClientOptions19.getMaxWaitTime();
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties0.createMongoClient(mongoClientOptions19, environment30);
        mongoProperties0.clearPassword();
        mongoProperties0.setHost("test");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(readConcern25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 120000 + "'", int29 == 120000);
        org.junit.Assert.assertNotNull(mongoClient31);
    }

    @Test
    public void test2072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2072");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency(52);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder19.localThreshold((int) '#');
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        int int40 = mongoClientOptions39.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory41 = mongoClientOptions39.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder42 = builder19.socketFactory(socketFactory41);
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder49 = builder45.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder60 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions67 = builder66.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory68 = mongoClientOptions67.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern69 = mongoClientOptions67.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder70 = builder59.writeConcern(writeConcern69);
        com.mongodb.MongoClientOptions.Builder builder71 = builder19.writeConcern(writeConcern69);
        com.mongodb.MongoClientOptions.Builder builder72 = builder8.writeConcern(writeConcern69);
        com.mongodb.MongoClientOptions.Builder builder73 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder75 = builder8.serverSelectionTimeout(1);
        com.mongodb.event.CommandListener commandListener76 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder77 = builder75.addCommandListener(commandListener76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(socketFactory41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(mongoClientOptions67);
        org.junit.Assert.assertNotNull(dBEncoderFactory68);
        org.junit.Assert.assertNotNull(writeConcern69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test2073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2073");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions14.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder2.dbEncoderFactory(dBEncoderFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        boolean boolean35 = mongoClientOptions34.isSocketKeepAlive();
        int int36 = mongoClientOptions34.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory37 = mongoClientOptions34.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions51 = builder50.build();
        boolean boolean52 = mongoClientOptions51.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory53 = mongoClientOptions51.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList54 = mongoClientOptions51.getCommandListeners();
        int int55 = mongoClientOptions51.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry56 = mongoClientOptions51.getCodecRegistry();
        boolean boolean57 = mongoClientOptions34.equals((java.lang.Object) codecRegistry56);
        com.mongodb.ReadPreference readPreference58 = mongoClientOptions34.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder59 = builder18.readPreference(readPreference58);
        com.mongodb.MongoClientOptions.Builder builder61 = builder18.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 120000 + "'", int36 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoClientOptions51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory53);
        org.junit.Assert.assertNotNull(commandListenerList54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(codecRegistry56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(readPreference58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test2074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2074");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        boolean boolean17 = mongoClientOptions16.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions16.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList19 = mongoClientOptions16.getCommandListeners();
        int int20 = mongoClientOptions16.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry21 = mongoClientOptions16.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions16);
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions16, environment23);
        int int25 = mongoClientOptions16.getMinHeartbeatFrequency();
        int int26 = mongoClientOptions16.getConnectionsPerHost();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions16.getReadPreference();
        org.bson.codecs.configuration.CodecRegistry codecRegistry28 = mongoClientOptions16.getCodecRegistry();
        java.lang.String str29 = mongoClientOptions16.getDescription();
        javax.net.SocketFactory socketFactory30 = mongoClientOptions16.getSocketFactory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertNotNull(commandListenerList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(codecRegistry21);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 500 + "'", int25 == 500);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(codecRegistry28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(socketFactory30);
    }

    @Test
    public void test2075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2075");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory19 = mongoClientOptions17.getSocketFactory();
        com.mongodb.WriteConcern writeConcern20 = mongoClientOptions17.getWriteConcern();
        com.mongodb.ReadConcern readConcern21 = mongoClientOptions17.getReadConcern();
        boolean boolean22 = mongoClientOptions17.isCursorFinalizerEnabled();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList23 = mongoClientOptions17.getCommandListeners();
        int int24 = mongoClientOptions17.getHeartbeatFrequency();
        int int25 = mongoClientOptions17.getConnectTimeout();
        boolean boolean26 = mongoClientOptions17.isSocketKeepAlive();
        org.springframework.core.env.Environment environment27 = null;
        com.mongodb.MongoClient mongoClient28 = mongoProperties0.createMongoClient(mongoClientOptions17, environment27);
        java.util.List<com.mongodb.event.CommandListener> commandListenerList29 = mongoClientOptions17.getCommandListeners();
        boolean boolean30 = mongoClientOptions17.isAlwaysUseMBeans();
        com.mongodb.DBEncoderFactory dBEncoderFactory31 = mongoClientOptions17.getDbEncoderFactory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(socketFactory19);
        org.junit.Assert.assertNotNull(writeConcern20);
        org.junit.Assert.assertNotNull(readConcern21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(commandListenerList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10000 + "'", int25 == 10000);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertNotNull(commandListenerList29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory31);
    }

    @Test
    public void test2076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2076");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions13.getSocketFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList18 = mongoClientOptions13.getCommandListeners();
        int int19 = mongoClientOptions13.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertNotNull(commandListenerList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test2077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2077");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUsername("");
        char[] charArray6 = mongoProperties0.getPassword();
        char[] charArray7 = mongoProperties0.getPassword();
        mongoProperties0.setUri("test");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertNull(charArray7);
    }

    @Test
    public void test2078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2078");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatFrequency(1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionLifeTime(10000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxConnectionIdleTime((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionLifeTime((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test2079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2079");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str7 = mongoProperties0.getDatabase();
        java.lang.String str8 = mongoProperties0.getUri();
        char[] charArray9 = mongoProperties0.getPassword();
        java.lang.String str10 = mongoProperties0.getUri();
        java.lang.String str11 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb://localhost/test" + "'", str10, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "test" + "'", str11, "test");
    }

    @Test
    public void test2080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2080");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions16.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder19 = builder8.dbDecoderFactory(dBDecoderFactory18);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        boolean boolean36 = mongoClientOptions35.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory37 = mongoClientOptions35.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList38 = mongoClientOptions35.getCommandListeners();
        com.mongodb.ReadPreference readPreference39 = mongoClientOptions35.getReadPreference();
        com.mongodb.WriteConcern writeConcern40 = mongoClientOptions35.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder41 = builder21.writeConcern(writeConcern40);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory37);
        org.junit.Assert.assertNotNull(commandListenerList38);
        org.junit.Assert.assertNotNull(readPreference39);
        org.junit.Assert.assertNotNull(writeConcern40);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test2081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2081");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUsername("hi!");
        java.lang.String str6 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setHost("");
        java.lang.String str9 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str11 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "test" + "'", str9, "test");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test2082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2082");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.minHeartbeatFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test2083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2083");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        boolean boolean11 = mongoClientOptions7.isSslInvalidHostNameAllowed();
        int int12 = mongoClientOptions7.getServerSelectionTimeout();
        int int13 = mongoClientOptions7.getMaxWaitTime();
        int int14 = mongoClientOptions7.getMinConnectionsPerHost();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions7.getDbDecoderFactory();
        java.lang.Class<?> wildcardClass16 = dBDecoderFactory15.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 30000 + "'", int12 == 30000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 120000 + "'", int13 == 120000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2084");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout(1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2085");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        int int15 = mongoClientOptions13.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions13.getDbEncoderFactory();
        int int17 = mongoClientOptions13.getMinHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions13.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions13.getDbEncoderFactory();
        int int20 = mongoClientOptions13.getMinHeartbeatFrequency();
        int int21 = mongoClientOptions13.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 120000 + "'", int15 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test2086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2086");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        boolean boolean25 = mongoClientOptions24.isSocketKeepAlive();
        int int26 = mongoClientOptions24.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions24.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder4.dbEncoderFactory(dBEncoderFactory27);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder4.build();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties30 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str31 = mongoProperties30.getGridFsDatabase();
        java.lang.String str32 = mongoProperties30.getGridFsDatabase();
        java.lang.String str33 = mongoProperties30.getUsername();
        java.lang.String str34 = mongoProperties30.getAuthenticationDatabase();
        java.lang.String str35 = mongoProperties30.getMongoClientDatabase();
        java.lang.String str36 = mongoProperties30.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties30.createMongoClient(mongoClientOptions37, environment38);
        java.lang.String str40 = mongoProperties30.getGridFsDatabase();
        mongoProperties30.setDatabase("test");
        boolean boolean43 = mongoClientOptions29.equals((java.lang.Object) mongoProperties30);
        com.mongodb.ReadPreference readPreference44 = mongoClientOptions29.getReadPreference();
        boolean boolean45 = mongoClientOptions29.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory46 = mongoClientOptions29.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "test" + "'", str35, "test");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(readPreference44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(socketFactory46);
    }

    @Test
    public void test2087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2087");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions13.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(readPreference17);
    }

    @Test
    public void test2088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2088");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.localThreshold(15);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.heartbeatSocketTimeout((int) (short) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2089");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test2090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2090");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getDatabase();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str5 = mongoProperties0.getUri();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        boolean boolean20 = mongoClientOptions19.isSocketKeepAlive();
        int int21 = mongoClientOptions19.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory22 = mongoClientOptions19.getDbEncoderFactory();
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions19, environment23);
        int int25 = mongoClientOptions19.getLocalThreshold();
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions19);
        boolean boolean27 = mongoClientOptions19.isAlwaysUseMBeans();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions19.getReadPreference();
        org.bson.codecs.configuration.CodecRegistry codecRegistry29 = mongoClientOptions19.getCodecRegistry();
        int int30 = mongoClientOptions19.getMinConnectionsPerHost();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb://localhost/test" + "'", str5, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 120000 + "'", int21 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory22);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 15 + "'", int25 == 15);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertNotNull(codecRegistry29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test2091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2091");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        java.lang.String str16 = mongoClientOptions13.getDescription();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        java.lang.String str18 = mongoClientOptions13.getRequiredReplicaSetName();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        int int20 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.ReadConcern readConcern21 = mongoClientOptions13.getReadConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory22 = mongoClientOptions13.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(readConcern21);
        org.junit.Assert.assertNotNull(dBEncoderFactory22);
    }

    @Test
    public void test2092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2092");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.connectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.requiredReplicaSetName("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test2093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2093");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getRequiredReplicaSetName();
        int int16 = mongoClientOptions13.getMinConnectionsPerHost();
        int int17 = mongoClientOptions13.getMaxWaitTime();
        int int18 = mongoClientOptions13.getHeartbeatConnectTimeout();
        boolean boolean19 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        int int20 = mongoClientOptions13.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 120000 + "'", int17 == 120000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 120000 + "'", int20 == 120000);
    }

    @Test
    public void test2094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2094");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory17 = mongoClientOptions13.getDbDecoderFactory();
        int int18 = mongoClientOptions13.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(dBDecoderFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test2095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2095");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.threadsAllowedToBlockForConnectionMultiplier(120000);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        boolean boolean31 = mongoClientOptions30.isSocketKeepAlive();
        int int32 = mongoClientOptions30.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions30.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder16.dbDecoderFactory(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 120000 + "'", int32 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test2096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2096");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.connectTimeout(30000);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
    }

    @Test
    public void test2097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2097");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getRequiredReplicaSetName();
        int int16 = mongoClientOptions13.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        int int18 = mongoClientOptions13.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions13.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        java.util.List<com.mongodb.event.CommandListener> commandListenerList22 = mongoClientOptions13.getCommandListeners();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120000 + "'", int18 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNotNull(commandListenerList22);
    }

    @Test
    public void test2098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2098");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder1 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder3 = builder1.localThreshold(100);
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        int int15 = mongoClientOptions13.getConnectTimeout();
        java.lang.String str16 = mongoClientOptions13.getDescription();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions13.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder19 = builder3.dbDecoderFactory(dBDecoderFactory18);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties20 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str21 = mongoProperties20.getGridFsDatabase();
        java.lang.String str22 = mongoProperties20.getGridFsDatabase();
        java.lang.String str23 = mongoProperties20.getUsername();
        mongoProperties20.setHost("hi!");
        mongoProperties20.setGridFsDatabase("hi!");
        mongoProperties20.setGridFsDatabase("test");
        java.lang.String str30 = mongoProperties20.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder37 = builder31.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder39.build();
        org.springframework.core.env.Environment environment41 = null;
        com.mongodb.MongoClient mongoClient42 = mongoProperties20.createMongoClient(mongoClientOptions40, environment41);
        int int43 = mongoClientOptions40.getMinHeartbeatFrequency();
        javax.net.SocketFactory socketFactory44 = mongoClientOptions40.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder45 = builder19.socketFactory(socketFactory44);
        com.mongodb.MongoClientOptions.Builder builder47 = builder19.heartbeatConnectTimeout(0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "test" + "'", str16, "test");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertNotNull(mongoClient42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 500 + "'", int43 == 500);
        org.junit.Assert.assertNotNull(socketFactory44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test2099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2099");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.sslEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test2100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2100");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        java.lang.String str4 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str5 = mongoProperties0.getHost();
        java.lang.String str6 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        char[] charArray9 = mongoProperties0.getPassword();
        java.lang.String str10 = mongoProperties0.getDatabase();
        char[] charArray11 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "test" + "'", str4, "test");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(charArray9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(charArray11);
    }

    @Test
    public void test2101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2101");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.connectionsPerHost(10);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory28 = mongoClientOptions26.getSocketFactory();
        com.mongodb.WriteConcern writeConcern29 = mongoClientOptions26.getWriteConcern();
        com.mongodb.ReadConcern readConcern30 = mongoClientOptions26.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder31 = builder12.readConcern(readConcern30);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder33.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder38 = builder33.maxConnectionLifeTime(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(socketFactory28);
        org.junit.Assert.assertNotNull(writeConcern29);
        org.junit.Assert.assertNotNull(readConcern30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test2102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2102");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder47.build();
        int int49 = mongoClientOptions48.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory50 = mongoClientOptions48.getSocketFactory();
        com.mongodb.WriteConcern writeConcern51 = mongoClientOptions48.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder52 = builder30.writeConcern(writeConcern51);
        com.mongodb.MongoClientOptions.Builder builder53 = builder27.writeConcern(writeConcern51);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.description("");
        com.mongodb.MongoClientOptions.Builder builder58 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions65 = builder64.build();
        int int66 = mongoClientOptions65.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory67 = mongoClientOptions65.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder68 = builder55.dbDecoderFactory(dBDecoderFactory67);
        com.mongodb.MongoClientOptions.Builder builder69 = builder10.dbDecoderFactory(dBDecoderFactory67);
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.minHeartbeatFrequency((int) ' ');
        com.mongodb.event.CommandListener commandListener72 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder73 = builder71.addCommandListener(commandListener72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(socketFactory50);
        org.junit.Assert.assertNotNull(writeConcern51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(mongoClientOptions65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test2103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2103");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        boolean boolean16 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        java.lang.String str17 = mongoClientOptions13.getDescription();
        java.lang.String str18 = mongoClientOptions13.getRequiredReplicaSetName();
        java.lang.String str19 = mongoClientOptions13.getRequiredReplicaSetName();
        int int20 = mongoClientOptions13.getMinHeartbeatFrequency();
        int int21 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.WriteConcern writeConcern22 = mongoClientOptions13.getWriteConcern();
        com.mongodb.DBDecoderFactory dBDecoderFactory23 = mongoClientOptions13.getDbDecoderFactory();
        com.mongodb.ReadConcern readConcern24 = mongoClientOptions13.getReadConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(writeConcern22);
        org.junit.Assert.assertNotNull(dBDecoderFactory23);
        org.junit.Assert.assertNotNull(readConcern24);
    }

    @Test
    public void test2104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2104");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int17 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean18 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        javax.net.SocketFactory socketFactory19 = mongoClientOptions13.getSocketFactory();
        int int20 = mongoClientOptions13.getMinConnectionsPerHost();
        boolean boolean21 = mongoClientOptions13.isSslEnabled();
        boolean boolean22 = mongoClientOptions13.isAlwaysUseMBeans();
        int int23 = mongoClientOptions13.getHeartbeatSocketTimeout();
        boolean boolean24 = mongoClientOptions13.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(socketFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2105");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.serverSelectionTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getMaxConnectionLifeTime();
        int int19 = mongoClientOptions17.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
    }

    @Test
    public void test2106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2106");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getConnectTimeout();
        java.lang.String str10 = mongoClientOptions7.getDescription();
        boolean boolean11 = mongoClientOptions7.isAlwaysUseMBeans();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions7.getSocketFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory13 = mongoClientOptions7.getDbDecoderFactory();
        int int14 = mongoClientOptions7.getSocketTimeout();
        java.lang.String str15 = mongoClientOptions7.getDescription();
        boolean boolean16 = mongoClientOptions7.isSslInvalidHostNameAllowed();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "test" + "'", str10, "test");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertNotNull(dBDecoderFactory13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "test" + "'", str15, "test");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2107");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getConnectTimeout();
        java.lang.String str10 = mongoClientOptions7.getDescription();
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder(mongoClientOptions7);
        int int12 = mongoClientOptions7.getMaxWaitTime();
        boolean boolean13 = mongoClientOptions7.isSslInvalidHostNameAllowed();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "test" + "'", str10, "test");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2108");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getUri();
        mongoProperties0.setDatabase("hi!");
        java.lang.String str4 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb://localhost/test" + "'", str1, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test2109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2109");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.ReadConcern readConcern16 = mongoClientOptions13.getReadConcern();
        boolean boolean18 = mongoClientOptions13.equals((java.lang.Object) 10);
        boolean boolean19 = mongoClientOptions13.isSslEnabled();
        boolean boolean20 = mongoClientOptions13.isSslEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions13.getDbEncoderFactory();
        java.lang.String str22 = mongoClientOptions13.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(readConcern16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
    }

    @Test
    public void test2110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2110");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.minHeartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.maxConnectionIdleTime((int) '4');
        com.mongodb.MongoClientOptions.Builder builder18 = builder8.maxConnectionLifeTime(97);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test2111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2111");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        mongoProperties0.clearPassword();
        java.lang.String str4 = mongoProperties0.getDatabase();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setHost("hi!");
        java.lang.String str9 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test2112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2112");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.description("");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder30.build();
        int int32 = mongoClientOptions31.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory33 = mongoClientOptions31.getSocketFactory();
        com.mongodb.WriteConcern writeConcern34 = mongoClientOptions31.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder35 = builder13.writeConcern(writeConcern34);
        com.mongodb.MongoClientOptions.Builder builder36 = builder10.writeConcern(writeConcern34);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.maxWaitTime(27017);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.maxWaitTime(10000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(socketFactory33);
        org.junit.Assert.assertNotNull(writeConcern34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test2113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2113");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.threadsAllowedToBlockForConnectionMultiplier((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry27 = mongoClientOptions25.getCodecRegistry();
        int int28 = mongoClientOptions25.getSocketTimeout();
        java.lang.String str29 = mongoClientOptions25.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory30 = mongoClientOptions25.getDbEncoderFactory();
        int int31 = mongoClientOptions25.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern32 = mongoClientOptions25.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder33 = builder8.readConcern(readConcern32);
        com.mongodb.MongoClientOptions.Builder builder35 = builder8.serverSelectionTimeout((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(codecRegistry27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(dBEncoderFactory30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(readConcern32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test2114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2114");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        int int25 = mongoClientOptions24.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions24.getSocketFactory();
        com.mongodb.WriteConcern writeConcern27 = mongoClientOptions24.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder28 = builder10.writeConcern(writeConcern27);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder28.build();
        int int30 = mongoClientOptions29.getSocketTimeout();
        int int31 = mongoClientOptions29.getMaxWaitTime();
        int int32 = mongoClientOptions29.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertNotNull(writeConcern27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 120000 + "'", int31 == 120000);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
    }

    @Test
    public void test2115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2115");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        com.mongodb.MongoClientOptions.Builder builder27 = com.mongodb.MongoClientOptions.builder(mongoClientOptions26);
        java.lang.String str28 = mongoClientOptions26.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry29 = mongoClientOptions26.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder30 = builder8.codecRegistry(codecRegistry29);
        com.mongodb.MongoClientOptions.Builder builder32 = builder8.connectTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.serverSelectionTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.heartbeatConnectTimeout(52);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder38 = builder36.minConnectionsPerHost((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: minConnectionsPerHost must be >= 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test2116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2116");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory27 = mongoClientOptions25.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory28 = mongoClientOptions25.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder29 = builder15.socketFactory(socketFactory28);
        com.mongodb.MongoClientOptions.Builder builder31 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder49.build();
        int int51 = mongoClientOptions50.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory52 = mongoClientOptions50.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder53 = builder42.dbDecoderFactory(dBDecoderFactory52);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.maxConnectionIdleTime(120000);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.minConnectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder59 = builder55.connectTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder60 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder66 = builder62.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions73 = builder72.build();
        boolean boolean74 = mongoClientOptions73.isSocketKeepAlive();
        int int75 = mongoClientOptions73.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory76 = mongoClientOptions73.getDbEncoderFactory();
        int int77 = mongoClientOptions73.getMinHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference78 = mongoClientOptions73.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder79 = builder59.readPreference(readPreference78);
        com.mongodb.MongoClientOptions.Builder builder80 = builder31.readPreference(readPreference78);
        com.mongodb.MongoClientOptions.Builder builder81 = builder2.readPreference(readPreference78);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory27);
        org.junit.Assert.assertNotNull(socketFactory28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(mongoClientOptions73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 120000 + "'", int75 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 500 + "'", int77 == 500);
        org.junit.Assert.assertNotNull(readPreference78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test2117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2117");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions13.getSocketFactory();
        boolean boolean18 = mongoClientOptions13.isAlwaysUseMBeans();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        boolean boolean20 = mongoClientOptions13.isSslEnabled();
        javax.net.SocketFactory socketFactory21 = mongoClientOptions13.getSocketFactory();
        int int22 = mongoClientOptions13.getServerSelectionTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test2118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2118");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str5 = mongoProperties0.getUri();
        java.lang.String str6 = mongoProperties0.getUri();
        java.lang.Integer int7 = mongoProperties0.getPort();
        java.lang.String str8 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str9 = mongoProperties0.getGridFsDatabase();
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb://localhost/test" + "'", str5, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "test" + "'", str8, "test");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test2119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2119");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.ReadConcern readConcern16 = mongoClientOptions13.getReadConcern();
        boolean boolean18 = mongoClientOptions13.equals((java.lang.Object) 10);
        int int19 = mongoClientOptions13.getHeartbeatFrequency();
        java.lang.String str20 = mongoClientOptions13.getRequiredReplicaSetName();
        javax.net.SocketFactory socketFactory21 = mongoClientOptions13.getSocketFactory();
        int int22 = mongoClientOptions13.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        boolean boolean37 = mongoClientOptions36.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory38 = mongoClientOptions36.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList39 = mongoClientOptions36.getCommandListeners();
        com.mongodb.ReadPreference readPreference40 = mongoClientOptions36.getReadPreference();
        int int41 = mongoClientOptions36.getMaxConnectionLifeTime();
        int int42 = mongoClientOptions36.getConnectTimeout();
        boolean boolean43 = mongoClientOptions13.equals((java.lang.Object) int42);
        org.bson.codecs.configuration.CodecRegistry codecRegistry44 = mongoClientOptions13.getCodecRegistry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(readConcern16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 500 + "'", int22 == 500);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory38);
        org.junit.Assert.assertNotNull(commandListenerList39);
        org.junit.Assert.assertNotNull(readPreference40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10000 + "'", int42 == 10000);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(codecRegistry44);
    }

    @Test
    public void test2120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2120");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder8.build();
        int int12 = mongoClientOptions11.getConnectionsPerHost();
        int int13 = mongoClientOptions11.getHeartbeatConnectTimeout();
        int int14 = mongoClientOptions11.getSocketTimeout();
        boolean boolean15 = mongoClientOptions11.isSslInvalidHostNameAllowed();
        int int16 = mongoClientOptions11.getMaxConnectionIdleTime();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions11.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(socketFactory17);
    }

    @Test
    public void test2121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2121");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str7 = mongoProperties0.getDatabase();
        java.lang.String str8 = mongoProperties0.getUri();
        java.lang.Integer int9 = mongoProperties0.getPort();
        mongoProperties0.setHost("hi!");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int9);
    }

    @Test
    public void test2122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2122");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.threadsAllowedToBlockForConnectionMultiplier(10000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.alwaysUseMBeans(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder22 = builder16.connectionsPerHost((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: connectionPerHost must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test2123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2123");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.threadsAllowedToBlockForConnectionMultiplier(10000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.socketTimeout(10);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatFrequency((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: heartbeatFrequency must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test2124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2124");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions15.getCommandListeners();
        com.mongodb.DBEncoderFactory dBEncoderFactory17 = mongoClientOptions15.getDbEncoderFactory();
        boolean boolean18 = mongoClientOptions15.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions15.getDbEncoderFactory();
        int int20 = mongoClientOptions15.getConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions15.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertNotNull(dBEncoderFactory17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
    }

    @Test
    public void test2125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2125");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.clearPassword();
        mongoProperties0.clearPassword();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test2126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2126");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getUsername();
        mongoProperties0.setUsername("");
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setUsername("hi!");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test2127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2127");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder(mongoClientOptions24);
        java.lang.String str26 = mongoClientOptions24.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry27 = mongoClientOptions24.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder28 = builder6.codecRegistry(codecRegistry27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder30.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.serverSelectionTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder46 = builder40.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder48 = builder40.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder49 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder59 = builder55.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder60 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder66 = builder62.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions73 = builder72.build();
        com.mongodb.MongoClientOptions.Builder builder74 = com.mongodb.MongoClientOptions.builder(mongoClientOptions73);
        java.lang.String str75 = mongoClientOptions73.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry76 = mongoClientOptions73.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder77 = builder55.codecRegistry(codecRegistry76);
        com.mongodb.MongoClientOptions.Builder builder78 = builder48.codecRegistry(codecRegistry76);
        com.mongodb.MongoClientOptions.Builder builder79 = builder30.codecRegistry(codecRegistry76);
        com.mongodb.MongoClientOptions.Builder builder81 = builder79.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder83 = builder81.socketKeepAlive(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(mongoClientOptions73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test2128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2128");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionLifeTime(10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.socketTimeout((int) (short) -1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2129");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionLifeTime(10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        java.lang.Class<?> wildcardClass18 = mongoClientOptions17.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test2130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2130");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        mongoProperties0.clearPassword();
        mongoProperties0.setUsername("hi!");
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory21 = mongoClientOptions19.getSocketFactory();
        boolean boolean22 = mongoClientOptions19.isSslInvalidHostNameAllowed();
        java.lang.String str23 = mongoClientOptions19.getDescription();
        java.lang.String str24 = mongoClientOptions19.getRequiredReplicaSetName();
        java.lang.String str25 = mongoClientOptions19.getRequiredReplicaSetName();
        org.bson.codecs.configuration.CodecRegistry codecRegistry26 = mongoClientOptions19.getCodecRegistry();
        com.mongodb.ReadConcern readConcern27 = mongoClientOptions19.getReadConcern();
        org.springframework.core.env.Environment environment28 = null;
        com.mongodb.MongoClient mongoClient29 = mongoProperties0.createMongoClient(mongoClientOptions19, environment28);
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(codecRegistry26);
        org.junit.Assert.assertNotNull(readConcern27);
        org.junit.Assert.assertNotNull(mongoClient29);
    }

    @Test
    public void test2131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2131");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.localThreshold((int) '#');
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.localThreshold(100);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.serverSelectionTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder30 = builder24.minHeartbeatFrequency(500);
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder37.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory39 = mongoClientOptions38.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern40 = mongoClientOptions38.getWriteConcern();
        int int41 = mongoClientOptions38.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern42 = mongoClientOptions38.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder43 = builder30.writeConcern(writeConcern42);
        com.mongodb.MongoClientOptions.Builder builder44 = builder20.writeConcern(writeConcern42);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.maxWaitTime(0);
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder46.build();
        boolean boolean48 = mongoClientOptions47.isSslInvalidHostNameAllowed();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertNotNull(dBEncoderFactory39);
        org.junit.Assert.assertNotNull(writeConcern40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(writeConcern42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(mongoClientOptions47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test2132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2132");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minConnectionsPerHost((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.maxConnectionIdleTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test2133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2133");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionIdleTime();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean10 = mongoClientOptions7.isSocketKeepAlive();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions7.getWriteConcern();
        com.mongodb.ReadConcern readConcern12 = mongoClientOptions7.getReadConcern();
        boolean boolean13 = mongoClientOptions7.isAlwaysUseMBeans();
        int int14 = mongoClientOptions7.getLocalThreshold();
        int int15 = mongoClientOptions7.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertNotNull(readConcern12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test2134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2134");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions16.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder19 = builder8.dbDecoderFactory(dBDecoderFactory18);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionIdleTime(120000);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.minConnectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.connectTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.threadsAllowedToBlockForConnectionMultiplier(500);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test2135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2135");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int10 = mongoClientOptions7.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry11 = mongoClientOptions7.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder12 = com.mongodb.MongoClientOptions.builder(mongoClientOptions7);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) '#');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(codecRegistry11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2136");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.description("test");
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.serverSelectionTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.connectTimeout(97);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test2137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2137");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.ReadConcern readConcern16 = mongoClientOptions13.getReadConcern();
        boolean boolean18 = mongoClientOptions13.equals((java.lang.Object) 10);
        int int19 = mongoClientOptions13.getHeartbeatSocketTimeout();
        boolean boolean20 = mongoClientOptions13.isSslEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions13.getDbEncoderFactory();
        int int22 = mongoClientOptions13.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(readConcern16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 500 + "'", int22 == 500);
    }

    @Test
    public void test2138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2138");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions15.getCommandListeners();
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder(mongoClientOptions15);
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder(mongoClientOptions15);
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions15.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions15.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertNotNull(readPreference20);
    }

    @Test
    public void test2139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2139");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minConnectionsPerHost((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.maxConnectionIdleTime(32);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2140");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions13.getSocketFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions13.getDbDecoderFactory();
        boolean boolean19 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        int int20 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int21 = mongoClientOptions13.getConnectTimeout();
        int int22 = mongoClientOptions13.getMaxConnectionIdleTime();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList23 = mongoClientOptions13.getCommandListeners();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(commandListenerList23);
    }

    @Test
    public void test2141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2141");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions15.getCommandListeners();
        int int17 = mongoClientOptions15.getLocalThreshold();
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder(mongoClientOptions15);
        int int19 = mongoClientOptions15.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 15 + "'", int17 == 15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
    }

    @Test
    public void test2142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2142");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int10 = mongoClientOptions7.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry11 = mongoClientOptions7.getCodecRegistry();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        int int13 = mongoClientOptions7.getHeartbeatFrequency();
        int int14 = mongoClientOptions7.getConnectionsPerHost();
        int int15 = mongoClientOptions7.getHeartbeatFrequency();
        int int16 = mongoClientOptions7.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(codecRegistry11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test2143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2143");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder14.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder16.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder48.build();
        com.mongodb.MongoClientOptions.Builder builder50 = com.mongodb.MongoClientOptions.builder(mongoClientOptions49);
        java.lang.String str51 = mongoClientOptions49.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry52 = mongoClientOptions49.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder53 = builder31.codecRegistry(codecRegistry52);
        com.mongodb.MongoClientOptions.Builder builder54 = builder22.codecRegistry(codecRegistry52);
        com.mongodb.MongoClientOptions.Builder builder55 = builder15.codecRegistry(codecRegistry52);
        com.mongodb.MongoClientOptions.Builder builder56 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder62 = builder58.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder65 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions72 = builder71.build();
        int int73 = mongoClientOptions72.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory74 = mongoClientOptions72.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder75 = builder64.dbDecoderFactory(dBDecoderFactory74);
        com.mongodb.MongoClientOptions.Builder builder77 = builder75.maxConnectionIdleTime(120000);
        com.mongodb.MongoClientOptions.Builder builder79 = builder77.minConnectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder80 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder82 = builder80.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder84 = builder82.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder86 = builder82.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder88 = builder86.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder90 = builder88.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder92 = builder90.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions93 = builder92.build();
        com.mongodb.MongoClientOptions.Builder builder94 = com.mongodb.MongoClientOptions.builder(mongoClientOptions93);
        int int95 = mongoClientOptions93.getSocketTimeout();
        int int96 = mongoClientOptions93.getHeartbeatConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory97 = mongoClientOptions93.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder98 = builder77.dbEncoderFactory(dBEncoderFactory97);
        com.mongodb.MongoClientOptions.Builder builder99 = builder55.dbEncoderFactory(dBEncoderFactory97);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(mongoClientOptions72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(mongoClientOptions93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 20000 + "'", int96 == 20000);
        org.junit.Assert.assertNotNull(dBEncoderFactory97);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test2144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2144");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.minHeartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.description("test");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        boolean boolean19 = mongoClientOptions18.isSocketKeepAlive();
        int int20 = mongoClientOptions18.getThreadsAllowedToBlockForConnectionMultiplier();
        int int21 = mongoClientOptions18.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry22 = mongoClientOptions18.getCodecRegistry();
        com.mongodb.DBEncoderFactory dBEncoderFactory23 = mongoClientOptions18.getDbEncoderFactory();
        int int24 = mongoClientOptions18.getHeartbeatFrequency();
        int int25 = mongoClientOptions18.getLocalThreshold();
        int int26 = mongoClientOptions18.getMaxConnectionIdleTime();
        java.lang.String str27 = mongoClientOptions18.getRequiredReplicaSetName();
        com.mongodb.ReadConcern readConcern28 = mongoClientOptions18.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder29 = builder10.readConcern(readConcern28);
        com.mongodb.MongoClientOptions.Builder builder31 = builder10.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder10.cursorFinalizerEnabled(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertNotNull(codecRegistry22);
        org.junit.Assert.assertNotNull(dBEncoderFactory23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10000 + "'", int24 == 10000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 15 + "'", int25 == 15);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(readConcern28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test2145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2145");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        int int33 = mongoClientOptions32.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry34 = mongoClientOptions32.getCodecRegistry();
        java.lang.String str35 = mongoClientOptions32.getDescription();
        boolean boolean36 = mongoClientOptions32.isAlwaysUseMBeans();
        boolean boolean37 = mongoClientOptions32.isSocketKeepAlive();
        int int38 = mongoClientOptions32.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern39 = mongoClientOptions32.getReadConcern();
        int int40 = mongoClientOptions32.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.DBEncoderFactory dBEncoderFactory41 = mongoClientOptions32.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder42 = builder18.dbEncoderFactory(dBEncoderFactory41);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.minHeartbeatFrequency(15);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.minHeartbeatFrequency(97);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(codecRegistry34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertNotNull(readConcern39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(dBEncoderFactory41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test2146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2146");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setAuthenticationDatabase("test");
        mongoProperties0.clearPassword();
        mongoProperties0.setUsername("test");
        mongoProperties0.setUsername("hi!");
        java.lang.String str18 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "test" + "'", str10, "test");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test2147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2147");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionLifeTime(500);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.localThreshold(120000);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxWaitTime(20000);
        com.mongodb.event.CommandListener commandListener21 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder22 = builder20.addCommandListener(commandListener21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test2148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2148");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.threadsAllowedToBlockForConnectionMultiplier((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        com.mongodb.MongoClientOptions.Builder builder36 = com.mongodb.MongoClientOptions.builder(mongoClientOptions35);
        java.lang.String str37 = mongoClientOptions35.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry38 = mongoClientOptions35.getCodecRegistry();
        com.mongodb.ReadPreference readPreference39 = mongoClientOptions35.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder40 = builder21.readPreference(readPreference39);
        com.mongodb.MongoClientOptions.Builder builder41 = builder10.readPreference(readPreference39);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry38);
        org.junit.Assert.assertNotNull(readPreference39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test2149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2149");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.description("test");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2150");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setPort((java.lang.Integer) 10);
        java.lang.String str7 = mongoProperties0.getUsername();
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test2151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2151");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionIdleTime();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean10 = mongoClientOptions7.isAlwaysUseMBeans();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int12 = mongoClientOptions7.getConnectionsPerHost();
        boolean boolean13 = mongoClientOptions7.isSslInvalidHostNameAllowed();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2152");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getRequiredReplicaSetName();
        int int16 = mongoClientOptions13.getConnectTimeout();
        boolean boolean17 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions13.getDbEncoderFactory();
        int int19 = mongoClientOptions13.getMaxConnectionIdleTime();
        int int20 = mongoClientOptions13.getMaxConnectionLifeTime();
        int int21 = mongoClientOptions13.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder34.legacyDefaults();
        boolean boolean38 = mongoClientOptions13.equals((java.lang.Object) builder34);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 500 + "'", int21 == 500);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2153");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder20.localThreshold((int) '#');
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder39.build();
        int int41 = mongoClientOptions40.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory42 = mongoClientOptions40.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder43 = builder20.socketFactory(socketFactory42);
        com.mongodb.MongoClientOptions.Builder builder44 = builder8.socketFactory(socketFactory42);
        com.mongodb.MongoClientOptions.Builder builder46 = builder8.socketTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder48 = builder8.maxWaitTime(120000);
        com.mongodb.MongoClientOptions.Builder builder50 = builder8.maxConnectionLifeTime((int) (short) -1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(socketFactory42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test2154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2154");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        char[] charArray4 = mongoProperties0.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties5.setHost("");
        java.lang.String str8 = mongoProperties5.getGridFsDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str10 = mongoProperties9.getAuthenticationDatabase();
        mongoProperties9.setAuthenticationDatabase("hi!");
        char[] charArray13 = mongoProperties9.getPassword();
        java.lang.String str14 = mongoProperties9.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str16 = mongoProperties15.getAuthenticationDatabase();
        mongoProperties15.setAuthenticationDatabase("hi!");
        java.lang.String str19 = mongoProperties15.getHost();
        java.lang.String str20 = mongoProperties15.getMongoClientDatabase();
        char[] charArray21 = mongoProperties15.getPassword();
        char[] charArray22 = mongoProperties15.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str24 = mongoProperties23.getGridFsDatabase();
        java.lang.String str25 = mongoProperties23.getGridFsDatabase();
        java.lang.String str26 = mongoProperties23.getUsername();
        java.lang.String str27 = mongoProperties23.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass28 = mongoProperties23.getFieldNamingStrategy();
        char[] charArray33 = new char[] { 'a', '#', '#', '4' };
        mongoProperties23.setPassword(charArray33);
        mongoProperties15.setPassword(charArray33);
        mongoProperties9.setPassword(charArray33);
        mongoProperties5.setPassword(charArray33);
        mongoProperties0.setPassword(charArray33);
        mongoProperties0.setUri("test");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(charArray4);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(charArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "test" + "'", str14, "test");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "test" + "'", str20, "test");
        org.junit.Assert.assertNull(charArray21);
        org.junit.Assert.assertNull(charArray22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[a, #, #, 4]");
    }

    @Test
    public void test2155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2155");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getServerSelectionTimeout();
        int int16 = mongoClientOptions13.getMaxConnectionIdleTime();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        int int18 = mongoClientOptions13.getHeartbeatFrequency();
        int int19 = mongoClientOptions13.getServerSelectionTimeout();
        int int20 = mongoClientOptions13.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 120000 + "'", int20 == 120000);
    }

    @Test
    public void test2156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2156");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.minConnectionsPerHost((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.minHeartbeatFrequency((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.connectTimeout(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test2157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2157");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions13.getCommandListeners();
        int int17 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry18 = mongoClientOptions13.getCodecRegistry();
        boolean boolean19 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        int int20 = mongoClientOptions13.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(codecRegistry18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
    }

    @Test
    public void test2158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2158");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions14.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder2.dbEncoderFactory(dBEncoderFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        boolean boolean35 = mongoClientOptions34.isSocketKeepAlive();
        int int36 = mongoClientOptions34.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory37 = mongoClientOptions34.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions51 = builder50.build();
        boolean boolean52 = mongoClientOptions51.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory53 = mongoClientOptions51.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList54 = mongoClientOptions51.getCommandListeners();
        int int55 = mongoClientOptions51.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry56 = mongoClientOptions51.getCodecRegistry();
        boolean boolean57 = mongoClientOptions34.equals((java.lang.Object) codecRegistry56);
        com.mongodb.ReadPreference readPreference58 = mongoClientOptions34.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder59 = builder18.readPreference(readPreference58);
        com.mongodb.MongoClientOptions.Builder builder61 = builder18.localThreshold((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.maxConnectionIdleTime((-1));
        com.mongodb.MongoClientOptions.Builder builder65 = builder61.minHeartbeatFrequency((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 120000 + "'", int36 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoClientOptions51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory53);
        org.junit.Assert.assertNotNull(commandListenerList54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(codecRegistry56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(readPreference58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test2159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2159");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions20.getDbEncoderFactory();
        com.mongodb.ReadConcern readConcern22 = mongoClientOptions20.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder23 = builder10.readConcern(readConcern22);
        com.mongodb.MongoClientOptions.Builder builder25 = builder10.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        int int40 = mongoClientOptions39.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory41 = mongoClientOptions39.getSocketFactory();
        int int42 = mongoClientOptions39.getMaxWaitTime();
        boolean boolean43 = mongoClientOptions39.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties44 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str45 = mongoProperties44.getGridFsDatabase();
        java.lang.String str46 = mongoProperties44.getGridFsDatabase();
        java.lang.String str47 = mongoProperties44.getUsername();
        mongoProperties44.setHost("hi!");
        mongoProperties44.setGridFsDatabase("hi!");
        boolean boolean52 = mongoClientOptions39.equals((java.lang.Object) mongoProperties44);
        com.mongodb.ReadPreference readPreference53 = mongoClientOptions39.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder54 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder60 = builder56.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions67 = builder66.build();
        int int68 = mongoClientOptions67.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory69 = mongoClientOptions67.getSocketFactory();
        boolean boolean70 = mongoClientOptions67.isSslInvalidHostNameAllowed();
        com.mongodb.ReadPreference readPreference71 = mongoClientOptions67.getReadPreference();
        boolean boolean72 = mongoClientOptions39.equals((java.lang.Object) readPreference71);
        org.bson.codecs.configuration.CodecRegistry codecRegistry73 = mongoClientOptions39.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder74 = builder10.codecRegistry(codecRegistry73);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder76 = builder74.threadsAllowedToBlockForConnectionMultiplier((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: threadsAllowedToBlockForConnectionMultiplier must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
        org.junit.Assert.assertNotNull(readConcern22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(socketFactory41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 120000 + "'", int42 == 120000);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(readPreference53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(mongoClientOptions67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(socketFactory69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(readPreference71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(codecRegistry73);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test2160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2160");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getHeartbeatSocketTimeout();
        java.lang.String str20 = mongoClientOptions18.getRequiredReplicaSetName();
        java.lang.String str21 = mongoClientOptions18.getRequiredReplicaSetName();
        int int22 = mongoClientOptions18.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions18, environment23);
        java.lang.String str25 = mongoClientOptions18.getRequiredReplicaSetName();
        int int26 = mongoClientOptions18.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder27 = com.mongodb.MongoClientOptions.builder(mongoClientOptions18);
        java.lang.String str28 = mongoClientOptions18.getDescription();
        com.mongodb.MongoClientOptions.Builder builder29 = com.mongodb.MongoClientOptions.builder(mongoClientOptions18);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "test" + "'", str4, "test");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
    }

    @Test
    public void test2161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2161");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionLifeTime(10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        boolean boolean25 = mongoClientOptions24.isSocketKeepAlive();
        int int26 = mongoClientOptions24.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions24);
        boolean boolean28 = mongoClientOptions24.isSslInvalidHostNameAllowed();
        boolean boolean29 = mongoClientOptions24.isSocketKeepAlive();
        java.lang.String str30 = mongoClientOptions24.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder31 = com.mongodb.MongoClientOptions.builder(mongoClientOptions24);
        boolean boolean32 = mongoClientOptions24.isCursorFinalizerEnabled();
        com.mongodb.ReadPreference readPreference33 = mongoClientOptions24.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder34 = builder12.readPreference(readPreference33);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder41.build();
        boolean boolean43 = mongoClientOptions42.isSocketKeepAlive();
        int int44 = mongoClientOptions42.getThreadsAllowedToBlockForConnectionMultiplier();
        int int45 = mongoClientOptions42.getConnectionsPerHost();
        java.lang.String str46 = mongoClientOptions42.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory47 = mongoClientOptions42.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder48 = builder12.dbEncoderFactory(dBEncoderFactory47);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(readPreference33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "test" + "'", str46, "test");
        org.junit.Assert.assertNotNull(dBEncoderFactory47);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test2162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2162");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getHeartbeatSocketTimeout();
        java.lang.String str20 = mongoClientOptions18.getRequiredReplicaSetName();
        java.lang.String str21 = mongoClientOptions18.getRequiredReplicaSetName();
        int int22 = mongoClientOptions18.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions18, environment23);
        java.lang.String str25 = mongoClientOptions18.getRequiredReplicaSetName();
        int int26 = mongoClientOptions18.getMaxWaitTime();
        int int27 = mongoClientOptions18.getSocketTimeout();
        int int28 = mongoClientOptions18.getHeartbeatFrequency();
        java.lang.String str29 = mongoClientOptions18.getDescription();
        int int30 = mongoClientOptions18.getMinConnectionsPerHost();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "test" + "'", str4, "test");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test2163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2163");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.setHost("hi!");
        mongoProperties0.setAuthenticationDatabase("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test2164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2164");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getSocketTimeout();
        java.lang.String str17 = mongoClientOptions13.getDescription();
        boolean boolean18 = mongoClientOptions13.isCursorFinalizerEnabled();
        boolean boolean19 = mongoClientOptions13.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2165");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder6.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
    }

    @Test
    public void test2166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2166");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.serverSelectionTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder15 = builder9.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder28.build();
        boolean boolean30 = mongoClientOptions29.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory31 = mongoClientOptions29.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder32 = builder9.dbEncoderFactory(dBEncoderFactory31);
        com.mongodb.MongoClientOptions.Builder builder33 = builder8.dbEncoderFactory(dBEncoderFactory31);
        com.mongodb.MongoClientOptions.Builder builder35 = builder8.connectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder36 = builder8.legacyDefaults();
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder38 = builder8.connectionsPerHost((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: connectionPerHost must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test2167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2167");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        int int16 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean17 = mongoClientOptions13.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str19 = mongoProperties18.getGridFsDatabase();
        java.lang.String str20 = mongoProperties18.getGridFsDatabase();
        java.lang.String str21 = mongoProperties18.getUsername();
        mongoProperties18.setHost("hi!");
        mongoProperties18.setGridFsDatabase("hi!");
        boolean boolean26 = mongoClientOptions13.equals((java.lang.Object) mongoProperties18);
        int int27 = mongoClientOptions13.getConnectTimeout();
        int int28 = mongoClientOptions13.getMaxConnectionLifeTime();
        int int29 = mongoClientOptions13.getMinHeartbeatFrequency();
        int int30 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory31 = mongoClientOptions13.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10000 + "'", int27 == 10000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 500 + "'", int29 == 500);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dBDecoderFactory31);
    }

    @Test
    public void test2168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2168");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        int int16 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean17 = mongoClientOptions13.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str19 = mongoProperties18.getGridFsDatabase();
        java.lang.String str20 = mongoProperties18.getGridFsDatabase();
        java.lang.String str21 = mongoProperties18.getUsername();
        mongoProperties18.setHost("hi!");
        mongoProperties18.setGridFsDatabase("hi!");
        boolean boolean26 = mongoClientOptions13.equals((java.lang.Object) mongoProperties18);
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions13.getReadPreference();
        boolean boolean28 = mongoClientOptions13.isSslEnabled();
        int int29 = mongoClientOptions13.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder30.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
    }

    @Test
    public void test2169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2169");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getUsername();
        java.lang.String str3 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str6 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str8 = mongoProperties0.getDatabase();
        java.lang.String str9 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test2170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2170");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        java.lang.String str4 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str5 = mongoProperties0.getHost();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.String str7 = mongoProperties0.getHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str9 = mongoProperties8.getGridFsDatabase();
        java.lang.String str10 = mongoProperties8.getGridFsDatabase();
        java.lang.String str11 = mongoProperties8.getUsername();
        java.lang.String str12 = mongoProperties8.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass13 = mongoProperties8.getFieldNamingStrategy();
        char[] charArray18 = new char[] { 'a', '#', '#', '4' };
        mongoProperties8.setPassword(charArray18);
        mongoProperties0.setPassword(charArray18);
        mongoProperties0.setUri("test");
        mongoProperties0.clearPassword();
        mongoProperties0.setHost("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "test" + "'", str4, "test");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[\000, \000, \000, \000]");
    }

    @Test
    public void test2171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2171");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Integer int5 = mongoProperties0.getPort();
        mongoProperties0.setHost("hi!");
        java.lang.String str8 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setHost("hi!");
        java.lang.String str11 = mongoProperties0.getHost();
        mongoProperties0.setUri("hi!");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test2172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2172");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        int int15 = mongoClientOptions13.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions13.getDbEncoderFactory();
        int int17 = mongoClientOptions13.getMinHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions13.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList19 = mongoClientOptions13.getCommandListeners();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions13.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 120000 + "'", int15 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(commandListenerList19);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
    }

    @Test
    public void test2173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2173");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        int int17 = mongoClientOptions13.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test2174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2174");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder(mongoClientOptions7);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test2175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2175");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions13.getReadPreference();
        int int18 = mongoClientOptions13.getMinConnectionsPerHost();
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions13.getDbDecoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList20 = mongoClientOptions13.getCommandListeners();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertNotNull(commandListenerList20);
    }

    @Test
    public void test2176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2176");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        int int18 = mongoClientOptions13.getMinConnectionsPerHost();
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions13.getDbDecoderFactory();
        int int20 = mongoClientOptions13.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern21 = mongoClientOptions13.getWriteConcern();
        int int22 = mongoClientOptions13.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(writeConcern21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
    }

    @Test
    public void test2177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2177");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getSocketTimeout();
        int int9 = mongoClientOptions7.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test2178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2178");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatFrequency(30000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test2179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2179");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("");
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setDatabase("test");
        java.lang.String str7 = mongoProperties0.getDatabase();
        java.lang.String str8 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "test" + "'", str7, "test");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test2180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2180");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions13.getReadPreference();
        int int19 = mongoClientOptions13.getServerSelectionTimeout();
        java.lang.String str20 = mongoClientOptions13.getDescription();
        int int21 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean22 = mongoClientOptions13.isSslEnabled();
        java.lang.String str23 = mongoClientOptions13.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
    }

    @Test
    public void test2181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2181");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setHost("");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUsername("hi!");
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.String str7 = mongoProperties0.getHost();
        java.lang.String str8 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test2182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2182");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getUsername();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getDatabase();
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test2183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2183");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory10 = mongoClientOptions9.getDbDecoderFactory();
        int int11 = mongoClientOptions9.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        boolean boolean26 = mongoClientOptions9.equals((java.lang.Object) mongoClientOptions25);
        boolean boolean27 = mongoClientOptions9.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertNotNull(dBDecoderFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2184");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.serverSelectionTimeout(0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getConnectionsPerHost();
        boolean boolean15 = mongoClientOptions13.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2185");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties16.setHost("");
        java.lang.String str19 = mongoProperties16.getGridFsDatabase();
        mongoProperties16.setUsername("hi!");
        java.lang.String str22 = mongoProperties16.getGridFsDatabase();
        mongoProperties16.setHost("");
        java.lang.String str25 = mongoProperties16.getGridFsDatabase();
        boolean boolean26 = mongoClientOptions13.equals((java.lang.Object) mongoProperties16);
        int int27 = mongoClientOptions13.getMinHeartbeatFrequency();
        int int28 = mongoClientOptions13.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern29 = mongoClientOptions13.getReadConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 500 + "'", int27 == 500);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(readConcern29);
    }

    @Test
    public void test2186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2186");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        boolean boolean33 = mongoClientOptions32.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory34 = mongoClientOptions32.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder12.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder36 = builder9.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder49 = builder45.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions56 = builder55.build();
        boolean boolean57 = mongoClientOptions56.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory58 = mongoClientOptions56.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList59 = mongoClientOptions56.getCommandListeners();
        com.mongodb.ReadPreference readPreference60 = mongoClientOptions56.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder61 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder67 = builder63.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.maxWaitTime((int) (byte) 10);
        boolean boolean70 = mongoClientOptions56.equals((java.lang.Object) builder67);
        int int71 = mongoClientOptions56.getMinConnectionsPerHost();
        com.mongodb.ReadPreference readPreference72 = mongoClientOptions56.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder73 = builder40.readPreference(readPreference72);
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.description("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoClientOptions56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory58);
        org.junit.Assert.assertNotNull(commandListenerList59);
        org.junit.Assert.assertNotNull(readPreference60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(readPreference72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test2187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2187");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test2188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2188");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getMinConnectionsPerHost();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions13.getWriteConcern();
        int int19 = mongoClientOptions13.getMinHeartbeatFrequency();
        com.mongodb.ReadConcern readConcern20 = mongoClientOptions13.getReadConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 500 + "'", int19 == 500);
        org.junit.Assert.assertNotNull(readConcern20);
    }

    @Test
    public void test2189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2189");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        char[] charArray6 = mongoProperties0.getPassword();
        java.lang.String str7 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test2190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2190");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 0);
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str8 = mongoProperties7.getGridFsDatabase();
        java.lang.String str9 = mongoProperties7.getHost();
        mongoProperties7.clearPassword();
        java.lang.String str11 = mongoProperties7.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str13 = mongoProperties12.getAuthenticationDatabase();
        java.lang.String str14 = mongoProperties12.getUsername();
        mongoProperties12.setGridFsDatabase("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str18 = mongoProperties17.getGridFsDatabase();
        java.lang.String str19 = mongoProperties17.getGridFsDatabase();
        java.lang.String str20 = mongoProperties17.getUsername();
        mongoProperties17.setHost("hi!");
        mongoProperties17.setGridFsDatabase("hi!");
        char[] charArray26 = new char[] { '#' };
        mongoProperties17.setPassword(charArray26);
        mongoProperties12.setPassword(charArray26);
        mongoProperties7.setPassword(charArray26);
        mongoProperties0.setPassword(charArray26);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#]");
    }

    @Test
    public void test2191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2191");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        boolean boolean23 = mongoClientOptions22.isSocketKeepAlive();
        int int24 = mongoClientOptions22.getThreadsAllowedToBlockForConnectionMultiplier();
        int int25 = mongoClientOptions22.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry26 = mongoClientOptions22.getCodecRegistry();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions22.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder10.dbEncoderFactory(dBEncoderFactory27);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder41.build();
        boolean boolean43 = mongoClientOptions42.isSocketKeepAlive();
        int int44 = mongoClientOptions42.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory45 = mongoClientOptions42.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder46 = builder10.dbEncoderFactory(dBEncoderFactory45);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.description("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(codecRegistry26);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 120000 + "'", int44 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test2192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2192");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        java.lang.String str4 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str5 = mongoProperties0.getHost();
        java.lang.String str6 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        char[] charArray9 = mongoProperties0.getPassword();
        java.lang.String str10 = mongoProperties0.getDatabase();
        mongoProperties0.setUri("hi!");
        mongoProperties0.setPort((java.lang.Integer) 20000);
        mongoProperties0.setHost("hi!");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "test" + "'", str4, "test");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(charArray9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test2193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2193");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getMaxConnectionIdleTime();
        boolean boolean22 = mongoClientOptions20.isSocketKeepAlive();
        boolean boolean23 = mongoClientOptions20.isSocketKeepAlive();
        com.mongodb.WriteConcern writeConcern24 = mongoClientOptions20.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder25 = builder6.writeConcern(writeConcern24);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        com.mongodb.MongoClientOptions.Builder builder30 = builder27.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(writeConcern24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test2194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2194");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        boolean boolean27 = mongoClientOptions26.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory28 = mongoClientOptions26.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList29 = mongoClientOptions26.getCommandListeners();
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions26.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder31 = builder12.readPreference(readPreference30);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.maxWaitTime(20000);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder46 = builder40.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder49 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder55 = builder51.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions62 = builder61.build();
        boolean boolean63 = mongoClientOptions62.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory64 = mongoClientOptions62.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList65 = mongoClientOptions62.getCommandListeners();
        com.mongodb.ReadPreference readPreference66 = mongoClientOptions62.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder67 = builder48.readPreference(readPreference66);
        com.mongodb.MongoClientOptions.Builder builder69 = builder48.connectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder71 = builder48.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder72 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder76 = builder74.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder78 = builder74.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder82 = builder80.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder84 = builder82.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions85 = builder84.build();
        boolean boolean86 = mongoClientOptions85.isSocketKeepAlive();
        int int87 = mongoClientOptions85.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory88 = mongoClientOptions85.getDbEncoderFactory();
        int int89 = mongoClientOptions85.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder90 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions85);
        javax.net.SocketFactory socketFactory91 = mongoClientOptions85.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder92 = builder48.socketFactory(socketFactory91);
        com.mongodb.MongoClientOptions.Builder builder93 = builder35.socketFactory(socketFactory91);
        com.mongodb.MongoClientOptions.Builder builder95 = builder35.connectionsPerHost((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder97 = builder95.maxWaitTime((int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory28);
        org.junit.Assert.assertNotNull(commandListenerList29);
        org.junit.Assert.assertNotNull(readPreference30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(mongoClientOptions62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory64);
        org.junit.Assert.assertNotNull(commandListenerList65);
        org.junit.Assert.assertNotNull(readPreference66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(mongoClientOptions85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 120000 + "'", int87 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 120000 + "'", int89 == 120000);
        org.junit.Assert.assertNotNull(socketFactory91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test2195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2195");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int10 = mongoClientOptions7.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry11 = mongoClientOptions7.getCodecRegistry();
        java.lang.String str12 = mongoClientOptions7.getRequiredReplicaSetName();
        javax.net.SocketFactory socketFactory13 = mongoClientOptions7.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder14 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.build();
        boolean boolean26 = mongoClientOptions7.equals((java.lang.Object) builder22);
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions7.getDbEncoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory28 = mongoClientOptions7.getDbEncoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory29 = mongoClientOptions7.getDbEncoderFactory();
        int int30 = mongoClientOptions7.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(codecRegistry11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(socketFactory13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertNotNull(dBEncoderFactory28);
        org.junit.Assert.assertNotNull(dBEncoderFactory29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test2196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2196");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        int int15 = mongoClientOptions13.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions13.getDbEncoderFactory();
        java.lang.String str17 = mongoClientOptions13.getDescription();
        java.lang.String str18 = mongoClientOptions13.getRequiredReplicaSetName();
        boolean boolean19 = mongoClientOptions13.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 120000 + "'", int15 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2197");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        boolean boolean33 = mongoClientOptions32.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory34 = mongoClientOptions32.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder12.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder36 = builder9.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatConnectTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder44 = builder38.maxConnectionLifeTime(120000);
        com.mongodb.MongoClientOptions.Builder builder45 = builder44.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test2198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2198");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        mongoProperties0.setAuthenticationDatabase("test");
        java.lang.String str12 = mongoProperties0.getUri();
        java.lang.String str13 = mongoProperties0.getHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str15 = mongoProperties14.getGridFsDatabase();
        java.lang.String str16 = mongoProperties14.getGridFsDatabase();
        java.lang.String str17 = mongoProperties14.getUsername();
        mongoProperties14.setHost("hi!");
        mongoProperties14.setGridFsDatabase("hi!");
        mongoProperties14.setGridFsDatabase("test");
        java.lang.String str24 = mongoProperties14.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder31 = builder25.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        org.springframework.core.env.Environment environment35 = null;
        com.mongodb.MongoClient mongoClient36 = mongoProperties14.createMongoClient(mongoClientOptions34, environment35);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties37 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str38 = mongoProperties37.getGridFsDatabase();
        java.lang.String str39 = mongoProperties37.getHost();
        java.lang.String str40 = mongoProperties37.getGridFsDatabase();
        java.lang.String str41 = mongoProperties37.getMongoClientDatabase();
        char[] charArray42 = mongoProperties37.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties43 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str44 = mongoProperties43.getGridFsDatabase();
        java.lang.String str45 = mongoProperties43.getGridFsDatabase();
        java.lang.String str46 = mongoProperties43.getUsername();
        java.lang.String str47 = mongoProperties43.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass48 = mongoProperties43.getFieldNamingStrategy();
        char[] charArray53 = new char[] { 'a', '#', '#', '4' };
        mongoProperties43.setPassword(charArray53);
        mongoProperties37.setPassword(charArray53);
        mongoProperties14.setPassword(charArray53);
        mongoProperties0.setPassword(charArray53);
        java.lang.String str58 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertNotNull(mongoClient36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "test" + "'", str41, "test");
        org.junit.Assert.assertNull(charArray42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(wildcardClass48);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[a, #, #, 4]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "test" + "'", str58, "test");
    }

    @Test
    public void test2199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2199");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        char[] charArray4 = mongoProperties0.getPassword();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str7 = mongoProperties0.getUsername();
        java.lang.Integer int8 = mongoProperties0.getPort();
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(charArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(int8);
    }

    @Test
    public void test2200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2200");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str4 = mongoProperties0.getHost();
        java.lang.String str5 = mongoProperties0.getHost();
        java.lang.String str6 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test2201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2201");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        boolean boolean11 = mongoClientOptions7.isSslInvalidHostNameAllowed();
        boolean boolean12 = mongoClientOptions7.isSocketKeepAlive();
        java.lang.String str13 = mongoClientOptions7.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions7);
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions7.getDbDecoderFactory();
        boolean boolean16 = mongoClientOptions7.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2202");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        com.mongodb.MongoClientOptions.Builder builder36 = com.mongodb.MongoClientOptions.builder(mongoClientOptions35);
        java.lang.String str37 = mongoClientOptions35.getRequiredReplicaSetName();
        int int38 = mongoClientOptions35.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions35);
        int int40 = mongoClientOptions35.getMaxWaitTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry41 = mongoClientOptions35.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder42 = builder17.codecRegistry(codecRegistry41);
        com.mongodb.MongoClientOptions.Builder builder43 = builder10.codecRegistry(codecRegistry41);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder10.build();
        int int45 = mongoClientOptions44.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 120000 + "'", int40 == 120000);
        org.junit.Assert.assertNotNull(codecRegistry41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 15 + "'", int45 == 15);
    }

    @Test
    public void test2203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2203");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions13.getWriteConcern();
        int int17 = mongoClientOptions13.getMaxConnectionLifeTime();
        int int18 = mongoClientOptions13.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions13.getHeartbeatFrequency();
        int int20 = mongoClientOptions13.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test2204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2204");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getConnectTimeout();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions7.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder(mongoClientOptions7);
        int int12 = mongoClientOptions7.getMaxWaitTime();
        int int13 = mongoClientOptions7.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test2205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2205");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getUsername();
        mongoProperties0.setPort((java.lang.Integer) 10);
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getGridFsDatabase();
        char[] charArray7 = mongoProperties0.getPassword();
        mongoProperties0.setAuthenticationDatabase("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(charArray7);
    }

    @Test
    public void test2206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2206");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        boolean boolean17 = mongoClientOptions16.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions16.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList19 = mongoClientOptions16.getCommandListeners();
        int int20 = mongoClientOptions16.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry21 = mongoClientOptions16.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions16);
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions16, environment23);
        int int25 = mongoClientOptions16.getMaxConnectionLifeTime();
        boolean boolean26 = mongoClientOptions16.isAlwaysUseMBeans();
        int int27 = mongoClientOptions16.getMinConnectionsPerHost();
        boolean boolean28 = mongoClientOptions16.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.maxConnectionLifeTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder29.serverSelectionTimeout(52);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder53 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions60 = builder59.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory61 = mongoClientOptions60.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern62 = mongoClientOptions60.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder63 = builder52.writeConcern(writeConcern62);
        com.mongodb.MongoClientOptions.Builder builder64 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder70 = builder66.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder76 = builder74.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions77 = builder76.build();
        com.mongodb.MongoClientOptions.Builder builder78 = com.mongodb.MongoClientOptions.builder(mongoClientOptions77);
        java.lang.String str79 = mongoClientOptions77.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry80 = mongoClientOptions77.getCodecRegistry();
        javax.net.SocketFactory socketFactory81 = mongoClientOptions77.getSocketFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory82 = mongoClientOptions77.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder83 = builder52.dbDecoderFactory(dBDecoderFactory82);
        com.mongodb.MongoClientOptions.Builder builder84 = builder35.dbDecoderFactory(dBDecoderFactory82);
        boolean boolean85 = mongoClientOptions16.equals((java.lang.Object) builder84);
        com.mongodb.MongoClientOptions.Builder builder87 = builder84.description("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertNotNull(commandListenerList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(codecRegistry21);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(mongoClientOptions60);
        org.junit.Assert.assertNotNull(dBEncoderFactory61);
        org.junit.Assert.assertNotNull(writeConcern62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(mongoClientOptions77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi!" + "'", str79, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry80);
        org.junit.Assert.assertNotNull(socketFactory81);
        org.junit.Assert.assertNotNull(dBDecoderFactory82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test2207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2207");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int10 = mongoClientOptions7.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry11 = mongoClientOptions7.getCodecRegistry();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        int int13 = mongoClientOptions7.getHeartbeatFrequency();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList14 = mongoClientOptions7.getCommandListeners();
        boolean boolean15 = mongoClientOptions7.isAlwaysUseMBeans();
        boolean boolean16 = mongoClientOptions7.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        com.mongodb.event.CommandListener commandListener18 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder19 = builder17.addCommandListener(commandListener18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(codecRegistry11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertNotNull(commandListenerList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2208");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getSocketTimeout();
        java.lang.String str17 = mongoClientOptions13.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions13.getDbEncoderFactory();
        boolean boolean19 = mongoClientOptions13.isSocketKeepAlive();
        int int20 = mongoClientOptions13.getHeartbeatFrequency();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList21 = mongoClientOptions13.getCommandListeners();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(commandListenerList21);
    }

    @Test
    public void test2209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2209");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getSocketTimeout();
        java.lang.String str17 = mongoClientOptions13.getRequiredReplicaSetName();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions13.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions13.getDbEncoderFactory();
        int int20 = mongoClientOptions13.getHeartbeatFrequency();
        int int21 = mongoClientOptions13.getServerSelectionTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test2210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2210");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass5 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray10 = new char[] { 'a', '#', '#', '4' };
        mongoProperties0.setPassword(charArray10);
        mongoProperties0.setUsername("test");
        mongoProperties0.clearPassword();
        mongoProperties0.setUsername("test");
        mongoProperties0.setPort((java.lang.Integer) 15);
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000, \000]");
    }

    @Test
    public void test2211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2211");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.serverSelectionTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.socketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry28 = mongoClientOptions26.getCodecRegistry();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties29 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties29.setHost("");
        java.lang.String str32 = mongoProperties29.getGridFsDatabase();
        mongoProperties29.setUsername("hi!");
        java.lang.String str35 = mongoProperties29.getGridFsDatabase();
        mongoProperties29.setHost("");
        java.lang.String str38 = mongoProperties29.getGridFsDatabase();
        boolean boolean39 = mongoClientOptions26.equals((java.lang.Object) mongoProperties29);
        com.mongodb.DBEncoderFactory dBEncoderFactory40 = mongoClientOptions26.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder41 = builder12.dbEncoderFactory(dBEncoderFactory40);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(codecRegistry28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory40);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test2212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2212");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketTimeout((int) (short) -1);
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder30.build();
        boolean boolean32 = mongoClientOptions31.isSocketKeepAlive();
        int int33 = mongoClientOptions31.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory34 = mongoClientOptions31.getDbEncoderFactory();
        int int35 = mongoClientOptions31.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions31);
        javax.net.SocketFactory socketFactory37 = mongoClientOptions31.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder38 = builder15.socketFactory(socketFactory37);
        com.mongodb.MongoClientOptions.Builder builder39 = builder0.socketFactory(socketFactory37);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.sslEnabled(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 120000 + "'", int33 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 120000 + "'", int35 == 120000);
        org.junit.Assert.assertNotNull(socketFactory37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test2213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2213");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str5 = mongoProperties0.getUsername();
        mongoProperties0.setPort((java.lang.Integer) 20000);
        mongoProperties0.setPort((java.lang.Integer) 27017);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "test" + "'", str4, "test");
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test2214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2214");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray4 = mongoProperties0.getPassword();
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        java.lang.Integer int6 = mongoProperties0.getPort();
        mongoProperties0.setUsername("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(charArray4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(int6);
    }

    @Test
    public void test2215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2215");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectionsPerHost(32);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) (short) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test2216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2216");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str10 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("");
        java.lang.String str13 = mongoProperties0.getDatabase();
        mongoProperties0.setHost("test");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test2217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2217");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory10 = mongoClientOptions9.getDbDecoderFactory();
        int int11 = mongoClientOptions9.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        boolean boolean26 = mongoClientOptions9.equals((java.lang.Object) mongoClientOptions25);
        int int27 = mongoClientOptions9.getHeartbeatConnectTimeout();
        boolean boolean28 = mongoClientOptions9.isSslEnabled();
        int int29 = mongoClientOptions9.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertNotNull(dBDecoderFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test2218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2218");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int17 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean18 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        javax.net.SocketFactory socketFactory19 = mongoClientOptions13.getSocketFactory();
        int int20 = mongoClientOptions13.getMinConnectionsPerHost();
        boolean boolean21 = mongoClientOptions13.isSslEnabled();
        boolean boolean22 = mongoClientOptions13.isAlwaysUseMBeans();
        com.mongodb.DBDecoderFactory dBDecoderFactory23 = mongoClientOptions13.getDbDecoderFactory();
        int int24 = mongoClientOptions13.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(socketFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test2219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2219");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getSocketTimeout();
        java.lang.String str17 = mongoClientOptions13.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions13.getDbEncoderFactory();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList20 = mongoClientOptions13.getCommandListeners();
        int int21 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(commandListenerList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test2220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2220");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getSocketTimeout();
        int int17 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean18 = mongoClientOptions13.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        java.lang.String str20 = mongoClientOptions13.getRequiredReplicaSetName();
        boolean boolean21 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        int int22 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int23 = mongoClientOptions13.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 500 + "'", int23 == 500);
    }

    @Test
    public void test2221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2221");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass5 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str6 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatSocketTimeout();
        java.lang.String str22 = mongoClientOptions20.getRequiredReplicaSetName();
        boolean boolean23 = mongoClientOptions20.isSslEnabled();
        int int24 = mongoClientOptions20.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions20, environment25);
        mongoProperties0.clearPassword();
        mongoProperties0.setHost("mongodb://localhost/test");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(mongoClient26);
    }

    @Test
    public void test2222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2222");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        char[] charArray4 = mongoProperties0.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties5.setHost("");
        java.lang.String str8 = mongoProperties5.getGridFsDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str10 = mongoProperties9.getAuthenticationDatabase();
        mongoProperties9.setAuthenticationDatabase("hi!");
        char[] charArray13 = mongoProperties9.getPassword();
        java.lang.String str14 = mongoProperties9.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str16 = mongoProperties15.getAuthenticationDatabase();
        mongoProperties15.setAuthenticationDatabase("hi!");
        java.lang.String str19 = mongoProperties15.getHost();
        java.lang.String str20 = mongoProperties15.getMongoClientDatabase();
        char[] charArray21 = mongoProperties15.getPassword();
        char[] charArray22 = mongoProperties15.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str24 = mongoProperties23.getGridFsDatabase();
        java.lang.String str25 = mongoProperties23.getGridFsDatabase();
        java.lang.String str26 = mongoProperties23.getUsername();
        java.lang.String str27 = mongoProperties23.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass28 = mongoProperties23.getFieldNamingStrategy();
        char[] charArray33 = new char[] { 'a', '#', '#', '4' };
        mongoProperties23.setPassword(charArray33);
        mongoProperties15.setPassword(charArray33);
        mongoProperties9.setPassword(charArray33);
        mongoProperties5.setPassword(charArray33);
        mongoProperties0.setPassword(charArray33);
        java.lang.String str39 = mongoProperties0.getUri();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        java.lang.String str42 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(charArray4);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(charArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "test" + "'", str14, "test");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "test" + "'", str20, "test");
        org.junit.Assert.assertNull(charArray21);
        org.junit.Assert.assertNull(charArray22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[a, #, #, 4]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "mongodb://localhost/test" + "'", str39, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "test" + "'", str42, "test");
    }

    @Test
    public void test2223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2223");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.threadsAllowedToBlockForConnectionMultiplier(32);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test2224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2224");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.setGridFsDatabase("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(mongoClient9);
    }

    @Test
    public void test2225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2225");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.minConnectionsPerHost((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test2226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2226");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int10 = mongoClientOptions7.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry11 = mongoClientOptions7.getCodecRegistry();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        int int13 = mongoClientOptions7.getHeartbeatFrequency();
        int int14 = mongoClientOptions7.getLocalThreshold();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions7.getDbDecoderFactory();
        int int16 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(codecRegistry11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
    }

    @Test
    public void test2227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2227");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getConnectionsPerHost();
        int int9 = mongoClientOptions7.getHeartbeatSocketTimeout();
        int int10 = mongoClientOptions7.getSocketTimeout();
        int int11 = mongoClientOptions7.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test2228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2228");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getRequiredReplicaSetName();
        int int16 = mongoClientOptions13.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        int int18 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean19 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        com.mongodb.ReadConcern readConcern21 = mongoClientOptions13.getReadConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120000 + "'", int18 == 120000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(readConcern21);
    }

    @Test
    public void test2229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2229");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.minConnectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder(mongoClientOptions24);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder40.build();
        com.mongodb.MongoClientOptions.Builder builder42 = com.mongodb.MongoClientOptions.builder(mongoClientOptions41);
        java.lang.String str43 = mongoClientOptions41.getDescription();
        int int44 = mongoClientOptions41.getMinConnectionsPerHost();
        com.mongodb.ReadConcern readConcern45 = mongoClientOptions41.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder46 = builder27.readConcern(readConcern45);
        com.mongodb.MongoClientOptions.Builder builder47 = builder4.readConcern(readConcern45);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder49 = builder4.localThreshold((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: localThreshold must be >= 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(readConcern45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test2230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2230");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getSocketTimeout();
        java.lang.String str17 = mongoClientOptions13.getDescription();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.cursorFinalizerEnabled(false);
        boolean boolean37 = mongoClientOptions13.equals((java.lang.Object) builder36);
        com.mongodb.MongoClientOptions.Builder builder39 = builder36.heartbeatConnectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder41 = builder36.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder36.sslEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test2231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2231");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        com.mongodb.MongoClientOptions.Builder builder17 = builder14.threadsAllowedToBlockForConnectionMultiplier(52);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        int int26 = mongoClientOptions25.getMaxConnectionIdleTime();
        boolean boolean27 = mongoClientOptions25.isSocketKeepAlive();
        boolean boolean28 = mongoClientOptions25.isAlwaysUseMBeans();
        com.mongodb.DBDecoderFactory dBDecoderFactory29 = mongoClientOptions25.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder30 = builder14.dbDecoderFactory(dBDecoderFactory29);
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder37.build();
        com.mongodb.ReadConcern readConcern39 = mongoClientOptions38.getReadConcern();
        int int40 = mongoClientOptions38.getMinConnectionsPerHost();
        int int41 = mongoClientOptions38.getHeartbeatFrequency();
        javax.net.SocketFactory socketFactory42 = mongoClientOptions38.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder43 = builder14.socketFactory(socketFactory42);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder46 = builder45.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertNotNull(readConcern39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10000 + "'", int41 == 10000);
        org.junit.Assert.assertNotNull(socketFactory42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test2232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2232");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder10 = builder0.maxWaitTime((int) (short) -1);
        com.mongodb.event.CommandListener commandListener11 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder0.addCommandListener(commandListener11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test2233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2233");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions15.getCommandListeners();
        com.mongodb.DBEncoderFactory dBEncoderFactory17 = mongoClientOptions15.getDbEncoderFactory();
        boolean boolean18 = mongoClientOptions15.isCursorFinalizerEnabled();
        int int19 = mongoClientOptions15.getHeartbeatFrequency();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList20 = mongoClientOptions15.getCommandListeners();
        com.mongodb.DBDecoderFactory dBDecoderFactory21 = mongoClientOptions15.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertNotNull(dBEncoderFactory17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertNotNull(commandListenerList20);
        org.junit.Assert.assertNotNull(dBDecoderFactory21);
    }

    @Test
    public void test2234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2234");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        com.mongodb.MongoClientOptions.Builder builder30 = builder27.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder41 = builder35.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder43.build();
        org.bson.codecs.configuration.CodecRegistry codecRegistry45 = mongoClientOptions44.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder46 = builder30.codecRegistry(codecRegistry45);
        com.mongodb.MongoClientOptions.Builder builder47 = builder2.codecRegistry(codecRegistry45);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.serverSelectionTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder51 = builder47.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertNotNull(codecRegistry45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test2235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2235");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.serverSelectionTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.description("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test2236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2236");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.minConnectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder(mongoClientOptions24);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder40.build();
        com.mongodb.MongoClientOptions.Builder builder42 = com.mongodb.MongoClientOptions.builder(mongoClientOptions41);
        java.lang.String str43 = mongoClientOptions41.getDescription();
        int int44 = mongoClientOptions41.getMinConnectionsPerHost();
        com.mongodb.ReadConcern readConcern45 = mongoClientOptions41.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder46 = builder27.readConcern(readConcern45);
        com.mongodb.MongoClientOptions.Builder builder47 = builder4.readConcern(readConcern45);
        com.mongodb.MongoClientOptions.Builder builder49 = builder4.threadsAllowedToBlockForConnectionMultiplier((int) '4');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(readConcern45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test2237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2237");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.serverSelectionTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.minConnectionsPerHost((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatFrequency((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: heartbeatFrequency must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test2238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2238");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        boolean boolean25 = mongoClientOptions24.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory26 = mongoClientOptions24.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList27 = mongoClientOptions24.getCommandListeners();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions24.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder29 = builder10.readPreference(readPreference28);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.description("hi!");
        java.lang.Class<?> wildcardClass34 = builder33.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory26);
        org.junit.Assert.assertNotNull(commandListenerList27);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test2239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2239");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        mongoProperties0.clearPassword();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setUsername("hi!");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test2240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2240");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions13.getCommandListeners();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions13.getReadPreference();
        int int18 = mongoClientOptions13.getMaxConnectionLifeTime();
        int int19 = mongoClientOptions13.getLocalThreshold();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions13.getDbDecoderFactory();
        int int21 = mongoClientOptions13.getMinHeartbeatFrequency();
        boolean boolean22 = mongoClientOptions13.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 15 + "'", int19 == 15);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 500 + "'", int21 == 500);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2241");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        com.mongodb.MongoClientOptions.Builder builder27 = com.mongodb.MongoClientOptions.builder(mongoClientOptions26);
        java.lang.String str28 = mongoClientOptions26.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry29 = mongoClientOptions26.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder30 = builder8.codecRegistry(codecRegistry29);
        com.mongodb.MongoClientOptions.Builder builder32 = builder8.connectTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketTimeout(10);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
    }

    @Test
    public void test2242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2242");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setHost("");
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        com.mongodb.MongoClientOptions.Builder builder27 = com.mongodb.MongoClientOptions.builder(mongoClientOptions26);
        java.lang.String str28 = mongoClientOptions26.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry29 = mongoClientOptions26.getCodecRegistry();
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions26.getReadPreference();
        boolean boolean31 = mongoClientOptions26.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment32 = null;
        com.mongodb.MongoClient mongoClient33 = mongoProperties0.createMongoClient(mongoClientOptions26, environment32);
        mongoProperties0.setGridFsDatabase("");
        char[] charArray36 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "test" + "'", str10, "test");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry29);
        org.junit.Assert.assertNotNull(readPreference30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(mongoClient33);
        org.junit.Assert.assertNull(charArray36);
    }

    @Test
    public void test2243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2243");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder36.build();
        int int38 = mongoClientOptions37.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory39 = mongoClientOptions37.getSocketFactory();
        com.mongodb.WriteConcern writeConcern40 = mongoClientOptions37.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder41 = builder19.writeConcern(writeConcern40);
        com.mongodb.MongoClientOptions.Builder builder42 = builder16.writeConcern(writeConcern40);
        com.mongodb.MongoClientOptions.Builder builder44 = builder16.socketKeepAlive(true);
        java.lang.Class<?> wildcardClass45 = builder16.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(socketFactory39);
        org.junit.Assert.assertNotNull(writeConcern40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test2244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2244");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setHost("");
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        com.mongodb.MongoClientOptions.Builder builder27 = com.mongodb.MongoClientOptions.builder(mongoClientOptions26);
        java.lang.String str28 = mongoClientOptions26.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry29 = mongoClientOptions26.getCodecRegistry();
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions26.getReadPreference();
        boolean boolean31 = mongoClientOptions26.isAlwaysUseMBeans();
        org.springframework.core.env.Environment environment32 = null;
        com.mongodb.MongoClient mongoClient33 = mongoProperties0.createMongoClient(mongoClientOptions26, environment32);
        java.lang.String str34 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.setUri("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "test" + "'", str10, "test");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry29);
        org.junit.Assert.assertNotNull(readPreference30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(mongoClient33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "test" + "'", str34, "test");
    }

    @Test
    public void test2245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2245");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getSocketTimeout();
        java.lang.String str17 = mongoClientOptions13.getRequiredReplicaSetName();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions13.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions13.getDbEncoderFactory();
        int int20 = mongoClientOptions13.getMinHeartbeatFrequency();
        int int21 = mongoClientOptions13.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern22 = mongoClientOptions13.getWriteConcern();
        com.mongodb.ReadConcern readConcern23 = mongoClientOptions13.getReadConcern();
        org.bson.codecs.configuration.CodecRegistry codecRegistry24 = mongoClientOptions13.getCodecRegistry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 120000 + "'", int21 == 120000);
        org.junit.Assert.assertNotNull(writeConcern22);
        org.junit.Assert.assertNotNull(readConcern23);
        org.junit.Assert.assertNotNull(codecRegistry24);
    }

    @Test
    public void test2246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2246");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getMinConnectionsPerHost();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        int int18 = mongoClientOptions13.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder44.build();
        com.mongodb.MongoClientOptions.Builder builder46 = com.mongodb.MongoClientOptions.builder(mongoClientOptions45);
        java.lang.String str47 = mongoClientOptions45.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry48 = mongoClientOptions45.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder49 = builder27.codecRegistry(codecRegistry48);
        com.mongodb.MongoClientOptions.Builder builder51 = builder27.connectTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder55 = builder51.localThreshold((int) (short) 0);
        boolean boolean56 = mongoClientOptions13.equals((java.lang.Object) builder55);
        boolean boolean57 = mongoClientOptions13.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test2247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2247");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions24.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern26 = mongoClientOptions24.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder27 = builder16.writeConcern(writeConcern26);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder47 = builder43.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder53.build();
        com.mongodb.MongoClientOptions.Builder builder55 = com.mongodb.MongoClientOptions.builder(mongoClientOptions54);
        java.lang.String str56 = mongoClientOptions54.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry57 = mongoClientOptions54.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder58 = builder36.codecRegistry(codecRegistry57);
        com.mongodb.MongoClientOptions.Builder builder59 = builder27.codecRegistry(codecRegistry57);
        com.mongodb.MongoClientOptions.Builder builder61 = builder27.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder62 = builder27.legacyDefaults();
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder64 = builder27.heartbeatFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: heartbeatFrequency must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertNotNull(writeConcern26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(mongoClientOptions54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test2248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2248");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getSocketTimeout();
        boolean boolean17 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions13.getWriteConcern();
        int int19 = mongoClientOptions13.getSocketTimeout();
        javax.net.SocketFactory socketFactory20 = mongoClientOptions13.getSocketFactory();
        int int21 = mongoClientOptions13.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(socketFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 120000 + "'", int21 == 120000);
    }

    @Test
    public void test2249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2249");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        boolean boolean33 = mongoClientOptions32.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory34 = mongoClientOptions32.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder12.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder36 = builder9.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatConnectTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder44 = builder38.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.connectTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.requiredReplicaSetName("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test2250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2250");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslInvalidHostNameAllowed(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test2251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2251");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions20.getDbEncoderFactory();
        com.mongodb.ReadConcern readConcern22 = mongoClientOptions20.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder23 = builder10.readConcern(readConcern22);
        com.mongodb.MongoClientOptions.Builder builder25 = builder10.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder32.build();
        int int34 = mongoClientOptions33.getMaxConnectionIdleTime();
        boolean boolean35 = mongoClientOptions33.isSocketKeepAlive();
        boolean boolean36 = mongoClientOptions33.isAlwaysUseMBeans();
        int int37 = mongoClientOptions33.getMaxConnectionLifeTime();
        int int38 = mongoClientOptions33.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder39 = com.mongodb.MongoClientOptions.builder(mongoClientOptions33);
        com.mongodb.ReadConcern readConcern40 = mongoClientOptions33.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder41 = builder10.readConcern(readConcern40);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
        org.junit.Assert.assertNotNull(readConcern22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(readConcern40);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test2252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2252");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        boolean boolean25 = mongoClientOptions24.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory26 = mongoClientOptions24.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList27 = mongoClientOptions24.getCommandListeners();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions24.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder29 = builder10.readPreference(readPreference28);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.maxConnectionIdleTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder29.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory26);
        org.junit.Assert.assertNotNull(commandListenerList27);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test2253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2253");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
    }

    @Test
    public void test2254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2254");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.minConnectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder(mongoClientOptions24);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder40.build();
        com.mongodb.MongoClientOptions.Builder builder42 = com.mongodb.MongoClientOptions.builder(mongoClientOptions41);
        java.lang.String str43 = mongoClientOptions41.getDescription();
        int int44 = mongoClientOptions41.getMinConnectionsPerHost();
        com.mongodb.ReadConcern readConcern45 = mongoClientOptions41.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder46 = builder27.readConcern(readConcern45);
        com.mongodb.MongoClientOptions.Builder builder47 = builder4.readConcern(readConcern45);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder49 = builder4.minConnectionsPerHost((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: minConnectionsPerHost must be >= 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(readConcern45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test2255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2255");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        int int16 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean17 = mongoClientOptions13.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str19 = mongoProperties18.getGridFsDatabase();
        java.lang.String str20 = mongoProperties18.getGridFsDatabase();
        java.lang.String str21 = mongoProperties18.getUsername();
        mongoProperties18.setHost("hi!");
        mongoProperties18.setGridFsDatabase("hi!");
        boolean boolean26 = mongoClientOptions13.equals((java.lang.Object) mongoProperties18);
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions13.getReadPreference();
        boolean boolean28 = mongoClientOptions13.isSslEnabled();
        javax.net.SocketFactory socketFactory29 = mongoClientOptions13.getSocketFactory();
        boolean boolean30 = mongoClientOptions13.isSslEnabled();
        boolean boolean31 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        int int32 = mongoClientOptions13.getLocalThreshold();
        boolean boolean33 = mongoClientOptions13.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(socketFactory29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 15 + "'", int32 == 15);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test2256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2256");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.minHeartbeatFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder8.minHeartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder47 = builder43.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder53.build();
        int int55 = mongoClientOptions54.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory56 = mongoClientOptions54.getSocketFactory();
        boolean boolean57 = mongoClientOptions54.isSslInvalidHostNameAllowed();
        com.mongodb.ReadPreference readPreference58 = mongoClientOptions54.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder59 = builder40.readPreference(readPreference58);
        com.mongodb.MongoClientOptions.Builder builder60 = builder27.readPreference(readPreference58);
        com.mongodb.MongoClientOptions.Builder builder61 = builder16.readPreference(readPreference58);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(mongoClientOptions54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(socketFactory56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(readPreference58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test2257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2257");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        boolean boolean16 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        java.lang.String str17 = mongoClientOptions13.getRequiredReplicaSetName();
        int int18 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int19 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions13.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertNotNull(readPreference20);
    }

    @Test
    public void test2258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2258");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        boolean boolean17 = mongoClientOptions16.isSocketKeepAlive();
        int int18 = mongoClientOptions16.getThreadsAllowedToBlockForConnectionMultiplier();
        int int19 = mongoClientOptions16.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry20 = mongoClientOptions16.getCodecRegistry();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions16.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder22 = builder6.dbEncoderFactory(dBEncoderFactory21);
        com.mongodb.MongoClientOptions.Builder builder24 = builder6.minConnectionsPerHost(52);
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions43 = builder42.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory44 = mongoClientOptions43.getDbEncoderFactory();
        com.mongodb.ReadConcern readConcern45 = mongoClientOptions43.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder46 = builder35.readConcern(readConcern45);
        com.mongodb.MongoClientOptions.Builder builder47 = builder6.readConcern(readConcern45);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.maxConnectionLifeTime(52);
        com.mongodb.MongoClientOptions.Builder builder51 = builder47.cursorFinalizerEnabled(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(codecRegistry20);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoClientOptions43);
        org.junit.Assert.assertNotNull(dBEncoderFactory44);
        org.junit.Assert.assertNotNull(readConcern45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test2259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2259");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        int int23 = mongoClientOptions22.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry24 = mongoClientOptions22.getCodecRegistry();
        int int25 = mongoClientOptions22.getSocketTimeout();
        java.lang.String str26 = mongoClientOptions22.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions22.getDbEncoderFactory();
        org.bson.codecs.configuration.CodecRegistry codecRegistry28 = mongoClientOptions22.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry29 = mongoClientOptions22.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder30 = builder8.codecRegistry(codecRegistry29);
        com.mongodb.MongoClientOptions.Builder builder32 = builder8.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder34 = builder8.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder36 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder37 = builder8.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(codecRegistry24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertNotNull(codecRegistry28);
        org.junit.Assert.assertNotNull(codecRegistry29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test2260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2260");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionLifeTime(0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.requiredReplicaSetName("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test2261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2261");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder2.build();
        int int8 = mongoClientOptions7.getMaxWaitTime();
        boolean boolean9 = mongoClientOptions7.isSslEnabled();
        java.lang.String str10 = mongoClientOptions7.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 120000 + "'", int8 == 120000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test2262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2262");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getSocketTimeout();
        java.lang.String str17 = mongoClientOptions13.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions13.getDbEncoderFactory();
        org.bson.codecs.configuration.CodecRegistry codecRegistry19 = mongoClientOptions13.getCodecRegistry();
        int int20 = mongoClientOptions13.getLocalThreshold();
        int int21 = mongoClientOptions13.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertNotNull(codecRegistry19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 15 + "'", int20 == 15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test2263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2263");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str18 = mongoProperties17.getGridFsDatabase();
        java.lang.String str19 = mongoProperties17.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder32.build();
        boolean boolean34 = mongoClientOptions33.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory35 = mongoClientOptions33.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList36 = mongoClientOptions33.getCommandListeners();
        int int37 = mongoClientOptions33.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry38 = mongoClientOptions33.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions33);
        org.springframework.core.env.Environment environment40 = null;
        com.mongodb.MongoClient mongoClient41 = mongoProperties17.createMongoClient(mongoClientOptions33, environment40);
        int int42 = mongoClientOptions33.getMaxConnectionLifeTime();
        boolean boolean43 = mongoClientOptions33.isAlwaysUseMBeans();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList44 = mongoClientOptions33.getCommandListeners();
        int int45 = mongoClientOptions33.getConnectTimeout();
        int int46 = mongoClientOptions33.getLocalThreshold();
        javax.net.SocketFactory socketFactory47 = mongoClientOptions33.getSocketFactory();
        com.mongodb.WriteConcern writeConcern48 = mongoClientOptions33.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder49 = builder14.writeConcern(writeConcern48);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory35);
        org.junit.Assert.assertNotNull(commandListenerList36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(codecRegistry38);
        org.junit.Assert.assertNotNull(mongoClient41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(commandListenerList44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10000 + "'", int45 == 10000);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 15 + "'", int46 == 15);
        org.junit.Assert.assertNotNull(socketFactory47);
        org.junit.Assert.assertNotNull(writeConcern48);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test2264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2264");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getSocketTimeout();
        int int17 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean18 = mongoClientOptions13.isSslEnabled();
        int int19 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int20 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.WriteConcern writeConcern21 = mongoClientOptions13.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(writeConcern21);
    }

    @Test
    public void test2265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2265");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionIdleTime();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean10 = mongoClientOptions7.isSocketKeepAlive();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions7.getDbDecoderFactory();
        int int12 = mongoClientOptions7.getMaxConnectionIdleTime();
        com.mongodb.WriteConcern writeConcern13 = mongoClientOptions7.getWriteConcern();
        int int14 = mongoClientOptions7.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        int int29 = mongoClientOptions28.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory30 = mongoClientOptions28.getSocketFactory();
        boolean boolean31 = mongoClientOptions28.isSslInvalidHostNameAllowed();
        java.lang.String str32 = mongoClientOptions28.getDescription();
        java.lang.String str33 = mongoClientOptions28.getRequiredReplicaSetName();
        java.lang.String str34 = mongoClientOptions28.getRequiredReplicaSetName();
        int int35 = mongoClientOptions28.getMinHeartbeatFrequency();
        int int36 = mongoClientOptions28.getServerSelectionTimeout();
        int int37 = mongoClientOptions28.getConnectionsPerHost();
        boolean boolean38 = mongoClientOptions28.isSslInvalidHostNameAllowed();
        com.mongodb.ReadConcern readConcern39 = mongoClientOptions28.getReadConcern();
        boolean boolean40 = mongoClientOptions7.equals((java.lang.Object) readConcern39);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(writeConcern13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(socketFactory30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 500 + "'", int35 == 500);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(readConcern39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2266");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.description("");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder30.build();
        int int32 = mongoClientOptions31.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory33 = mongoClientOptions31.getSocketFactory();
        com.mongodb.WriteConcern writeConcern34 = mongoClientOptions31.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder35 = builder13.writeConcern(writeConcern34);
        com.mongodb.MongoClientOptions.Builder builder36 = builder10.writeConcern(writeConcern34);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.minHeartbeatFrequency(30000);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.socketKeepAlive(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(socketFactory33);
        org.junit.Assert.assertNotNull(writeConcern34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test2267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2267");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions13.getReadPreference();
        int int19 = mongoClientOptions13.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test2268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2268");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        java.lang.String str4 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str5 = mongoProperties0.getHost();
        java.lang.String str6 = mongoProperties0.getDatabase();
        char[] charArray7 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "test" + "'", str4, "test");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(charArray7);
    }

    @Test
    public void test2269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2269");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        java.lang.String str5 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.build();
        int int18 = mongoClientOptions17.getConnectionsPerHost();
        int int19 = mongoClientOptions17.getHeartbeatConnectTimeout();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions17, environment20);
        java.lang.String str22 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "test" + "'", str22, "test");
    }

    @Test
    public void test2270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2270");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.description("");
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        boolean boolean27 = mongoClientOptions26.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory28 = mongoClientOptions26.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList29 = mongoClientOptions26.getCommandListeners();
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions26.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxWaitTime((int) (byte) 10);
        boolean boolean40 = mongoClientOptions26.equals((java.lang.Object) builder37);
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder47.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory49 = mongoClientOptions48.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern50 = mongoClientOptions48.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder51 = builder37.writeConcern(writeConcern50);
        com.mongodb.MongoClientOptions.Builder builder52 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder58 = builder54.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions65 = builder64.build();
        int int66 = mongoClientOptions65.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry67 = mongoClientOptions65.getCodecRegistry();
        int int68 = mongoClientOptions65.getSocketTimeout();
        java.lang.String str69 = mongoClientOptions65.getRequiredReplicaSetName();
        com.mongodb.ReadPreference readPreference70 = mongoClientOptions65.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory71 = mongoClientOptions65.getDbEncoderFactory();
        int int72 = mongoClientOptions65.getMinHeartbeatFrequency();
        int int73 = mongoClientOptions65.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern74 = mongoClientOptions65.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder75 = builder51.writeConcern(writeConcern74);
        com.mongodb.MongoClientOptions.Builder builder76 = builder12.writeConcern(writeConcern74);
        com.mongodb.MongoClientOptions.Builder builder78 = builder12.socketKeepAlive(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory28);
        org.junit.Assert.assertNotNull(commandListenerList29);
        org.junit.Assert.assertNotNull(readPreference30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertNotNull(dBEncoderFactory49);
        org.junit.Assert.assertNotNull(writeConcern50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(mongoClientOptions65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(codecRegistry67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(readPreference70);
        org.junit.Assert.assertNotNull(dBEncoderFactory71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 500 + "'", int72 == 500);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 120000 + "'", int73 == 120000);
        org.junit.Assert.assertNotNull(writeConcern74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test2271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2271");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getSocketTimeout();
        int int17 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean18 = mongoClientOptions13.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        boolean boolean20 = mongoClientOptions13.isSocketKeepAlive();
        org.bson.codecs.configuration.CodecRegistry codecRegistry21 = mongoClientOptions13.getCodecRegistry();
        int int22 = mongoClientOptions13.getServerSelectionTimeout();
        boolean boolean23 = mongoClientOptions13.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(codecRegistry21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test2272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2272");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str6 = mongoProperties5.getAuthenticationDatabase();
        mongoProperties5.setAuthenticationDatabase("hi!");
        java.lang.String str9 = mongoProperties5.getHost();
        java.lang.String str10 = mongoProperties5.getMongoClientDatabase();
        char[] charArray11 = mongoProperties5.getPassword();
        char[] charArray12 = mongoProperties5.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str14 = mongoProperties13.getGridFsDatabase();
        java.lang.String str15 = mongoProperties13.getGridFsDatabase();
        java.lang.String str16 = mongoProperties13.getUsername();
        java.lang.String str17 = mongoProperties13.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass18 = mongoProperties13.getFieldNamingStrategy();
        char[] charArray23 = new char[] { 'a', '#', '#', '4' };
        mongoProperties13.setPassword(charArray23);
        mongoProperties5.setPassword(charArray23);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties26 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str27 = mongoProperties26.getGridFsDatabase();
        java.lang.String str28 = mongoProperties26.getGridFsDatabase();
        mongoProperties26.setPort((java.lang.Integer) 0);
        java.lang.String str31 = mongoProperties26.getGridFsDatabase();
        mongoProperties26.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties33 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str34 = mongoProperties33.getAuthenticationDatabase();
        mongoProperties33.setAuthenticationDatabase("hi!");
        java.lang.String str37 = mongoProperties33.getHost();
        java.lang.String str38 = mongoProperties33.getMongoClientDatabase();
        char[] charArray39 = mongoProperties33.getPassword();
        char[] charArray40 = mongoProperties33.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties41 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str42 = mongoProperties41.getGridFsDatabase();
        java.lang.String str43 = mongoProperties41.getGridFsDatabase();
        java.lang.String str44 = mongoProperties41.getUsername();
        java.lang.String str45 = mongoProperties41.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass46 = mongoProperties41.getFieldNamingStrategy();
        char[] charArray51 = new char[] { 'a', '#', '#', '4' };
        mongoProperties41.setPassword(charArray51);
        mongoProperties33.setPassword(charArray51);
        mongoProperties26.setPassword(charArray51);
        mongoProperties5.setPassword(charArray51);
        mongoProperties0.setPassword(charArray51);
        java.lang.Class<?> wildcardClass57 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "test" + "'", str10, "test");
        org.junit.Assert.assertNull(charArray11);
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a, #, #, 4]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "test" + "'", str38, "test");
        org.junit.Assert.assertNull(charArray39);
        org.junit.Assert.assertNull(charArray40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[a, #, #, 4]");
        org.junit.Assert.assertNull(wildcardClass57);
    }

    @Test
    public void test2273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2273");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.serverSelectionTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.socketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.maxWaitTime(52);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder19 = builder11.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder32.build();
        com.mongodb.MongoClientOptions.Builder builder34 = com.mongodb.MongoClientOptions.builder(mongoClientOptions33);
        java.lang.String str35 = mongoClientOptions33.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry36 = mongoClientOptions33.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder37 = builder11.codecRegistry(codecRegistry36);
        com.mongodb.MongoClientOptions.Builder builder39 = builder11.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.serverSelectionTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions51 = builder50.build();
        int int52 = mongoClientOptions51.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory53 = mongoClientOptions51.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder54 = builder41.dbDecoderFactory(dBDecoderFactory53);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.minConnectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder57 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder63 = builder59.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions70 = builder69.build();
        int int71 = mongoClientOptions70.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory72 = mongoClientOptions70.getSocketFactory();
        int int73 = mongoClientOptions70.getMaxWaitTime();
        boolean boolean74 = mongoClientOptions70.isSocketKeepAlive();
        int int75 = mongoClientOptions70.getServerSelectionTimeout();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList76 = mongoClientOptions70.getCommandListeners();
        javax.net.SocketFactory socketFactory77 = mongoClientOptions70.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder78 = builder54.socketFactory(socketFactory77);
        com.mongodb.MongoClientOptions.Builder builder79 = builder2.socketFactory(socketFactory77);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoClientOptions51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(mongoClientOptions70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(socketFactory72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 120000 + "'", int73 == 120000);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(commandListenerList76);
        org.junit.Assert.assertNotNull(socketFactory77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test2274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2274");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getRequiredReplicaSetName();
        int int16 = mongoClientOptions13.getConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry17 = mongoClientOptions13.getCodecRegistry();
        int int18 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int19 = mongoClientOptions13.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(codecRegistry17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test2275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2275");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        java.lang.String str3 = mongoProperties0.getHost();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        char[] charArray11 = new char[] { 'a', '4', ' ', '#', 'a' };
        mongoProperties0.setPassword(charArray11);
        java.lang.String str13 = mongoProperties0.getDatabase();
        java.lang.String str14 = mongoProperties0.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass15 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.setUri("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a4 #a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a4 #a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, 4,  , #, a]");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(wildcardClass15);
    }

    @Test
    public void test2276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2276");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.connectTimeout(52);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) '4');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test2277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2277");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.minHeartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.sslInvalidHostNameAllowed(false);
        com.mongodb.event.CommandListener commandListener11 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder6.addCommandListener(commandListener11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test2278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2278");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions7.getDbEncoderFactory();
        com.mongodb.ReadConcern readConcern9 = mongoClientOptions7.getReadConcern();
        com.mongodb.DBDecoderFactory dBDecoderFactory10 = mongoClientOptions7.getDbDecoderFactory();
        boolean boolean11 = mongoClientOptions7.isSslInvalidHostNameAllowed();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNotNull(readConcern9);
        org.junit.Assert.assertNotNull(dBDecoderFactory10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
    }

    @Test
    public void test2279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2279");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((-1));
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionLifeTime(52);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder25 = builder17.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        com.mongodb.MongoClientOptions.Builder builder40 = com.mongodb.MongoClientOptions.builder(mongoClientOptions39);
        java.lang.String str41 = mongoClientOptions39.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry42 = mongoClientOptions39.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder43 = builder17.codecRegistry(codecRegistry42);
        com.mongodb.MongoClientOptions.Builder builder44 = builder14.codecRegistry(codecRegistry42);
        com.mongodb.MongoClientOptions.Builder builder46 = builder14.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder48 = builder14.description("test");
        com.mongodb.MongoClientOptions.Builder builder50 = builder14.maxConnectionIdleTime(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test2280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2280");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionIdleTime();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean10 = mongoClientOptions7.isSocketKeepAlive();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions7.getDbDecoderFactory();
        int int12 = mongoClientOptions7.getMaxConnectionIdleTime();
        com.mongodb.WriteConcern writeConcern13 = mongoClientOptions7.getWriteConcern();
        int int14 = mongoClientOptions7.getMinConnectionsPerHost();
        int int15 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int16 = mongoClientOptions7.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(writeConcern13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test2281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2281");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        org.bson.codecs.configuration.CodecRegistry codecRegistry10 = mongoClientOptions9.getCodecRegistry();
        int int11 = mongoClientOptions9.getMinHeartbeatFrequency();
        boolean boolean12 = mongoClientOptions9.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertNotNull(codecRegistry10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2282");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int17 = mongoClientOptions13.getLocalThreshold();
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str19 = mongoClientOptions13.getDescription();
        int int20 = mongoClientOptions13.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        java.lang.Class<?> wildcardClass22 = builder21.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 15 + "'", int17 == 15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test2283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2283");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        boolean boolean25 = mongoClientOptions24.isSocketKeepAlive();
        int int26 = mongoClientOptions24.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions24.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder10.dbEncoderFactory(dBEncoderFactory27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder10.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxConnectionIdleTime(52);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test2284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2284");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        int int10 = mongoClientOptions9.getConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions9.getDbDecoderFactory();
        int int12 = mongoClientOptions9.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test2285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2285");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions13.getWriteConcern();
        com.mongodb.ReadConcern readConcern17 = mongoClientOptions13.getReadConcern();
        boolean boolean18 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        int int19 = mongoClientOptions13.getHeartbeatSocketTimeout();
        int int20 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertNotNull(readConcern17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test2286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2286");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions7.isSslInvalidHostNameAllowed();
        boolean boolean10 = mongoClientOptions7.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2287");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        mongoProperties0.clearPassword();
        java.lang.String str4 = mongoProperties0.getDatabase();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.clearPassword();
        char[] charArray7 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(charArray7);
    }

    @Test
    public void test2288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2288");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.serverSelectionTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.threadsAllowedToBlockForConnectionMultiplier((int) 'a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test2289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2289");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        int int16 = mongoClientOptions13.getMinHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions13.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions13.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 500 + "'", int16 == 500);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
    }

    @Test
    public void test2290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2290");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int17 = mongoClientOptions13.getLocalThreshold();
        int int18 = mongoClientOptions13.getSocketTimeout();
        int int19 = mongoClientOptions13.getMaxConnectionLifeTime();
        int int20 = mongoClientOptions13.getServerSelectionTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 15 + "'", int17 == 15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test2291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2291");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry25 = mongoClientOptions23.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder26 = builder9.codecRegistry(codecRegistry25);
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.heartbeatConnectTimeout((int) 'a');
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties32 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str33 = mongoProperties32.getGridFsDatabase();
        java.lang.String str34 = mongoProperties32.getGridFsDatabase();
        java.lang.String str35 = mongoProperties32.getUsername();
        mongoProperties32.setHost("hi!");
        mongoProperties32.setGridFsDatabase("hi!");
        mongoProperties32.setGridFsDatabase("test");
        java.lang.String str42 = mongoProperties32.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder47 = builder43.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder49 = builder43.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions mongoClientOptions52 = builder51.build();
        org.springframework.core.env.Environment environment53 = null;
        com.mongodb.MongoClient mongoClient54 = mongoProperties32.createMongoClient(mongoClientOptions52, environment53);
        boolean boolean55 = mongoClientOptions52.isSslEnabled();
        com.mongodb.ReadConcern readConcern56 = mongoClientOptions52.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder57 = builder31.readConcern(readConcern56);
        com.mongodb.MongoClientOptions.Builder builder58 = builder26.readConcern(readConcern56);
        com.mongodb.MongoClientOptions.Builder builder59 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.heartbeatConnectTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.heartbeatSocketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions mongoClientOptions70 = builder67.build();
        int int71 = mongoClientOptions70.getConnectionsPerHost();
        int int72 = mongoClientOptions70.getHeartbeatConnectTimeout();
        int int73 = mongoClientOptions70.getSocketTimeout();
        boolean boolean74 = mongoClientOptions70.isSslInvalidHostNameAllowed();
        int int75 = mongoClientOptions70.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory76 = mongoClientOptions70.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder77 = builder58.dbDecoderFactory(dBDecoderFactory76);
        com.mongodb.MongoClientOptions.Builder builder79 = builder77.heartbeatConnectTimeout((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(codecRegistry25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(mongoClientOptions52);
        org.junit.Assert.assertNotNull(mongoClient54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(readConcern56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(mongoClientOptions70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 100 + "'", int72 == 100);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test2292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2292");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.minHeartbeatFrequency(20000);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder49 = builder45.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions56 = builder55.build();
        boolean boolean57 = mongoClientOptions56.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory58 = mongoClientOptions56.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList59 = mongoClientOptions56.getCommandListeners();
        com.mongodb.ReadPreference readPreference60 = mongoClientOptions56.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder61 = builder42.readPreference(readPreference60);
        com.mongodb.MongoClientOptions.Builder builder62 = builder31.readPreference(readPreference60);
        com.mongodb.MongoClientOptions.Builder builder63 = builder18.readPreference(readPreference60);
        com.mongodb.MongoClientOptions.Builder builder65 = builder18.maxConnectionLifeTime(52);
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder69 = builder65.maxConnectionLifeTime(20000);
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.maxConnectionIdleTime(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoClientOptions56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory58);
        org.junit.Assert.assertNotNull(commandListenerList59);
        org.junit.Assert.assertNotNull(readPreference60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test2293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2293");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        int int16 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean17 = mongoClientOptions13.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str19 = mongoProperties18.getGridFsDatabase();
        java.lang.String str20 = mongoProperties18.getGridFsDatabase();
        java.lang.String str21 = mongoProperties18.getUsername();
        mongoProperties18.setHost("hi!");
        mongoProperties18.setGridFsDatabase("hi!");
        boolean boolean26 = mongoClientOptions13.equals((java.lang.Object) mongoProperties18);
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions13.getReadPreference();
        boolean boolean28 = mongoClientOptions13.isSslEnabled();
        int int29 = mongoClientOptions13.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.cursorFinalizerEnabled(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test2294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2294");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.socketTimeout((int) (byte) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2295");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionIdleTime();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean10 = mongoClientOptions7.isSocketKeepAlive();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions7.getDbDecoderFactory();
        boolean boolean12 = mongoClientOptions7.isCursorFinalizerEnabled();
        java.lang.String str13 = mongoClientOptions7.getDescription();
        int int14 = mongoClientOptions7.getMaxWaitTime();
        int int15 = mongoClientOptions7.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "test" + "'", str13, "test");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 120000 + "'", int15 == 120000);
    }

    @Test
    public void test2296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2296");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionIdleTime();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean10 = mongoClientOptions7.isAlwaysUseMBeans();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int12 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int13 = mongoClientOptions7.getHeartbeatConnectTimeout();
        int int14 = mongoClientOptions7.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
    }

    @Test
    public void test2297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2297");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        int int16 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean17 = mongoClientOptions13.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str19 = mongoProperties18.getGridFsDatabase();
        java.lang.String str20 = mongoProperties18.getGridFsDatabase();
        java.lang.String str21 = mongoProperties18.getUsername();
        mongoProperties18.setHost("hi!");
        mongoProperties18.setGridFsDatabase("hi!");
        boolean boolean26 = mongoClientOptions13.equals((java.lang.Object) mongoProperties18);
        java.lang.String str27 = mongoClientOptions13.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
    }

    @Test
    public void test2298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2298");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        java.lang.String str16 = mongoClientOptions13.getDescription();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        boolean boolean18 = mongoClientOptions13.isSocketKeepAlive();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        int int20 = mongoClientOptions13.getSocketTimeout();
        int int21 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.ReadConcern readConcern22 = mongoClientOptions13.getReadConcern();
        boolean boolean23 = mongoClientOptions13.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(readConcern22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test2299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2299");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        int int10 = mongoClientOptions9.getMaxConnectionLifeTime();
        int int11 = mongoClientOptions9.getSocketTimeout();
        boolean boolean12 = mongoClientOptions9.isSslInvalidHostNameAllowed();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions9.getDbEncoderFactory();
        javax.net.SocketFactory socketFactory14 = mongoClientOptions9.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertNotNull(socketFactory14);
    }

    @Test
    public void test2300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2300");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.threadsAllowedToBlockForConnectionMultiplier((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((-1));
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatSocketTimeout(20000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2301");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder36.build();
        com.mongodb.MongoClientOptions.Builder builder38 = com.mongodb.MongoClientOptions.builder(mongoClientOptions37);
        java.lang.String str39 = mongoClientOptions37.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry40 = mongoClientOptions37.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder41 = builder19.codecRegistry(codecRegistry40);
        com.mongodb.MongoClientOptions.Builder builder42 = builder10.codecRegistry(codecRegistry40);
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder49 = builder45.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions56 = builder55.build();
        int int57 = mongoClientOptions56.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory58 = mongoClientOptions56.getSocketFactory();
        boolean boolean59 = mongoClientOptions56.isSslInvalidHostNameAllowed();
        java.lang.String str60 = mongoClientOptions56.getDescription();
        java.lang.String str61 = mongoClientOptions56.getRequiredReplicaSetName();
        int int62 = mongoClientOptions56.getHeartbeatConnectTimeout();
        int int63 = mongoClientOptions56.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory64 = mongoClientOptions56.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder65 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder71 = builder67.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder77 = builder75.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions78 = builder77.build();
        com.mongodb.MongoClientOptions.Builder builder79 = com.mongodb.MongoClientOptions.builder(mongoClientOptions78);
        java.lang.String str80 = mongoClientOptions78.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry81 = mongoClientOptions78.getCodecRegistry();
        boolean boolean82 = mongoClientOptions78.isAlwaysUseMBeans();
        int int83 = mongoClientOptions78.getMinConnectionsPerHost();
        com.mongodb.DBDecoderFactory dBDecoderFactory84 = mongoClientOptions78.getDbDecoderFactory();
        boolean boolean85 = mongoClientOptions56.equals((java.lang.Object) dBDecoderFactory84);
        com.mongodb.MongoClientOptions.Builder builder86 = builder10.dbDecoderFactory(dBDecoderFactory84);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoClientOptions56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(socketFactory58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 20000 + "'", int62 == 20000);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 120000 + "'", int63 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(mongoClientOptions78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test2302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2302");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions13.getWriteConcern();
        com.mongodb.ReadConcern readConcern17 = mongoClientOptions13.getReadConcern();
        boolean boolean18 = mongoClientOptions13.isCursorFinalizerEnabled();
        int int19 = mongoClientOptions13.getLocalThreshold();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions13.getDbEncoderFactory();
        com.mongodb.ReadConcern readConcern21 = mongoClientOptions13.getReadConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertNotNull(readConcern17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 15 + "'", int19 == 15);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertNotNull(readConcern21);
    }

    @Test
    public void test2303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2303");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions13.getCommandListeners();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions13.getReadPreference();
        int int18 = mongoClientOptions13.getMaxConnectionLifeTime();
        int int19 = mongoClientOptions13.getLocalThreshold();
        boolean boolean20 = mongoClientOptions13.isSocketKeepAlive();
        int int21 = mongoClientOptions13.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 15 + "'", int19 == 15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 15 + "'", int21 == 15);
    }

    @Test
    public void test2304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2304");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.ReadConcern readConcern16 = mongoClientOptions13.getReadConcern();
        boolean boolean18 = mongoClientOptions13.equals((java.lang.Object) 10);
        int int19 = mongoClientOptions13.getHeartbeatFrequency();
        java.lang.String str20 = mongoClientOptions13.getRequiredReplicaSetName();
        int int21 = mongoClientOptions13.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(readConcern16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 120000 + "'", int21 == 120000);
    }

    @Test
    public void test2305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2305");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold(100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.localThreshold(30000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test2306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2306");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions24.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern26 = mongoClientOptions24.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder27 = builder16.writeConcern(writeConcern26);
        com.mongodb.MongoClientOptions.Builder builder29 = builder16.heartbeatFrequency(32);
        com.mongodb.MongoClientOptions.Builder builder31 = builder16.heartbeatConnectTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder33 = builder16.threadsAllowedToBlockForConnectionMultiplier(10000);
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.connectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder49 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder55 = builder51.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions62 = builder61.build();
        boolean boolean63 = mongoClientOptions62.isSocketKeepAlive();
        int int64 = mongoClientOptions62.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory65 = mongoClientOptions62.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder66 = builder48.dbEncoderFactory(dBEncoderFactory65);
        com.mongodb.MongoClientOptions.Builder builder67 = builder16.dbEncoderFactory(dBEncoderFactory65);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.localThreshold(97);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertNotNull(writeConcern26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(mongoClientOptions62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 120000 + "'", int64 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test2307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2307");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.setGridFsDatabase("");
        java.lang.Integer int6 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int6);
    }

    @Test
    public void test2308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2308");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions13.getWriteConcern();
        com.mongodb.ReadConcern readConcern17 = mongoClientOptions13.getReadConcern();
        boolean boolean18 = mongoClientOptions13.isCursorFinalizerEnabled();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList19 = mongoClientOptions13.getCommandListeners();
        int int20 = mongoClientOptions13.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertNotNull(readConcern17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(commandListenerList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test2309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2309");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        mongoProperties0.clearPassword();
        java.lang.String str4 = mongoProperties0.getDatabase();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        java.lang.String str7 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
    }

    @Test
    public void test2310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2310");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionLifeTime(1);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        int int25 = mongoClientOptions24.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions24.getSocketFactory();
        com.mongodb.WriteConcern writeConcern27 = mongoClientOptions24.getWriteConcern();
        int int28 = mongoClientOptions24.getServerSelectionTimeout();
        int int29 = mongoClientOptions24.getLocalThreshold();
        com.mongodb.DBDecoderFactory dBDecoderFactory30 = mongoClientOptions24.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder31 = builder10.dbDecoderFactory(dBDecoderFactory30);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertNotNull(writeConcern27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 15 + "'", int29 == 15);
        org.junit.Assert.assertNotNull(dBDecoderFactory30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test2311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2311");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str7 = mongoProperties0.getUri();
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "test" + "'", str8, "test");
    }

    @Test
    public void test2312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2312");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass5 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardClass5);
    }

    @Test
    public void test2313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2313");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getSocketTimeout();
        int int16 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.ReadConcern readConcern17 = mongoClientOptions13.getReadConcern();
        int int18 = mongoClientOptions13.getHeartbeatSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions13.getDbEncoderFactory();
        boolean boolean20 = mongoClientOptions13.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(readConcern17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test2314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2314");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        boolean boolean11 = mongoClientOptions7.isSslInvalidHostNameAllowed();
        boolean boolean12 = mongoClientOptions7.isSocketKeepAlive();
        int int13 = mongoClientOptions7.getServerSelectionTimeout();
        java.lang.String str14 = mongoClientOptions7.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 30000 + "'", int13 == 30000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "test" + "'", str14, "test");
    }

    @Test
    public void test2315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2315");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str4 = mongoProperties0.getHost();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        char[] charArray6 = mongoProperties0.getPassword();
        char[] charArray7 = mongoProperties0.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str9 = mongoProperties8.getGridFsDatabase();
        java.lang.String str10 = mongoProperties8.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        boolean boolean25 = mongoClientOptions24.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory26 = mongoClientOptions24.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList27 = mongoClientOptions24.getCommandListeners();
        int int28 = mongoClientOptions24.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry29 = mongoClientOptions24.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions24);
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties8.createMongoClient(mongoClientOptions24, environment31);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties33 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str34 = mongoProperties33.getGridFsDatabase();
        java.lang.String str35 = mongoProperties33.getGridFsDatabase();
        java.lang.String str36 = mongoProperties33.getUsername();
        java.lang.String str37 = mongoProperties33.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass38 = mongoProperties33.getFieldNamingStrategy();
        char[] charArray43 = new char[] { 'a', '#', '#', '4' };
        mongoProperties33.setPassword(charArray43);
        mongoProperties8.setPassword(charArray43);
        mongoProperties0.setPassword(charArray43);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory26);
        org.junit.Assert.assertNotNull(commandListenerList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(codecRegistry29);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[a, #, #, 4]");
    }

    @Test
    public void test2316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2316");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.minConnectionsPerHost((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test2317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2317");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getGridFsDatabase();
        java.lang.String str11 = mongoProperties0.getHost();
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str14 = mongoProperties0.getHost();
        java.lang.String str15 = mongoProperties0.getHost();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setPort((java.lang.Integer) 5);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test2318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2318");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions7.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern9 = mongoClientOptions7.getWriteConcern();
        boolean boolean10 = mongoClientOptions7.isSslInvalidHostNameAllowed();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList11 = mongoClientOptions7.getCommandListeners();
        int int12 = mongoClientOptions7.getHeartbeatFrequency();
        boolean boolean13 = mongoClientOptions7.isSslInvalidHostNameAllowed();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions7.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions7.getDbEncoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions7.getDbEncoderFactory();
        org.bson.codecs.configuration.CodecRegistry codecRegistry17 = mongoClientOptions7.getCodecRegistry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNotNull(writeConcern9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(commandListenerList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertNotNull(codecRegistry17);
    }

    @Test
    public void test2319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2319");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        int int15 = mongoClientOptions13.getMinConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions13.getDbEncoderFactory();
        java.lang.String str17 = mongoClientOptions13.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test2320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2320");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(20000);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(false);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2321");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.serverSelectionTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.socketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        boolean boolean23 = mongoClientOptions22.isSocketKeepAlive();
        int int24 = mongoClientOptions22.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions22.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder8.dbEncoderFactory(dBEncoderFactory25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.description("");
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions62 = builder61.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory63 = mongoClientOptions62.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern64 = mongoClientOptions62.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder65 = builder54.writeConcern(writeConcern64);
        com.mongodb.MongoClientOptions.Builder builder66 = builder37.writeConcern(writeConcern64);
        com.mongodb.MongoClientOptions.Builder builder67 = builder26.writeConcern(writeConcern64);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.cursorFinalizerEnabled(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 120000 + "'", int24 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(mongoClientOptions62);
        org.junit.Assert.assertNotNull(dBEncoderFactory63);
        org.junit.Assert.assertNotNull(writeConcern64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test2322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2322");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        int int16 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean17 = mongoClientOptions13.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str19 = mongoProperties18.getGridFsDatabase();
        java.lang.String str20 = mongoProperties18.getGridFsDatabase();
        java.lang.String str21 = mongoProperties18.getUsername();
        mongoProperties18.setHost("hi!");
        mongoProperties18.setGridFsDatabase("hi!");
        boolean boolean26 = mongoClientOptions13.equals((java.lang.Object) mongoProperties18);
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions13.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder40.build();
        int int42 = mongoClientOptions41.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory43 = mongoClientOptions41.getSocketFactory();
        boolean boolean44 = mongoClientOptions41.isSslInvalidHostNameAllowed();
        com.mongodb.ReadPreference readPreference45 = mongoClientOptions41.getReadPreference();
        boolean boolean46 = mongoClientOptions13.equals((java.lang.Object) readPreference45);
        int int47 = mongoClientOptions13.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(socketFactory43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(readPreference45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test2323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2323");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder(mongoClientOptions24);
        java.lang.String str26 = mongoClientOptions24.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry27 = mongoClientOptions24.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder28 = builder6.codecRegistry(codecRegistry27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder6.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("test");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder41.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory43 = mongoClientOptions42.getDbEncoderFactory();
        com.mongodb.ReadConcern readConcern44 = mongoClientOptions42.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder45 = builder32.readConcern(readConcern44);
        com.mongodb.MongoClientOptions.Builder builder47 = builder32.minHeartbeatFrequency(500);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.sslInvalidHostNameAllowed(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertNotNull(dBEncoderFactory43);
        org.junit.Assert.assertNotNull(readConcern44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test2324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2324");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        boolean boolean29 = mongoClientOptions28.isSocketKeepAlive();
        int int30 = mongoClientOptions28.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory31 = mongoClientOptions28.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder32 = builder14.dbEncoderFactory(dBEncoderFactory31);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 120000 + "'", int30 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test2325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2325");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.serverSelectionTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        com.mongodb.MongoClientOptions.Builder builder23 = com.mongodb.MongoClientOptions.builder(mongoClientOptions22);
        int int24 = mongoClientOptions22.getHeartbeatConnectTimeout();
        int int25 = mongoClientOptions22.getThreadsAllowedToBlockForConnectionMultiplier();
        int int26 = mongoClientOptions22.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean27 = mongoClientOptions22.isSslInvalidHostNameAllowed();
        com.mongodb.ReadConcern readConcern28 = mongoClientOptions22.getReadConcern();
        java.lang.String str29 = mongoClientOptions22.getDescription();
        boolean boolean30 = mongoClientOptions22.isAlwaysUseMBeans();
        int int31 = mongoClientOptions22.getThreadsAllowedToBlockForConnectionMultiplier();
        int int32 = mongoClientOptions22.getMaxWaitTime();
        int int33 = mongoClientOptions22.getMinConnectionsPerHost();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList34 = mongoClientOptions22.getCommandListeners();
        com.mongodb.WriteConcern writeConcern35 = mongoClientOptions22.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder36 = builder8.writeConcern(writeConcern35);
        com.mongodb.MongoClientOptions.Builder builder38 = builder8.serverSelectionTimeout(52);
        com.mongodb.MongoClientOptions.Builder builder40 = builder8.heartbeatConnectTimeout(15);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(readConcern28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 120000 + "'", int32 == 120000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(commandListenerList34);
        org.junit.Assert.assertNotNull(writeConcern35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test2326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2326");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions7.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern9 = mongoClientOptions7.getWriteConcern();
        boolean boolean10 = mongoClientOptions7.isSslInvalidHostNameAllowed();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList11 = mongoClientOptions7.getCommandListeners();
        int int12 = mongoClientOptions7.getMaxWaitTime();
        int int13 = mongoClientOptions7.getHeartbeatConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions7.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNotNull(writeConcern9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(commandListenerList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
    }

    @Test
    public void test2327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2327");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions7.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern9 = mongoClientOptions7.getWriteConcern();
        boolean boolean10 = mongoClientOptions7.isSslInvalidHostNameAllowed();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList11 = mongoClientOptions7.getCommandListeners();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList12 = mongoClientOptions7.getCommandListeners();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNotNull(writeConcern9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(commandListenerList11);
        org.junit.Assert.assertNotNull(commandListenerList12);
    }

    @Test
    public void test2328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2328");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.threadsAllowedToBlockForConnectionMultiplier(10000);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder29.build();
        com.mongodb.MongoClientOptions.Builder builder31 = com.mongodb.MongoClientOptions.builder(mongoClientOptions30);
        int int32 = mongoClientOptions30.getHeartbeatConnectTimeout();
        int int33 = mongoClientOptions30.getThreadsAllowedToBlockForConnectionMultiplier();
        int int34 = mongoClientOptions30.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern35 = mongoClientOptions30.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder36 = builder16.writeConcern(writeConcern35);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.localThreshold(100);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.maxWaitTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.localThreshold(500);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.maxConnectionLifeTime((int) (short) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20000 + "'", int32 == 20000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNotNull(writeConcern35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test2329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2329");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.minHeartbeatFrequency(10000);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        com.mongodb.MongoClientOptions.Builder builder27 = com.mongodb.MongoClientOptions.builder(mongoClientOptions26);
        java.lang.String str28 = mongoClientOptions26.getRequiredReplicaSetName();
        int int29 = mongoClientOptions26.getConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory30 = mongoClientOptions26.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder31 = builder12.dbEncoderFactory(dBEncoderFactory30);
        com.mongodb.MongoClientOptions.Builder builder33 = builder12.heartbeatSocketTimeout((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10000 + "'", int29 == 10000);
        org.junit.Assert.assertNotNull(dBEncoderFactory30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test2330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2330");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.clearPassword();
        mongoProperties0.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions12.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern14 = mongoClientOptions12.getWriteConcern();
        boolean boolean15 = mongoClientOptions12.isSslInvalidHostNameAllowed();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions12.getCommandListeners();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions12, environment17);
        java.lang.String str19 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertNotNull(writeConcern14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "test" + "'", str19, "test");
    }

    @Test
    public void test2331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2331");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder9 = builder7.dbEncoderFactory(dBEncoderFactory8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test2332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2332");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getConnectTimeout();
        int int10 = mongoClientOptions7.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder(mongoClientOptions7);
        int int12 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean13 = mongoClientOptions7.isSslInvalidHostNameAllowed();
        boolean boolean14 = mongoClientOptions7.isSslEnabled();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions7.getReadPreference();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions7.getReadPreference();
        boolean boolean17 = mongoClientOptions7.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2333");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getMinConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry18 = mongoClientOptions13.getCodecRegistry();
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions13.getDbDecoderFactory();
        int int20 = mongoClientOptions13.getMaxWaitTime();
        com.mongodb.WriteConcern writeConcern21 = mongoClientOptions13.getWriteConcern();
        int int22 = mongoClientOptions13.getMinHeartbeatFrequency();
        int int23 = mongoClientOptions13.getServerSelectionTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(codecRegistry18);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 120000 + "'", int20 == 120000);
        org.junit.Assert.assertNotNull(writeConcern21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 500 + "'", int22 == 500);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test2334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2334");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder(mongoClientOptions24);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder40.build();
        com.mongodb.MongoClientOptions.Builder builder42 = com.mongodb.MongoClientOptions.builder(mongoClientOptions41);
        java.lang.String str43 = mongoClientOptions41.getDescription();
        int int44 = mongoClientOptions41.getMinConnectionsPerHost();
        com.mongodb.ReadConcern readConcern45 = mongoClientOptions41.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder46 = builder27.readConcern(readConcern45);
        com.mongodb.MongoClientOptions.Builder builder47 = builder8.readConcern(readConcern45);
        com.mongodb.MongoClientOptions.Builder builder49 = builder8.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.localThreshold(52);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(readConcern45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test2335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2335");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setGridFsDatabase("hi!");
        char[] charArray9 = new char[] { '#' };
        mongoProperties0.setPassword(charArray9);
        mongoProperties0.clearPassword();
        mongoProperties0.setHost("hi!");
        char[] charArray14 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[\000]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[\000]");
    }

    @Test
    public void test2336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2336");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatFrequency(32);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        boolean boolean29 = mongoClientOptions28.isSocketKeepAlive();
        int int30 = mongoClientOptions28.getThreadsAllowedToBlockForConnectionMultiplier();
        int int31 = mongoClientOptions28.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry32 = mongoClientOptions28.getCodecRegistry();
        java.lang.String str33 = mongoClientOptions28.getRequiredReplicaSetName();
        javax.net.SocketFactory socketFactory34 = mongoClientOptions28.getSocketFactory();
        com.mongodb.ReadPreference readPreference35 = mongoClientOptions28.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder36 = builder20.readPreference(readPreference35);
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder49.build();
        com.mongodb.MongoClientOptions.Builder builder51 = com.mongodb.MongoClientOptions.builder(mongoClientOptions50);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatConnectTimeout(120000);
        com.mongodb.MongoClientOptions.Builder builder56 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder62 = builder58.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions69 = builder68.build();
        int int70 = mongoClientOptions69.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory71 = mongoClientOptions69.getSocketFactory();
        int int72 = mongoClientOptions69.getMaxWaitTime();
        boolean boolean73 = mongoClientOptions69.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties74 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str75 = mongoProperties74.getGridFsDatabase();
        java.lang.String str76 = mongoProperties74.getGridFsDatabase();
        java.lang.String str77 = mongoProperties74.getUsername();
        mongoProperties74.setHost("hi!");
        mongoProperties74.setGridFsDatabase("hi!");
        boolean boolean82 = mongoClientOptions69.equals((java.lang.Object) mongoProperties74);
        com.mongodb.ReadPreference readPreference83 = mongoClientOptions69.getReadPreference();
        boolean boolean84 = mongoClientOptions69.isSslEnabled();
        javax.net.SocketFactory socketFactory85 = mongoClientOptions69.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder86 = builder55.socketFactory(socketFactory85);
        com.mongodb.MongoClientOptions.Builder builder87 = builder36.socketFactory(socketFactory85);
        com.mongodb.MongoClientOptions.Builder builder88 = builder8.socketFactory(socketFactory85);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder90 = builder88.heartbeatFrequency((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: heartbeatFrequency must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(codecRegistry32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(socketFactory34);
        org.junit.Assert.assertNotNull(readPreference35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(mongoClientOptions69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(socketFactory71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 120000 + "'", int72 == 120000);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(readPreference83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(socketFactory85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test2337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2337");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        java.lang.String str16 = mongoClientOptions13.getDescription();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        java.lang.String str18 = mongoClientOptions13.getRequiredReplicaSetName();
        int int19 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        boolean boolean21 = mongoClientOptions13.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test2338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2338");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getServerSelectionTimeout();
        int int16 = mongoClientOptions13.getMaxConnectionIdleTime();
        int int17 = mongoClientOptions13.getServerSelectionTimeout();
        int int18 = mongoClientOptions13.getHeartbeatFrequency();
        int int19 = mongoClientOptions13.getServerSelectionTimeout();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList20 = mongoClientOptions13.getCommandListeners();
        java.lang.String str21 = mongoClientOptions13.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(commandListenerList20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test2339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2339");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions16.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder19 = builder8.dbDecoderFactory(dBDecoderFactory18);
        com.mongodb.MongoClientOptions.Builder builder20 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.build();
        com.mongodb.event.CommandListener commandListener24 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder25 = builder20.addCommandListener(commandListener24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
    }

    @Test
    public void test2340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2340");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory28 = mongoClientOptions26.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder29 = builder18.dbDecoderFactory(dBDecoderFactory28);
        com.mongodb.MongoClientOptions.Builder builder31 = builder18.connectionsPerHost(32);
        com.mongodb.event.CommandListener commandListener32 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder33 = builder18.addCommandListener(commandListener32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test2341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2341");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getRequiredReplicaSetName();
        int int16 = mongoClientOptions13.getServerSelectionTimeout();
        com.mongodb.WriteConcern writeConcern17 = mongoClientOptions13.getWriteConcern();
        javax.net.SocketFactory socketFactory18 = mongoClientOptions13.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(writeConcern17);
        org.junit.Assert.assertNotNull(socketFactory18);
    }

    @Test
    public void test2342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2342");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.maxConnectionLifeTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.connectTimeout(52);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxWaitTime((int) (byte) -1);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder14.build();
        java.lang.String str20 = mongoClientOptions19.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test2343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2343");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions15.getCommandListeners();
        com.mongodb.DBEncoderFactory dBEncoderFactory17 = mongoClientOptions15.getDbEncoderFactory();
        boolean boolean18 = mongoClientOptions15.isSslEnabled();
        int int19 = mongoClientOptions15.getMaxConnectionLifeTime();
        boolean boolean20 = mongoClientOptions15.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertNotNull(dBEncoderFactory17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2344");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionIdleTime();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean10 = mongoClientOptions7.isAlwaysUseMBeans();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        com.mongodb.MongoClientOptions.Builder builder26 = com.mongodb.MongoClientOptions.builder(mongoClientOptions25);
        int int27 = mongoClientOptions25.getHeartbeatConnectTimeout();
        int int28 = mongoClientOptions25.getThreadsAllowedToBlockForConnectionMultiplier();
        int int29 = mongoClientOptions25.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean30 = mongoClientOptions25.isSslInvalidHostNameAllowed();
        com.mongodb.ReadConcern readConcern31 = mongoClientOptions25.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.minHeartbeatFrequency(20000);
        boolean boolean51 = mongoClientOptions25.equals((java.lang.Object) 20000);
        boolean boolean52 = mongoClientOptions7.equals((java.lang.Object) mongoClientOptions25);
        com.mongodb.MongoClientOptions.Builder builder53 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions25);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.maxConnectionLifeTime(10);
        com.mongodb.MongoClientOptions.Builder builder57 = builder53.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(readConcern31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test2345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2345");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions7.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern9 = mongoClientOptions7.getWriteConcern();
        boolean boolean10 = mongoClientOptions7.isSslInvalidHostNameAllowed();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList11 = mongoClientOptions7.getCommandListeners();
        boolean boolean12 = mongoClientOptions7.isAlwaysUseMBeans();
        int int13 = mongoClientOptions7.getMinHeartbeatFrequency();
        org.bson.codecs.configuration.CodecRegistry codecRegistry14 = mongoClientOptions7.getCodecRegistry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNotNull(writeConcern9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(commandListenerList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
        org.junit.Assert.assertNotNull(codecRegistry14);
    }

    @Test
    public void test2346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2346");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(false);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.build();
        int int16 = mongoClientOptions15.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test2347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2347");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList10 = mongoClientOptions7.getCommandListeners();
        boolean boolean11 = mongoClientOptions7.isAlwaysUseMBeans();
        int int12 = mongoClientOptions7.getConnectTimeout();
        int int13 = mongoClientOptions7.getHeartbeatSocketTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory14 = mongoClientOptions7.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertNotNull(commandListenerList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dBDecoderFactory14);
    }

    @Test
    public void test2348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2348");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getRequiredReplicaSetName();
        int int16 = mongoClientOptions13.getConnectTimeout();
        java.lang.String str17 = mongoClientOptions13.getRequiredReplicaSetName();
        int int18 = mongoClientOptions13.getServerSelectionTimeout();
        int int19 = mongoClientOptions13.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 500 + "'", int19 == 500);
    }

    @Test
    public void test2349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2349");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.minHeartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        com.mongodb.MongoClientOptions.Builder builder23 = com.mongodb.MongoClientOptions.builder(mongoClientOptions22);
        java.lang.String str24 = mongoClientOptions22.getRequiredReplicaSetName();
        int int25 = mongoClientOptions22.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions22);
        int int27 = mongoClientOptions22.getMaxWaitTime();
        int int28 = mongoClientOptions22.getConnectTimeout();
        javax.net.SocketFactory socketFactory29 = mongoClientOptions22.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder30 = builder6.socketFactory(socketFactory29);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.threadsAllowedToBlockForConnectionMultiplier(20000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 120000 + "'", int27 == 120000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertNotNull(socketFactory29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test2350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2350");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        java.lang.String str4 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str5 = mongoProperties0.getHost();
        java.lang.String str6 = mongoProperties0.getDatabase();
        mongoProperties0.setHost("hi!");
        java.lang.String str9 = mongoProperties0.getDatabase();
        mongoProperties0.setGridFsDatabase("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "test" + "'", str4, "test");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test2351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2351");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        java.lang.String str16 = mongoClientOptions13.getDescription();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        boolean boolean18 = mongoClientOptions13.isSocketKeepAlive();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        int int20 = mongoClientOptions13.getServerSelectionTimeout();
        boolean boolean21 = mongoClientOptions13.isSocketKeepAlive();
        int int22 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
    }

    @Test
    public void test2352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2352");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        java.lang.String str4 = mongoProperties0.getMongoClientDatabase();
        char[] charArray5 = mongoProperties0.getPassword();
        mongoProperties0.setUsername("hi!");
        mongoProperties0.setDatabase("");
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "test" + "'", str4, "test");
        org.junit.Assert.assertNull(charArray5);
    }

    @Test
    public void test2353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2353");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getRequiredReplicaSetName();
        int int16 = mongoClientOptions13.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        int int18 = mongoClientOptions13.getMaxWaitTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry19 = mongoClientOptions13.getCodecRegistry();
        int int20 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean21 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        com.mongodb.WriteConcern writeConcern22 = mongoClientOptions13.getWriteConcern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120000 + "'", int18 == 120000);
        org.junit.Assert.assertNotNull(codecRegistry19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(writeConcern22);
    }

    @Test
    public void test2354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2354");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str10 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions20, environment21);
        java.lang.String str23 = mongoProperties0.getHost();
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.setAuthenticationDatabase("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
    }

    @Test
    public void test2355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2355");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getSocketTimeout();
        int int17 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean18 = mongoClientOptions13.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        boolean boolean20 = mongoClientOptions13.isSocketKeepAlive();
        int int21 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean22 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList23 = mongoClientOptions13.getCommandListeners();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 120000 + "'", int21 == 120000);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(commandListenerList23);
    }

    @Test
    public void test2356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2356");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getUsername();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.serverSelectionTimeout(0);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        org.springframework.core.env.Environment environment19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties0.createMongoClient(mongoClientOptions18, environment19);
        mongoProperties0.setUsername("");
        java.lang.Integer int23 = mongoProperties0.getPort();
        char[] charArray24 = mongoProperties0.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties25 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str26 = mongoProperties25.getGridFsDatabase();
        java.lang.String str27 = mongoProperties25.getGridFsDatabase();
        java.lang.String str28 = mongoProperties25.getUsername();
        mongoProperties25.setHost("hi!");
        mongoProperties25.setGridFsDatabase("hi!");
        char[] charArray34 = new char[] { '#' };
        mongoProperties25.setPassword(charArray34);
        mongoProperties25.setHost("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties38 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str39 = mongoProperties38.getGridFsDatabase();
        java.lang.String str40 = mongoProperties38.getGridFsDatabase();
        mongoProperties38.setPort((java.lang.Integer) 0);
        java.lang.String str43 = mongoProperties38.getGridFsDatabase();
        mongoProperties38.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties45 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str46 = mongoProperties45.getGridFsDatabase();
        java.lang.String str47 = mongoProperties45.getGridFsDatabase();
        java.lang.String str48 = mongoProperties45.getUsername();
        java.lang.String str49 = mongoProperties45.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass50 = mongoProperties45.getFieldNamingStrategy();
        char[] charArray55 = new char[] { 'a', '#', '#', '4' };
        mongoProperties45.setPassword(charArray55);
        mongoProperties38.setPassword(charArray55);
        mongoProperties25.setPassword(charArray55);
        mongoProperties0.setPassword(charArray55);
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNull(charArray24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#]");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[a, #, #, 4]");
    }

    @Test
    public void test2357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2357");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(5);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.cursorFinalizerEnabled(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2358");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getRequiredReplicaSetName();
        int int16 = mongoClientOptions13.getConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry17 = mongoClientOptions13.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry18 = mongoClientOptions13.getCodecRegistry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(codecRegistry17);
        org.junit.Assert.assertNotNull(codecRegistry18);
    }

    @Test
    public void test2359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2359");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder43.build();
        com.mongodb.MongoClientOptions.Builder builder45 = com.mongodb.MongoClientOptions.builder(mongoClientOptions44);
        int int46 = mongoClientOptions44.getHeartbeatConnectTimeout();
        int int47 = mongoClientOptions44.getThreadsAllowedToBlockForConnectionMultiplier();
        int int48 = mongoClientOptions44.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean49 = mongoClientOptions44.isSslInvalidHostNameAllowed();
        com.mongodb.ReadConcern readConcern50 = mongoClientOptions44.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder51 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder61 = builder57.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder65 = builder61.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.minHeartbeatFrequency(20000);
        boolean boolean70 = mongoClientOptions44.equals((java.lang.Object) 20000);
        com.mongodb.MongoClientOptions.Builder builder71 = com.mongodb.MongoClientOptions.builder(mongoClientOptions44);
        int int72 = mongoClientOptions44.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.DBDecoderFactory dBDecoderFactory73 = mongoClientOptions44.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder74 = builder26.dbDecoderFactory(dBDecoderFactory73);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 20000 + "'", int46 == 20000);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(readConcern50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 5 + "'", int72 == 5);
        org.junit.Assert.assertNotNull(dBDecoderFactory73);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test2360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2360");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        int int15 = mongoClientOptions13.getMinConnectionsPerHost();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions13.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(readPreference16);
    }

    @Test
    public void test2361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2361");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getDatabase();
        java.lang.String str3 = mongoProperties0.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory19 = mongoClientOptions17.getSocketFactory();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions17, environment20);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions17);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.serverSelectionTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder31.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder39 = builder31.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder39.build();
        com.mongodb.WriteConcern writeConcern41 = mongoClientOptions40.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder42 = builder22.writeConcern(writeConcern41);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "test" + "'", str3, "test");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(socketFactory19);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertNotNull(writeConcern41);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test2362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2362");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        boolean boolean33 = mongoClientOptions32.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory34 = mongoClientOptions32.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder12.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder36 = builder9.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder38 = builder9.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder41 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder45 = builder41.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder47 = builder41.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder48 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder54 = builder50.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions61 = builder60.build();
        boolean boolean62 = mongoClientOptions61.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory63 = mongoClientOptions61.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder64 = builder41.dbEncoderFactory(dBEncoderFactory63);
        com.mongodb.MongoClientOptions.Builder builder65 = builder38.dbEncoderFactory(dBEncoderFactory63);
        com.mongodb.MongoClientOptions.Builder builder67 = builder38.sslInvalidHostNameAllowed(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(mongoClientOptions61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test2363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2363");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getRequiredReplicaSetName();
        int int16 = mongoClientOptions13.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        int int18 = mongoClientOptions13.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions13.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        boolean boolean35 = mongoClientOptions34.isSocketKeepAlive();
        int int36 = mongoClientOptions34.getMinConnectionsPerHost();
        javax.net.SocketFactory socketFactory37 = mongoClientOptions34.getSocketFactory();
        boolean boolean38 = mongoClientOptions13.equals((java.lang.Object) mongoClientOptions34);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120000 + "'", int18 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(socketFactory37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test2364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2364");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        char[] charArray4 = mongoProperties0.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties5.setHost("");
        java.lang.String str8 = mongoProperties5.getGridFsDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str10 = mongoProperties9.getAuthenticationDatabase();
        mongoProperties9.setAuthenticationDatabase("hi!");
        char[] charArray13 = mongoProperties9.getPassword();
        java.lang.String str14 = mongoProperties9.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str16 = mongoProperties15.getAuthenticationDatabase();
        mongoProperties15.setAuthenticationDatabase("hi!");
        java.lang.String str19 = mongoProperties15.getHost();
        java.lang.String str20 = mongoProperties15.getMongoClientDatabase();
        char[] charArray21 = mongoProperties15.getPassword();
        char[] charArray22 = mongoProperties15.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str24 = mongoProperties23.getGridFsDatabase();
        java.lang.String str25 = mongoProperties23.getGridFsDatabase();
        java.lang.String str26 = mongoProperties23.getUsername();
        java.lang.String str27 = mongoProperties23.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass28 = mongoProperties23.getFieldNamingStrategy();
        char[] charArray33 = new char[] { 'a', '#', '#', '4' };
        mongoProperties23.setPassword(charArray33);
        mongoProperties15.setPassword(charArray33);
        mongoProperties9.setPassword(charArray33);
        mongoProperties5.setPassword(charArray33);
        mongoProperties0.setPassword(charArray33);
        java.lang.String str39 = mongoProperties0.getUri();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        mongoProperties0.setPort((java.lang.Integer) 10);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(charArray4);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(charArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "test" + "'", str14, "test");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "test" + "'", str20, "test");
        org.junit.Assert.assertNull(charArray21);
        org.junit.Assert.assertNull(charArray22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[a, #, #, 4]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "mongodb://localhost/test" + "'", str39, "mongodb://localhost/test");
    }

    @Test
    public void test2365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2365");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        boolean boolean25 = mongoClientOptions24.isSocketKeepAlive();
        int int26 = mongoClientOptions24.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions24.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder4.dbEncoderFactory(dBEncoderFactory27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder4.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder43 = builder37.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions57 = builder56.build();
        boolean boolean58 = mongoClientOptions57.isSocketKeepAlive();
        int int59 = mongoClientOptions57.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory60 = mongoClientOptions57.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder61 = builder37.dbEncoderFactory(dBEncoderFactory60);
        com.mongodb.MongoClientOptions mongoClientOptions62 = builder37.build();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties63 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str64 = mongoProperties63.getGridFsDatabase();
        java.lang.String str65 = mongoProperties63.getGridFsDatabase();
        java.lang.String str66 = mongoProperties63.getUsername();
        java.lang.String str67 = mongoProperties63.getAuthenticationDatabase();
        java.lang.String str68 = mongoProperties63.getMongoClientDatabase();
        java.lang.String str69 = mongoProperties63.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions70 = null;
        org.springframework.core.env.Environment environment71 = null;
        com.mongodb.MongoClient mongoClient72 = mongoProperties63.createMongoClient(mongoClientOptions70, environment71);
        java.lang.String str73 = mongoProperties63.getGridFsDatabase();
        mongoProperties63.setDatabase("test");
        boolean boolean76 = mongoClientOptions62.equals((java.lang.Object) mongoProperties63);
        com.mongodb.DBDecoderFactory dBDecoderFactory77 = mongoClientOptions62.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder78 = builder32.dbDecoderFactory(dBDecoderFactory77);
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.sslEnabled(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mongoClientOptions57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 120000 + "'", int59 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(mongoClientOptions62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "test" + "'", str68, "test");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(mongoClient72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test2366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2366");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold(0);
        com.mongodb.event.CommandListener commandListener17 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder18 = builder16.addCommandListener(commandListener17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2367");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        boolean boolean25 = mongoClientOptions24.isSocketKeepAlive();
        int int26 = mongoClientOptions24.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions24.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder4.dbEncoderFactory(dBEncoderFactory27);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder4.build();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties30 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str31 = mongoProperties30.getGridFsDatabase();
        java.lang.String str32 = mongoProperties30.getGridFsDatabase();
        java.lang.String str33 = mongoProperties30.getUsername();
        java.lang.String str34 = mongoProperties30.getAuthenticationDatabase();
        java.lang.String str35 = mongoProperties30.getMongoClientDatabase();
        java.lang.String str36 = mongoProperties30.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties30.createMongoClient(mongoClientOptions37, environment38);
        java.lang.String str40 = mongoProperties30.getGridFsDatabase();
        mongoProperties30.setDatabase("test");
        boolean boolean43 = mongoClientOptions29.equals((java.lang.Object) mongoProperties30);
        boolean boolean44 = mongoClientOptions29.isAlwaysUseMBeans();
        int int45 = mongoClientOptions29.getServerSelectionTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "test" + "'", str35, "test");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 30000 + "'", int45 == 30000);
    }

    @Test
    public void test2368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2368");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionLifeTime((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2369");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions.Builder builder7 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxWaitTime(27017);
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory25 = mongoClientOptions23.getSocketFactory();
        boolean boolean26 = mongoClientOptions23.isSslInvalidHostNameAllowed();
        java.lang.String str27 = mongoClientOptions23.getDescription();
        java.lang.String str28 = mongoClientOptions23.getRequiredReplicaSetName();
        java.lang.String str29 = mongoClientOptions23.getRequiredReplicaSetName();
        int int30 = mongoClientOptions23.getMinHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference31 = mongoClientOptions23.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder32 = builder7.readPreference(readPreference31);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(socketFactory25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 500 + "'", int30 == 500);
        org.junit.Assert.assertNotNull(readPreference31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test2370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2370");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        java.lang.String str16 = mongoClientOptions13.getDescription();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        boolean boolean18 = mongoClientOptions13.isSocketKeepAlive();
        java.lang.String str19 = mongoClientOptions13.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern20 = mongoClientOptions13.getWriteConcern();
        javax.net.SocketFactory socketFactory21 = mongoClientOptions13.getSocketFactory();
        int int22 = mongoClientOptions13.getMinConnectionsPerHost();
        int int23 = mongoClientOptions13.getHeartbeatFrequency();
        boolean boolean24 = mongoClientOptions13.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(writeConcern20);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2371");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.connectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectTimeout((int) (short) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test2372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2372");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.serverSelectionTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.minConnectionsPerHost(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test2373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2373");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minConnectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test2374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2374");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean17 = mongoClientOptions13.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("test");
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.heartbeatSocketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder24 = builder18.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.socketKeepAlive(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test2375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2375");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        java.lang.String str15 = mongoClientOptions13.getRequiredReplicaSetName();
        boolean boolean16 = mongoClientOptions13.isSslEnabled();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions13.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder20 = builder18.minHeartbeatFrequency((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: minHeartbeatFrequency must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test2376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2376");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions13.getCommandListeners();
        int int17 = mongoClientOptions13.getMaxConnectionIdleTime();
        int int18 = mongoClientOptions13.getSocketTimeout();
        com.mongodb.ReadConcern readConcern19 = mongoClientOptions13.getReadConcern();
        int int20 = mongoClientOptions13.getMaxConnectionLifeTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry21 = mongoClientOptions13.getCodecRegistry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(readConcern19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(codecRegistry21);
    }

    @Test
    public void test2377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2377");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder36.build();
        com.mongodb.MongoClientOptions.Builder builder38 = com.mongodb.MongoClientOptions.builder(mongoClientOptions37);
        java.lang.String str39 = mongoClientOptions37.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry40 = mongoClientOptions37.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder41 = builder19.codecRegistry(codecRegistry40);
        com.mongodb.MongoClientOptions.Builder builder42 = builder10.codecRegistry(codecRegistry40);
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder49 = builder45.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions56 = builder55.build();
        int int57 = mongoClientOptions56.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry58 = mongoClientOptions56.getCodecRegistry();
        int int59 = mongoClientOptions56.getSocketTimeout();
        java.lang.String str60 = mongoClientOptions56.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory61 = mongoClientOptions56.getDbEncoderFactory();
        org.bson.codecs.configuration.CodecRegistry codecRegistry62 = mongoClientOptions56.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry63 = mongoClientOptions56.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder64 = builder42.codecRegistry(codecRegistry63);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder66 = builder42.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: threadsAllowedToBlockForConnectionMultiplier must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoClientOptions56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(codecRegistry58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(dBEncoderFactory61);
        org.junit.Assert.assertNotNull(codecRegistry62);
        org.junit.Assert.assertNotNull(codecRegistry63);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test2378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2378");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        boolean boolean25 = mongoClientOptions24.isSocketKeepAlive();
        int int26 = mongoClientOptions24.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions24.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder4.dbEncoderFactory(dBEncoderFactory27);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder4.build();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties30 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str31 = mongoProperties30.getGridFsDatabase();
        java.lang.String str32 = mongoProperties30.getGridFsDatabase();
        java.lang.String str33 = mongoProperties30.getUsername();
        java.lang.String str34 = mongoProperties30.getAuthenticationDatabase();
        java.lang.String str35 = mongoProperties30.getMongoClientDatabase();
        java.lang.String str36 = mongoProperties30.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties30.createMongoClient(mongoClientOptions37, environment38);
        java.lang.String str40 = mongoProperties30.getGridFsDatabase();
        mongoProperties30.setDatabase("test");
        boolean boolean43 = mongoClientOptions29.equals((java.lang.Object) mongoProperties30);
        com.mongodb.ReadPreference readPreference44 = mongoClientOptions29.getReadPreference();
        boolean boolean45 = mongoClientOptions29.isAlwaysUseMBeans();
        int int46 = mongoClientOptions29.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "test" + "'", str35, "test");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(readPreference44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10000 + "'", int46 == 10000);
    }

    @Test
    public void test2379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2379");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test2380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2380");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.connectionsPerHost((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.serverSelectionTimeout((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2381");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        char[] charArray4 = mongoProperties0.getPassword();
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder(mongoClientOptions20);
        int int22 = mongoClientOptions20.getHeartbeatConnectTimeout();
        int int23 = mongoClientOptions20.getThreadsAllowedToBlockForConnectionMultiplier();
        int int24 = mongoClientOptions20.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean25 = mongoClientOptions20.isSslInvalidHostNameAllowed();
        com.mongodb.ReadConcern readConcern26 = mongoClientOptions20.getReadConcern();
        java.lang.String str27 = mongoClientOptions20.getDescription();
        boolean boolean28 = mongoClientOptions20.isAlwaysUseMBeans();
        int int29 = mongoClientOptions20.getThreadsAllowedToBlockForConnectionMultiplier();
        int int30 = mongoClientOptions20.getMaxWaitTime();
        int int31 = mongoClientOptions20.getMinConnectionsPerHost();
        int int32 = mongoClientOptions20.getHeartbeatSocketTimeout();
        com.mongodb.WriteConcern writeConcern33 = mongoClientOptions20.getWriteConcern();
        int int34 = mongoClientOptions20.getMaxWaitTime();
        int int35 = mongoClientOptions20.getConnectionsPerHost();
        int int36 = mongoClientOptions20.getServerSelectionTimeout();
        org.springframework.core.env.Environment environment37 = null;
        com.mongodb.MongoClient mongoClient38 = mongoProperties0.createMongoClient(mongoClientOptions20, environment37);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(charArray4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(readConcern26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 120000 + "'", int30 == 120000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(writeConcern33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 120000 + "'", int34 == 120000);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(mongoClient38);
    }

    @Test
    public void test2382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2382");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder(mongoClientOptions24);
        java.lang.String str26 = mongoClientOptions24.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry27 = mongoClientOptions24.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder28 = builder6.codecRegistry(codecRegistry27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder30.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder33 = builder30.heartbeatConnectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder35 = builder30.minHeartbeatFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder37 = builder30.minConnectionsPerHost((int) '4');
        com.mongodb.event.CommandListener commandListener38 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder39 = builder37.addCommandListener(commandListener38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test2383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2383");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((-1));
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.description("");
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder45 = builder41.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions52 = builder51.build();
        int int53 = mongoClientOptions52.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory54 = mongoClientOptions52.getSocketFactory();
        com.mongodb.WriteConcern writeConcern55 = mongoClientOptions52.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder56 = builder34.writeConcern(writeConcern55);
        com.mongodb.MongoClientOptions.Builder builder57 = builder31.writeConcern(writeConcern55);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.description("");
        com.mongodb.MongoClientOptions.Builder builder62 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions69 = builder68.build();
        int int70 = mongoClientOptions69.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory71 = mongoClientOptions69.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder72 = builder59.dbDecoderFactory(dBDecoderFactory71);
        com.mongodb.MongoClientOptions.Builder builder73 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder77 = builder75.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder79 = builder77.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions80 = builder79.build();
        boolean boolean81 = mongoClientOptions80.isSocketKeepAlive();
        int int82 = mongoClientOptions80.getThreadsAllowedToBlockForConnectionMultiplier();
        int int83 = mongoClientOptions80.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry84 = mongoClientOptions80.getCodecRegistry();
        java.lang.String str85 = mongoClientOptions80.getRequiredReplicaSetName();
        javax.net.SocketFactory socketFactory86 = mongoClientOptions80.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder87 = builder72.socketFactory(socketFactory86);
        com.mongodb.MongoClientOptions.Builder builder88 = builder12.socketFactory(socketFactory86);
        com.mongodb.WriteConcern writeConcern89 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder90 = builder12.writeConcern(writeConcern89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: writeConcern can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(mongoClientOptions52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(socketFactory54);
        org.junit.Assert.assertNotNull(writeConcern55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(mongoClientOptions69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(mongoClientOptions80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 5 + "'", int82 == 5);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 100 + "'", int83 == 100);
        org.junit.Assert.assertNotNull(codecRegistry84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(socketFactory86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test2384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2384");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder15 = builder12.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder28.build();
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder(mongoClientOptions29);
        java.lang.String str31 = mongoClientOptions29.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry32 = mongoClientOptions29.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder33 = builder12.codecRegistry(codecRegistry32);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder12.build();
        int int35 = mongoClientOptions34.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test2385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2385");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory10 = mongoClientOptions9.getDbDecoderFactory();
        int int11 = mongoClientOptions9.getServerSelectionTimeout();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions9.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertNotNull(dBDecoderFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 30000 + "'", int11 == 30000);
        org.junit.Assert.assertNotNull(readPreference12);
    }

    @Test
    public void test2386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2386");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder36.build();
        boolean boolean38 = mongoClientOptions37.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory39 = mongoClientOptions37.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList40 = mongoClientOptions37.getCommandListeners();
        com.mongodb.ReadPreference readPreference41 = mongoClientOptions37.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder42 = builder23.readPreference(readPreference41);
        com.mongodb.MongoClientOptions.Builder builder43 = builder12.readPreference(readPreference41);
        com.mongodb.MongoClientOptions.Builder builder45 = builder12.heartbeatConnectTimeout((int) (byte) -1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory39);
        org.junit.Assert.assertNotNull(commandListenerList40);
        org.junit.Assert.assertNotNull(readPreference41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test2387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2387");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder36.build();
        boolean boolean38 = mongoClientOptions37.isSocketKeepAlive();
        int int39 = mongoClientOptions37.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory40 = mongoClientOptions37.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder41 = builder17.dbEncoderFactory(dBEncoderFactory40);
        com.mongodb.MongoClientOptions.Builder builder43 = builder17.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder46 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions53 = builder52.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory54 = mongoClientOptions53.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern55 = mongoClientOptions53.getWriteConcern();
        boolean boolean56 = mongoClientOptions53.isSslInvalidHostNameAllowed();
        com.mongodb.ReadConcern readConcern57 = mongoClientOptions53.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder58 = builder43.readConcern(readConcern57);
        com.mongodb.MongoClientOptions.Builder builder59 = builder12.readConcern(readConcern57);
        com.mongodb.MongoClientOptions.Builder builder61 = builder12.sslInvalidHostNameAllowed(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 120000 + "'", int39 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(mongoClientOptions53);
        org.junit.Assert.assertNotNull(dBEncoderFactory54);
        org.junit.Assert.assertNotNull(writeConcern55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(readConcern57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test2388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2388");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        com.mongodb.MongoClientOptions.Builder builder27 = com.mongodb.MongoClientOptions.builder(mongoClientOptions26);
        java.lang.String str28 = mongoClientOptions26.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry29 = mongoClientOptions26.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder30 = builder8.codecRegistry(codecRegistry29);
        com.mongodb.MongoClientOptions.Builder builder32 = builder8.connectTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder41 = builder35.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder43 = builder35.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions57 = builder56.build();
        com.mongodb.MongoClientOptions.Builder builder58 = com.mongodb.MongoClientOptions.builder(mongoClientOptions57);
        java.lang.String str59 = mongoClientOptions57.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry60 = mongoClientOptions57.getCodecRegistry();
        com.mongodb.ReadPreference readPreference61 = mongoClientOptions57.getReadPreference();
        int int62 = mongoClientOptions57.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern63 = mongoClientOptions57.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder64 = builder35.writeConcern(writeConcern63);
        com.mongodb.MongoClientOptions.Builder builder65 = builder32.writeConcern(writeConcern63);
        com.mongodb.MongoClientOptions.Builder builder67 = builder32.maxConnectionLifeTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.sslEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mongoClientOptions57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry60);
        org.junit.Assert.assertNotNull(readPreference61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(writeConcern63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test2389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2389");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getMinConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry18 = mongoClientOptions13.getCodecRegistry();
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions13.getDbDecoderFactory();
        int int20 = mongoClientOptions13.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(codecRegistry18);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test2390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2390");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        java.lang.String str15 = mongoClientOptions13.getRequiredReplicaSetName();
        java.lang.String str16 = mongoClientOptions13.getRequiredReplicaSetName();
        int int17 = mongoClientOptions13.getHeartbeatFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions13.getDbEncoderFactory();
        int int19 = mongoClientOptions13.getMaxConnectionIdleTime();
        int int20 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern21 = mongoClientOptions13.getWriteConcern();
        boolean boolean22 = mongoClientOptions13.isSslEnabled();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(writeConcern21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2391");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int10 = mongoClientOptions7.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry11 = mongoClientOptions7.getCodecRegistry();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        int int13 = mongoClientOptions7.getHeartbeatFrequency();
        int int14 = mongoClientOptions7.getLocalThreshold();
        int int15 = mongoClientOptions7.getMaxConnectionIdleTime();
        java.lang.String str16 = mongoClientOptions7.getRequiredReplicaSetName();
        int int17 = mongoClientOptions7.getConnectionsPerHost();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList18 = mongoClientOptions7.getCommandListeners();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(codecRegistry11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertNotNull(commandListenerList18);
    }

    @Test
    public void test2392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2392");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder(mongoClientOptions24);
        java.lang.String str26 = mongoClientOptions24.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry27 = mongoClientOptions24.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder28 = builder6.codecRegistry(codecRegistry27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder6.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("test");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.sslEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder36.build();
        boolean boolean38 = mongoClientOptions37.isSslInvalidHostNameAllowed();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2393");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.threadsAllowedToBlockForConnectionMultiplier((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatFrequency(27017);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2394");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionIdleTime();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean10 = mongoClientOptions7.isSocketKeepAlive();
        java.lang.String str11 = mongoClientOptions7.getRequiredReplicaSetName();
        java.lang.String str12 = mongoClientOptions7.getDescription();
        int int13 = mongoClientOptions7.getMinConnectionsPerHost();
        int int14 = mongoClientOptions7.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "test" + "'", str12, "test");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test2395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2395");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.minHeartbeatFrequency(100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2396");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        int int8 = mongoClientOptions7.getMaxConnectionIdleTime();
        boolean boolean9 = mongoClientOptions7.isSocketKeepAlive();
        boolean boolean10 = mongoClientOptions7.isAlwaysUseMBeans();
        int int11 = mongoClientOptions7.getMaxConnectionLifeTime();
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        com.mongodb.MongoClientOptions.Builder builder26 = com.mongodb.MongoClientOptions.builder(mongoClientOptions25);
        int int27 = mongoClientOptions25.getHeartbeatConnectTimeout();
        int int28 = mongoClientOptions25.getThreadsAllowedToBlockForConnectionMultiplier();
        int int29 = mongoClientOptions25.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean30 = mongoClientOptions25.isSslInvalidHostNameAllowed();
        com.mongodb.ReadConcern readConcern31 = mongoClientOptions25.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.minHeartbeatFrequency(20000);
        boolean boolean51 = mongoClientOptions25.equals((java.lang.Object) 20000);
        boolean boolean52 = mongoClientOptions7.equals((java.lang.Object) mongoClientOptions25);
        com.mongodb.MongoClientOptions.Builder builder53 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions25);
        com.mongodb.MongoClientOptions.Builder builder54 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder60 = builder56.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions67 = builder66.build();
        com.mongodb.MongoClientOptions.Builder builder68 = com.mongodb.MongoClientOptions.builder(mongoClientOptions67);
        java.lang.String str69 = mongoClientOptions67.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry70 = mongoClientOptions67.getCodecRegistry();
        javax.net.SocketFactory socketFactory71 = mongoClientOptions67.getSocketFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList72 = mongoClientOptions67.getCommandListeners();
        int int73 = mongoClientOptions67.getLocalThreshold();
        org.bson.codecs.configuration.CodecRegistry codecRegistry74 = mongoClientOptions67.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder75 = builder53.codecRegistry(codecRegistry74);
        com.mongodb.MongoClientOptions.Builder builder77 = builder75.threadsAllowedToBlockForConnectionMultiplier((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder79 = builder75.socketTimeout(97);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(readConcern31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(mongoClientOptions67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry70);
        org.junit.Assert.assertNotNull(socketFactory71);
        org.junit.Assert.assertNotNull(commandListenerList72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 15 + "'", int73 == 15);
        org.junit.Assert.assertNotNull(codecRegistry74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test2397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2397");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions13.getCommandListeners();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions13.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxWaitTime((int) (byte) 10);
        boolean boolean27 = mongoClientOptions13.equals((java.lang.Object) builder24);
        int int28 = mongoClientOptions13.getMinConnectionsPerHost();
        com.mongodb.ReadPreference readPreference29 = mongoClientOptions13.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder30.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.localThreshold(100);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.serverSelectionTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.description("");
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.serverSelectionTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder46 = builder40.socketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder47 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder53 = builder49.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions60 = builder59.build();
        boolean boolean61 = mongoClientOptions60.isSocketKeepAlive();
        int int62 = mongoClientOptions60.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory63 = mongoClientOptions60.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder64 = builder46.dbEncoderFactory(dBEncoderFactory63);
        com.mongodb.MongoClientOptions.Builder builder65 = builder37.dbEncoderFactory(dBEncoderFactory63);
        boolean boolean66 = mongoClientOptions13.equals((java.lang.Object) builder37);
        org.bson.codecs.configuration.CodecRegistry codecRegistry67 = mongoClientOptions13.getCodecRegistry();
        java.lang.String str68 = mongoClientOptions13.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(readPreference29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(mongoClientOptions60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 120000 + "'", int62 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(codecRegistry67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
    }

    @Test
    public void test2398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2398");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder19 = builder13.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        boolean boolean23 = mongoClientOptions22.isAlwaysUseMBeans();
        int int24 = mongoClientOptions22.getSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry25 = mongoClientOptions22.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder26 = builder8.codecRegistry(codecRegistry25);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(codecRegistry25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test2399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2399");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getServerSelectionTimeout();
        boolean boolean16 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        com.mongodb.ReadConcern readConcern17 = mongoClientOptions13.getReadConcern();
        int int18 = mongoClientOptions13.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(readConcern17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test2400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2400");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        boolean boolean17 = mongoClientOptions16.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions16.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList19 = mongoClientOptions16.getCommandListeners();
        int int20 = mongoClientOptions16.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry21 = mongoClientOptions16.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions16);
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions16, environment23);
        int int25 = mongoClientOptions16.getMaxConnectionLifeTime();
        boolean boolean26 = mongoClientOptions16.isAlwaysUseMBeans();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList27 = mongoClientOptions16.getCommandListeners();
        int int28 = mongoClientOptions16.getConnectTimeout();
        int int29 = mongoClientOptions16.getLocalThreshold();
        javax.net.SocketFactory socketFactory30 = mongoClientOptions16.getSocketFactory();
        com.mongodb.WriteConcern writeConcern31 = mongoClientOptions16.getWriteConcern();
        org.bson.codecs.configuration.CodecRegistry codecRegistry32 = mongoClientOptions16.getCodecRegistry();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertNotNull(commandListenerList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(codecRegistry21);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(commandListenerList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 15 + "'", int29 == 15);
        org.junit.Assert.assertNotNull(socketFactory30);
        org.junit.Assert.assertNotNull(writeConcern31);
        org.junit.Assert.assertNotNull(codecRegistry32);
    }

    @Test
    public void test2401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2401");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str7 = mongoProperties0.getDatabase();
        java.lang.String str8 = mongoProperties0.getUri();
        java.lang.Integer int9 = mongoProperties0.getPort();
        mongoProperties0.setHost("mongodb://localhost/test");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int9);
    }

    @Test
    public void test2402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2402");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        int int17 = mongoClientOptions13.getMinConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry18 = mongoClientOptions13.getCodecRegistry();
        int int19 = mongoClientOptions13.getHeartbeatConnectTimeout();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList20 = mongoClientOptions13.getCommandListeners();
        int int21 = mongoClientOptions13.getServerSelectionTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(codecRegistry18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
        org.junit.Assert.assertNotNull(commandListenerList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test2403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2403");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.serverSelectionTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.socketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder8.maxConnectionIdleTime(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout(15);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test2404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2404");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getSocketTimeout();
        boolean boolean17 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        boolean boolean18 = mongoClientOptions13.isCursorFinalizerEnabled();
        boolean boolean19 = mongoClientOptions13.isAlwaysUseMBeans();
        int int20 = mongoClientOptions13.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
    }

    @Test
    public void test2405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2405");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        java.lang.String str4 = mongoProperties0.getMongoClientDatabase();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.getDatabase();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str13 = mongoProperties12.getGridFsDatabase();
        java.lang.String str14 = mongoProperties12.getGridFsDatabase();
        java.lang.String str15 = mongoProperties12.getUsername();
        java.lang.String str16 = mongoProperties12.getAuthenticationDatabase();
        java.lang.String str17 = mongoProperties12.getMongoClientDatabase();
        java.lang.String str18 = mongoProperties12.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties12.createMongoClient(mongoClientOptions19, environment20);
        mongoProperties12.setAuthenticationDatabase("test");
        java.lang.String str24 = mongoProperties12.getUri();
        java.lang.String str25 = mongoProperties12.getHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties26 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str27 = mongoProperties26.getGridFsDatabase();
        java.lang.String str28 = mongoProperties26.getGridFsDatabase();
        java.lang.String str29 = mongoProperties26.getUsername();
        mongoProperties26.setHost("hi!");
        mongoProperties26.setGridFsDatabase("hi!");
        mongoProperties26.setGridFsDatabase("test");
        java.lang.String str36 = mongoProperties26.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder43 = builder37.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder45.build();
        org.springframework.core.env.Environment environment47 = null;
        com.mongodb.MongoClient mongoClient48 = mongoProperties26.createMongoClient(mongoClientOptions46, environment47);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties49 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str50 = mongoProperties49.getGridFsDatabase();
        java.lang.String str51 = mongoProperties49.getHost();
        java.lang.String str52 = mongoProperties49.getGridFsDatabase();
        java.lang.String str53 = mongoProperties49.getMongoClientDatabase();
        char[] charArray54 = mongoProperties49.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties55 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str56 = mongoProperties55.getGridFsDatabase();
        java.lang.String str57 = mongoProperties55.getGridFsDatabase();
        java.lang.String str58 = mongoProperties55.getUsername();
        java.lang.String str59 = mongoProperties55.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass60 = mongoProperties55.getFieldNamingStrategy();
        char[] charArray65 = new char[] { 'a', '#', '#', '4' };
        mongoProperties55.setPassword(charArray65);
        mongoProperties49.setPassword(charArray65);
        mongoProperties26.setPassword(charArray65);
        mongoProperties12.setPassword(charArray65);
        mongoProperties0.setPassword(charArray65);
        mongoProperties0.setGridFsDatabase("hi!");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "test" + "'", str4, "test");
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "test" + "'", str17, "test");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "mongodb://localhost/test" + "'", str24, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertNotNull(mongoClient48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "test" + "'", str53, "test");
        org.junit.Assert.assertNull(charArray54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(wildcardClass60);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[a, #, #, 4]");
    }

    @Test
    public void test2406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2406");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        java.lang.String str4 = mongoProperties0.getMongoClientDatabase();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str8 = mongoProperties0.getUsername();
        java.lang.String str9 = mongoProperties0.getMongoClientDatabase();
        java.lang.Class<?> wildcardClass10 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setGridFsDatabase("hi!");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "test" + "'", str4, "test");
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "test" + "'", str7, "test");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "test" + "'", str9, "test");
        org.junit.Assert.assertNull(wildcardClass10);
    }

    @Test
    public void test2407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2407");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions15.getCommandListeners();
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder(mongoClientOptions15);
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder(mongoClientOptions15);
        com.mongodb.ReadConcern readConcern19 = mongoClientOptions15.getReadConcern();
        boolean boolean20 = mongoClientOptions15.isSslInvalidHostNameAllowed();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(readConcern19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2408");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.sslInvalidHostNameAllowed(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test2409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2409");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        boolean boolean25 = mongoClientOptions24.isSocketKeepAlive();
        int int26 = mongoClientOptions24.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions24.getDbEncoderFactory();
        int int28 = mongoClientOptions24.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions24);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.socketTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder29.build();
        boolean boolean33 = mongoClientOptions32.isAlwaysUseMBeans();
        boolean boolean34 = mongoClientOptions32.isCursorFinalizerEnabled();
        com.mongodb.ReadConcern readConcern35 = mongoClientOptions32.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder36 = builder10.readConcern(readConcern35);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 120000 + "'", int28 == 120000);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(readConcern35);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test2410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2410");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        java.lang.String str3 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setUsername("hi!");
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory21 = mongoClientOptions19.getSocketFactory();
        int int22 = mongoClientOptions19.getMaxWaitTime();
        boolean boolean23 = mongoClientOptions19.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties24 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str25 = mongoProperties24.getGridFsDatabase();
        java.lang.String str26 = mongoProperties24.getGridFsDatabase();
        java.lang.String str27 = mongoProperties24.getUsername();
        mongoProperties24.setHost("hi!");
        mongoProperties24.setGridFsDatabase("hi!");
        boolean boolean32 = mongoClientOptions19.equals((java.lang.Object) mongoProperties24);
        com.mongodb.ReadPreference readPreference33 = mongoClientOptions19.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder46.build();
        int int48 = mongoClientOptions47.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory49 = mongoClientOptions47.getSocketFactory();
        boolean boolean50 = mongoClientOptions47.isSslInvalidHostNameAllowed();
        com.mongodb.ReadPreference readPreference51 = mongoClientOptions47.getReadPreference();
        boolean boolean52 = mongoClientOptions19.equals((java.lang.Object) readPreference51);
        org.springframework.core.env.Environment environment53 = null;
        com.mongodb.MongoClient mongoClient54 = mongoProperties0.createMongoClient(mongoClientOptions19, environment53);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 120000 + "'", int22 == 120000);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(readPreference33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(mongoClientOptions47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(socketFactory49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(readPreference51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(mongoClient54);
    }

    @Test
    public void test2411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2411");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) -1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.sslEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2412");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        java.lang.String str16 = mongoClientOptions13.getDescription();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        java.lang.String str18 = mongoClientOptions13.getRequiredReplicaSetName();
        java.lang.String str19 = mongoClientOptions13.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test2413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2413");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.serverSelectionTimeout((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test2414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2414");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        int int16 = mongoClientOptions13.getMinHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions13.getReadPreference();
        int int18 = mongoClientOptions13.getMinHeartbeatFrequency();
        int int19 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int20 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 500 + "'", int16 == 500);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 500 + "'", int18 == 500);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
    }

    @Test
    public void test2415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2415");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.minConnectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.socketTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test2416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2416");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.socketTimeout(32);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder8.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
    }

    @Test
    public void test2417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2417");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getDatabase();
        java.lang.String str3 = mongoProperties0.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder4 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory19 = mongoClientOptions17.getSocketFactory();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions17, environment20);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions17);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxConnectionIdleTime((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder26 = builder24.threadsAllowedToBlockForConnectionMultiplier((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: threadsAllowedToBlockForConnectionMultiplier must be > 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "test" + "'", str3, "test");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(socketFactory19);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test2418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2418");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions13.getReadPreference();
        int int18 = mongoClientOptions13.getMinConnectionsPerHost();
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions13.getReadPreference();
        boolean boolean20 = mongoClientOptions13.isCursorFinalizerEnabled();
        int int21 = mongoClientOptions13.getServerSelectionTimeout();
        int int22 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int23 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(readPreference19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
    }

    @Test
    public void test2419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2419");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        com.mongodb.MongoClientOptions.Builder builder30 = builder27.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder41 = builder35.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder43.build();
        org.bson.codecs.configuration.CodecRegistry codecRegistry45 = mongoClientOptions44.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder46 = builder30.codecRegistry(codecRegistry45);
        com.mongodb.MongoClientOptions.Builder builder47 = builder2.codecRegistry(codecRegistry45);
        com.mongodb.MongoClientOptions.Builder builder49 = builder2.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder56 = builder52.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder62.build();
        com.mongodb.MongoClientOptions.Builder builder64 = com.mongodb.MongoClientOptions.builder(mongoClientOptions63);
        int int65 = mongoClientOptions63.getHeartbeatConnectTimeout();
        int int66 = mongoClientOptions63.getMaxWaitTime();
        boolean boolean67 = mongoClientOptions63.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder68 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions63);
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.description("test");
        com.mongodb.MongoClientOptions.Builder builder72 = builder68.heartbeatSocketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder73 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder77 = builder75.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder79 = builder75.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder81 = builder79.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder83 = builder81.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder85 = builder83.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions86 = builder85.build();
        boolean boolean87 = mongoClientOptions86.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory88 = mongoClientOptions86.getDbEncoderFactory();
        int int89 = mongoClientOptions86.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern90 = mongoClientOptions86.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder91 = builder72.readConcern(readConcern90);
        com.mongodb.MongoClientOptions.Builder builder92 = builder2.readConcern(readConcern90);
        com.mongodb.MongoClientOptions.Builder builder94 = builder2.localThreshold((int) (short) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertNotNull(codecRegistry45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoClientOptions63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 20000 + "'", int65 == 20000);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 120000 + "'", int66 == 120000);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(mongoClientOptions86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 100 + "'", int89 == 100);
        org.junit.Assert.assertNotNull(readConcern90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test2420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2420");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        int int15 = mongoClientOptions13.getHeartbeatConnectTimeout();
        int int16 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int17 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean18 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        com.mongodb.ReadConcern readConcern19 = mongoClientOptions13.getReadConcern();
        java.lang.String str20 = mongoClientOptions13.getDescription();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties21.clearPassword();
        mongoProperties21.setUsername("hi!");
        mongoProperties21.setUri("");
        boolean boolean27 = mongoClientOptions13.equals((java.lang.Object) mongoProperties21);
        java.lang.String str28 = mongoProperties21.getHost();
        java.lang.Integer int29 = mongoProperties21.getPort();
        mongoProperties21.setGridFsDatabase("test");
        java.lang.String str32 = mongoProperties21.getUsername();
        mongoProperties21.setUsername("hi!");
        java.lang.String str35 = mongoProperties21.getAuthenticationDatabase();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(readConcern19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test2421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2421");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.threadsAllowedToBlockForConnectionMultiplier(20000);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder6.build();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder(mongoClientOptions9);
        boolean boolean11 = mongoClientOptions9.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2422");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str4 = mongoProperties0.getHost();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        char[] charArray6 = mongoProperties0.getPassword();
        char[] charArray7 = mongoProperties0.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str9 = mongoProperties8.getGridFsDatabase();
        java.lang.String str10 = mongoProperties8.getGridFsDatabase();
        java.lang.String str11 = mongoProperties8.getUsername();
        java.lang.String str12 = mongoProperties8.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass13 = mongoProperties8.getFieldNamingStrategy();
        char[] charArray18 = new char[] { 'a', '#', '#', '4' };
        mongoProperties8.setPassword(charArray18);
        mongoProperties0.setPassword(charArray18);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties21.clearPassword();
        mongoProperties21.setPort((java.lang.Integer) 0);
        mongoProperties21.setGridFsDatabase("");
        java.lang.String str27 = mongoProperties21.getAuthenticationDatabase();
        java.lang.String str28 = mongoProperties21.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties29 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str30 = mongoProperties29.getGridFsDatabase();
        java.lang.String str31 = mongoProperties29.getGridFsDatabase();
        mongoProperties29.clearPassword();
        java.lang.Class<?> wildcardClass33 = mongoProperties29.getFieldNamingStrategy();
        java.lang.Integer int34 = mongoProperties29.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str36 = mongoProperties35.getGridFsDatabase();
        java.lang.String str37 = mongoProperties35.getHost();
        java.lang.String str38 = mongoProperties35.getGridFsDatabase();
        java.lang.String str39 = mongoProperties35.getMongoClientDatabase();
        java.lang.String str40 = mongoProperties35.getHost();
        java.lang.String str41 = mongoProperties35.getDatabase();
        java.lang.String str42 = mongoProperties35.getHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties43 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str44 = mongoProperties43.getGridFsDatabase();
        java.lang.String str45 = mongoProperties43.getGridFsDatabase();
        java.lang.String str46 = mongoProperties43.getUsername();
        java.lang.String str47 = mongoProperties43.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass48 = mongoProperties43.getFieldNamingStrategy();
        char[] charArray53 = new char[] { 'a', '#', '#', '4' };
        mongoProperties43.setPassword(charArray53);
        mongoProperties35.setPassword(charArray53);
        mongoProperties29.setPassword(charArray53);
        mongoProperties21.setPassword(charArray53);
        mongoProperties0.setPassword(charArray53);
        mongoProperties0.setHost("");
        mongoProperties0.setUsername("hi!");
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.Integer int65 = mongoProperties0.getPort();
        char[] charArray66 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #, #, 4]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "mongodb://localhost/test" + "'", str28, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "test" + "'", str39, "test");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(wildcardClass48);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[a, #, #, 4]");
        org.junit.Assert.assertNull(int65);
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[a, #, #, 4]");
    }

    @Test
    public void test2423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2423");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions13.getWriteConcern();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        boolean boolean18 = mongoClientOptions13.isSocketKeepAlive();
        int int19 = mongoClientOptions13.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
    }

    @Test
    public void test2424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2424");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.ReadConcern readConcern16 = mongoClientOptions13.getReadConcern();
        boolean boolean18 = mongoClientOptions13.equals((java.lang.Object) 10);
        int int19 = mongoClientOptions13.getHeartbeatFrequency();
        java.lang.String str20 = mongoClientOptions13.getRequiredReplicaSetName();
        com.mongodb.DBDecoderFactory dBDecoderFactory21 = mongoClientOptions13.getDbDecoderFactory();
        int int22 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory23 = mongoClientOptions13.getDbDecoderFactory();
        int int24 = mongoClientOptions13.getMaxConnectionLifeTime();
        javax.net.SocketFactory socketFactory25 = mongoClientOptions13.getSocketFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(readConcern16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(dBDecoderFactory21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(socketFactory25);
    }

    @Test
    public void test2425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2425");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        int int16 = mongoClientOptions13.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern17 = mongoClientOptions13.getReadConcern();
        com.mongodb.ReadConcern readConcern18 = mongoClientOptions13.getReadConcern();
        java.lang.String str19 = mongoClientOptions13.getRequiredReplicaSetName();
        int int20 = mongoClientOptions13.getSocketTimeout();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str22 = mongoProperties21.getAuthenticationDatabase();
        java.lang.String str23 = mongoProperties21.getUsername();
        java.lang.String str24 = mongoProperties21.getUsername();
        java.lang.String str25 = mongoProperties21.getDatabase();
        java.lang.Class<?> wildcardClass26 = mongoProperties21.getFieldNamingStrategy();
        mongoProperties21.setPort((java.lang.Integer) 20000);
        boolean boolean29 = mongoClientOptions13.equals((java.lang.Object) mongoProperties21);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNotNull(readConcern17);
        org.junit.Assert.assertNotNull(readConcern18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test2426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2426");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int10 = mongoClientOptions7.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry11 = mongoClientOptions7.getCodecRegistry();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        int int13 = mongoClientOptions7.getHeartbeatFrequency();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList14 = mongoClientOptions7.getCommandListeners();
        int int15 = mongoClientOptions7.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        int int17 = mongoClientOptions7.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(codecRegistry11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertNotNull(commandListenerList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
    }

    @Test
    public void test2427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2427");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions13.getCommandListeners();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions13.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxWaitTime((int) (byte) 10);
        boolean boolean27 = mongoClientOptions13.equals((java.lang.Object) builder24);
        int int28 = mongoClientOptions13.getMinConnectionsPerHost();
        com.mongodb.ReadPreference readPreference29 = mongoClientOptions13.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder30 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.description("hi!");
        boolean boolean45 = mongoClientOptions13.equals((java.lang.Object) builder42);
        int int46 = mongoClientOptions13.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(readPreference29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 15 + "'", int46 == 15);
    }

    @Test
    public void test2428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2428");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxConnectionLifeTime(10);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder39 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder45 = builder41.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions52 = builder51.build();
        int int53 = mongoClientOptions52.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory54 = mongoClientOptions52.getSocketFactory();
        int int55 = mongoClientOptions52.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory56 = mongoClientOptions52.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder57 = builder36.dbDecoderFactory(dBDecoderFactory56);
        com.mongodb.MongoClientOptions.Builder builder58 = builder25.dbDecoderFactory(dBDecoderFactory56);
        com.mongodb.MongoClientOptions.Builder builder59 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder65 = builder61.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder68 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions75 = builder74.build();
        int int76 = mongoClientOptions75.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory77 = mongoClientOptions75.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder78 = builder67.dbDecoderFactory(dBDecoderFactory77);
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder81 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder83 = builder81.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder85 = builder83.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder87 = builder83.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder89 = builder87.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder91 = builder89.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder93 = builder91.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions94 = builder93.build();
        int int95 = mongoClientOptions94.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry96 = mongoClientOptions94.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder97 = builder80.codecRegistry(codecRegistry96);
        com.mongodb.MongoClientOptions.Builder builder98 = builder25.codecRegistry(codecRegistry96);
        com.mongodb.MongoClientOptions.Builder builder99 = builder16.codecRegistry(codecRegistry96);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(mongoClientOptions52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(socketFactory54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 120000 + "'", int55 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(mongoClientOptions75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(mongoClientOptions94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertNotNull(codecRegistry96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test2429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2429");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 0);
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.clearPassword();
        java.lang.String str7 = mongoProperties0.getHost();
        mongoProperties0.setUri("hi!");
        mongoProperties0.setUri("");
        mongoProperties0.setPort((java.lang.Integer) 52);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test2430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2430");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions13.getCommandListeners();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions13.getReadPreference();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions13.getWriteConcern();
        int int19 = mongoClientOptions13.getHeartbeatConnectTimeout();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions13.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.alwaysUseMBeans(false);
        boolean boolean34 = mongoClientOptions13.equals((java.lang.Object) builder29);
        com.mongodb.MongoClientOptions.Builder builder36 = builder29.heartbeatSocketTimeout((int) (byte) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test2431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2431");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions13.getSocketFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList18 = mongoClientOptions13.getCommandListeners();
        int int19 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int20 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertNotNull(commandListenerList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
    }

    @Test
    public void test2432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2432");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions7.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern9 = mongoClientOptions7.getWriteConcern();
        boolean boolean10 = mongoClientOptions7.isSslInvalidHostNameAllowed();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList11 = mongoClientOptions7.getCommandListeners();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions7.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertNotNull(writeConcern9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(commandListenerList11);
        org.junit.Assert.assertNotNull(readPreference12);
    }

    @Test
    public void test2433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2433");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        com.mongodb.WriteConcern writeConcern17 = mongoClientOptions13.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertNotNull(writeConcern17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test2434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2434");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions13.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        int int33 = mongoClientOptions32.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory34 = mongoClientOptions32.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder24.dbDecoderFactory(dBDecoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder36 = builder24.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder49.build();
        int int51 = mongoClientOptions50.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry52 = mongoClientOptions50.getCodecRegistry();
        java.lang.String str53 = mongoClientOptions50.getDescription();
        boolean boolean54 = mongoClientOptions50.isAlwaysUseMBeans();
        boolean boolean55 = mongoClientOptions50.isSocketKeepAlive();
        int int56 = mongoClientOptions50.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern57 = mongoClientOptions50.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder58 = builder24.readConcern(readConcern57);
        boolean boolean59 = mongoClientOptions13.equals((java.lang.Object) builder58);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(codecRegistry52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertNotNull(readConcern57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test2435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2435");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder30.build();
        int int32 = mongoClientOptions31.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions31.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory34 = mongoClientOptions31.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder21.socketFactory(socketFactory34);
        com.mongodb.MongoClientOptions.Builder builder36 = builder10.socketFactory(socketFactory34);
        com.mongodb.MongoClientOptions.Builder builder37 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.connectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder49 = builder45.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder50 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.description("");
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder56 = builder52.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder57 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder63 = builder59.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions70 = builder69.build();
        int int71 = mongoClientOptions70.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory72 = mongoClientOptions70.getSocketFactory();
        com.mongodb.WriteConcern writeConcern73 = mongoClientOptions70.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder74 = builder52.writeConcern(writeConcern73);
        com.mongodb.MongoClientOptions.Builder builder75 = builder45.writeConcern(writeConcern73);
        com.mongodb.MongoClientOptions.Builder builder76 = builder36.writeConcern(writeConcern73);
        com.mongodb.MongoClientOptions.Builder builder78 = builder76.minHeartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.heartbeatFrequency(10000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(socketFactory34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(mongoClientOptions70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(socketFactory72);
        org.junit.Assert.assertNotNull(writeConcern73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test2436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2436");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        java.lang.String str15 = mongoClientOptions13.getRequiredReplicaSetName();
        boolean boolean16 = mongoClientOptions13.isSslEnabled();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions13.getReadPreference();
        int int18 = mongoClientOptions13.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        com.mongodb.MongoClientOptions.Builder builder33 = com.mongodb.MongoClientOptions.builder(mongoClientOptions32);
        java.lang.String str34 = mongoClientOptions32.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry35 = mongoClientOptions32.getCodecRegistry();
        int int36 = mongoClientOptions32.getConnectTimeout();
        int int37 = mongoClientOptions32.getServerSelectionTimeout();
        javax.net.SocketFactory socketFactory38 = mongoClientOptions32.getSocketFactory();
        boolean boolean39 = mongoClientOptions13.equals((java.lang.Object) mongoClientOptions32);
        int int40 = mongoClientOptions32.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10000 + "'", int36 == 10000);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(socketFactory38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test2437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2437");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        boolean boolean15 = mongoClientOptions13.isAlwaysUseMBeans();
        int int16 = mongoClientOptions13.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15 + "'", int16 == 15);
    }

    @Test
    public void test2438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2438");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str6 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        mongoProperties0.setAuthenticationDatabase("test");
        mongoProperties0.setUsername("mongodb://localhost/test");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(mongoClient9);
    }

    @Test
    public void test2439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2439");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        boolean boolean25 = mongoClientOptions24.isSocketKeepAlive();
        int int26 = mongoClientOptions24.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions24.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder28 = builder4.dbEncoderFactory(dBEncoderFactory27);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder4.build();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties30 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str31 = mongoProperties30.getGridFsDatabase();
        java.lang.String str32 = mongoProperties30.getGridFsDatabase();
        java.lang.String str33 = mongoProperties30.getUsername();
        java.lang.String str34 = mongoProperties30.getAuthenticationDatabase();
        java.lang.String str35 = mongoProperties30.getMongoClientDatabase();
        java.lang.String str36 = mongoProperties30.getDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties30.createMongoClient(mongoClientOptions37, environment38);
        java.lang.String str40 = mongoProperties30.getGridFsDatabase();
        mongoProperties30.setDatabase("test");
        boolean boolean43 = mongoClientOptions29.equals((java.lang.Object) mongoProperties30);
        com.mongodb.DBDecoderFactory dBDecoderFactory44 = mongoClientOptions29.getDbDecoderFactory();
        boolean boolean45 = mongoClientOptions29.isCursorFinalizerEnabled();
        boolean boolean46 = mongoClientOptions29.isSocketKeepAlive();
        java.lang.String str47 = mongoClientOptions29.getRequiredReplicaSetName();
        boolean boolean48 = mongoClientOptions29.isSslEnabled();
        int int49 = mongoClientOptions29.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "test" + "'", str35, "test");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
    }

    @Test
    public void test2440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2440");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minConnectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.minConnectionsPerHost((int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test2441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2441");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str10 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions20, environment21);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str24 = mongoProperties23.getGridFsDatabase();
        java.lang.String str25 = mongoProperties23.getHost();
        java.lang.String str26 = mongoProperties23.getGridFsDatabase();
        java.lang.String str27 = mongoProperties23.getMongoClientDatabase();
        char[] charArray28 = mongoProperties23.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties29 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str30 = mongoProperties29.getGridFsDatabase();
        java.lang.String str31 = mongoProperties29.getGridFsDatabase();
        java.lang.String str32 = mongoProperties29.getUsername();
        java.lang.String str33 = mongoProperties29.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass34 = mongoProperties29.getFieldNamingStrategy();
        char[] charArray39 = new char[] { 'a', '#', '#', '4' };
        mongoProperties29.setPassword(charArray39);
        mongoProperties23.setPassword(charArray39);
        mongoProperties0.setPassword(charArray39);
        mongoProperties0.setPort((java.lang.Integer) 20000);
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.setPort((java.lang.Integer) 0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "test" + "'", str27, "test");
        org.junit.Assert.assertNull(charArray28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[a, #, #, 4]");
    }

    @Test
    public void test2442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2442");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((-1));
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.serverSelectionTimeout((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test2443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2443");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        int int16 = mongoClientOptions13.getConnectionsPerHost();
        com.mongodb.ReadConcern readConcern17 = mongoClientOptions13.getReadConcern();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions13.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNotNull(readConcern17);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
    }

    @Test
    public void test2444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2444");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.serverSelectionTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.socketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        boolean boolean23 = mongoClientOptions22.isSocketKeepAlive();
        int int24 = mongoClientOptions22.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions22.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder8.dbEncoderFactory(dBEncoderFactory25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.description("");
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder38 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder55 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions62 = builder61.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory63 = mongoClientOptions62.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern64 = mongoClientOptions62.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder65 = builder54.writeConcern(writeConcern64);
        com.mongodb.MongoClientOptions.Builder builder66 = builder37.writeConcern(writeConcern64);
        com.mongodb.MongoClientOptions.Builder builder67 = builder26.writeConcern(writeConcern64);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.connectTimeout(27017);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 120000 + "'", int24 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(mongoClientOptions62);
        org.junit.Assert.assertNotNull(dBEncoderFactory63);
        org.junit.Assert.assertNotNull(writeConcern64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test2445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2445");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray4 = mongoProperties0.getPassword();
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        java.lang.Integer int6 = mongoProperties0.getPort();
        char[] charArray7 = mongoProperties0.getPassword();
        mongoProperties0.setDatabase("hi!");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(charArray4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(charArray7);
    }

    @Test
    public void test2446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2446");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions13.getSocketFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions13.getDbDecoderFactory();
        boolean boolean19 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions13.getDbDecoderFactory();
        int int21 = mongoClientOptions13.getConnectTimeout();
        int int22 = mongoClientOptions13.getLocalThreshold();
        java.lang.String str23 = mongoClientOptions13.getDescription();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
    }

    @Test
    public void test2447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2447");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions13.getSocketFactory();
        boolean boolean18 = mongoClientOptions13.isAlwaysUseMBeans();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        boolean boolean20 = mongoClientOptions13.isSslEnabled();
        int int21 = mongoClientOptions13.getConnectTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry22 = mongoClientOptions13.getCodecRegistry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertNotNull(codecRegistry22);
    }

    @Test
    public void test2448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2448");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions13.getSocketFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions13.getDbDecoderFactory();
        boolean boolean19 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions13.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder21 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.minHeartbeatFrequency(20000);
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder52 = builder48.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder53 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder59 = builder55.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder64 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder70 = builder66.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder76 = builder74.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions77 = builder76.build();
        boolean boolean78 = mongoClientOptions77.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory79 = mongoClientOptions77.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList80 = mongoClientOptions77.getCommandListeners();
        com.mongodb.ReadPreference readPreference81 = mongoClientOptions77.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder82 = builder63.readPreference(readPreference81);
        com.mongodb.MongoClientOptions.Builder builder83 = builder52.readPreference(readPreference81);
        com.mongodb.MongoClientOptions.Builder builder84 = builder39.readPreference(readPreference81);
        com.mongodb.MongoClientOptions.Builder builder86 = builder39.threadsAllowedToBlockForConnectionMultiplier(100);
        boolean boolean87 = mongoClientOptions13.equals((java.lang.Object) builder86);
        int int88 = mongoClientOptions13.getServerSelectionTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(mongoClientOptions77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory79);
        org.junit.Assert.assertNotNull(commandListenerList80);
        org.junit.Assert.assertNotNull(readPreference81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
    }

    @Test
    public void test2449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2449");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minConnectionsPerHost((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.maxConnectionIdleTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder34 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder40.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory42 = mongoClientOptions41.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern43 = mongoClientOptions41.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder44 = builder33.writeConcern(writeConcern43);
        com.mongodb.MongoClientOptions.Builder builder45 = builder10.writeConcern(writeConcern43);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.connectTimeout(32);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.sslInvalidHostNameAllowed(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertNotNull(dBEncoderFactory42);
        org.junit.Assert.assertNotNull(writeConcern43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test2450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2450");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        java.lang.String str16 = mongoClientOptions13.getDescription();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        boolean boolean18 = mongoClientOptions13.isSocketKeepAlive();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        int int20 = mongoClientOptions13.getSocketTimeout();
        int int21 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int22 = mongoClientOptions13.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test2451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2451");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        java.lang.String str4 = mongoProperties0.getMongoClientDatabase();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        boolean boolean21 = mongoClientOptions20.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory22 = mongoClientOptions20.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList23 = mongoClientOptions20.getCommandListeners();
        int int24 = mongoClientOptions20.getMaxConnectionIdleTime();
        int int25 = mongoClientOptions20.getSocketTimeout();
        int int26 = mongoClientOptions20.getHeartbeatFrequency();
        org.bson.codecs.configuration.CodecRegistry codecRegistry27 = mongoClientOptions20.getCodecRegistry();
        org.springframework.core.env.Environment environment28 = null;
        com.mongodb.MongoClient mongoClient29 = mongoProperties0.createMongoClient(mongoClientOptions20, environment28);
        mongoProperties0.clearPassword();
        java.lang.String str31 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "test" + "'", str4, "test");
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory22);
        org.junit.Assert.assertNotNull(commandListenerList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(codecRegistry27);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test2452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2452");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str10 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = builder11.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions20, environment21);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.description("test");
        boolean boolean30 = mongoClientOptions20.equals((java.lang.Object) "test");
        int int31 = mongoClientOptions20.getServerSelectionTimeout();
        boolean boolean32 = mongoClientOptions20.isAlwaysUseMBeans();
        int int33 = mongoClientOptions20.getMaxConnectionIdleTime();
        int int34 = mongoClientOptions20.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 30000 + "'", int31 == 30000);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test2453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2453");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.localThreshold(15);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.build();
        org.bson.codecs.configuration.CodecRegistry codecRegistry21 = mongoClientOptions20.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder22 = builder16.codecRegistry(codecRegistry21);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(codecRegistry21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test2454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2454");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder3 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder9 = builder5.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        boolean boolean17 = mongoClientOptions16.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions16.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList19 = mongoClientOptions16.getCommandListeners();
        int int20 = mongoClientOptions16.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry21 = mongoClientOptions16.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions16);
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions16, environment23);
        java.lang.String str25 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass26 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertNotNull(commandListenerList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(codecRegistry21);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(wildcardClass26);
    }

    @Test
    public void test2455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2455");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder28 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder47.build();
        int int49 = mongoClientOptions48.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory50 = mongoClientOptions48.getSocketFactory();
        com.mongodb.WriteConcern writeConcern51 = mongoClientOptions48.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder52 = builder30.writeConcern(writeConcern51);
        com.mongodb.MongoClientOptions.Builder builder53 = builder27.writeConcern(writeConcern51);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.description("");
        com.mongodb.MongoClientOptions.Builder builder58 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions65 = builder64.build();
        int int66 = mongoClientOptions65.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory67 = mongoClientOptions65.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder68 = builder55.dbDecoderFactory(dBDecoderFactory67);
        com.mongodb.MongoClientOptions.Builder builder69 = builder10.dbDecoderFactory(dBDecoderFactory67);
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.minHeartbeatFrequency((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder72 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder76 = builder74.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder78 = builder74.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder82 = builder80.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder84 = builder82.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions85 = builder84.build();
        int int86 = mongoClientOptions85.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry87 = mongoClientOptions85.getCodecRegistry();
        java.lang.String str88 = mongoClientOptions85.getDescription();
        boolean boolean89 = mongoClientOptions85.isAlwaysUseMBeans();
        boolean boolean90 = mongoClientOptions85.isSocketKeepAlive();
        int int91 = mongoClientOptions85.getConnectionsPerHost();
        java.lang.String str92 = mongoClientOptions85.getRequiredReplicaSetName();
        int int93 = mongoClientOptions85.getMaxConnectionIdleTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry94 = mongoClientOptions85.getCodecRegistry();
        com.mongodb.DBEncoderFactory dBEncoderFactory95 = mongoClientOptions85.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder96 = builder71.dbEncoderFactory(dBEncoderFactory95);
        com.mongodb.MongoClientOptions.Builder builder98 = builder71.localThreshold(30000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(socketFactory50);
        org.junit.Assert.assertNotNull(writeConcern51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(mongoClientOptions65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(mongoClientOptions85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(codecRegistry87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!" + "'", str88, "hi!");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 100 + "'", int91 == 100);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(codecRegistry94);
        org.junit.Assert.assertNotNull(dBEncoderFactory95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test2456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2456");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder26 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder32.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory34 = mongoClientOptions33.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern35 = mongoClientOptions33.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder36 = builder25.writeConcern(writeConcern35);
        com.mongodb.MongoClientOptions.Builder builder37 = builder8.writeConcern(writeConcern35);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder8.build();
        javax.net.SocketFactory socketFactory39 = mongoClientOptions38.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.description("");
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.serverSelectionTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.localThreshold((int) 'a');
        boolean boolean49 = mongoClientOptions38.equals((java.lang.Object) 'a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(dBEncoderFactory34);
        org.junit.Assert.assertNotNull(writeConcern35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertNotNull(socketFactory39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test2457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2457");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int10 = mongoClientOptions7.getConnectionsPerHost();
        org.bson.codecs.configuration.CodecRegistry codecRegistry11 = mongoClientOptions7.getCodecRegistry();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions7.getDbEncoderFactory();
        int int13 = mongoClientOptions7.getHeartbeatFrequency();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList14 = mongoClientOptions7.getCommandListeners();
        int int15 = mongoClientOptions7.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder16 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        com.mongodb.DBDecoderFactory dBDecoderFactory17 = mongoClientOptions7.getDbDecoderFactory();
        int int18 = mongoClientOptions7.getMaxConnectionLifeTime();
        int int19 = mongoClientOptions7.getConnectTimeout();
        int int20 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        int int21 = mongoClientOptions7.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(codecRegistry11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertNotNull(commandListenerList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
    }

    @Test
    public void test2458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2458");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getHost();
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        java.lang.String str4 = mongoProperties0.getMongoClientDatabase();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.getDatabase();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str11 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUsername("");
        java.lang.String str14 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "test" + "'", str4, "test");
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test2459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2459");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        com.mongodb.ReadConcern readConcern18 = mongoClientOptions13.getReadConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions13.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList20 = mongoClientOptions13.getCommandListeners();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(readConcern18);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNotNull(commandListenerList20);
    }

    @Test
    public void test2460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2460");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setHost("hi!");
        java.lang.String str10 = mongoProperties0.getDatabase();
        java.lang.String str11 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "test" + "'", str5, "test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test2461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2461");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.setDatabase("");
        mongoProperties0.setUri("");
        mongoProperties0.setDatabase("hi!");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test2462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2462");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        com.mongodb.DBEncoderFactory dBEncoderFactory17 = mongoClientOptions13.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder28 = builder22.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder29 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder41.build();
        boolean boolean43 = mongoClientOptions42.isSocketKeepAlive();
        int int44 = mongoClientOptions42.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory45 = mongoClientOptions42.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder46 = builder22.dbEncoderFactory(dBEncoderFactory45);
        com.mongodb.MongoClientOptions.Builder builder48 = builder22.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder50 = builder22.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder51 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder57 = builder53.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions64 = builder63.build();
        int int65 = mongoClientOptions64.getHeartbeatSocketTimeout();
        boolean boolean66 = mongoClientOptions64.isAlwaysUseMBeans();
        int int67 = mongoClientOptions64.getMaxConnectionLifeTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry68 = mongoClientOptions64.getCodecRegistry();
        int int69 = mongoClientOptions64.getMinConnectionsPerHost();
        com.mongodb.ReadConcern readConcern70 = mongoClientOptions64.getReadConcern();
        com.mongodb.WriteConcern writeConcern71 = mongoClientOptions64.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder72 = builder22.writeConcern(writeConcern71);
        boolean boolean73 = mongoClientOptions13.equals((java.lang.Object) builder72);
        int int74 = mongoClientOptions13.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(dBEncoderFactory17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 120000 + "'", int44 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(mongoClientOptions64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(codecRegistry68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(readConcern70);
        org.junit.Assert.assertNotNull(writeConcern71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test2463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2463");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        int int15 = mongoClientOptions13.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions13.getDbEncoderFactory();
        int int17 = mongoClientOptions13.getMinHeartbeatFrequency();
        boolean boolean18 = mongoClientOptions13.isAlwaysUseMBeans();
        com.mongodb.ReadPreference readPreference19 = mongoClientOptions13.getReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 120000 + "'", int15 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(readPreference19);
    }

    @Test
    public void test2464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2464");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getRequiredReplicaSetName();
        int int16 = mongoClientOptions13.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        int int18 = mongoClientOptions13.getMaxWaitTime();
        int int19 = mongoClientOptions13.getConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        int int21 = mongoClientOptions13.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        boolean boolean36 = mongoClientOptions35.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory37 = mongoClientOptions35.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList38 = mongoClientOptions35.getCommandListeners();
        com.mongodb.ReadPreference readPreference39 = mongoClientOptions35.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder40 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.maxWaitTime((int) (byte) 10);
        boolean boolean49 = mongoClientOptions35.equals((java.lang.Object) builder46);
        int int50 = mongoClientOptions35.getMaxConnectionLifeTime();
        int int51 = mongoClientOptions35.getHeartbeatFrequency();
        int int52 = mongoClientOptions35.getSocketTimeout();
        com.mongodb.ReadPreference readPreference53 = mongoClientOptions35.getReadPreference();
        int int54 = mongoClientOptions35.getMinHeartbeatFrequency();
        int int55 = mongoClientOptions35.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder56 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions35);
        boolean boolean57 = mongoClientOptions13.equals((java.lang.Object) builder56);
        java.util.List<com.mongodb.event.CommandListener> commandListenerList58 = mongoClientOptions13.getCommandListeners();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120000 + "'", int18 == 120000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 500 + "'", int21 == 500);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory37);
        org.junit.Assert.assertNotNull(commandListenerList38);
        org.junit.Assert.assertNotNull(readPreference39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(readPreference53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 500 + "'", int54 == 500);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 20000 + "'", int55 == 20000);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(commandListenerList58);
    }

    @Test
    public void test2465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2465");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        java.lang.String str15 = mongoClientOptions13.getRequiredReplicaSetName();
        java.lang.String str16 = mongoClientOptions13.getRequiredReplicaSetName();
        int int17 = mongoClientOptions13.getHeartbeatFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions13.getDbEncoderFactory();
        int int19 = mongoClientOptions13.getMaxConnectionIdleTime();
        com.mongodb.MongoClientOptions.Builder builder20 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder32.build();
        boolean boolean34 = mongoClientOptions33.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder35 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder41.build();
        boolean boolean43 = mongoClientOptions33.equals((java.lang.Object) builder41);
        int int44 = mongoClientOptions33.getMaxConnectionIdleTime();
        javax.net.SocketFactory socketFactory45 = mongoClientOptions33.getSocketFactory();
        boolean boolean46 = mongoClientOptions13.equals((java.lang.Object) socketFactory45);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(socketFactory45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test2466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2466");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass5 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray10 = new char[] { 'a', '#', '#', '4' };
        mongoProperties0.setPassword(charArray10);
        mongoProperties0.clearPassword();
        java.lang.String str13 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test2467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2467");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        boolean boolean33 = mongoClientOptions32.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory34 = mongoClientOptions32.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder12.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder36 = builder9.dbEncoderFactory(dBEncoderFactory34);
        com.mongodb.MongoClientOptions.Builder builder38 = builder9.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder43 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder49 = builder45.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions56 = builder55.build();
        boolean boolean57 = mongoClientOptions56.isSocketKeepAlive();
        com.mongodb.MongoClientOptions.Builder builder58 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions65 = builder64.build();
        boolean boolean66 = mongoClientOptions56.equals((java.lang.Object) builder64);
        int int67 = mongoClientOptions56.getHeartbeatConnectTimeout();
        com.mongodb.ReadPreference readPreference68 = mongoClientOptions56.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder69 = builder40.readPreference(readPreference68);
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.connectionsPerHost((int) (short) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoClientOptions56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(mongoClientOptions65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 20000 + "'", int67 == 20000);
        org.junit.Assert.assertNotNull(readPreference68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test2468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2468");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions15.getCommandListeners();
        boolean boolean17 = mongoClientOptions15.isSslInvalidHostNameAllowed();
        boolean boolean18 = mongoClientOptions15.isSocketKeepAlive();
        int int19 = mongoClientOptions15.getServerSelectionTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 30000 + "'", int19 == 30000);
    }

    @Test
    public void test2469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2469");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        java.lang.String str15 = mongoClientOptions13.getRequiredReplicaSetName();
        java.lang.String str16 = mongoClientOptions13.getRequiredReplicaSetName();
        int int17 = mongoClientOptions13.getHeartbeatFrequency();
        int int18 = mongoClientOptions13.getLocalThreshold();
        int int19 = mongoClientOptions13.getMaxWaitTime();
        com.mongodb.ReadConcern readConcern20 = mongoClientOptions13.getReadConcern();
        int int21 = mongoClientOptions13.getMinHeartbeatFrequency();
        boolean boolean22 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        int int23 = mongoClientOptions13.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
        org.junit.Assert.assertNotNull(readConcern20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 500 + "'", int21 == 500);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test2470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2470");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 0);
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str7 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test2471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2471");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder14.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder17 = builder14.heartbeatFrequency(1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder14.maxConnectionIdleTime((int) (short) -1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test2472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2472");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder5 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder17.build();
        int int19 = mongoClientOptions18.getHeartbeatSocketTimeout();
        java.lang.String str20 = mongoClientOptions18.getRequiredReplicaSetName();
        java.lang.String str21 = mongoClientOptions18.getRequiredReplicaSetName();
        int int22 = mongoClientOptions18.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions18, environment23);
        java.lang.String str25 = mongoClientOptions18.getRequiredReplicaSetName();
        boolean boolean26 = mongoClientOptions18.isSocketKeepAlive();
        int int27 = mongoClientOptions18.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder28 = com.mongodb.MongoClientOptions.builder(mongoClientOptions18);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "test" + "'", str4, "test");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 120000 + "'", int27 == 120000);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test2473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2473");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass5 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str6 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatSocketTimeout();
        java.lang.String str22 = mongoClientOptions20.getRequiredReplicaSetName();
        boolean boolean23 = mongoClientOptions20.isSslEnabled();
        int int24 = mongoClientOptions20.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions20, environment25);
        mongoProperties0.clearPassword();
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.clearPassword();
        java.lang.String str31 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test2474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2474");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        int int16 = mongoClientOptions13.getMaxWaitTime();
        boolean boolean17 = mongoClientOptions13.isSocketKeepAlive();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str19 = mongoProperties18.getGridFsDatabase();
        java.lang.String str20 = mongoProperties18.getGridFsDatabase();
        java.lang.String str21 = mongoProperties18.getUsername();
        mongoProperties18.setHost("hi!");
        mongoProperties18.setGridFsDatabase("hi!");
        boolean boolean26 = mongoClientOptions13.equals((java.lang.Object) mongoProperties18);
        int int27 = mongoClientOptions13.getConnectTimeout();
        int int28 = mongoClientOptions13.getMaxConnectionLifeTime();
        int int29 = mongoClientOptions13.getMinHeartbeatFrequency();
        int int30 = mongoClientOptions13.getServerSelectionTimeout();
        int int31 = mongoClientOptions13.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10000 + "'", int27 == 10000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 500 + "'", int29 == 500);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20000 + "'", int31 == 20000);
    }

    @Test
    public void test2475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2475");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        java.lang.String str16 = mongoClientOptions13.getDescription();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        boolean boolean18 = mongoClientOptions13.isSocketKeepAlive();
        int int19 = mongoClientOptions13.getConnectionsPerHost();
        java.lang.String str20 = mongoClientOptions13.getRequiredReplicaSetName();
        int int21 = mongoClientOptions13.getMinHeartbeatFrequency();
        int int22 = mongoClientOptions13.getConnectionsPerHost();
        int int23 = mongoClientOptions13.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 500 + "'", int21 == 500);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test2476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2476");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList16 = mongoClientOptions13.getCommandListeners();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions13.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder18 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxWaitTime((int) (byte) 10);
        boolean boolean27 = mongoClientOptions13.equals((java.lang.Object) builder24);
        int int28 = mongoClientOptions13.getMinConnectionsPerHost();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList29 = mongoClientOptions13.getCommandListeners();
        org.bson.codecs.configuration.CodecRegistry codecRegistry30 = mongoClientOptions13.getCodecRegistry();
        int int31 = mongoClientOptions13.getMaxWaitTime();
        int int32 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int33 = mongoClientOptions13.getSocketTimeout();
        int int34 = mongoClientOptions13.getServerSelectionTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertNotNull(commandListenerList16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(commandListenerList29);
        org.junit.Assert.assertNotNull(codecRegistry30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 120000 + "'", int31 == 120000);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test2477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2477");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str9 = mongoProperties0.getGridFsDatabase();
        java.lang.String str10 = mongoProperties0.getUsername();
        java.lang.String str11 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass12 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str13 = mongoProperties0.getUri();
        java.lang.Integer int14 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "test" + "'", str9, "test");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int14);
    }

    @Test
    public void test2478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2478");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        boolean boolean14 = mongoClientOptions13.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions13.getDbEncoderFactory();
        int int16 = mongoClientOptions13.getConnectionsPerHost();
        java.lang.String str17 = mongoClientOptions13.getRequiredReplicaSetName();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList18 = mongoClientOptions13.getCommandListeners();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(commandListenerList18);
    }

    @Test
    public void test2479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2479");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.build();
        boolean boolean8 = mongoClientOptions7.isSocketKeepAlive();
        int int9 = mongoClientOptions7.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder10 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions7);
        boolean boolean11 = mongoClientOptions7.isSslInvalidHostNameAllowed();
        boolean boolean12 = mongoClientOptions7.isSocketKeepAlive();
        java.lang.String str13 = mongoClientOptions7.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions7);
        boolean boolean15 = mongoClientOptions7.isCursorFinalizerEnabled();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions7.getReadPreference();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList17 = mongoClientOptions7.getCommandListeners();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(commandListenerList17);
    }

    @Test
    public void test2480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2480");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str2 = mongoProperties0.getDatabase();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str5 = mongoProperties0.getUri();
        com.mongodb.MongoClientOptions.Builder builder6 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        boolean boolean20 = mongoClientOptions19.isSocketKeepAlive();
        int int21 = mongoClientOptions19.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory22 = mongoClientOptions19.getDbEncoderFactory();
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions19, environment23);
        com.mongodb.MongoClientOptions.Builder builder25 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder37.build();
        int int39 = mongoClientOptions38.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory40 = mongoClientOptions38.getSocketFactory();
        int int41 = mongoClientOptions38.getMaxWaitTime();
        boolean boolean42 = mongoClientOptions38.isSocketKeepAlive();
        int int43 = mongoClientOptions38.getServerSelectionTimeout();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList44 = mongoClientOptions38.getCommandListeners();
        int int45 = mongoClientOptions38.getHeartbeatConnectTimeout();
        org.springframework.core.env.Environment environment46 = null;
        com.mongodb.MongoClient mongoClient47 = mongoProperties0.createMongoClient(mongoClientOptions38, environment46);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties48 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str49 = mongoProperties48.getGridFsDatabase();
        java.lang.String str50 = mongoProperties48.getGridFsDatabase();
        java.lang.String str51 = mongoProperties48.getUsername();
        mongoProperties48.setHost("hi!");
        mongoProperties48.setDatabase("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties56 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str57 = mongoProperties56.getGridFsDatabase();
        java.lang.String str58 = mongoProperties56.getHost();
        java.lang.String str59 = mongoProperties56.getGridFsDatabase();
        java.lang.String str60 = mongoProperties56.getMongoClientDatabase();
        java.lang.String str61 = mongoProperties56.getHost();
        java.lang.String str62 = mongoProperties56.getDatabase();
        mongoProperties56.setHost("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties65 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str66 = mongoProperties65.getGridFsDatabase();
        java.lang.String str67 = mongoProperties65.getGridFsDatabase();
        mongoProperties65.setPort((java.lang.Integer) 0);
        java.lang.String str70 = mongoProperties65.getGridFsDatabase();
        mongoProperties65.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties72 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str73 = mongoProperties72.getAuthenticationDatabase();
        mongoProperties72.setAuthenticationDatabase("hi!");
        java.lang.String str76 = mongoProperties72.getHost();
        java.lang.String str77 = mongoProperties72.getMongoClientDatabase();
        char[] charArray78 = mongoProperties72.getPassword();
        char[] charArray79 = mongoProperties72.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties80 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str81 = mongoProperties80.getGridFsDatabase();
        java.lang.String str82 = mongoProperties80.getGridFsDatabase();
        java.lang.String str83 = mongoProperties80.getUsername();
        java.lang.String str84 = mongoProperties80.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass85 = mongoProperties80.getFieldNamingStrategy();
        char[] charArray90 = new char[] { 'a', '#', '#', '4' };
        mongoProperties80.setPassword(charArray90);
        mongoProperties72.setPassword(charArray90);
        mongoProperties65.setPassword(charArray90);
        mongoProperties56.setPassword(charArray90);
        mongoProperties48.setPassword(charArray90);
        mongoProperties0.setPassword(charArray90);
        java.lang.String str97 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb://localhost/test" + "'", str5, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 120000 + "'", int21 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory22);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(socketFactory40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 120000 + "'", int41 == 120000);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(commandListenerList44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 20000 + "'", int45 == 20000);
        org.junit.Assert.assertNotNull(mongoClient47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "test" + "'", str60, "test");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "test" + "'", str77, "test");
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(charArray79);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNull(wildcardClass85);
        org.junit.Assert.assertNotNull(charArray90);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray90), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray90), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray90), "[a, #, #, 4]");
        org.junit.Assert.assertNull(str97);
    }

    @Test
    public void test2481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2481");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.sslInvalidHostNameAllowed(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.localThreshold(120000);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory38 = mongoClientOptions36.getSocketFactory();
        int int39 = mongoClientOptions36.getMaxWaitTime();
        boolean boolean40 = mongoClientOptions36.isSocketKeepAlive();
        int int41 = mongoClientOptions36.getServerSelectionTimeout();
        java.util.List<com.mongodb.event.CommandListener> commandListenerList42 = mongoClientOptions36.getCommandListeners();
        java.lang.String str43 = mongoClientOptions36.getDescription();
        com.mongodb.WriteConcern writeConcern44 = mongoClientOptions36.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder45 = builder22.writeConcern(writeConcern44);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.socketTimeout((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(socketFactory38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 120000 + "'", int39 == 120000);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(commandListenerList42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNotNull(writeConcern44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test2482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2482");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        org.bson.codecs.configuration.CodecRegistry codecRegistry15 = mongoClientOptions13.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        org.bson.codecs.configuration.CodecRegistry codecRegistry17 = mongoClientOptions13.getCodecRegistry();
        com.mongodb.ReadConcern readConcern18 = mongoClientOptions13.getReadConcern();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder24 = builder23.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder26 = builder23.maxWaitTime(52);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.serverSelectionTimeout(97);
        boolean boolean29 = mongoClientOptions13.equals((java.lang.Object) 97);
        com.mongodb.DBDecoderFactory dBDecoderFactory30 = mongoClientOptions13.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(codecRegistry15);
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertNotNull(codecRegistry17);
        org.junit.Assert.assertNotNull(readConcern18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory30);
    }

    @Test
    public void test2483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2483");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder15.build();
        int int17 = mongoClientOptions16.getMaxConnectionIdleTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions16.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder19 = builder8.dbDecoderFactory(dBDecoderFactory18);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionIdleTime(120000);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.minConnectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketTimeout(120000);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
    }

    @Test
    public void test2484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2484");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionLifeTime(10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold(52);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2485");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder2.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder27.build();
        com.mongodb.MongoClientOptions.Builder builder30 = builder27.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder31 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder41 = builder35.heartbeatConnectTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder43.build();
        org.bson.codecs.configuration.CodecRegistry codecRegistry45 = mongoClientOptions44.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder46 = builder30.codecRegistry(codecRegistry45);
        com.mongodb.MongoClientOptions.Builder builder47 = builder2.codecRegistry(codecRegistry45);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.serverSelectionTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.maxConnectionLifeTime((int) (byte) 0);
        com.mongodb.ReadPreference readPreference52 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder53 = builder51.readPreference(readPreference52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: readPreference can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertNotNull(codecRegistry45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test2486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2486");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.description("");
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder7 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions20.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder23 = builder2.readPreference(readPreference22);
        com.mongodb.MongoClientOptions.Builder builder25 = builder2.localThreshold(100);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.connectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        com.mongodb.MongoClientOptions.Builder builder41 = builder38.description("test");
        com.mongodb.MongoClientOptions.Builder builder43 = builder38.maxConnectionLifeTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions57 = builder56.build();
        com.mongodb.MongoClientOptions.Builder builder58 = com.mongodb.MongoClientOptions.builder(mongoClientOptions57);
        int int59 = mongoClientOptions57.getHeartbeatConnectTimeout();
        int int60 = mongoClientOptions57.getThreadsAllowedToBlockForConnectionMultiplier();
        int int61 = mongoClientOptions57.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean62 = mongoClientOptions57.isSslEnabled();
        com.mongodb.MongoClientOptions.Builder builder63 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions57);
        com.mongodb.DBEncoderFactory dBEncoderFactory64 = mongoClientOptions57.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder65 = builder38.dbEncoderFactory(dBEncoderFactory64);
        com.mongodb.MongoClientOptions.Builder builder66 = builder29.dbEncoderFactory(dBEncoderFactory64);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mongoClientOptions57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 20000 + "'", int59 == 20000);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test2487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2487");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass4 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Integer int5 = mongoProperties0.getPort();
        mongoProperties0.setHost("hi!");
        java.lang.String str8 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setHost("hi!");
        java.lang.String str11 = mongoProperties0.getHost();
        char[] charArray12 = mongoProperties0.getPassword();
        java.lang.String str13 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test2488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2488");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        int int14 = mongoClientOptions13.getHeartbeatSocketTimeout();
        boolean boolean15 = mongoClientOptions13.isAlwaysUseMBeans();
        int int16 = mongoClientOptions13.getMaxConnectionLifeTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry17 = mongoClientOptions13.getCodecRegistry();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions13.getReadPreference();
        int int19 = mongoClientOptions13.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(codecRegistry17);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
    }

    @Test
    public void test2489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2489");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.sslEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.localThreshold(52);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder10.build();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions15.getReadPreference();
        int int17 = mongoClientOptions15.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
    }

    @Test
    public void test2490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2490");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketKeepAlive(false);
        com.mongodb.event.CommandListener commandListener17 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder18 = builder14.addCommandListener(commandListener17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: commandListener can not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2491");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setAuthenticationDatabase("");
        char[] charArray4 = mongoProperties0.getPassword();
        java.lang.String str5 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.clearPassword();
        mongoProperties7.setUsername("hi!");
        mongoProperties7.setPort((java.lang.Integer) 52);
        mongoProperties7.setGridFsDatabase("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties15.setHost("");
        java.lang.Integer int18 = mongoProperties15.getPort();
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties15.createMongoClient(mongoClientOptions19, environment20);
        mongoProperties15.setGridFsDatabase("");
        java.lang.String str24 = mongoProperties15.getMongoClientDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties25 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str26 = mongoProperties25.getGridFsDatabase();
        java.lang.String str27 = mongoProperties25.getHost();
        java.lang.String str28 = mongoProperties25.getGridFsDatabase();
        java.lang.String str29 = mongoProperties25.getMongoClientDatabase();
        java.lang.String str30 = mongoProperties25.getHost();
        java.lang.String str31 = mongoProperties25.getDatabase();
        java.lang.String str32 = mongoProperties25.getHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties33 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str34 = mongoProperties33.getGridFsDatabase();
        java.lang.String str35 = mongoProperties33.getGridFsDatabase();
        java.lang.String str36 = mongoProperties33.getUsername();
        java.lang.String str37 = mongoProperties33.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass38 = mongoProperties33.getFieldNamingStrategy();
        char[] charArray43 = new char[] { 'a', '#', '#', '4' };
        mongoProperties33.setPassword(charArray43);
        mongoProperties25.setPassword(charArray43);
        mongoProperties15.setPassword(charArray43);
        mongoProperties7.setPassword(charArray43);
        mongoProperties0.setPassword(charArray43);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(charArray4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "test" + "'", str24, "test");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "test" + "'", str29, "test");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "a##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "a##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[a, #, #, 4]");
    }

    @Test
    public void test2492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2492");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.sslInvalidHostNameAllowed(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.connectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.maxWaitTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder33 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder45.build();
        com.mongodb.MongoClientOptions.Builder builder47 = com.mongodb.MongoClientOptions.builder(mongoClientOptions46);
        java.lang.String str48 = mongoClientOptions46.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry49 = mongoClientOptions46.getCodecRegistry();
        com.mongodb.MongoClientOptions.Builder builder50 = builder28.codecRegistry(codecRegistry49);
        com.mongodb.MongoClientOptions.Builder builder51 = builder19.codecRegistry(codecRegistry49);
        com.mongodb.MongoClientOptions.Builder builder53 = builder19.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder54 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder60 = builder56.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions67 = builder66.build();
        int int68 = mongoClientOptions67.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory69 = mongoClientOptions67.getSocketFactory();
        boolean boolean70 = mongoClientOptions67.isSslInvalidHostNameAllowed();
        java.lang.String str71 = mongoClientOptions67.getDescription();
        java.lang.String str72 = mongoClientOptions67.getRequiredReplicaSetName();
        java.lang.String str73 = mongoClientOptions67.getRequiredReplicaSetName();
        int int74 = mongoClientOptions67.getMinHeartbeatFrequency();
        int int75 = mongoClientOptions67.getServerSelectionTimeout();
        int int76 = mongoClientOptions67.getConnectionsPerHost();
        int int77 = mongoClientOptions67.getMaxConnectionLifeTime();
        com.mongodb.WriteConcern writeConcern78 = mongoClientOptions67.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder79 = builder53.writeConcern(writeConcern78);
        com.mongodb.MongoClientOptions.Builder builder80 = builder12.writeConcern(writeConcern78);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(mongoClientOptions67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(socketFactory69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 500 + "'", int74 == 500);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(writeConcern78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test2493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2493");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxWaitTime(20000);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionLifeTime((int) 'a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test2494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2494");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder11 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        int int25 = mongoClientOptions24.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions24.getSocketFactory();
        int int27 = mongoClientOptions24.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory28 = mongoClientOptions24.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder29 = builder8.dbDecoderFactory(dBDecoderFactory28);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatSocketTimeout((int) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 120000 + "'", int27 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test2495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2495");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getGridFsDatabase();
        java.lang.String str2 = mongoProperties0.getGridFsDatabase();
        java.lang.String str3 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setHost("");
        java.lang.Class<?> wildcardClass13 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setPort((java.lang.Integer) 0);
        java.lang.String str16 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "test" + "'", str10, "test");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test2496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2496");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.serverSelectionTimeout((int) (byte) -1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.connectTimeout((int) '4');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test2497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2497");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatSocketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketKeepAlive(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder22 = builder18.localThreshold((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: state should be: localThreshold must be >= 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test2498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2498");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder(mongoClientOptions13);
        java.lang.String str15 = mongoClientOptions13.getDescription();
        org.bson.codecs.configuration.CodecRegistry codecRegistry16 = mongoClientOptions13.getCodecRegistry();
        boolean boolean17 = mongoClientOptions13.isAlwaysUseMBeans();
        boolean boolean18 = mongoClientOptions13.isSslInvalidHostNameAllowed();
        com.mongodb.MongoClientOptions.Builder builder19 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketTimeout((-1));
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        boolean boolean26 = mongoClientOptions13.equals((java.lang.Object) "");
        com.mongodb.MongoClientOptions.Builder builder27 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions13);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder32 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.threadsAllowedToBlockForConnectionMultiplier(1);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.connectTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder47 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder53 = builder49.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions60 = builder59.build();
        int int61 = mongoClientOptions60.getHeartbeatSocketTimeout();
        boolean boolean62 = mongoClientOptions60.isAlwaysUseMBeans();
        int int63 = mongoClientOptions60.getMaxConnectionLifeTime();
        org.bson.codecs.configuration.CodecRegistry codecRegistry64 = mongoClientOptions60.getCodecRegistry();
        com.mongodb.ReadPreference readPreference65 = mongoClientOptions60.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder66 = builder44.readPreference(readPreference65);
        com.mongodb.MongoClientOptions.Builder builder67 = builder31.readPreference(readPreference65);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(codecRegistry16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(mongoClientOptions60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(codecRegistry64);
        org.junit.Assert.assertNotNull(readPreference65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test2499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2499");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.maxWaitTime((-1));
        com.mongodb.MongoClientOptions.Builder builder8 = builder0.serverSelectionTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder0.maxConnectionLifeTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.minHeartbeatFrequency(97);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2500");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.minConnectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder13 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.description("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.serverSelectionTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.socketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder22 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder34.build();
        boolean boolean36 = mongoClientOptions35.isSocketKeepAlive();
        int int37 = mongoClientOptions35.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory38 = mongoClientOptions35.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder39 = builder21.dbEncoderFactory(dBEncoderFactory38);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder44 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.sslEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.serverSelectionTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions57 = builder56.build();
        int int58 = mongoClientOptions57.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference59 = mongoClientOptions57.getReadPreference();
        int int60 = mongoClientOptions57.getMinConnectionsPerHost();
        boolean boolean61 = mongoClientOptions57.isSslInvalidHostNameAllowed();
        com.mongodb.DBDecoderFactory dBDecoderFactory62 = mongoClientOptions57.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder63 = builder41.dbDecoderFactory(dBDecoderFactory62);
        com.mongodb.MongoClientOptions.Builder builder64 = builder12.dbDecoderFactory(dBDecoderFactory62);
        com.mongodb.MongoClientOptions.Builder builder65 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.heartbeatSocketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions72 = builder71.build();
        boolean boolean73 = mongoClientOptions72.isSocketKeepAlive();
        int int74 = mongoClientOptions72.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder75 = new com.mongodb.MongoClientOptions.Builder(mongoClientOptions72);
        boolean boolean76 = mongoClientOptions72.isSslInvalidHostNameAllowed();
        int int77 = mongoClientOptions72.getServerSelectionTimeout();
        int int78 = mongoClientOptions72.getMaxWaitTime();
        int int79 = mongoClientOptions72.getMinConnectionsPerHost();
        com.mongodb.DBDecoderFactory dBDecoderFactory80 = mongoClientOptions72.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder81 = builder12.dbDecoderFactory(dBDecoderFactory80);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 120000 + "'", int37 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mongoClientOptions57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(readPreference59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(mongoClientOptions72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10000 + "'", int74 == 10000);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 30000 + "'", int77 == 30000);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 120000 + "'", int78 == 120000);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory80);
        org.junit.Assert.assertNotNull(builder81);
    }
}

