/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 03:25:10 GMT 2021
 */

package retrofit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import android.net.Uri;
import android.os.Parcel;
import android.os.Parcelable;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.google.gson.Gson;
import com.squareup.okhttp.ConnectionPool;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.wire.Wire;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.net.ResponseCache;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientException;
import java.sql.SQLTransactionRollbackException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.concurrent.Callable;
import java.util.concurrent.Delayed;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpParams;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import retrofit.ErrorHandler;
import retrofit.Profiler;
import retrofit.RequestBuilder;
import retrofit.RequestInterceptor;
import retrofit.RequestInterceptorTape;
import retrofit.RestAdapter;
import retrofit.RestMethodInfo;
import retrofit.Server;
import retrofit.android.AndroidLog;
import retrofit.client.ApacheClient;
import retrofit.client.Client;
import retrofit.client.Header;
import retrofit.client.OkClient;
import retrofit.client.Request;
import retrofit.client.Response;
import retrofit.client.UrlConnectionClient;
import retrofit.converter.Converter;
import retrofit.converter.GsonConverter;
import retrofit.converter.JacksonConverter;
import retrofit.converter.ProtoConverter;
import retrofit.converter.WireConverter;
import retrofit.mime.FormUrlEncodedTypedOutput;
import retrofit.mime.MultipartTypedOutput;
import retrofit.mime.TypedByteArray;
import retrofit.mime.TypedOutput;
import retrofit.mime.TypedString;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestAdapter_ESTest extends RestAdapter_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) okClient0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient(restAdapter_Builder0.clientProvider);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      String string0 = "T\"sQu)^Dl 34$|*vmne";
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setServer(string0);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      
      RestAdapter restAdapter0 = restAdapter_Builder3.build();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_RestHandler0);
      
      restAdapter_Builder2.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      
      int int0 = 925;
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = null;
      String string1 = "Request line may not be null";
      String string2 = "";
      List<Header> list0 = null;
      FormUrlEncodedTypedOutput formUrlEncodedTypedOutput0 = new FormUrlEncodedTypedOutput();
      assertNull(formUrlEncodedTypedOutput0.fileName());
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      assertEquals(0L, formUrlEncodedTypedOutput0.length());
      assertNotNull(formUrlEncodedTypedOutput0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      String string0 = "`,VA#1N>+&wt`PaF";
      Server server0 = new Server(string0);
      assertEquals("`,VA#1N>+&wt`PaF", server0.getUrl());
      assertEquals("default", server0.getName());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 1496;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_CallerRunsPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      deserializationFeatureArray0[2] = deserializationFeature1;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      JacksonConverter jacksonConverter0 = new JacksonConverter(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(jacksonConverter0);
      
      Profiler<BigIntegerNode> profiler0 = null;
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptor0, jacksonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("`,VA#1N>+&wt`PaF", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      Vector<Header> vector0 = new Vector<Header>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      TypedString typedString0 = new TypedString(restAdapter0.IDLE_THREAD_NAME);
      assertEquals("`,VA#1N>+&wt`PaF", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNull(typedString0.fileName());
      assertEquals(13L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNotNull(typedString0);
      
      Request request0 = new Request(string0, string0, vector0, typedString0);
      assertEquals("`,VA#1N>+&wt`PaF", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNull(typedString0.fileName());
      assertEquals(13L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("`,VA#1N>+&wt`PaF", request0.getMethod());
      assertEquals("`,VA#1N>+&wt`PaF", request0.getUrl());
      assertNotNull(request0);
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals("`,VA#1N>+&wt`PaF", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNull(typedString0.fileName());
      assertEquals(13L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("`,VA#1N>+&wt`PaF", request0.getMethod());
      assertEquals("`,VA#1N>+&wt`PaF", request0.getUrl());
      assertEquals("`,VA#1N>+&wt`PaF", request1.getUrl());
      assertEquals("`,VA#1N>+&wt`PaF", request1.getMethod());
      assertNotNull(request1);
      assertSame(request0, request1);
      assertSame(request1, request0);
      
      Request request2 = restAdapter0.logAndReplaceRequest(request1);
      assertEquals("`,VA#1N>+&wt`PaF", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNull(typedString0.fileName());
      assertEquals(13L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("`,VA#1N>+&wt`PaF", request0.getMethod());
      assertEquals("`,VA#1N>+&wt`PaF", request0.getUrl());
      assertEquals("`,VA#1N>+&wt`PaF", request1.getUrl());
      assertEquals("`,VA#1N>+&wt`PaF", request1.getMethod());
      assertEquals("`,VA#1N>+&wt`PaF", request2.getMethod());
      assertEquals("`,VA#1N>+&wt`PaF", request2.getUrl());
      assertNotNull(request2);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request1, request2);
      assertSame(request1, request0);
      assertSame(request2, request0);
      assertSame(request2, request1);
      
      String string1 = "Ki&8iIcqgk[a,#";
      int int1 = 2098677201;
      String string2 = "";
      Response response0 = new Response(int1, string2, vector0, typedString0);
      assertEquals("", response0.getReason());
      assertEquals(2098677201, response0.getStatus());
      assertEquals("`,VA#1N>+&wt`PaF", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNull(typedString0.fileName());
      assertEquals(13L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNotNull(response0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      Response response1 = restAdapter0.logAndReplaceResponse(string1, response0, int0);
      assertEquals("", response0.getReason());
      assertEquals(2098677201, response0.getStatus());
      assertEquals(2098677201, response1.getStatus());
      assertEquals("", response1.getReason());
      assertEquals("`,VA#1N>+&wt`PaF", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNull(typedString0.fileName());
      assertEquals(13L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNotNull(response1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(response0, response1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(response1, response0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int1 == int0);
      
      long long0 = 0L;
      Response response2 = restAdapter0.logAndReplaceResponse(server0.DEFAULT_NAME, response1, long0);
      assertEquals("", response0.getReason());
      assertEquals(2098677201, response0.getStatus());
      assertEquals(2098677201, response1.getStatus());
      assertEquals("", response1.getReason());
      assertEquals("`,VA#1N>+&wt`PaF", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(2098677201, response2.getStatus());
      assertEquals("", response2.getReason());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNull(typedString0.fileName());
      assertEquals(13L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNotNull(response2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(response0, response1);
      assertSame(response0, response2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(response1, response2);
      assertSame(response1, response0);
      assertSame(response2, response0);
      assertSame(response2, response1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      String string0 = "@zv:B'";
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      ResponseCache responseCache0 = ResponseCache.getDefault();
      assertNull(responseCache0);
      
      OkHttpClient okHttpClient1 = new OkHttpClient();
      assertEquals(0, okHttpClient1.getReadTimeout());
      assertEquals(0, okHttpClient1.getConnectTimeout());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient2 = new OkHttpClient();
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient2.getReadTimeout());
      assertEquals(0, okHttpClient2.getConnectTimeout());
      assertNotNull(okHttpClient2);
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = "K'Mi9i*vJaLO5";
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string1);
      assertNotSame(string1, string0);
      assertFalse(boolean1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      
      Server server0 = new Server(string0, string0);
      assertEquals("@zv:B'", server0.getName());
      assertEquals("@zv:B'", server0.getUrl());
      assertNotNull(server0);
      assertFalse(string0.equals((Object)string1));
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertEquals("@zv:B'", server0.getName());
      assertEquals("@zv:B'", server0.getUrl());
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertFalse(string0.equals((Object)string1));
      
      Profiler<Callable<String>> profiler0 = (Profiler<Callable<String>>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      restAdapter_Builder0.log = restAdapter0.log;
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      String string2 = "";
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string3 = "";
      TypedString typedString0 = new TypedString(string3);
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertNotNull(typedString0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      Request request0 = new Request(string0, string2, arrayList0, typedString0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertEquals("", request0.getUrl());
      assertEquals("@zv:B'", request0.getMethod());
      assertNotNull(request0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertEquals("", request0.getUrl());
      assertEquals("@zv:B'", request0.getMethod());
      assertEquals("", request1.getUrl());
      assertEquals("@zv:B'", request1.getMethod());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(request1);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      
      Request request2 = restAdapter0.logAndReplaceRequest(request1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertEquals("", request0.getUrl());
      assertEquals("@zv:B'", request0.getMethod());
      assertEquals("", request1.getUrl());
      assertEquals("@zv:B'", request1.getMethod());
      assertEquals("@zv:B'", request2.getMethod());
      assertEquals("", request2.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(request2);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request1, request2);
      assertSame(request1, request0);
      assertSame(request2, request1);
      assertSame(request2, request0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      
      int int0 = 1596;
      List<Header> list0 = request0.getHeaders();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertEquals("", request0.getUrl());
      assertEquals("@zv:B'", request0.getMethod());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      
      Response response0 = new Response(int0, string0, list0, typedString0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertEquals("", request0.getUrl());
      assertEquals("@zv:B'", request0.getMethod());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("@zv:B'", response0.getReason());
      assertEquals(1596, response0.getStatus());
      assertNotNull(response0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      
      Response response1 = restAdapter0.logAndReplaceResponse(string0, response0, int0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertEquals("", request0.getUrl());
      assertEquals("@zv:B'", request0.getMethod());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("@zv:B'", response0.getReason());
      assertEquals(1596, response0.getStatus());
      assertEquals("@zv:B'", response1.getReason());
      assertEquals(1596, response1.getStatus());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(response1);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(response0, response1);
      assertSame(response1, response0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      
      String string4 = "";
      RestMethodInfo restMethodInfo0 = null;
      Request request3 = restAdapter0.logAndReplaceRequest(request1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertEquals("", request0.getUrl());
      assertEquals("@zv:B'", request0.getMethod());
      assertEquals("", request1.getUrl());
      assertEquals("@zv:B'", request1.getMethod());
      assertEquals("@zv:B'", request3.getMethod());
      assertEquals("", request3.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(request3);
      assertSame(string2, string3);
      assertSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertSame(string3, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request0, request3);
      assertSame(request1, request2);
      assertSame(request1, request3);
      assertSame(request1, request0);
      assertSame(request3, request0);
      assertSame(request3, request2);
      assertSame(request3, request1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      
      // Undeclared exception!
      try { 
        RestAdapter.getRequestInfo(string4, restMethodInfo0, request3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      String string0 = "@zv:B'";
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      ResponseCache responseCache0 = ResponseCache.getDefault();
      assertNull(responseCache0);
      
      OkHttpClient okHttpClient1 = new OkHttpClient();
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient1.getConnectTimeout());
      assertEquals(0, okHttpClient1.getReadTimeout());
      assertNotNull(okHttpClient1);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient2 = new OkHttpClient();
      assertEquals(0, okHttpClient2.getConnectTimeout());
      assertEquals(0, okHttpClient2.getReadTimeout());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      
      Server server0 = new Server(string0, string0);
      assertEquals("@zv:B'", server0.getUrl());
      assertEquals("@zv:B'", server0.getName());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertEquals("@zv:B'", server0.getUrl());
      assertEquals("@zv:B'", server0.getName());
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      Profiler<Callable<String>> profiler0 = (Profiler<Callable<String>>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      String string1 = "";
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string2 = "";
      TypedString typedString0 = new TypedString(string2);
      assertNull(typedString0.fileName());
      assertEquals(0L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNotNull(typedString0);
      assertFalse(string2.equals((Object)string0));
      
      Request request0 = new Request(string0, string1, arrayList0, typedString0);
      assertEquals("@zv:B'", request0.getMethod());
      assertEquals("", request0.getUrl());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(typedString0.fileName());
      assertEquals(0L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNotNull(request0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals("@zv:B'", request0.getMethod());
      assertEquals("", request0.getUrl());
      assertEquals("@zv:B'", request1.getMethod());
      assertEquals("", request1.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(typedString0.fileName());
      assertEquals(0L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNotNull(request1);
      assertSame(request0, request1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(request1, request0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      
      Request request2 = restAdapter0.logAndReplaceRequest(request1);
      assertEquals("@zv:B'", request0.getMethod());
      assertEquals("", request0.getUrl());
      assertEquals("@zv:B'", request1.getMethod());
      assertEquals("", request1.getUrl());
      assertEquals("", request2.getUrl());
      assertEquals("@zv:B'", request2.getMethod());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(typedString0.fileName());
      assertEquals(0L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNotNull(request2);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(request1, request2);
      assertSame(request1, request0);
      assertSame(request2, request1);
      assertSame(request2, request0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = 1596;
      List<Header> list0 = request0.getHeaders();
      assertEquals("@zv:B'", request0.getMethod());
      assertEquals("", request0.getUrl());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(typedString0.fileName());
      assertEquals(0L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNotNull(list0);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      
      Response response0 = new Response(int0, string0, list0, typedString0);
      assertEquals("@zv:B'", request0.getMethod());
      assertEquals("", request0.getUrl());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("@zv:B'", response0.getReason());
      assertEquals(1596, response0.getStatus());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(typedString0.fileName());
      assertEquals(0L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNotNull(response0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      
      Response response1 = restAdapter0.logAndReplaceResponse(string0, response0, int0);
      assertEquals("@zv:B'", request0.getMethod());
      assertEquals("", request0.getUrl());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("@zv:B'", response0.getReason());
      assertEquals(1596, response0.getStatus());
      assertEquals("@zv:B'", response1.getReason());
      assertEquals(1596, response1.getStatus());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(typedString0.fileName());
      assertEquals(0L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNotNull(response1);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(response0, response1);
      assertSame(response1, response0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = "";
      RestMethodInfo restMethodInfo0 = null;
      Request request3 = restAdapter0.logAndReplaceRequest(request1);
      assertEquals("@zv:B'", request0.getMethod());
      assertEquals("", request0.getUrl());
      assertEquals("@zv:B'", request1.getMethod());
      assertEquals("", request1.getUrl());
      assertEquals("", request3.getUrl());
      assertEquals("@zv:B'", request3.getMethod());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(typedString0.fileName());
      assertEquals(0L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNotNull(request3);
      assertSame(request0, request1);
      assertSame(request0, request3);
      assertSame(request0, request2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(request1, request2);
      assertSame(request1, request0);
      assertSame(request1, request3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(request3, request2);
      assertSame(request3, request1);
      assertSame(request3, request0);
      assertSame(string1, string2);
      assertSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        RestAdapter.getRequestInfo(string3, restMethodInfo0, request3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setErrorHandler(errorHandler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setProfiler(restAdapter_Builder0.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setConverter(restAdapter_Builder1.converter);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "a\\H}V[06\"pdyRFv-KVgv";
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptorTape0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string1 = "e5ls1fsp#>!$KhmB";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string1);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setExecutors(restAdapter_Builder1.callbackExecutor, restAdapter_Builder2.httpExecutor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestMethodInfo restMethodInfo0 = null;
      RequestBuilder requestBuilder0 = null;
      try {
        requestBuilder0 = new RequestBuilder(restAdapter0.converter, restMethodInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ProtoConverter protoConverter0 = new ProtoConverter();
      assertNotNull(protoConverter0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(protoConverter0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) okClient0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_Builder0.logLevel);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder3.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "m6z=H~*#PO*:Y";
      int int0 = (-5533);
      Random.setNextRandom(int0);
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      Class<Header> class0 = Header.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      Class<Delayed> class0 = Delayed.class;
      Delayed delayed0 = restAdapter0.create(class0);
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(delayed0);
      
      String string0 = " ";
      MockThrowable mockThrowable0 = new MockThrowable(string0);
      assertNotNull(mockThrowable0);
      
      String string1 = "Response content type was not a proto: ";
      // Undeclared exception!
      try { 
        restAdapter0.logException(mockThrowable0, string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<Header> profiler0 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(restAdapter_Builder0.server);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(forkJoinPool0, forkJoinPool0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setErrorHandler(restAdapter_Builder0.errorHandler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      assertFalse(restAdapter_LogLevel0.log());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel0);
      
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertFalse(restAdapter_LogLevel0.log());
      assertFalse(boolean0);
      
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertNotNull(okHttpClient0);
      
      int int0 = (-2104);
      ConnectionPool connectionPool0 = new ConnectionPool(int0, int0);
      assertEquals(0, connectionPool0.getConnectionCount());
      assertNotNull(connectionPool0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(connectionPool0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertEquals(0, okHttpClient1.getReadTimeout());
      assertEquals(0, okHttpClient1.getConnectTimeout());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.HEADERS;
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      restAdapter0.clientProvider = client_Provider0;
      assertNull(restAdapter0.getLogLevel());
      
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
      try { 
        restAdapter0.setLogLevel(restAdapter0.logLevel);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log level may not be null.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      long long0 = 0L;
      String string0 = "Only interface endpoint definitions are supported.";
      RestMethodInfo restMethodInfo0 = null;
      String string1 = "M wu{$";
      List<Header> list0 = null;
      FormUrlEncodedTypedOutput formUrlEncodedTypedOutput0 = new FormUrlEncodedTypedOutput();
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      assertNull(formUrlEncodedTypedOutput0.fileName());
      assertEquals(0L, formUrlEncodedTypedOutput0.length());
      assertNotNull(formUrlEncodedTypedOutput0);
      
      String string2 = "r5`PY!{F$>";
      String string3 = "android.intent.action.UMS_DISCONNECTED";
      formUrlEncodedTypedOutput0.addField(string2, string3);
      assertEquals(59L, formUrlEncodedTypedOutput0.length());
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      assertNull(formUrlEncodedTypedOutput0.fileName());
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      Request request0 = new Request(string0, string1, list0, formUrlEncodedTypedOutput0);
      assertEquals(59L, formUrlEncodedTypedOutput0.length());
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      assertNull(formUrlEncodedTypedOutput0.fileName());
      assertEquals("M wu{$", request0.getUrl());
      assertEquals("Only interface endpoint definitions are supported.", request0.getMethod());
      assertNotNull(request0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        RestAdapter.getRequestInfo(string0, restMethodInfo0, request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      int int0 = 14;
      Random.setNextRandom(int0);
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "w'gF@s4";
      AndroidLog androidLog0 = new AndroidLog(string0);
      assertNotNull(androidLog0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(androidLog0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setServer(restAdapter_Builder0.server);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setClient(restAdapter_Builder0.clientProvider);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      String string0 = "Retrofit-";
      RestAdapter.THREAD_PREFIX = string0;
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter_RestHandler0);
      
      RestMethodInfo restMethodInfo0 = null;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) restAdapter0;
      // Undeclared exception!
      try { 
        restAdapter_RestHandler0.invokeRequest(restAdapter0.requestInterceptor, restMethodInfo0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter$RestHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      long long0 = 2354L;
      System.setCurrentTimeMillis(long0);
      EvoSuiteFile evoSuiteFile0 = null;
      byte byte0 = (byte) (-74);
      byte byte1 = (byte)46;
      byte byte2 = (byte)107;
      byte byte3 = (byte)9;
      byte byte4 = (byte)6;
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = restAdapter0.create(class0);
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(annotation0);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      assertTrue(restAdapter_LogLevel0.log());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter_LogLevel0);
      
      String string0 = "android.intent.action.MEDIA_EJECT";
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.NONE;
      assertFalse(restAdapter_LogLevel1.log());
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel1);
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertTrue(restAdapter_LogLevel0.log());
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertTrue(boolean0);
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setLogLevel(restAdapter0.logLevel);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log level may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      long long0 = (-377L);
      System.setCurrentTimeMillis(long0);
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptorTape0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setExecutors(forkJoinPool0, restAdapter_Builder0.httpExecutor);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder3 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder3);
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      
      restAdapter_Builder0.profiler = restAdapter_Builder2.profiler;
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setLog(restAdapter_Builder2.log);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      restAdapter0.logLevel = restAdapter_LogLevel0;
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(restAdapter0.logLevel.log());
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = restAdapter0.getLogLevel();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(restAdapter_LogLevel1.log());
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel1);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      restAdapter0.logLevel = restAdapter_LogLevel0;
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertTrue(restAdapter0.logLevel.log());
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.NONE;
      restAdapter0.logLevel = restAdapter_LogLevel1;
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(restAdapter0.logLevel.log());
      
      int int0 = 985;
      Random.setNextRandom(int0);
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      Random.setNextRandom(int0);
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      restAdapter_Log0.log(restAdapter0.IDLE_THREAD_NAME);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_RestHandler0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Method method0 = null;
      try { 
        restAdapter_RestHandler0.invoke(object0, method0, restAdapter_LogLevelArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter$RestHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client client0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setClient(client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      restAdapter0.logLevel = restAdapter_LogLevel0;
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertTrue(restAdapter0.logLevel.log());
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.FULL;
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setRequestInterceptor(restAdapter0.requestInterceptor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      String string0 = "Log may not be null.";
      String string1 = "";
      Server server0 = new Server(string0, string1);
      assertEquals("", server0.getName());
      assertEquals("Log may not be null.", server0.getUrl());
      assertNotNull(server0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      int int0 = 257;
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_CallerRunsPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      ProtoConverter protoConverter0 = new ProtoConverter();
      assertNotNull(protoConverter0);
      
      Profiler<Object> profiler0 = (Profiler<Object>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, scheduledThreadPoolExecutor0, requestInterceptor0, protoConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("", server0.getName());
      assertEquals("Log may not be null.", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      int int1 = 1412;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(string0, string0, int1);
      assertEquals(1412, sQLNonTransientException0.getErrorCode());
      assertEquals("Log may not be null.", sQLNonTransientException0.getSQLState());
      assertEquals("Log may not be null.", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: Log may not be null.", sQLNonTransientException0.toString());
      assertNotNull(sQLNonTransientException0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      
      restAdapter0.logException(sQLNonTransientException0, server0.DEFAULT_NAME);
      assertEquals(1412, sQLNonTransientException0.getErrorCode());
      assertEquals("Log may not be null.", sQLNonTransientException0.getSQLState());
      assertEquals("Log may not be null.", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: Log may not be null.", sQLNonTransientException0.toString());
      assertEquals("", server0.getName());
      assertEquals("Log may not be null.", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0.DEFAULT_NAME);
      assertEquals("", server0.getName());
      assertEquals("Log may not be null.", server0.getUrl());
      assertNotNull(restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setErrorHandler(restAdapter_Builder0.errorHandler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      String string0 = "";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 990;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int0);
      assertNotNull(forkJoinPool0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      Converter converter0 = null;
      Profiler<Runnable> profiler0 = (Profiler<Runnable>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, converter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_RestHandler0);
      
      String string1 = "";
      String string2 = "retrofit.RestAdapter$Log$1";
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      MultipartTypedOutput multipartTypedOutput0 = new MultipartTypedOutput();
      assertNull(multipartTypedOutput0.fileName());
      assertEquals(42L, multipartTypedOutput0.length());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertNotNull(multipartTypedOutput0);
      
      Request request0 = new Request(string1, string2, arrayList0, multipartTypedOutput0);
      assertNull(multipartTypedOutput0.fileName());
      assertEquals(42L, multipartTypedOutput0.length());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertEquals("retrofit.RestAdapter$Log$1", request0.getUrl());
      assertEquals("", request0.getMethod());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(request0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertNull(multipartTypedOutput0.fileName());
      assertEquals(42L, multipartTypedOutput0.length());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertEquals("retrofit.RestAdapter$Log$1", request0.getUrl());
      assertEquals("", request0.getMethod());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("retrofit.RestAdapter$Log$1", request1.getUrl());
      assertEquals("", request1.getMethod());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(request1);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(request0, request1);
      assertNotSame(request1, request0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(request1.equals((Object)request0));
      
      Request request2 = restAdapter0.logAndReplaceRequest(request1);
      assertNull(multipartTypedOutput0.fileName());
      assertEquals(42L, multipartTypedOutput0.length());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertEquals("retrofit.RestAdapter$Log$1", request0.getUrl());
      assertEquals("", request0.getMethod());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("retrofit.RestAdapter$Log$1", request1.getUrl());
      assertEquals("", request1.getMethod());
      assertEquals("", request2.getMethod());
      assertEquals("retrofit.RestAdapter$Log$1", request2.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(request2);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(request0, request2);
      assertNotSame(request0, request1);
      assertSame(request1, request2);
      assertNotSame(request1, request0);
      assertSame(request2, request1);
      assertNotSame(request2, request0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(request0.equals((Object)request1));
      assertFalse(request1.equals((Object)request0));
      assertFalse(request2.equals((Object)request0));
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      // Undeclared exception!
      try { 
        restAdapter0.setLogLevel(restAdapter_LogLevel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log level may not be null.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) okClient0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptorTape0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setClient(restAdapter_Builder0.clientProvider);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setConverter(restAdapter0.converter);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ProtoConverter protoConverter0 = new ProtoConverter();
      assertNotNull(protoConverter0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(protoConverter0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      int int0 = 164;
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_CallerRunsPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(restAdapter_Builder1.server);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      WireConverter wireConverter0 = new WireConverter();
      assertNotNull(wireConverter0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(wireConverter0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setRequestInterceptor(requestInterceptor0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      restAdapter_Builder2.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      
      Executor executor0 = null;
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder3.clientProvider, executor0, restAdapter_Builder2.callbackExecutor, restAdapter_Builder3.requestInterceptor, restAdapter_Builder1.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder2.log, restAdapter_LogLevel0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      Class<Header> class0 = Header.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "UJHhhRS+LMyM";
      Server server0 = new Server(string0, string0);
      assertEquals("UJHhhRS+LMyM", server0.getName());
      assertEquals("UJHhhRS+LMyM", server0.getUrl());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertEquals("UJHhhRS+LMyM", server0.getName());
      assertEquals("UJHhhRS+LMyM", server0.getUrl());
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setClient(restAdapter_Builder0.clientProvider);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient(restAdapter_Builder0.clientProvider);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setExecutors(forkJoinPool0, forkJoinPool0);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setLog(restAdapter_Builder1.log);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient(client_Provider0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = ":jz /4F]";
      String string1 = "lcyW9Y9S~eM";
      Server server0 = new Server(string0, string1);
      assertEquals(":jz /4F]", server0.getUrl());
      assertEquals("lcyW9Y9S~eM", server0.getName());
      assertNotNull(server0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(server0);
      assertEquals(":jz /4F]", server0.getUrl());
      assertEquals("lcyW9Y9S~eM", server0.getName());
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      restAdapter_Builder1.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setExecutors(restAdapter_Builder0.httpExecutor, restAdapter_Builder0.callbackExecutor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      AndroidLog androidLog0 = new AndroidLog(string0);
      assertNotNull(androidLog0);
      
      restAdapter_Builder0.log = (RestAdapter.Log) androidLog0;
      String string1 = "$reu>>ah";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string1);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertFalse(string1.equals((Object)string0));
      
      androidLog0.log(string0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      restAdapter0.profiler = restAdapter_Builder0.profiler;
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_RestHandler0);
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      assertTrue(restAdapter_LogLevel0.log());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter_LogLevel0);
      
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertTrue(restAdapter_LogLevel0.log());
      assertTrue(boolean0);
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      WireConverter wireConverter0 = new WireConverter();
      assertNotNull(wireConverter0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(wireConverter0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setRequestInterceptor(requestInterceptor0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      restAdapter_Builder2.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      
      Executor executor0 = null;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder3.clientProvider, executor0, restAdapter_Builder2.callbackExecutor, restAdapter_Builder3.requestInterceptor, restAdapter_Builder1.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder2.log, restAdapter_Builder1.logLevel);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      Class<Header> class0 = Header.class;
      boolean boolean0 = restAdapter_Builder3.logLevel.log();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertFalse(boolean0);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder0.setErrorHandler(restAdapter_Builder3.errorHandler);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      
      String string0 = "---> END HTTP (%s-byte body)";
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder1.setServer(string0);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      restAdapter0.getLogLevel();
      assertNull(restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setRequestInterceptor(restAdapter0.requestInterceptor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = null;
      Server server0 = new Server(string0, string0);
      assertNull(server0.getName());
      assertNull(server0.getUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      Profiler<Uri> profiler0 = (Profiler<Uri>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      String string1 = "JH";
      AndroidLog androidLog0 = new AndroidLog(string1);
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertNull(server0.getName());
      assertNull(server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      Map<String, ClientInfoStatus> map0 = null;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(map0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      String string2 = "^a\"=RX'";
      // Undeclared exception!
      try { 
        restAdapter0.logException(sQLClientInfoException0, string2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stub!
         //
         verifyException("android.util.Log", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      String string0 = "";
      restAdapter_Log0.log(string0);
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<Object> profiler0 = (Profiler<Object>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setClient(restAdapter_Builder0.clientProvider);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      String string0 = "userAgent == null";
      String string1 = "";
      Response response0 = null;
      long long0 = 1L;
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceResponse(string1, response0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      String string0 = "r>Z%/h??E4^";
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      restAdapter0.clientProvider = client_Provider0;
      assertNull(restAdapter0.getLogLevel());
      
      Response response0 = null;
      long long0 = 0L;
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceResponse(string0, response0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "Q'TD<2";
      Server server0 = new Server(string0, string0);
      assertEquals("Q'TD<2", server0.getName());
      assertEquals("Q'TD<2", server0.getUrl());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertEquals("Q'TD<2", server0.getName());
      assertEquals("Q'TD<2", server0.getUrl());
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      Client client0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setClient(client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient(client_Provider0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      long long0 = 1691L;
      System.setCurrentTimeMillis(long0);
      String string0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      restAdapter0.logLevel = restAdapter_LogLevel0;
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertTrue(restAdapter0.logLevel.log());
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.FULL;
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setRequestInterceptor(restAdapter0.requestInterceptor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      String string0 = "t>1PzYO#s/%P+o0}G";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getName());
      assertEquals("t>1PzYO#s/%P+o0}G", server0.getUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0, server0.DEFAULT_NAME);
      assertEquals("default", server0.getName());
      assertEquals("t>1PzYO#s/%P+o0}G", server0.getUrl());
      assertNotNull(gsonConverter0);
      
      Profiler<TypedByteArray> profiler0 = (Profiler<TypedByteArray>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      AndroidLog androidLog0 = new AndroidLog(string0);
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertEquals("default", server0.getName());
      assertEquals("t>1PzYO#s/%P+o0}G", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.BASIC;
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
      assertEquals("default", server0.getName());
      assertEquals("t>1PzYO#s/%P+o0}G", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedMember) null).when(pOJOPropertiesCollector0).getAnyGetter();
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((AnnotatedMethod) null).when(pOJOPropertiesCollector0).getJsonValueMethod();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((List) null).when(pOJOPropertiesCollector0).getProperties();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      
      Class<Uri>[] classArray0 = (Class<Uri>[]) Array.newInstance(Class.class, 2);
      Class<Uri> class0 = Uri.class;
      classArray0[0] = class0;
      Class<Uri> class1 = Uri.class;
      classArray0[1] = class1;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      String string0 = "55b\\_nMGJ;#{_&EcR";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(string0, restAdapter0.THREAD_PREFIX);
      assertNull(restAdapter0.getLogLevel());
      assertEquals("java.sql.SQLTransactionRollbackException: 55b\\_nMGJ;#{_&EcR", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("55b\\_nMGJ;#{_&EcR", sQLTransactionRollbackException0.getMessage());
      assertEquals("Retrofit-", sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransactionRollbackException0);
      assertNull(restAdapter0.getLogLevel());
      assertEquals("java.sql.SQLTransactionRollbackException: 55b\\_nMGJ;#{_&EcR", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("55b\\_nMGJ;#{_&EcR", sQLTransactionRollbackException0.getMessage());
      assertEquals("Retrofit-", sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTransactionRollbackException: 55b\\_nMGJ;#{_&EcR", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: 55b\\_nMGJ;#{_&EcR", sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      // Undeclared exception!
      try { 
        restAdapter0.logException(sQLIntegrityConstraintViolationException0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      Profiler<MockThread> profiler0 = (Profiler<MockThread>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setProfiler(profiler0);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      int int0 = 300;
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_DiscardPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder1.setExecutors(scheduledThreadPoolExecutor0, restAdapter_Builder2.httpExecutor);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder3.setClient((Client) okClient0);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setLog(restAdapter_Builder1.log);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = restAdapter0.create(class0);
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(annotation0);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      assertTrue(restAdapter_LogLevel0.log());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter_LogLevel0);
      
      String string0 = "android.intent.action.MEDIA_EJECT";
      // Undeclared exception!
      try { 
        RestAdapter.LogLevel.valueOf(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant retrofit.RestAdapter.LogLevel.android.intent.action.MEDIA_EJECT
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      String string0 = "---- END ERROR";
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      String string1 = "' for name";
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedMember) null).when(pOJOPropertiesCollector0).getAnyGetter();
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((AnnotatedMethod) null).when(pOJOPropertiesCollector0).getJsonValueMethod();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((List) null).when(pOJOPropertiesCollector0).getProperties();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 4);
      Class<String> class0 = String.class;
      String string2 = "";
      String string3 = "";
      Server server0 = new Server(string2, string3);
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertNotNull(server0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      Profiler<TypedByteArray> profiler0 = (Profiler<TypedByteArray>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      AndroidLog androidLog0 = new AndroidLog(string0);
      assertNotNull(androidLog0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertNotNull(restAdapter0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = restAdapter0.getLogLevel();
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertTrue(restAdapter_LogLevel1.log());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter_LogLevel1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<String> class3 = String.class;
      classArray0[3] = class3;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)85;
      long long0 = 2583L;
      System.setCurrentTimeMillis(long0);
      byteArray0[0] = byte0;
      byte byte1 = (byte)76;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-2);
      byteArray0[2] = byte2;
      byte byte3 = (byte)116;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-108);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-94);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-53);
      byteArray0[6] = byte6;
      byte byte7 = (byte)23;
      byteArray0[7] = byte7;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)85, (byte)76, (byte) (-2), (byte)116, (byte) (-108), (byte) (-94), (byte) (-53), (byte)23}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      RestAdapter.Log restAdapter_Log0 = null;
      String string0 = "";
      int int0 = 1057;
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      assertNotNull(threadPoolExecutor_AbortPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_AbortPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      String string1 = "";
      Server server0 = new Server(string1);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int1 = 7;
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      assertNull(thread_UncaughtExceptionHandler0);
      
      boolean boolean1 = false;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int1, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, boolean1);
      assertNotNull(forkJoinPool0);
      assertTrue(boolean1 == boolean0);
      assertFalse(int1 == int0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      Profiler<JsonDeserializer<Integer>> profiler0 = (Profiler<JsonDeserializer<Integer>>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log1 = null;
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, scheduledThreadPoolExecutor0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log1, restAdapter_LogLevel0);
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertNotNull(restAdapter0);
      assertTrue(boolean1 == boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      Request request0 = null;
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceRequest(request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      String string0 = "@zv:B'";
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      ResponseCache responseCache0 = ResponseCache.getDefault();
      assertNull(responseCache0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(responseCache0);
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient1.getConnectTimeout());
      assertEquals(0, okHttpClient1.getReadTimeout());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(boolean0);
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient1.getConnectTimeout());
      assertEquals(0, okHttpClient1.getReadTimeout());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient2.getConnectTimeout());
      assertEquals(0, okHttpClient2.getReadTimeout());
      assertNotNull(okHttpClient2);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      
      Server server0 = new Server(string0, string0);
      assertEquals("@zv:B'", server0.getUrl());
      assertEquals("@zv:B'", server0.getName());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertEquals("@zv:B'", server0.getUrl());
      assertEquals("@zv:B'", server0.getName());
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      Profiler<Callable<String>> profiler0 = (Profiler<Callable<String>>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      String string1 = "";
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string2 = "";
      TypedString typedString0 = new TypedString(string2);
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertNotNull(typedString0);
      assertFalse(string2.equals((Object)string0));
      
      Request request0 = new Request(string0, string1, arrayList0, typedString0);
      assertEquals("", request0.getUrl());
      assertEquals("@zv:B'", request0.getMethod());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertNotNull(request0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals("", request0.getUrl());
      assertEquals("@zv:B'", request0.getMethod());
      assertEquals("@zv:B'", request1.getMethod());
      assertEquals("", request1.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertNotNull(request1);
      assertSame(request0, request1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(request1, request0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      
      Request request2 = restAdapter0.logAndReplaceRequest(request1);
      assertEquals("", request0.getUrl());
      assertEquals("@zv:B'", request0.getMethod());
      assertEquals("@zv:B'", request1.getMethod());
      assertEquals("", request1.getUrl());
      assertEquals("", request2.getUrl());
      assertEquals("@zv:B'", request2.getMethod());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertNotNull(request2);
      assertSame(request0, request2);
      assertSame(request0, request1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(request1, request0);
      assertSame(request1, request2);
      assertSame(request2, request0);
      assertSame(request2, request1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = 1596;
      List<Header> list0 = request0.getHeaders();
      assertEquals("", request0.getUrl());
      assertEquals("@zv:B'", request0.getMethod());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertNotNull(list0);
      assertSame(request0, request2);
      assertSame(request0, request1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      
      Response response0 = new Response(int0, string0, list0, typedString0);
      assertEquals("", request0.getUrl());
      assertEquals("@zv:B'", request0.getMethod());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(1596, response0.getStatus());
      assertEquals("@zv:B'", response0.getReason());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertNotNull(response0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      
      Response response1 = restAdapter0.logAndReplaceResponse(string0, response0, int0);
      assertEquals("", request0.getUrl());
      assertEquals("@zv:B'", request0.getMethod());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(1596, response0.getStatus());
      assertEquals("@zv:B'", response0.getReason());
      assertEquals("@zv:B'", response1.getReason());
      assertEquals(1596, response1.getStatus());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertNotNull(response1);
      assertSame(request0, request2);
      assertSame(request0, request1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(response0, response1);
      assertSame(response1, response0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client client0 = null;
      RestAdapter.Builder restAdapter_Builder1 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder1);
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder0));
      
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setErrorHandler(errorHandler0);
      assertNotNull(restAdapter_Builder2);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder1));
      
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      restAdapter0.getLogLevel();
      assertNull(restAdapter0.getLogLevel());
      
      restAdapter_Builder2.ensureSaneDefaults();
      assertNotSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder1));
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter_RestHandler0);
      
      AndroidLog androidLog0 = new AndroidLog(restAdapter0.THREAD_PREFIX);
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(androidLog0);
      
      // Undeclared exception!
      try { 
        androidLog0.log(restAdapter0.THREAD_PREFIX);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stub!
         //
         verifyException("android.util.Log", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      String string0 = "Retrofit-";
      RestAdapter.THREAD_PREFIX = string0;
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter_RestHandler0);
      
      RestMethodInfo restMethodInfo0 = null;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) restAdapter0;
      // Undeclared exception!
      try { 
        restAdapter_RestHandler0.invokeRequest(restAdapter0.requestInterceptor, restMethodInfo0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter$RestHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      String string0 = "@zv:B'";
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertNotNull(okHttpClient0);
      
      ResponseCache responseCache0 = ResponseCache.getDefault();
      assertNull(responseCache0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(responseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient1.getReadTimeout());
      assertEquals(0, okHttpClient1.getConnectTimeout());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(boolean0);
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient1.getReadTimeout());
      assertEquals(0, okHttpClient1.getConnectTimeout());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient2.getReadTimeout());
      assertEquals(0, okHttpClient2.getConnectTimeout());
      assertNotNull(okHttpClient2);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      
      Server server0 = new Server(string0, string0);
      assertEquals("@zv:B'", server0.getUrl());
      assertEquals("@zv:B'", server0.getName());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertEquals("@zv:B'", server0.getUrl());
      assertEquals("@zv:B'", server0.getName());
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      Profiler<Callable<String>> profiler0 = (Profiler<Callable<String>>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      String string1 = "";
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string2 = "";
      TypedString typedString0 = new TypedString(string2);
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertNull(typedString0.fileName());
      assertNotNull(typedString0);
      assertFalse(string2.equals((Object)string0));
      
      Request request0 = new Request(string0, string1, arrayList0, typedString0);
      assertEquals("", request0.getUrl());
      assertEquals("@zv:B'", request0.getMethod());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertNull(typedString0.fileName());
      assertNotNull(request0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals("", request0.getUrl());
      assertEquals("@zv:B'", request0.getMethod());
      assertEquals("", request1.getUrl());
      assertEquals("@zv:B'", request1.getMethod());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertNull(typedString0.fileName());
      assertNotNull(request1);
      assertSame(request0, request1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(request1, request0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      
      Request request2 = restAdapter0.logAndReplaceRequest(request1);
      assertEquals("", request0.getUrl());
      assertEquals("@zv:B'", request0.getMethod());
      assertEquals("", request1.getUrl());
      assertEquals("@zv:B'", request1.getMethod());
      assertEquals("@zv:B'", request2.getMethod());
      assertEquals("", request2.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertNull(typedString0.fileName());
      assertNotNull(request2);
      assertSame(request0, request2);
      assertSame(request0, request1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(request1, request0);
      assertSame(request1, request2);
      assertSame(request2, request0);
      assertSame(request2, request1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = 1596;
      Vector<Header> vector0 = new Vector<Header>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Response response0 = new Response(int0, string0, vector0, typedString0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1596, response0.getStatus());
      assertEquals("@zv:B'", response0.getReason());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertNull(typedString0.fileName());
      assertNotNull(response0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Response response1 = restAdapter0.logAndReplaceResponse(string0, response0, int0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1596, response0.getStatus());
      assertEquals("@zv:B'", response0.getReason());
      assertEquals("@zv:B'", response1.getReason());
      assertEquals(1596, response1.getStatus());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertNull(typedString0.fileName());
      assertNotNull(response1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(response0, response1);
      assertSame(response1, response0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      String string0 = "@zv:B'";
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertNotNull(okHttpClient0);
      
      ResponseCache responseCache0 = ResponseCache.getDefault();
      assertNull(responseCache0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(responseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient1.getReadTimeout());
      assertEquals(0, okHttpClient1.getConnectTimeout());
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(boolean0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient1.getReadTimeout());
      assertEquals(0, okHttpClient1.getConnectTimeout());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient2.getConnectTimeout());
      assertEquals(0, okHttpClient2.getReadTimeout());
      assertNotNull(okHttpClient2);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      
      String string1 = "4)`iY,aI2DYbl9Ifpqv";
      AndroidLog androidLog0 = new AndroidLog(string1);
      assertNotNull(androidLog0);
      assertFalse(string1.equals((Object)string0));
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(androidLog0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertFalse(string1.equals((Object)string0));
      
      Server server0 = new Server(string0, string0);
      assertEquals("@zv:B'", server0.getName());
      assertEquals("@zv:B'", server0.getUrl());
      assertNotNull(server0);
      assertFalse(string0.equals((Object)string1));
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setServer(server0);
      assertEquals("@zv:B'", server0.getName());
      assertEquals("@zv:B'", server0.getUrl());
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertFalse(string0.equals((Object)string1));
      
      Profiler<Callable<String>> profiler0 = (Profiler<Callable<String>>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      
      String string2 = "";
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string3 = "";
      TypedString typedString0 = new TypedString(string3);
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertNull(typedString0.fileName());
      assertNotNull(typedString0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      Request request0 = new Request(string0, string2, arrayList0, typedString0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("@zv:B'", request0.getMethod());
      assertEquals("", request0.getUrl());
      assertNotNull(request0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceRequest(request0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stub!
         //
         verifyException("android.util.Log", e);
      }
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)56;
      byteArray0[0] = byte0;
      byte byte1 = (byte)8;
      byteArray0[1] = byte1;
      byte byte2 = (byte)28;
      byteArray0[2] = byte2;
      byte byte3 = (byte)2;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-1);
      byteArray0[4] = byte4;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)56, (byte)8, (byte)28, (byte)2, (byte) (-1)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      String string0 = "@zv:B'";
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      ResponseCache responseCache0 = ResponseCache.getDefault();
      assertNull(responseCache0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(responseCache0);
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient1.getReadTimeout());
      assertEquals(0, okHttpClient1.getConnectTimeout());
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      
      boolean boolean1 = false;
      OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(boolean1);
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient1.getReadTimeout());
      assertEquals(0, okHttpClient1.getConnectTimeout());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient2.getReadTimeout());
      assertEquals(0, okHttpClient2.getConnectTimeout());
      assertNotNull(okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertTrue(boolean1 == boolean0);
      
      Server server0 = new Server(string0, string0);
      assertEquals("@zv:B'", server0.getName());
      assertEquals("@zv:B'", server0.getUrl());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertEquals("@zv:B'", server0.getName());
      assertEquals("@zv:B'", server0.getUrl());
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      Profiler<Callable<String>> profiler0 = (Profiler<Callable<String>>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      String string1 = "";
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string2 = "";
      TypedString typedString0 = new TypedString(string2);
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(0L, typedString0.length());
      assertNotNull(typedString0);
      assertFalse(string2.equals((Object)string0));
      
      Request request0 = new Request(string0, string1, arrayList0, typedString0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(0L, typedString0.length());
      assertEquals("@zv:B'", request0.getMethod());
      assertEquals("", request0.getUrl());
      assertNotNull(request0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(0L, typedString0.length());
      assertEquals("@zv:B'", request0.getMethod());
      assertEquals("", request0.getUrl());
      assertEquals("@zv:B'", request1.getMethod());
      assertEquals("", request1.getUrl());
      assertNotNull(request1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      
      Request request2 = restAdapter0.logAndReplaceRequest(request1);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(0L, typedString0.length());
      assertEquals("@zv:B'", request0.getMethod());
      assertEquals("", request0.getUrl());
      assertEquals("@zv:B'", request1.getMethod());
      assertEquals("", request1.getUrl());
      assertEquals("@zv:B'", request2.getMethod());
      assertEquals("", request2.getUrl());
      assertNotNull(request2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request1, request0);
      assertSame(request1, request2);
      assertSame(request2, request1);
      assertSame(request2, request0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      
      int int0 = 1596;
      List<Header> list0 = request0.getHeaders();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(0L, typedString0.length());
      assertEquals("@zv:B'", request0.getMethod());
      assertEquals("", request0.getUrl());
      assertNotNull(list0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      
      String string3 = "";
      RestMethodInfo restMethodInfo0 = null;
      Request request3 = restAdapter0.logAndReplaceRequest(request1);
      assertEquals("", request3.getUrl());
      assertEquals("@zv:B'", request3.getMethod());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(0L, typedString0.length());
      assertEquals("@zv:B'", request0.getMethod());
      assertEquals("", request0.getUrl());
      assertEquals("@zv:B'", request1.getMethod());
      assertEquals("", request1.getUrl());
      assertNotNull(request3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(request3, request2);
      assertSame(request3, request0);
      assertSame(request3, request1);
      assertSame(string1, string2);
      assertSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string2, string3);
      assertSame(request0, request3);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request1, request0);
      assertSame(request1, request2);
      assertSame(request1, request3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        RestAdapter.getRequestInfo(string3, restMethodInfo0, request3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      Class<Delayed> class0 = Delayed.class;
      Delayed delayed0 = restAdapter0.create(class0);
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(delayed0);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      long long0 = 0L;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      System.setCurrentTimeMillis(long0);
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setLogLevel(restAdapter0.logLevel);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log level may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      assertFalse(restAdapter_LogLevel0.log());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel0);
      
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertFalse(restAdapter_LogLevel0.log());
      assertFalse(boolean0);
      
      String string0 = "*";
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = "&|G4T|~qCa@#";
      String string2 = ");}[dwK2@7uE&";
      Server server0 = new Server(string2);
      assertEquals("default", server0.getName());
      assertNotNull(server0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 800;
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_CallerRunsPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      ProtoConverter protoConverter0 = new ProtoConverter();
      assertNotNull(protoConverter0);
      
      Profiler<Object> profiler0 = (Profiler<Object>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      AndroidLog androidLog0 = new AndroidLog(server0.DEFAULT_NAME);
      assertEquals("default", server0.getName());
      assertNotNull(androidLog0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptorTape0, protoConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel1);
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("default", server0.getName());
      assertNotNull(restAdapter0);
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int1 = 466;
      Vector<Header> vector0 = new Vector<Header>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      TypedString typedString0 = new TypedString(server0.DEFAULT_NAME);
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(7L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("default", server0.getName());
      assertNotNull(typedString0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Response response0 = new Response(int1, server0.DEFAULT_NAME, vector0, typedString0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(7L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("default", response0.getReason());
      assertEquals(466, response0.getStatus());
      assertEquals("default", server0.getName());
      assertNotNull(response0);
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      long long0 = 2048L;
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceResponse(server0.DEFAULT_NAME, response0, long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stub!
         //
         verifyException("android.util.Log", e);
      }
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      int int0 = 9;
      Random.setNextRandom(int0);
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      restAdapter0.logLevel = restAdapter_LogLevel0;
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertTrue(restAdapter0.logLevel.log());
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.NONE;
      restAdapter0.logLevel = restAdapter_LogLevel1;
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(restAdapter0.logLevel.log());
      
      int int1 = 985;
      Random.setNextRandom(int1);
      assertFalse(int1 == int0);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      Random.setNextRandom(int1);
      assertFalse(int1 == int0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      String string0 = "ay!:$n8";
      restAdapter_Log0.log(string0);
      Random.setNextRandom(int0);
      assertFalse(int0 == int1);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_RestHandler0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Method method0 = null;
      try { 
        restAdapter_RestHandler0.invoke(object0, method0, restAdapter_LogLevelArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter$RestHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      Class<Delayed> class0 = Delayed.class;
      Class<Delayed> class1 = null;
      // Undeclared exception!
      try { 
        restAdapter0.create(class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      String string0 = "`,VA#1N>+&wt`PaF";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getName());
      assertEquals("`,VA#1N>+&wt`PaF", server0.getUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 1496;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_CallerRunsPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      deserializationFeatureArray0[2] = deserializationFeature1;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertEquals(8, deserializationFeatureArray0.length);
      
      JacksonConverter jacksonConverter0 = new JacksonConverter(objectMapper1);
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(jacksonConverter0);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertEquals(8, deserializationFeatureArray0.length);
      
      Profiler<BigIntegerNode> profiler0 = null;
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptor0, jacksonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("default", server0.getName());
      assertEquals("`,VA#1N>+&wt`PaF", server0.getUrl());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertEquals(8, deserializationFeatureArray0.length);
      
      Vector<Header> vector0 = new Vector<Header>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      TypedString typedString0 = new TypedString(restAdapter0.IDLE_THREAD_NAME);
      assertEquals("default", server0.getName());
      assertEquals("`,VA#1N>+&wt`PaF", server0.getUrl());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(13L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertNotNull(typedString0);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertEquals(8, deserializationFeatureArray0.length);
      
      Request request0 = new Request(string0, string0, vector0, typedString0);
      assertEquals("default", server0.getName());
      assertEquals("`,VA#1N>+&wt`PaF", server0.getUrl());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(13L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals("`,VA#1N>+&wt`PaF", request0.getMethod());
      assertEquals("`,VA#1N>+&wt`PaF", request0.getUrl());
      assertNotNull(request0);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertEquals(8, deserializationFeatureArray0.length);
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals("default", server0.getName());
      assertEquals("`,VA#1N>+&wt`PaF", server0.getUrl());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(13L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals("`,VA#1N>+&wt`PaF", request0.getMethod());
      assertEquals("`,VA#1N>+&wt`PaF", request0.getUrl());
      assertEquals("`,VA#1N>+&wt`PaF", request1.getUrl());
      assertEquals("`,VA#1N>+&wt`PaF", request1.getMethod());
      assertNotNull(request1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertEquals(8, deserializationFeatureArray0.length);
      
      Request request2 = restAdapter0.logAndReplaceRequest(request1);
      assertEquals("default", server0.getName());
      assertEquals("`,VA#1N>+&wt`PaF", server0.getUrl());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(13L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals("`,VA#1N>+&wt`PaF", request0.getMethod());
      assertEquals("`,VA#1N>+&wt`PaF", request0.getUrl());
      assertEquals("`,VA#1N>+&wt`PaF", request1.getUrl());
      assertEquals("`,VA#1N>+&wt`PaF", request1.getMethod());
      assertEquals("`,VA#1N>+&wt`PaF", request2.getMethod());
      assertEquals("`,VA#1N>+&wt`PaF", request2.getUrl());
      assertNotNull(request2);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request1, request2);
      assertSame(request1, request0);
      assertSame(request2, request1);
      assertSame(request2, request0);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertEquals(8, deserializationFeatureArray0.length);
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      // Undeclared exception!
      try { 
        restAdapter0.setLogLevel(restAdapter_LogLevel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log level may not be null.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }
}
