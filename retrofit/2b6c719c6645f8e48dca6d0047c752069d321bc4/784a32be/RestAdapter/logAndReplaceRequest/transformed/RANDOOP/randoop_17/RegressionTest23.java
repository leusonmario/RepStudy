import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest23 {

    public static boolean debug = false;

    @Test
    public void test11501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11501");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.RestAdapter.Log log26 = restAdapter8.log;
        retrofit.RestAdapter.Builder builder27 = builder6.setLog(log26);
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter29.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder28.setLogLevel(logLevel31);
        retrofit.RestAdapter.Log log34 = builder28.log;
        retrofit.RequestInterceptor requestInterceptor35 = builder28.requestInterceptor;
        retrofit.ErrorHandler errorHandler36 = builder28.errorHandler;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNull(errorHandler36);
    }

    @Test
    public void test11502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11502");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter5 = builder4.build();
        retrofit.RestAdapter.LogLevel logLevel6 = null;
        restAdapter5.logLevel = logLevel6;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.Server server10 = restAdapter8.server;
        retrofit.client.Client.Provider provider11 = null;
        restAdapter8.clientProvider = provider11;
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter8.requestInterceptor;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter8.log = log22;
        restAdapter5.log = log22;
        retrofit.Server server27 = null;
        restAdapter5.server = server27;
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter5.requestInterceptor;
        retrofit.converter.Converter converter30 = restAdapter5.converter;
        java.util.concurrent.Executor executor31 = restAdapter5.callbackExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(converter30);
        org.junit.Assert.assertNotNull(executor31);
    }

    @Test
    public void test11503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11503");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log11 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = builder12.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor14 = builder12.requestInterceptor;
        retrofit.ErrorHandler errorHandler15 = null;
        builder12.errorHandler = errorHandler15;
        retrofit.converter.Converter converter17 = null;
        builder12.converter = converter17;
        retrofit.ErrorHandler errorHandler19 = null;
        builder12.errorHandler = errorHandler19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.httpExecutor = executor22;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("hi!");
        retrofit.Profiler profiler26 = null;
        builder25.profiler = profiler26;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        builder25.requestInterceptor = requestInterceptor28;
        retrofit.RestAdapter restAdapter30 = builder25.build();
        retrofit.converter.Converter converter31 = restAdapter30.converter;
        retrofit.RestAdapter.Builder builder32 = builder12.setConverter(converter31);
        restAdapter10.converter = converter31;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter35 = builder34.converter;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor37 = restAdapter36.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        restAdapter36.requestInterceptor = requestInterceptor38;
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel49);
        restAdapter36.log = log48;
        retrofit.ErrorHandler errorHandler52 = null;
        restAdapter36.errorHandler = errorHandler52;
        retrofit.RestAdapter.Log log54 = restAdapter36.log;
        retrofit.RestAdapter.Builder builder55 = builder34.setLog(log54);
        retrofit.Profiler profiler56 = builder55.profiler;
        retrofit.client.Client.Provider provider57 = builder55.clientProvider;
        retrofit.RestAdapter.Builder builder59 = builder55.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter60 = builder59.build();
        retrofit.ErrorHandler errorHandler61 = restAdapter60.errorHandler;
        restAdapter10.errorHandler = errorHandler61;
        retrofit.RestAdapter.Builder builder63 = builder8.setErrorHandler(errorHandler61);
        builder63.ensureSaneDefaults();
        builder63.ensureSaneDefaults();
        builder63.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = null;
        builder67.httpExecutor = executor68;
        retrofit.RestAdapter.Builder builder71 = builder67.setServer("hi!");
        retrofit.RestAdapter restAdapter72 = builder71.build();
        retrofit.client.Header[] headerArray75 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList76 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList76, headerArray75);
        retrofit.mime.TypedOutput typedOutput78 = null;
        retrofit.client.Request request79 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList76, typedOutput78);
        java.lang.String str80 = request79.getMethod();
        java.lang.String str81 = request79.getMethod();
        retrofit.client.Request request82 = restAdapter72.logAndReplaceRequest(request79);
        retrofit.RestAdapter.Log log83 = restAdapter72.log;
        retrofit.client.Client.Provider provider84 = restAdapter72.clientProvider;
        retrofit.ErrorHandler errorHandler85 = restAdapter72.errorHandler;
        retrofit.RestAdapter.Builder builder86 = builder63.setErrorHandler(errorHandler85);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNotNull(converter31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(converter35);
        org.junit.Assert.assertNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(profiler56);
        org.junit.Assert.assertNull(provider57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNotNull(errorHandler61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(restAdapter72);
        org.junit.Assert.assertNotNull(headerArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(request82);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(provider84);
        org.junit.Assert.assertNotNull(errorHandler85);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test11504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11504");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        retrofit.converter.Converter converter7 = restAdapter0.converter;
        retrofit.Profiler profiler8 = restAdapter0.profiler;
        retrofit.RestAdapter.Log log9 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        restAdapter13.requestInterceptor = requestInterceptor15;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        restAdapter13.log = log25;
        retrofit.ErrorHandler errorHandler29 = null;
        restAdapter13.errorHandler = errorHandler29;
        retrofit.RestAdapter.Log log31 = restAdapter13.log;
        retrofit.RestAdapter.Builder builder32 = builder11.setLog(log31);
        retrofit.Profiler profiler33 = builder32.profiler;
        retrofit.client.Client.Provider provider34 = builder32.clientProvider;
        retrofit.RestAdapter.Builder builder36 = builder32.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler37 = builder32.errorHandler;
        java.util.concurrent.Executor executor38 = null;
        builder32.callbackExecutor = executor38;
        retrofit.client.Client.Provider provider40 = builder32.clientProvider;
        retrofit.Profiler profiler41 = null;
        builder32.profiler = profiler41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor44 = null;
        builder43.httpExecutor = executor44;
        retrofit.RestAdapter.Builder builder47 = builder43.setServer("hi!");
        retrofit.Profiler profiler48 = null;
        builder47.profiler = profiler48;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        builder47.requestInterceptor = requestInterceptor50;
        retrofit.RestAdapter restAdapter52 = builder47.build();
        retrofit.converter.Converter converter53 = restAdapter52.converter;
        java.util.concurrent.Executor executor54 = restAdapter52.callbackExecutor;
        retrofit.client.Client.Provider provider55 = restAdapter52.clientProvider;
        retrofit.RestAdapter.Builder builder56 = builder32.setClient(provider55);
        restAdapter0.clientProvider = provider55;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(provider40);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertNotNull(converter53);
        org.junit.Assert.assertNotNull(executor54);
        org.junit.Assert.assertNotNull(provider55);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test11505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11505");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter4 = builder3.converter;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter5.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        restAdapter5.requestInterceptor = requestInterceptor7;
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel18);
        restAdapter5.log = log17;
        retrofit.ErrorHandler errorHandler21 = null;
        restAdapter5.errorHandler = errorHandler21;
        retrofit.RestAdapter.Log log23 = restAdapter5.log;
        retrofit.RestAdapter.Builder builder24 = builder3.setLog(log23);
        retrofit.Profiler profiler25 = builder24.profiler;
        retrofit.client.Client.Provider provider26 = builder24.clientProvider;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter30 = null;
        builder29.converter = converter30;
        retrofit.client.Client.Provider provider32 = null;
        builder29.clientProvider = provider32;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        builder29.requestInterceptor = requestInterceptor34;
        retrofit.Profiler profiler36 = builder29.profiler;
        retrofit.Profiler profiler37 = null;
        builder29.profiler = profiler37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = builder39.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor41 = builder39.requestInterceptor;
        java.util.concurrent.Executor executor42 = builder39.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel43 = builder39.logLevel;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.httpExecutor = executor45;
        retrofit.RestAdapter.Builder builder48 = builder44.setServer("hi!");
        retrofit.Profiler profiler49 = null;
        builder48.profiler = profiler49;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        builder48.requestInterceptor = requestInterceptor51;
        retrofit.RestAdapter restAdapter53 = builder48.build();
        retrofit.converter.Converter converter54 = null;
        builder48.converter = converter54;
        retrofit.client.Client.Provider provider56 = builder48.clientProvider;
        retrofit.RestAdapter.Builder builder57 = builder39.setClient(provider56);
        retrofit.RestAdapter.Builder builder58 = builder29.setClient(provider56);
        builder28.clientProvider = provider56;
        builder0.clientProvider = provider56;
        java.util.concurrent.Executor executor61 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor62 = builder0.requestInterceptor;
        retrofit.Server server63 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder64 = builder0.setServer(server63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(profiler25);
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(requestInterceptor41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(provider56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNull(requestInterceptor62);
    }

    @Test
    public void test11506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11506");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = null;
        restAdapter0.logLevel = logLevel4;
        retrofit.ErrorHandler errorHandler6 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.Profiler profiler12 = null;
        builder11.profiler = profiler12;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        builder11.requestInterceptor = requestInterceptor14;
        retrofit.RestAdapter restAdapter16 = builder11.build();
        retrofit.converter.Converter converter17 = restAdapter16.converter;
        restAdapter0.converter = converter17;
        retrofit.Profiler profiler19 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(converter17);
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNull(logLevel20);
    }

    @Test
    public void test11507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11507");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder0.requestInterceptor = requestInterceptor20;
        retrofit.RestAdapter restAdapter22 = builder0.build();
        retrofit.Server server23 = builder0.server;
        retrofit.Profiler profiler24 = null;
        builder0.profiler = profiler24;
        retrofit.Server server26 = builder0.server;
        retrofit.RestAdapter.Log log27 = builder0.log;
        java.util.concurrent.Executor executor28 = builder0.httpExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNotNull(restAdapter22);
        org.junit.Assert.assertNotNull(server23);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(executor28);
    }

    @Test
    public void test11508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11508");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder0.profiler;
        retrofit.converter.Converter converter23 = null;
        builder0.converter = converter23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter40.logLevel = logLevel42;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        restAdapter40.requestInterceptor = requestInterceptor44;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter40.logLevel = logLevel46;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log38, logLevel46);
        retrofit.RestAdapter.Builder builder49 = builder0.setLog(log38);
        retrofit.client.Client.Provider provider50 = builder49.clientProvider;
        retrofit.Profiler profiler51 = builder49.profiler;
        retrofit.Profiler profiler52 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder53 = builder49.setProfiler(profiler52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(provider50);
        org.junit.Assert.assertNull(profiler51);
    }

    @Test
    public void test11509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11509");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.httpExecutor = executor9;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder8.setLog(log13);
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter15.logLevel = logLevel17;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter15.requestInterceptor = requestInterceptor19;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter15.logLevel = logLevel21;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log13, logLevel21);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder30 = builder24.setLog(log29);
        restAdapter23.log = log29;
        retrofit.client.Header[] headerArray34 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList35 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList35, headerArray34);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList35, typedOutput37);
        java.lang.String str39 = request38.getUrl();
        java.lang.String str40 = request38.getUrl();
        retrofit.client.Request request41 = restAdapter23.logAndReplaceRequest(request38);
        java.lang.String str42 = request41.getUrl();
        java.util.List<retrofit.client.Header> headerList43 = request41.getHeaders();
        java.lang.String str44 = request41.getMethod();
        retrofit.mime.TypedOutput typedOutput45 = request41.getBody();
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(headerArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(request41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(headerList43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(typedOutput45);
    }

    @Test
    public void test11510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11510");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList10 = request8.getHeaders();
        java.lang.String str11 = request8.getMethod();
        retrofit.mime.TypedOutput typedOutput12 = request8.getBody();
        java.lang.String str13 = request8.getUrl();
        retrofit.mime.TypedOutput typedOutput14 = request8.getBody();
        retrofit.mime.TypedOutput typedOutput15 = request8.getBody();
        retrofit.mime.TypedOutput typedOutput16 = request8.getBody();
        java.util.List<retrofit.client.Header> headerList17 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput18 = null;
        retrofit.client.Request request19 = new retrofit.client.Request("Retrofit-Idle", "", headerList17, typedOutput18);
        java.util.List<retrofit.client.Header> headerList20 = request19.getHeaders();
        java.lang.String str21 = request19.getUrl();
        java.util.List<retrofit.client.Header> headerList22 = request19.getHeaders();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNull(typedOutput15);
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(headerList22);
    }

    @Test
    public void test11511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11511");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.RestAdapter.LogLevel logLevel7 = builder5.logLevel;
        builder5.ensureSaneDefaults();
        retrofit.client.Client.Provider provider9 = null;
        builder5.clientProvider = provider9;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.httpExecutor = executor20;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("hi!");
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder19.setLog(log24);
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter26.logLevel = logLevel28;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter26.requestInterceptor = requestInterceptor30;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter26.logLevel = logLevel32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log24, logLevel32);
        builder5.logLevel = logLevel32;
        retrofit.client.Client.Provider provider36 = null;
        builder5.clientProvider = provider36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.httpExecutor = executor39;
        retrofit.RestAdapter.Builder builder42 = builder38.setServer("hi!");
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder38.setLog(log43);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter46 = builder45.converter;
        retrofit.RestAdapter.LogLevel logLevel47 = builder45.logLevel;
        retrofit.RestAdapter.Builder builder48 = builder44.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter50 = builder49.converter;
        retrofit.RestAdapter.LogLevel logLevel51 = builder49.logLevel;
        builder49.ensureSaneDefaults();
        retrofit.Server server53 = null;
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.httpExecutor = executor62;
        retrofit.RestAdapter.Builder builder65 = builder61.setServer("hi!");
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder61.setLog(log66);
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter68.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter68.logLevel = logLevel70;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        restAdapter68.requestInterceptor = requestInterceptor72;
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter68.logLevel = logLevel74;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server53, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log66, logLevel74);
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor78 = null;
        builder77.httpExecutor = executor78;
        retrofit.RestAdapter.Builder builder81 = builder77.setServer("hi!");
        retrofit.RestAdapter.Log log82 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder83 = builder77.setLog(log82);
        restAdapter76.log = log82;
        builder49.log = log82;
        java.util.concurrent.Executor executor86 = null;
        builder49.httpExecutor = executor86;
        retrofit.converter.Converter converter88 = null;
        builder49.converter = converter88;
        retrofit.ErrorHandler errorHandler90 = builder49.errorHandler;
        retrofit.RestAdapter.Builder builder91 = builder44.setErrorHandler(errorHandler90);
        retrofit.RestAdapter.Builder builder92 = builder5.setErrorHandler(errorHandler90);
        retrofit.ErrorHandler errorHandler93 = builder5.errorHandler;
        retrofit.RestAdapter.Builder builder94 = builder0.setErrorHandler(errorHandler93);
        retrofit.RestAdapter.Builder builder96 = builder0.setServer("hi!");
        retrofit.converter.Converter converter97 = builder96.converter;
        retrofit.RestAdapter restAdapter98 = builder96.build();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(converter50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(logLevel69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(errorHandler90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(errorHandler93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(converter97);
        org.junit.Assert.assertNotNull(restAdapter98);
    }

    @Test
    public void test11512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11512");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.ErrorHandler errorHandler20 = builder0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel21 = builder0.logLevel;
        retrofit.Server server22 = builder0.server;
        retrofit.RestAdapter restAdapter23 = builder0.build();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter23.new RestHandler();
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor26 = restAdapter25.requestInterceptor;
        java.util.concurrent.Executor executor27 = restAdapter25.callbackExecutor;
        retrofit.converter.Converter converter28 = null;
        restAdapter25.converter = converter28;
        retrofit.RestAdapter.Log log30 = restAdapter25.log;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter25.new RestHandler();
        retrofit.Profiler profiler32 = restAdapter25.profiler;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor34 = null;
        restAdapter33.httpExecutor = executor34;
        retrofit.client.Client.Provider provider36 = restAdapter33.clientProvider;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        restAdapter33.requestInterceptor = requestInterceptor37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder39.setLog(log44);
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel55);
        builder39.logLevel = logLevel55;
        retrofit.converter.Converter converter58 = builder39.converter;
        retrofit.ErrorHandler errorHandler59 = builder39.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel60 = builder39.logLevel;
        retrofit.Server server61 = builder39.server;
        restAdapter33.server = server61;
        restAdapter25.server = server61;
        restAdapter23.server = server61;
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter23.getLogLevel();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNotNull(restAdapter23);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertNull(profiler32);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter58);
        org.junit.Assert.assertNull(errorHandler59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server61);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test11513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11513");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log22, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLog(log22);
        retrofit.Server server30 = builder29.server;
        retrofit.ErrorHandler errorHandler31 = null;
        builder29.errorHandler = errorHandler31;
        retrofit.Profiler profiler33 = null;
        builder29.profiler = profiler33;
        retrofit.ErrorHandler errorHandler35 = builder29.errorHandler;
        java.util.concurrent.Executor executor36 = builder29.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor37 = builder29.requestInterceptor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(requestInterceptor37);
    }

    @Test
    public void test11514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11514");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.Server server2 = restAdapter0.server;
        retrofit.client.Client.Provider provider3 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.client.Client.Provider provider7 = null;
        builder4.clientProvider = provider7;
        retrofit.RestAdapter.Builder builder10 = builder4.setServer("hi!");
        retrofit.Profiler profiler11 = builder4.profiler;
        retrofit.RestAdapter restAdapter12 = builder4.build();
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter14 = null;
        builder13.converter = converter14;
        retrofit.client.Client.Provider provider16 = null;
        builder13.clientProvider = provider16;
        java.util.concurrent.Executor executor18 = builder13.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        builder13.requestInterceptor = requestInterceptor19;
        retrofit.converter.Converter converter21 = null;
        builder13.converter = converter21;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter24 = null;
        restAdapter23.converter = converter24;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        restAdapter23.requestInterceptor = requestInterceptor26;
        retrofit.Profiler profiler28 = restAdapter23.profiler;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean30 = logLevel29.log();
        restAdapter23.logLevel = logLevel29;
        java.util.concurrent.Executor executor32 = restAdapter23.httpExecutor;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = builder33.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor35 = builder33.requestInterceptor;
        retrofit.ErrorHandler errorHandler36 = null;
        builder33.errorHandler = errorHandler36;
        retrofit.converter.Converter converter38 = null;
        builder33.converter = converter38;
        retrofit.ErrorHandler errorHandler40 = null;
        builder33.errorHandler = errorHandler40;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor43 = restAdapter42.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        restAdapter42.requestInterceptor = requestInterceptor44;
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel55);
        restAdapter42.log = log54;
        retrofit.ErrorHandler errorHandler58 = null;
        restAdapter42.errorHandler = errorHandler58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter61 = builder60.converter;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor63 = restAdapter62.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        restAdapter62.requestInterceptor = requestInterceptor64;
        retrofit.Server server66 = null;
        retrofit.client.Client.Provider provider67 = null;
        java.util.concurrent.Executor executor68 = null;
        java.util.concurrent.Executor executor69 = null;
        retrofit.RequestInterceptor requestInterceptor70 = null;
        retrofit.converter.Converter converter71 = null;
        retrofit.Profiler profiler72 = null;
        retrofit.ErrorHandler errorHandler73 = null;
        retrofit.RestAdapter.Log log74 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server66, provider67, executor68, executor69, requestInterceptor70, converter71, profiler72, errorHandler73, log74, logLevel75);
        restAdapter62.log = log74;
        retrofit.ErrorHandler errorHandler78 = null;
        restAdapter62.errorHandler = errorHandler78;
        retrofit.RestAdapter.Log log80 = restAdapter62.log;
        retrofit.RestAdapter.Builder builder81 = builder60.setLog(log80);
        retrofit.RequestInterceptor requestInterceptor82 = builder60.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor83 = builder60.requestInterceptor;
        retrofit.RestAdapter.Builder builder85 = builder60.setServer("hi!");
        retrofit.Server server86 = builder60.server;
        restAdapter42.server = server86;
        retrofit.RestAdapter.Builder builder88 = builder33.setServer(server86);
        restAdapter23.server = server86;
        retrofit.RestAdapter.Builder builder90 = builder13.setServer(server86);
        retrofit.Server server91 = builder90.server;
        retrofit.RestAdapter.Builder builder92 = builder4.setServer(server91);
        restAdapter0.server = server91;
        retrofit.RestAdapter.LogLevel logLevel94 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNotNull(restAdapter12);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(profiler28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter61);
        org.junit.Assert.assertNull(requestInterceptor63);
        org.junit.Assert.assertNotNull(log74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(requestInterceptor82);
        org.junit.Assert.assertNull(requestInterceptor83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(server86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(server91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNull(logLevel94);
    }

    @Test
    public void test11515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11515");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        java.util.concurrent.Executor executor5 = builder0.httpExecutor;
        java.util.concurrent.Executor executor6 = null;
        builder0.httpExecutor = executor6;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("hi!");
        retrofit.ErrorHandler errorHandler10 = builder0.errorHandler;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log12 = restAdapter11.log;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        restAdapter11.requestInterceptor = requestInterceptor13;
        retrofit.Server server15 = null;
        restAdapter11.server = server15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.httpExecutor = executor18;
        retrofit.RestAdapter.Builder builder21 = builder17.setServer("hi!");
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = builder17.setLog(log22);
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel33);
        builder17.logLevel = logLevel33;
        java.util.concurrent.Executor executor36 = builder17.httpExecutor;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.httpExecutor = executor38;
        retrofit.client.Client.Provider provider40 = null;
        builder37.clientProvider = provider40;
        retrofit.client.Client.Provider provider42 = builder37.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder44 = builder37.setLogLevel(logLevel43);
        builder17.logLevel = logLevel43;
        restAdapter11.logLevel = logLevel43;
        retrofit.RestAdapter.Builder builder47 = builder0.setLogLevel(logLevel43);
        boolean boolean48 = logLevel43.log();
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(provider42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test11516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11516");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.lang.String str15 = request14.getUrl();
        java.util.List<retrofit.client.Header> headerList16 = request14.getHeaders();
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "", headerList16, typedOutput17);
        java.lang.String str19 = request18.getMethod();
        retrofit.mime.TypedOutput typedOutput20 = request18.getBody();
        java.util.List<retrofit.client.Header> headerList21 = request18.getHeaders();
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("hi!", "hi!", headerList21, typedOutput22);
        java.lang.String str24 = request23.getUrl();
        retrofit.mime.TypedOutput typedOutput25 = request23.getBody();
        java.lang.String str26 = request23.getUrl();
        java.util.List<retrofit.client.Header> headerList27 = request23.getHeaders();
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "Retrofit-Idle", headerList27, typedOutput28);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList27, typedOutput30);
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(typedOutput20);
        org.junit.Assert.assertNotNull(headerList21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(typedOutput25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(headerList27);
    }

    @Test
    public void test11517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11517");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.Profiler profiler4 = null;
        restAdapter0.profiler = profiler4;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor8 = restAdapter0.httpExecutor;
        retrofit.Profiler profiler9 = restAdapter0.profiler;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(profiler9);
    }

    @Test
    public void test11518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11518");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.client.Client.Provider provider7 = null;
        builder4.clientProvider = provider7;
        retrofit.RestAdapter.Builder builder10 = builder4.setServer("hi!");
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder11.setLog(log16);
        retrofit.RestAdapter restAdapter18 = builder11.build();
        java.util.concurrent.Executor executor19 = restAdapter18.httpExecutor;
        builder10.callbackExecutor = executor19;
        builder0.callbackExecutor = executor19;
        builder0.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.httpExecutor = executor33;
        retrofit.RestAdapter.Builder builder36 = builder32.setServer("hi!");
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder38 = builder32.setLog(log37);
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter39.logLevel = logLevel41;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        restAdapter39.requestInterceptor = requestInterceptor43;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter39.logLevel = logLevel45;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log37, logLevel45);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.httpExecutor = executor49;
        retrofit.RestAdapter.Builder builder52 = builder48.setServer("hi!");
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder48.setLog(log53);
        restAdapter47.log = log53;
        retrofit.client.Header[] headerArray58 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList59 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList59, headerArray58);
        retrofit.mime.TypedOutput typedOutput61 = null;
        retrofit.client.Request request62 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList59, typedOutput61);
        java.lang.String str63 = request62.getUrl();
        java.lang.String str64 = request62.getUrl();
        retrofit.client.Request request65 = restAdapter47.logAndReplaceRequest(request62);
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter47.getLogLevel();
        java.util.concurrent.Executor executor67 = restAdapter47.callbackExecutor;
        java.util.concurrent.Executor executor68 = restAdapter47.callbackExecutor;
        java.util.concurrent.Executor executor69 = restAdapter47.callbackExecutor;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor71 = null;
        builder70.httpExecutor = executor71;
        retrofit.RestAdapter.Builder builder74 = builder70.setServer("hi!");
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder76 = builder70.setLog(log75);
        retrofit.Server server77 = null;
        retrofit.client.Client.Provider provider78 = null;
        java.util.concurrent.Executor executor79 = null;
        java.util.concurrent.Executor executor80 = null;
        retrofit.RequestInterceptor requestInterceptor81 = null;
        retrofit.converter.Converter converter82 = null;
        retrofit.Profiler profiler83 = null;
        retrofit.ErrorHandler errorHandler84 = null;
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter87 = new retrofit.RestAdapter(server77, provider78, executor79, executor80, requestInterceptor81, converter82, profiler83, errorHandler84, log85, logLevel86);
        builder70.logLevel = logLevel86;
        retrofit.Profiler profiler89 = builder70.profiler;
        retrofit.Profiler profiler90 = null;
        builder70.profiler = profiler90;
        retrofit.Server server92 = builder70.server;
        restAdapter47.server = server92;
        retrofit.RestAdapter.Builder builder94 = builder0.setServer(server92);
        retrofit.Profiler profiler95 = null;
        builder0.profiler = profiler95;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(headerArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(request65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor67);
        org.junit.Assert.assertNull(executor68);
        org.junit.Assert.assertNull(executor69);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler89);
        org.junit.Assert.assertNotNull(server92);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test11519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11519");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RestAdapter.Log log2 = builder0.log;
        retrofit.Server server3 = builder0.server;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        retrofit.Server server6 = builder0.server;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(server3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server6);
    }

    @Test
    public void test11520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11520");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.converter.Converter converter4 = restAdapter0.converter;
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Log log6 = null;
        restAdapter0.log = log6;
        retrofit.client.Client.Provider provider8 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter19.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        restAdapter19.requestInterceptor = requestInterceptor21;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel32);
        restAdapter19.log = log31;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean36 = logLevel35.log();
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log31, logLevel35);
        retrofit.RestAdapter.Builder builder38 = builder9.setLog(log31);
        retrofit.Server server39 = builder38.server;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = builder40.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor42 = builder40.requestInterceptor;
        java.util.concurrent.Executor executor43 = builder40.httpExecutor;
        retrofit.RestAdapter.Builder builder45 = builder40.setServer("hi!");
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log47 = restAdapter46.log;
        retrofit.ErrorHandler errorHandler48 = restAdapter46.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler49 = restAdapter46.new RestHandler();
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = null;
        builder50.httpExecutor = executor51;
        retrofit.RestAdapter.Builder builder54 = builder50.setServer("hi!");
        retrofit.Profiler profiler55 = null;
        builder54.profiler = profiler55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor58 = null;
        builder57.httpExecutor = executor58;
        retrofit.RestAdapter.Builder builder61 = builder57.setServer("hi!");
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder63 = builder57.setLog(log62);
        retrofit.RestAdapter restAdapter64 = builder57.build();
        retrofit.converter.Converter converter65 = null;
        builder57.converter = converter65;
        retrofit.ErrorHandler errorHandler67 = null;
        builder57.errorHandler = errorHandler67;
        retrofit.RequestInterceptor requestInterceptor69 = builder57.requestInterceptor;
        builder54.requestInterceptor = requestInterceptor69;
        restAdapter46.requestInterceptor = requestInterceptor69;
        retrofit.RequestInterceptor requestInterceptor72 = restAdapter46.requestInterceptor;
        builder45.requestInterceptor = requestInterceptor72;
        retrofit.RestAdapter.Builder builder74 = builder38.setRequestInterceptor(requestInterceptor72);
        restAdapter0.requestInterceptor = requestInterceptor72;
        retrofit.converter.Converter converter76 = restAdapter0.converter;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(requestInterceptor42);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(log47);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(restAdapter64);
        org.junit.Assert.assertNotNull(requestInterceptor69);
        org.junit.Assert.assertNotNull(requestInterceptor72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(converter76);
    }

    @Test
    public void test11521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11521");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.Server server8 = null;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server8, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log16, logLevel17);
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter19.logLevel = logLevel21;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter19.setLogLevel(logLevel23);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log16, logLevel23);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter27 = builder26.converter;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter28.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter28.requestInterceptor = requestInterceptor30;
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        restAdapter28.log = log40;
        retrofit.ErrorHandler errorHandler44 = null;
        restAdapter28.errorHandler = errorHandler44;
        retrofit.RestAdapter.Log log46 = restAdapter28.log;
        retrofit.RestAdapter.Builder builder47 = builder26.setLog(log46);
        retrofit.RequestInterceptor requestInterceptor48 = builder26.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor49 = builder26.requestInterceptor;
        retrofit.RestAdapter.Builder builder51 = builder26.setServer("hi!");
        retrofit.Server server52 = builder26.server;
        restAdapter25.server = server52;
        retrofit.Profiler profiler54 = restAdapter25.profiler;
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter25.new RestHandler();
        retrofit.client.Client.Provider provider57 = restAdapter25.clientProvider;
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(requestInterceptor48);
        org.junit.Assert.assertNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(server52);
        org.junit.Assert.assertNull(profiler54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider57);
    }

    @Test
    public void test11522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11522");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor3 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.Profiler profiler9 = null;
        builder7.profiler = profiler9;
        retrofit.ErrorHandler errorHandler11 = null;
        builder7.errorHandler = errorHandler11;
        retrofit.RestAdapter.Builder builder14 = builder7.setServer("hi!");
        java.util.concurrent.Executor executor15 = builder7.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.httpExecutor = executor18;
        retrofit.RestAdapter.Builder builder21 = builder17.setServer("hi!");
        retrofit.RestAdapter restAdapter22 = builder21.build();
        retrofit.client.Header[] headerArray25 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList26 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList26, headerArray25);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList26, typedOutput28);
        java.lang.String str30 = request29.getMethod();
        java.lang.String str31 = request29.getMethod();
        retrofit.client.Request request32 = restAdapter22.logAndReplaceRequest(request29);
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter22.requestInterceptor;
        builder7.requestInterceptor = requestInterceptor33;
        restAdapter0.requestInterceptor = requestInterceptor33;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter36.logLevel = logLevel38;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        restAdapter36.requestInterceptor = requestInterceptor40;
        retrofit.RestAdapter.Log log42 = restAdapter36.log;
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter36.new RestHandler();
        retrofit.client.Client.Provider provider44 = null;
        restAdapter36.clientProvider = provider44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter47 = builder46.converter;
        retrofit.RestAdapter.LogLevel logLevel48 = builder46.logLevel;
        builder46.ensureSaneDefaults();
        retrofit.client.Client.Provider provider50 = null;
        builder46.clientProvider = provider50;
        retrofit.Profiler profiler52 = builder46.profiler;
        retrofit.converter.Converter converter53 = builder46.converter;
        restAdapter36.converter = converter53;
        restAdapter0.converter = converter53;
        java.lang.Class<?> wildcardClass56 = converter53.getClass();
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(restAdapter22);
        org.junit.Assert.assertNotNull(headerArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNotNull(requestInterceptor33);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertNull(converter47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler52);
        org.junit.Assert.assertNotNull(converter53);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test11523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11523");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log8 = restAdapter7.log;
        java.util.concurrent.Executor executor9 = restAdapter7.callbackExecutor;
        retrofit.Profiler profiler10 = restAdapter7.profiler;
        retrofit.Profiler profiler11 = null;
        restAdapter7.profiler = profiler11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter7.log = log21;
        restAdapter0.log = log21;
        retrofit.ErrorHandler errorHandler26 = restAdapter0.errorHandler;
        retrofit.client.Client.Provider provider27 = null;
        restAdapter0.clientProvider = provider27;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler26);
    }

    @Test
    public void test11524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11524");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.Log log6 = builder0.log;
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter10 = null;
        restAdapter9.converter = converter10;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter9.requestInterceptor = requestInterceptor12;
        retrofit.Profiler profiler14 = restAdapter9.profiler;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        restAdapter9.logLevel = logLevel15;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.httpExecutor = executor19;
        retrofit.RestAdapter.Builder builder22 = builder18.setServer("hi!");
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder18.setLog(log23);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter25.logLevel;
        retrofit.converter.Converter converter28 = null;
        restAdapter25.converter = converter28;
        retrofit.ErrorHandler errorHandler30 = restAdapter25.errorHandler;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter32 = null;
        builder31.converter = converter32;
        retrofit.client.Client.Provider provider34 = null;
        builder31.clientProvider = provider34;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        builder31.requestInterceptor = requestInterceptor36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.httpExecutor = executor39;
        retrofit.RestAdapter.Builder builder42 = builder38.setServer("hi!");
        retrofit.Profiler profiler43 = null;
        builder42.profiler = profiler43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.httpExecutor = executor46;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("hi!");
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder45.setLog(log50);
        retrofit.RestAdapter restAdapter52 = builder45.build();
        retrofit.converter.Converter converter53 = null;
        builder45.converter = converter53;
        retrofit.ErrorHandler errorHandler55 = null;
        builder45.errorHandler = errorHandler55;
        retrofit.RequestInterceptor requestInterceptor57 = builder45.requestInterceptor;
        builder42.requestInterceptor = requestInterceptor57;
        retrofit.RestAdapter.Builder builder59 = builder31.setRequestInterceptor(requestInterceptor57);
        restAdapter25.requestInterceptor = requestInterceptor57;
        builder18.requestInterceptor = requestInterceptor57;
        restAdapter9.requestInterceptor = requestInterceptor57;
        builder8.requestInterceptor = requestInterceptor57;
        retrofit.Server server64 = builder8.server;
        builder8.ensureSaneDefaults();
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNull(log6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertNotNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(server64);
    }

    @Test
    public void test11525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11525");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.Log log4 = restAdapter0.log;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.client.Response response7 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response9 = restAdapter0.logAndReplaceResponse("", response7, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(requestInterceptor5);
    }

    @Test
    public void test11526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11526");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter1 = null;
        restAdapter0.converter = converter1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.Profiler profiler5 = null;
        restAdapter0.profiler = profiler5;
        retrofit.RestAdapter.Log log7 = restAdapter0.log;
        java.util.concurrent.Executor executor8 = restAdapter0.httpExecutor;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter10 = null;
        restAdapter9.converter = converter10;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter9.requestInterceptor = requestInterceptor12;
        retrofit.Profiler profiler14 = restAdapter9.profiler;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        restAdapter9.logLevel = logLevel15;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.httpExecutor = executor19;
        retrofit.RestAdapter.Builder builder22 = builder18.setServer("hi!");
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder18.setLog(log23);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter25.logLevel;
        retrofit.converter.Converter converter28 = null;
        restAdapter25.converter = converter28;
        retrofit.ErrorHandler errorHandler30 = restAdapter25.errorHandler;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter32 = null;
        builder31.converter = converter32;
        retrofit.client.Client.Provider provider34 = null;
        builder31.clientProvider = provider34;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        builder31.requestInterceptor = requestInterceptor36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.httpExecutor = executor39;
        retrofit.RestAdapter.Builder builder42 = builder38.setServer("hi!");
        retrofit.Profiler profiler43 = null;
        builder42.profiler = profiler43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.httpExecutor = executor46;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("hi!");
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder45.setLog(log50);
        retrofit.RestAdapter restAdapter52 = builder45.build();
        retrofit.converter.Converter converter53 = null;
        builder45.converter = converter53;
        retrofit.ErrorHandler errorHandler55 = null;
        builder45.errorHandler = errorHandler55;
        retrofit.RequestInterceptor requestInterceptor57 = builder45.requestInterceptor;
        builder42.requestInterceptor = requestInterceptor57;
        retrofit.RestAdapter.Builder builder59 = builder31.setRequestInterceptor(requestInterceptor57);
        restAdapter25.requestInterceptor = requestInterceptor57;
        builder18.requestInterceptor = requestInterceptor57;
        restAdapter9.requestInterceptor = requestInterceptor57;
        retrofit.Server server63 = null;
        retrofit.client.Client.Provider provider64 = null;
        java.util.concurrent.Executor executor65 = null;
        java.util.concurrent.Executor executor66 = null;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        retrofit.converter.Converter converter68 = null;
        retrofit.Profiler profiler69 = null;
        retrofit.ErrorHandler errorHandler70 = null;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor72 = restAdapter71.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        restAdapter71.requestInterceptor = requestInterceptor73;
        retrofit.Server server75 = null;
        retrofit.client.Client.Provider provider76 = null;
        java.util.concurrent.Executor executor77 = null;
        java.util.concurrent.Executor executor78 = null;
        retrofit.RequestInterceptor requestInterceptor79 = null;
        retrofit.converter.Converter converter80 = null;
        retrofit.Profiler profiler81 = null;
        retrofit.ErrorHandler errorHandler82 = null;
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter(server75, provider76, executor77, executor78, requestInterceptor79, converter80, profiler81, errorHandler82, log83, logLevel84);
        restAdapter71.log = log83;
        retrofit.RestAdapter.LogLevel logLevel87 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean88 = logLevel87.log();
        retrofit.RestAdapter restAdapter89 = new retrofit.RestAdapter(server63, provider64, executor65, executor66, requestInterceptor67, converter68, profiler69, errorHandler70, log83, logLevel87);
        log83.log("Retrofit-Idle");
        restAdapter9.log = log83;
        log83.log("");
        restAdapter0.log = log83;
        retrofit.Profiler profiler96 = null;
        restAdapter0.profiler = profiler96;
        retrofit.RestAdapter.Log log98 = restAdapter0.log;
        retrofit.Server server99 = restAdapter0.server;
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertNotNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(requestInterceptor72);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(log98);
        org.junit.Assert.assertNull(server99);
    }

    @Test
    public void test11527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11527");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor4 = builder3.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor5 = builder3.requestInterceptor;
        retrofit.ErrorHandler errorHandler6 = null;
        builder3.errorHandler = errorHandler6;
        retrofit.Profiler profiler8 = builder3.profiler;
        java.util.concurrent.Executor executor9 = builder3.httpExecutor;
        retrofit.converter.Converter converter10 = builder3.converter;
        retrofit.client.Client.Provider provider11 = builder3.clientProvider;
        retrofit.RestAdapter.Builder builder13 = builder3.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter15 = builder14.converter;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter16.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        restAdapter16.requestInterceptor = requestInterceptor18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        restAdapter16.log = log28;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter16.errorHandler = errorHandler32;
        retrofit.RestAdapter.Log log34 = restAdapter16.log;
        retrofit.RestAdapter.Builder builder35 = builder14.setLog(log34);
        retrofit.Profiler profiler36 = builder35.profiler;
        retrofit.client.Client.Provider provider37 = builder35.clientProvider;
        retrofit.RestAdapter.Builder builder39 = builder35.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter40 = builder39.build();
        retrofit.RequestInterceptor requestInterceptor41 = restAdapter40.requestInterceptor;
        builder3.requestInterceptor = requestInterceptor41;
        retrofit.RestAdapter restAdapter43 = builder3.build();
        retrofit.ErrorHandler errorHandler44 = restAdapter43.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel45 = restAdapter43.logLevel;
        restAdapter0.logLevel = logLevel45;
        retrofit.Profiler profiler47 = null;
        restAdapter0.profiler = profiler47;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter40);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertNotNull(errorHandler44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test11528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11528");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.logLevel;
        retrofit.RequestInterceptor requestInterceptor2 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        java.util.concurrent.Executor executor4 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertNull(executor4);
    }

    @Test
    public void test11529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11529");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter3 = null;
        builder2.converter = converter3;
        retrofit.client.Client.Provider provider5 = null;
        builder2.clientProvider = provider5;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder2.requestInterceptor = requestInterceptor7;
        retrofit.Profiler profiler9 = builder2.profiler;
        retrofit.converter.Converter converter10 = builder2.converter;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        retrofit.client.Client.Provider provider16 = builder15.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        builder15.logLevel = logLevel17;
        retrofit.RestAdapter restAdapter20 = builder15.build();
        retrofit.ErrorHandler errorHandler21 = builder15.errorHandler;
        retrofit.RestAdapter.Builder builder22 = builder2.setErrorHandler(errorHandler21);
        retrofit.converter.Converter converter23 = builder22.converter;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter25 = builder24.converter;
        retrofit.RestAdapter.LogLevel logLevel26 = builder24.logLevel;
        builder24.ensureSaneDefaults();
        retrofit.client.Client.Provider provider28 = null;
        builder24.clientProvider = provider28;
        retrofit.Profiler profiler30 = builder24.profiler;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = builder31.callbackExecutor;
        retrofit.RestAdapter.Log log33 = builder31.log;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter53.logLevel = logLevel55;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter53.setLogLevel(logLevel57);
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log50, logLevel57);
        retrofit.RestAdapter.Builder builder60 = builder31.setLogLevel(logLevel57);
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.httpExecutor = executor62;
        retrofit.RestAdapter.Builder builder65 = builder61.setServer("hi!");
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder61.setLog(log66);
        builder31.log = log66;
        retrofit.RestAdapter.Builder builder69 = builder24.setLog(log66);
        retrofit.converter.Converter converter70 = builder69.converter;
        builder22.converter = converter70;
        restAdapter0.converter = converter70;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNotNull(errorHandler21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(log33);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(converter70);
    }

    @Test
    public void test11530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11530");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel3 = builder0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel4 = builder0.logLevel;
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor6 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Log log27 = restAdapter9.log;
        retrofit.RestAdapter.Builder builder28 = builder7.setLog(log27);
        retrofit.RequestInterceptor requestInterceptor29 = builder7.requestInterceptor;
        retrofit.RestAdapter.Log log30 = builder7.log;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.httpExecutor = executor32;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("hi!");
        retrofit.Profiler profiler36 = null;
        builder35.profiler = profiler36;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        builder35.requestInterceptor = requestInterceptor38;
        retrofit.RestAdapter restAdapter40 = builder35.build();
        retrofit.converter.Converter converter41 = restAdapter40.converter;
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter40.getLogLevel();
        java.util.concurrent.Executor executor43 = restAdapter40.callbackExecutor;
        builder7.callbackExecutor = executor43;
        builder0.callbackExecutor = executor43;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(restAdapter40);
        org.junit.Assert.assertNotNull(converter41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor43);
    }

    @Test
    public void test11531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11531");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log8 = restAdapter7.log;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        restAdapter7.requestInterceptor = requestInterceptor9;
        retrofit.Server server11 = null;
        restAdapter7.server = server11;
        retrofit.converter.Converter converter13 = restAdapter7.converter;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder14.logLevel = logLevel19;
        retrofit.converter.Converter converter21 = null;
        builder14.converter = converter21;
        retrofit.converter.Converter converter23 = null;
        builder14.converter = converter23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder25.logLevel = logLevel30;
        retrofit.converter.Converter converter32 = null;
        builder25.converter = converter32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor35 = restAdapter34.requestInterceptor;
        retrofit.converter.Converter converter36 = restAdapter34.converter;
        java.util.concurrent.Executor executor37 = null;
        restAdapter34.callbackExecutor = executor37;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor40 = null;
        restAdapter39.httpExecutor = executor40;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        restAdapter39.requestInterceptor = requestInterceptor42;
        retrofit.RestAdapter.Log log44 = restAdapter39.log;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter39.logLevel = logLevel45;
        restAdapter34.logLevel = logLevel45;
        retrofit.RestAdapter.Builder builder48 = builder25.setLogLevel(logLevel45);
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor50 = restAdapter49.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        restAdapter49.requestInterceptor = requestInterceptor51;
        retrofit.Server server53 = null;
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server53, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log61, logLevel62);
        restAdapter49.log = log61;
        retrofit.Profiler profiler65 = null;
        restAdapter49.profiler = profiler65;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        restAdapter49.requestInterceptor = requestInterceptor67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = null;
        builder69.httpExecutor = executor70;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("hi!");
        retrofit.Profiler profiler74 = null;
        builder73.profiler = profiler74;
        retrofit.RequestInterceptor requestInterceptor76 = null;
        builder73.requestInterceptor = requestInterceptor76;
        retrofit.RestAdapter restAdapter78 = builder73.build();
        retrofit.converter.Converter converter79 = restAdapter78.converter;
        java.util.concurrent.Executor executor80 = restAdapter78.callbackExecutor;
        restAdapter49.httpExecutor = executor80;
        builder48.callbackExecutor = executor80;
        builder14.callbackExecutor = executor80;
        restAdapter7.callbackExecutor = executor80;
        restAdapter0.callbackExecutor = executor80;
        retrofit.ErrorHandler errorHandler86 = restAdapter0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor87 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(restAdapter78);
        org.junit.Assert.assertNotNull(converter79);
        org.junit.Assert.assertNotNull(executor80);
        org.junit.Assert.assertNull(errorHandler86);
        org.junit.Assert.assertNull(requestInterceptor87);
    }

    @Test
    public void test11532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11532");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        java.util.concurrent.Executor executor4 = restAdapter0.httpExecutor;
        retrofit.converter.Converter converter5 = restAdapter0.converter;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.client.Client.Provider provider12 = builder11.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean14 = logLevel13.log();
        builder11.logLevel = logLevel13;
        retrofit.RestAdapter restAdapter16 = builder11.build();
        retrofit.ErrorHandler errorHandler17 = builder11.errorHandler;
        restAdapter0.errorHandler = errorHandler17;
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.logLevel;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor21 = restAdapter20.requestInterceptor;
        java.util.concurrent.Executor executor22 = restAdapter20.callbackExecutor;
        retrofit.converter.Converter converter23 = null;
        restAdapter20.converter = converter23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter26 = builder25.converter;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor28 = restAdapter27.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        restAdapter27.requestInterceptor = requestInterceptor29;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        restAdapter27.log = log39;
        retrofit.ErrorHandler errorHandler43 = null;
        restAdapter27.errorHandler = errorHandler43;
        retrofit.RestAdapter.Log log45 = restAdapter27.log;
        retrofit.RestAdapter.Builder builder46 = builder25.setLog(log45);
        restAdapter20.log = log45;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter49 = builder48.converter;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor51 = restAdapter50.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        restAdapter50.requestInterceptor = requestInterceptor52;
        retrofit.Server server54 = null;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log62, logLevel63);
        restAdapter50.log = log62;
        retrofit.ErrorHandler errorHandler66 = null;
        restAdapter50.errorHandler = errorHandler66;
        retrofit.RestAdapter.Log log68 = restAdapter50.log;
        retrofit.RestAdapter.Builder builder69 = builder48.setLog(log68);
        retrofit.Profiler profiler70 = builder69.profiler;
        retrofit.client.Client.Provider provider71 = builder69.clientProvider;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter74 = builder73.build();
        retrofit.ErrorHandler errorHandler75 = restAdapter74.errorHandler;
        java.util.concurrent.Executor executor76 = restAdapter74.httpExecutor;
        restAdapter20.httpExecutor = executor76;
        restAdapter0.httpExecutor = executor76;
        java.lang.Throwable throwable79 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable79, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(errorHandler17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(converter26);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(converter49);
        org.junit.Assert.assertNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(profiler70);
        org.junit.Assert.assertNull(provider71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(restAdapter74);
        org.junit.Assert.assertNotNull(errorHandler75);
        org.junit.Assert.assertNotNull(executor76);
    }

    @Test
    public void test11533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11533");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter7.logLevel = logLevel9;
        retrofit.Profiler profiler11 = restAdapter7.profiler;
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter7.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter7.requestInterceptor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log15 = restAdapter14.log;
        java.util.concurrent.Executor executor16 = restAdapter14.callbackExecutor;
        retrofit.Profiler profiler17 = restAdapter14.profiler;
        retrofit.Profiler profiler18 = null;
        restAdapter14.profiler = profiler18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        restAdapter14.log = log28;
        restAdapter7.log = log28;
        retrofit.RestAdapter.Builder builder33 = builder0.setLog(log28);
        retrofit.RequestInterceptor requestInterceptor34 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter36 = builder35.converter;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor38 = restAdapter37.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        restAdapter37.requestInterceptor = requestInterceptor39;
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel50);
        restAdapter37.log = log49;
        retrofit.ErrorHandler errorHandler53 = null;
        restAdapter37.errorHandler = errorHandler53;
        retrofit.RestAdapter.Log log55 = restAdapter37.log;
        retrofit.RestAdapter.Builder builder56 = builder35.setLog(log55);
        retrofit.Profiler profiler57 = builder56.profiler;
        retrofit.client.Client.Provider provider58 = builder56.clientProvider;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter61 = builder60.build();
        retrofit.RequestInterceptor requestInterceptor62 = restAdapter61.requestInterceptor;
        retrofit.RestAdapter.Builder builder63 = builder0.setRequestInterceptor(requestInterceptor62);
        retrofit.Profiler profiler64 = null;
        builder63.profiler = profiler64;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(profiler57);
        org.junit.Assert.assertNull(provider58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(restAdapter61);
        org.junit.Assert.assertNotNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test11534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11534");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.Profiler profiler9 = builder0.profiler;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder10.logLevel = logLevel15;
        retrofit.converter.Converter converter17 = null;
        builder10.converter = converter17;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter19.requestInterceptor;
        retrofit.converter.Converter converter21 = restAdapter19.converter;
        java.util.concurrent.Executor executor22 = null;
        restAdapter19.callbackExecutor = executor22;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor25 = null;
        restAdapter24.httpExecutor = executor25;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        restAdapter24.requestInterceptor = requestInterceptor27;
        retrofit.RestAdapter.Log log29 = restAdapter24.log;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter24.logLevel = logLevel30;
        restAdapter19.logLevel = logLevel30;
        retrofit.RestAdapter.Builder builder33 = builder10.setLogLevel(logLevel30);
        builder0.logLevel = logLevel30;
        retrofit.Server server35 = builder0.server;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter37 = null;
        builder36.converter = converter37;
        retrofit.client.Client.Provider provider39 = null;
        builder36.clientProvider = provider39;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        builder36.requestInterceptor = requestInterceptor41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler44 = builder43.errorHandler;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor46 = restAdapter45.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        restAdapter45.requestInterceptor = requestInterceptor47;
        retrofit.Server server49 = null;
        retrofit.client.Client.Provider provider50 = null;
        java.util.concurrent.Executor executor51 = null;
        java.util.concurrent.Executor executor52 = null;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        retrofit.converter.Converter converter54 = null;
        retrofit.Profiler profiler55 = null;
        retrofit.ErrorHandler errorHandler56 = null;
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server49, provider50, executor51, executor52, requestInterceptor53, converter54, profiler55, errorHandler56, log57, logLevel58);
        restAdapter45.log = log57;
        retrofit.ErrorHandler errorHandler61 = null;
        restAdapter45.errorHandler = errorHandler61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter64 = builder63.converter;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor66 = restAdapter65.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        restAdapter65.requestInterceptor = requestInterceptor67;
        retrofit.Server server69 = null;
        retrofit.client.Client.Provider provider70 = null;
        java.util.concurrent.Executor executor71 = null;
        java.util.concurrent.Executor executor72 = null;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        retrofit.converter.Converter converter74 = null;
        retrofit.Profiler profiler75 = null;
        retrofit.ErrorHandler errorHandler76 = null;
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server69, provider70, executor71, executor72, requestInterceptor73, converter74, profiler75, errorHandler76, log77, logLevel78);
        restAdapter65.log = log77;
        retrofit.ErrorHandler errorHandler81 = null;
        restAdapter65.errorHandler = errorHandler81;
        retrofit.RestAdapter.Log log83 = restAdapter65.log;
        retrofit.RestAdapter.Builder builder84 = builder63.setLog(log83);
        retrofit.RequestInterceptor requestInterceptor85 = builder63.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor86 = builder63.requestInterceptor;
        retrofit.RestAdapter.Builder builder88 = builder63.setServer("hi!");
        retrofit.Server server89 = builder63.server;
        restAdapter45.server = server89;
        builder43.server = server89;
        retrofit.RestAdapter.Builder builder92 = builder36.setServer(server89);
        retrofit.RestAdapter.Builder builder93 = builder0.setServer(server89);
        retrofit.Profiler profiler94 = null;
        builder93.profiler = profiler94;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter64);
        org.junit.Assert.assertNull(requestInterceptor66);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(requestInterceptor85);
        org.junit.Assert.assertNull(requestInterceptor86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(server89);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test11535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11535");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter4 = builder3.converter;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter5.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        restAdapter5.requestInterceptor = requestInterceptor7;
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel18);
        restAdapter5.log = log17;
        retrofit.ErrorHandler errorHandler21 = null;
        restAdapter5.errorHandler = errorHandler21;
        retrofit.RestAdapter.Log log23 = restAdapter5.log;
        retrofit.RestAdapter.Builder builder24 = builder3.setLog(log23);
        retrofit.Profiler profiler25 = builder24.profiler;
        retrofit.client.Client.Provider provider26 = builder24.clientProvider;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter30 = null;
        builder29.converter = converter30;
        retrofit.client.Client.Provider provider32 = null;
        builder29.clientProvider = provider32;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        builder29.requestInterceptor = requestInterceptor34;
        retrofit.Profiler profiler36 = builder29.profiler;
        retrofit.Profiler profiler37 = null;
        builder29.profiler = profiler37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = builder39.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor41 = builder39.requestInterceptor;
        java.util.concurrent.Executor executor42 = builder39.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel43 = builder39.logLevel;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.httpExecutor = executor45;
        retrofit.RestAdapter.Builder builder48 = builder44.setServer("hi!");
        retrofit.Profiler profiler49 = null;
        builder48.profiler = profiler49;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        builder48.requestInterceptor = requestInterceptor51;
        retrofit.RestAdapter restAdapter53 = builder48.build();
        retrofit.converter.Converter converter54 = null;
        builder48.converter = converter54;
        retrofit.client.Client.Provider provider56 = builder48.clientProvider;
        retrofit.RestAdapter.Builder builder57 = builder39.setClient(provider56);
        retrofit.RestAdapter.Builder builder58 = builder29.setClient(provider56);
        builder28.clientProvider = provider56;
        builder0.clientProvider = provider56;
        retrofit.Server server61 = builder0.server;
        java.util.concurrent.Executor executor62 = builder0.callbackExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(profiler25);
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(requestInterceptor41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(provider56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(server61);
        org.junit.Assert.assertNull(executor62);
    }

    @Test
    public void test11536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11536");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        restAdapter0.log = log12;
        retrofit.ErrorHandler errorHandler16 = null;
        restAdapter0.errorHandler = errorHandler16;
        retrofit.converter.Converter converter18 = null;
        restAdapter0.converter = converter18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter28.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter28.requestInterceptor = requestInterceptor30;
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        restAdapter28.log = log40;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean45 = logLevel44.log();
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log40, logLevel44);
        restAdapter0.logLevel = logLevel44;
        java.util.concurrent.Executor executor48 = restAdapter0.callbackExecutor;
        retrofit.ErrorHandler errorHandler49 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter51 = builder50.converter;
        retrofit.Profiler profiler52 = null;
        builder50.profiler = profiler52;
        retrofit.ErrorHandler errorHandler54 = null;
        builder50.errorHandler = errorHandler54;
        retrofit.RestAdapter.Builder builder57 = builder50.setServer("hi!");
        java.util.concurrent.Executor executor58 = builder50.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel59 = builder50.logLevel;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.httpExecutor = executor61;
        retrofit.RestAdapter.Builder builder64 = builder60.setServer("hi!");
        retrofit.RestAdapter restAdapter65 = builder64.build();
        retrofit.client.Header[] headerArray68 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList69 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList69, headerArray68);
        retrofit.mime.TypedOutput typedOutput71 = null;
        retrofit.client.Request request72 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList69, typedOutput71);
        java.lang.String str73 = request72.getMethod();
        java.lang.String str74 = request72.getMethod();
        retrofit.client.Request request75 = restAdapter65.logAndReplaceRequest(request72);
        retrofit.RequestInterceptor requestInterceptor76 = restAdapter65.requestInterceptor;
        builder50.requestInterceptor = requestInterceptor76;
        retrofit.Profiler profiler78 = null;
        builder50.profiler = profiler78;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter81 = builder80.converter;
        retrofit.Profiler profiler82 = null;
        builder80.profiler = profiler82;
        retrofit.RestAdapter.Log log84 = builder80.log;
        builder80.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor86 = null;
        builder80.requestInterceptor = requestInterceptor86;
        retrofit.ErrorHandler errorHandler88 = null;
        builder80.errorHandler = errorHandler88;
        retrofit.client.Client.Provider provider90 = builder80.clientProvider;
        builder50.clientProvider = provider90;
        restAdapter0.clientProvider = provider90;
        retrofit.RequestInterceptor requestInterceptor93 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor94 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertNull(converter51);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertNotNull(headerArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(request75);
        org.junit.Assert.assertNotNull(requestInterceptor76);
        org.junit.Assert.assertNull(converter81);
        org.junit.Assert.assertNull(log84);
        org.junit.Assert.assertNotNull(provider90);
        org.junit.Assert.assertNull(requestInterceptor93);
        org.junit.Assert.assertNull(requestInterceptor94);
    }

    @Test
    public void test11537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11537");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.Server server5 = restAdapter0.server;
        java.util.concurrent.Executor executor6 = restAdapter0.callbackExecutor;
        retrofit.ErrorHandler errorHandler7 = null;
        restAdapter0.errorHandler = errorHandler7;
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor10 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Log log11 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = builder12.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor14 = builder12.requestInterceptor;
        retrofit.ErrorHandler errorHandler15 = null;
        builder12.errorHandler = errorHandler15;
        retrofit.Profiler profiler17 = builder12.profiler;
        retrofit.Profiler profiler18 = null;
        builder12.profiler = profiler18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.httpExecutor = executor21;
        retrofit.RestAdapter.Builder builder24 = builder20.setServer("hi!");
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder26 = builder20.setLog(log25);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter28 = builder27.converter;
        retrofit.RestAdapter.LogLevel logLevel29 = builder27.logLevel;
        retrofit.RestAdapter.Builder builder30 = builder26.setLogLevel(logLevel29);
        retrofit.ErrorHandler errorHandler31 = builder26.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel32 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder33 = builder12.setLogLevel(logLevel32);
        java.util.concurrent.Executor executor34 = builder33.callbackExecutor;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter35.logLevel;
        retrofit.converter.Converter converter38 = null;
        restAdapter35.converter = converter38;
        retrofit.ErrorHandler errorHandler40 = restAdapter35.errorHandler;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = builder41.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor43 = builder41.requestInterceptor;
        retrofit.ErrorHandler errorHandler44 = null;
        builder41.errorHandler = errorHandler44;
        retrofit.converter.Converter converter46 = null;
        builder41.converter = converter46;
        retrofit.client.Client.Provider provider48 = builder41.clientProvider;
        retrofit.RequestInterceptor requestInterceptor49 = builder41.requestInterceptor;
        retrofit.Server server50 = builder41.server;
        retrofit.Server server51 = null;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel60);
        log59.log("hi!");
        log59.log("Retrofit-Idle");
        builder41.log = log59;
        restAdapter35.log = log59;
        log59.log("hi!");
        builder33.log = log59;
        restAdapter0.log = log59;
        retrofit.RestAdapter.Log log72 = restAdapter0.log;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNull(provider48);
        org.junit.Assert.assertNull(requestInterceptor49);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log72);
    }

    @Test
    public void test11538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11538");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.httpExecutor = executor9;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        retrofit.Profiler profiler13 = null;
        builder12.profiler = profiler13;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        builder12.requestInterceptor = requestInterceptor15;
        retrofit.RestAdapter restAdapter17 = builder12.build();
        retrofit.converter.Converter converter18 = restAdapter17.converter;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        log19.log("");
        restAdapter17.log = log19;
        retrofit.RestAdapter.Builder builder23 = builder0.setLog(log19);
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log25 = restAdapter24.log;
        retrofit.ErrorHandler errorHandler26 = restAdapter24.errorHandler;
        retrofit.converter.Converter converter27 = null;
        restAdapter24.converter = converter27;
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter24.requestInterceptor;
        retrofit.ErrorHandler errorHandler30 = null;
        restAdapter24.errorHandler = errorHandler30;
        retrofit.ErrorHandler errorHandler32 = restAdapter24.errorHandler;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter34 = builder33.converter;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor36 = restAdapter35.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        restAdapter35.requestInterceptor = requestInterceptor37;
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel48);
        restAdapter35.log = log47;
        retrofit.ErrorHandler errorHandler51 = null;
        restAdapter35.errorHandler = errorHandler51;
        retrofit.RestAdapter.Log log53 = restAdapter35.log;
        retrofit.RestAdapter.Builder builder54 = builder33.setLog(log53);
        retrofit.Profiler profiler55 = builder54.profiler;
        retrofit.client.Client.Provider provider56 = builder54.clientProvider;
        retrofit.RestAdapter.Builder builder58 = builder54.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter59 = builder58.build();
        retrofit.RestAdapter.Log log60 = builder58.log;
        retrofit.client.Client.Provider provider61 = builder58.clientProvider;
        restAdapter24.clientProvider = provider61;
        retrofit.RestAdapter.Builder builder63 = builder0.setClient(provider61);
        java.util.concurrent.Executor executor64 = builder0.httpExecutor;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(restAdapter17);
        org.junit.Assert.assertNotNull(converter18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(profiler55);
        org.junit.Assert.assertNull(provider56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(provider61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(executor64);
    }

    @Test
    public void test11539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11539");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.client.Client.Provider provider6 = null;
        restAdapter0.clientProvider = provider6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter18.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        restAdapter18.requestInterceptor = requestInterceptor20;
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        restAdapter18.log = log30;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log30, logLevel34);
        retrofit.RestAdapter.Builder builder37 = builder8.setLog(log30);
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter39 = builder38.converter;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor41 = restAdapter40.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        restAdapter40.requestInterceptor = requestInterceptor42;
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel53);
        restAdapter40.log = log52;
        retrofit.ErrorHandler errorHandler56 = null;
        restAdapter40.errorHandler = errorHandler56;
        retrofit.RestAdapter.Log log58 = restAdapter40.log;
        retrofit.RestAdapter.Builder builder59 = builder38.setLog(log58);
        retrofit.RequestInterceptor requestInterceptor60 = builder38.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor61 = builder38.requestInterceptor;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter63 = null;
        builder62.converter = converter63;
        retrofit.client.Client.Provider provider65 = null;
        builder62.clientProvider = provider65;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        builder62.requestInterceptor = requestInterceptor67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = null;
        builder69.httpExecutor = executor70;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("hi!");
        retrofit.Profiler profiler74 = null;
        builder73.profiler = profiler74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor77 = null;
        builder76.httpExecutor = executor77;
        retrofit.RestAdapter.Builder builder80 = builder76.setServer("hi!");
        retrofit.RestAdapter.Log log81 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder82 = builder76.setLog(log81);
        retrofit.RestAdapter restAdapter83 = builder76.build();
        retrofit.converter.Converter converter84 = null;
        builder76.converter = converter84;
        retrofit.ErrorHandler errorHandler86 = null;
        builder76.errorHandler = errorHandler86;
        retrofit.RequestInterceptor requestInterceptor88 = builder76.requestInterceptor;
        builder73.requestInterceptor = requestInterceptor88;
        retrofit.RestAdapter.Builder builder90 = builder62.setRequestInterceptor(requestInterceptor88);
        retrofit.RestAdapter.Builder builder91 = builder38.setRequestInterceptor(requestInterceptor88);
        retrofit.RestAdapter.Builder builder92 = builder8.setRequestInterceptor(requestInterceptor88);
        restAdapter0.requestInterceptor = requestInterceptor88;
        retrofit.RestAdapter.LogLevel logLevel94 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor95 = restAdapter0.callbackExecutor;
        retrofit.client.Client.Provider provider96 = restAdapter0.clientProvider;
        java.util.concurrent.Executor executor97 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler98 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(requestInterceptor60);
        org.junit.Assert.assertNull(requestInterceptor61);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(restAdapter83);
        org.junit.Assert.assertNotNull(requestInterceptor88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNull(logLevel94);
        org.junit.Assert.assertNull(executor95);
        org.junit.Assert.assertNull(provider96);
        org.junit.Assert.assertNull(executor97);
    }

    @Test
    public void test11540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11540");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter1 = null;
        restAdapter0.converter = converter1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.Profiler profiler5 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        restAdapter0.logLevel = logLevel6;
        java.util.concurrent.Executor executor9 = restAdapter0.httpExecutor;
        retrofit.Server server10 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        restAdapter13.requestInterceptor = requestInterceptor15;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        restAdapter13.log = log25;
        retrofit.ErrorHandler errorHandler29 = null;
        restAdapter13.errorHandler = errorHandler29;
        retrofit.RestAdapter.Log log31 = restAdapter13.log;
        retrofit.RestAdapter.Builder builder32 = builder11.setLog(log31);
        retrofit.Profiler profiler33 = builder32.profiler;
        retrofit.Profiler profiler34 = builder32.profiler;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter36 = builder35.converter;
        retrofit.Profiler profiler37 = null;
        builder35.profiler = profiler37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.client.Client.Provider provider42 = null;
        builder39.clientProvider = provider42;
        retrofit.RestAdapter.Builder builder45 = builder39.setServer("hi!");
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder46.setLog(log51);
        retrofit.RestAdapter restAdapter53 = builder46.build();
        java.util.concurrent.Executor executor54 = restAdapter53.httpExecutor;
        builder45.callbackExecutor = executor54;
        builder35.callbackExecutor = executor54;
        builder32.callbackExecutor = executor54;
        restAdapter0.callbackExecutor = executor54;
        retrofit.client.Client.Provider provider59 = restAdapter0.clientProvider;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor61 = restAdapter60.requestInterceptor;
        java.util.concurrent.Executor executor62 = restAdapter60.callbackExecutor;
        retrofit.converter.Converter converter63 = null;
        restAdapter60.converter = converter63;
        retrofit.RestAdapter.Log log65 = restAdapter60.log;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = null;
        builder66.httpExecutor = executor67;
        retrofit.client.Client.Provider provider69 = null;
        builder66.clientProvider = provider69;
        retrofit.RestAdapter.Builder builder72 = builder66.setServer("hi!");
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor74 = null;
        builder73.httpExecutor = executor74;
        retrofit.RestAdapter.Builder builder77 = builder73.setServer("hi!");
        retrofit.RestAdapter.Log log78 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder79 = builder73.setLog(log78);
        retrofit.RestAdapter restAdapter80 = builder73.build();
        java.util.concurrent.Executor executor81 = restAdapter80.httpExecutor;
        builder72.callbackExecutor = executor81;
        restAdapter60.httpExecutor = executor81;
        restAdapter0.callbackExecutor = executor81;
        retrofit.Profiler profiler85 = null;
        restAdapter0.profiler = profiler85;
        java.util.concurrent.Executor executor87 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(profiler34);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(executor54);
        org.junit.Assert.assertNull(provider59);
        org.junit.Assert.assertNull(requestInterceptor61);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(log65);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNotNull(executor81);
        org.junit.Assert.assertNotNull(executor87);
    }

    @Test
    public void test11541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11541");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = builder7.errorHandler;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter28 = builder27.converter;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor30 = restAdapter29.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        restAdapter29.requestInterceptor = requestInterceptor31;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        restAdapter29.log = log41;
        retrofit.ErrorHandler errorHandler45 = null;
        restAdapter29.errorHandler = errorHandler45;
        retrofit.RestAdapter.Log log47 = restAdapter29.log;
        retrofit.RestAdapter.Builder builder48 = builder27.setLog(log47);
        retrofit.RequestInterceptor requestInterceptor49 = builder27.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor50 = builder27.requestInterceptor;
        retrofit.RestAdapter.Builder builder52 = builder27.setServer("hi!");
        retrofit.Server server53 = builder27.server;
        restAdapter9.server = server53;
        builder7.server = server53;
        retrofit.RestAdapter.Builder builder56 = builder0.setServer(server53);
        retrofit.RestAdapter restAdapter57 = builder0.build();
        retrofit.Profiler profiler58 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder59 = builder0.setProfiler(profiler58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(requestInterceptor49);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(restAdapter57);
    }

    @Test
    public void test11542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11542");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.logLevel = logLevel6;
        retrofit.client.Client.Provider provider8 = null;
        restAdapter0.clientProvider = provider8;
        retrofit.Profiler profiler10 = null;
        restAdapter0.profiler = profiler10;
        retrofit.RestAdapter.Log log12 = restAdapter0.log;
        retrofit.Profiler profiler13 = null;
        restAdapter0.profiler = profiler13;
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(log12);
    }

    @Test
    public void test11543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11543");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.httpExecutor = executor7;
        retrofit.client.Client.Provider provider9 = null;
        builder6.clientProvider = provider9;
        retrofit.RestAdapter.Builder builder12 = builder6.setServer("hi!");
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder13.setLog(log18);
        retrofit.RestAdapter restAdapter20 = builder13.build();
        java.util.concurrent.Executor executor21 = restAdapter20.httpExecutor;
        builder12.callbackExecutor = executor21;
        restAdapter0.httpExecutor = executor21;
        retrofit.ErrorHandler errorHandler24 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Log log25 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = builder26.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor28 = builder26.requestInterceptor;
        java.util.concurrent.Executor executor29 = builder26.httpExecutor;
        retrofit.RestAdapter.Builder builder31 = builder26.setServer("hi!");
        retrofit.RestAdapter restAdapter32 = builder31.build();
        java.util.concurrent.Executor executor33 = builder31.callbackExecutor;
        restAdapter0.httpExecutor = executor33;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNotNull(executor21);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNotNull(executor33);
    }

    @Test
    public void test11544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11544");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter7.requestInterceptor;
        retrofit.Profiler profiler9 = restAdapter7.profiler;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("hi!");
        retrofit.Profiler profiler15 = null;
        builder14.profiler = profiler15;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        builder14.requestInterceptor = requestInterceptor17;
        retrofit.RestAdapter restAdapter19 = builder14.build();
        retrofit.converter.Converter converter20 = null;
        builder14.converter = converter20;
        retrofit.Profiler profiler22 = null;
        builder14.profiler = profiler22;
        retrofit.RestAdapter.Builder builder25 = builder14.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter27 = builder26.converter;
        retrofit.Profiler profiler28 = null;
        builder26.profiler = profiler28;
        retrofit.ErrorHandler errorHandler30 = null;
        builder26.errorHandler = errorHandler30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter33 = builder32.converter;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor35 = restAdapter34.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        restAdapter34.requestInterceptor = requestInterceptor36;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel47);
        restAdapter34.log = log46;
        retrofit.ErrorHandler errorHandler50 = null;
        restAdapter34.errorHandler = errorHandler50;
        retrofit.RestAdapter.Log log52 = restAdapter34.log;
        retrofit.RestAdapter.Builder builder53 = builder32.setLog(log52);
        retrofit.RestAdapter.Builder builder54 = builder26.setLog(log52);
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor56 = null;
        restAdapter55.httpExecutor = executor56;
        retrofit.Profiler profiler58 = null;
        restAdapter55.profiler = profiler58;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        restAdapter55.requestInterceptor = requestInterceptor60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter63 = builder62.converter;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor65 = restAdapter64.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        restAdapter64.requestInterceptor = requestInterceptor66;
        retrofit.Server server68 = null;
        retrofit.client.Client.Provider provider69 = null;
        java.util.concurrent.Executor executor70 = null;
        java.util.concurrent.Executor executor71 = null;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        retrofit.converter.Converter converter73 = null;
        retrofit.Profiler profiler74 = null;
        retrofit.ErrorHandler errorHandler75 = null;
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter(server68, provider69, executor70, executor71, requestInterceptor72, converter73, profiler74, errorHandler75, log76, logLevel77);
        restAdapter64.log = log76;
        retrofit.ErrorHandler errorHandler80 = null;
        restAdapter64.errorHandler = errorHandler80;
        retrofit.RestAdapter.Log log82 = restAdapter64.log;
        retrofit.RestAdapter.Builder builder83 = builder62.setLog(log82);
        retrofit.RequestInterceptor requestInterceptor84 = builder62.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor85 = builder62.requestInterceptor;
        retrofit.RestAdapter.Builder builder87 = builder62.setServer("hi!");
        retrofit.Server server88 = builder62.server;
        restAdapter55.server = server88;
        retrofit.RestAdapter.Builder builder90 = builder54.setServer(server88);
        retrofit.RestAdapter.Builder builder91 = builder14.setServer(server88);
        retrofit.RestAdapter.Log log92 = builder91.log;
        retrofit.ErrorHandler errorHandler93 = builder91.errorHandler;
        restAdapter7.errorHandler = errorHandler93;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(requestInterceptor8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(restAdapter19);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertNull(converter33);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(converter63);
        org.junit.Assert.assertNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNull(requestInterceptor84);
        org.junit.Assert.assertNull(requestInterceptor85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(server88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(log92);
        org.junit.Assert.assertNotNull(errorHandler93);
    }

    @Test
    public void test11545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11545");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder4.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter restAdapter9 = builder4.build();
        retrofit.Profiler profiler10 = restAdapter9.profiler;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.httpExecutor = executor20;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("hi!");
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder19.setLog(log24);
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter26.logLevel = logLevel28;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter26.requestInterceptor = requestInterceptor30;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter26.logLevel = logLevel32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log24, logLevel32);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.httpExecutor = executor36;
        retrofit.RestAdapter.Builder builder39 = builder35.setServer("hi!");
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder35.setLog(log40);
        restAdapter34.log = log40;
        retrofit.ErrorHandler errorHandler43 = null;
        restAdapter34.errorHandler = errorHandler43;
        retrofit.ErrorHandler errorHandler45 = null;
        restAdapter34.errorHandler = errorHandler45;
        retrofit.client.Header[] headerArray49 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList50 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList50, headerArray49);
        retrofit.mime.TypedOutput typedOutput52 = null;
        retrofit.client.Request request53 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList50, typedOutput52);
        retrofit.client.Request request54 = restAdapter34.logAndReplaceRequest(request53);
        java.lang.String str55 = request54.getMethod();
        retrofit.client.Request request56 = restAdapter9.logAndReplaceRequest(request54);
        retrofit.mime.TypedOutput typedOutput57 = request56.getBody();
        java.lang.String str58 = request56.getMethod();
        java.util.List<retrofit.client.Header> headerList59 = request56.getHeaders();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(headerArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(request54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(request56);
        org.junit.Assert.assertNull(typedOutput57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(headerList59);
    }

    @Test
    public void test11546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11546");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.httpExecutor = executor9;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        retrofit.Profiler profiler13 = null;
        builder12.profiler = profiler13;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        builder12.requestInterceptor = requestInterceptor15;
        retrofit.RestAdapter restAdapter17 = builder12.build();
        retrofit.converter.Converter converter18 = restAdapter17.converter;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        log19.log("");
        restAdapter17.log = log19;
        retrofit.RestAdapter.Builder builder23 = builder0.setLog(log19);
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log25 = restAdapter24.log;
        retrofit.ErrorHandler errorHandler26 = restAdapter24.errorHandler;
        retrofit.converter.Converter converter27 = null;
        restAdapter24.converter = converter27;
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter24.requestInterceptor;
        retrofit.ErrorHandler errorHandler30 = null;
        restAdapter24.errorHandler = errorHandler30;
        retrofit.ErrorHandler errorHandler32 = restAdapter24.errorHandler;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter34 = builder33.converter;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor36 = restAdapter35.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        restAdapter35.requestInterceptor = requestInterceptor37;
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel48);
        restAdapter35.log = log47;
        retrofit.ErrorHandler errorHandler51 = null;
        restAdapter35.errorHandler = errorHandler51;
        retrofit.RestAdapter.Log log53 = restAdapter35.log;
        retrofit.RestAdapter.Builder builder54 = builder33.setLog(log53);
        retrofit.Profiler profiler55 = builder54.profiler;
        retrofit.client.Client.Provider provider56 = builder54.clientProvider;
        retrofit.RestAdapter.Builder builder58 = builder54.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter59 = builder58.build();
        retrofit.RestAdapter.Log log60 = builder58.log;
        retrofit.client.Client.Provider provider61 = builder58.clientProvider;
        restAdapter24.clientProvider = provider61;
        retrofit.RestAdapter.Builder builder63 = builder0.setClient(provider61);
        retrofit.Server server64 = null;
        retrofit.client.Client.Provider provider65 = null;
        java.util.concurrent.Executor executor66 = null;
        java.util.concurrent.Executor executor67 = null;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        retrofit.converter.Converter converter69 = null;
        retrofit.Profiler profiler70 = null;
        retrofit.ErrorHandler errorHandler71 = null;
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter(server64, provider65, executor66, executor67, requestInterceptor68, converter69, profiler70, errorHandler71, log72, logLevel73);
        log72.log("hi!");
        log72.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder79 = builder63.setLog(log72);
        log72.log("hi!");
        log72.log("");
        log72.log("");
        log72.log("Retrofit-Idle");
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(restAdapter17);
        org.junit.Assert.assertNotNull(converter18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(profiler55);
        org.junit.Assert.assertNull(provider56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(provider61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test11547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11547");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log6 = restAdapter0.log;
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter10.errorHandler = errorHandler26;
        retrofit.RestAdapter.Log log28 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder29 = builder8.setLog(log28);
        retrofit.RequestInterceptor requestInterceptor30 = builder8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor31 = builder8.requestInterceptor;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter33 = null;
        builder32.converter = converter33;
        retrofit.client.Client.Provider provider35 = null;
        builder32.clientProvider = provider35;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        builder32.requestInterceptor = requestInterceptor37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.Profiler profiler44 = null;
        builder43.profiler = profiler44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder46.setLog(log51);
        retrofit.RestAdapter restAdapter53 = builder46.build();
        retrofit.converter.Converter converter54 = null;
        builder46.converter = converter54;
        retrofit.ErrorHandler errorHandler56 = null;
        builder46.errorHandler = errorHandler56;
        retrofit.RequestInterceptor requestInterceptor58 = builder46.requestInterceptor;
        builder43.requestInterceptor = requestInterceptor58;
        retrofit.RestAdapter.Builder builder60 = builder32.setRequestInterceptor(requestInterceptor58);
        retrofit.RestAdapter.Builder builder61 = builder8.setRequestInterceptor(requestInterceptor58);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = builder62.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor64 = builder62.requestInterceptor;
        retrofit.ErrorHandler errorHandler65 = null;
        builder62.errorHandler = errorHandler65;
        retrofit.converter.Converter converter67 = null;
        builder62.converter = converter67;
        retrofit.ErrorHandler errorHandler69 = null;
        builder62.errorHandler = errorHandler69;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor72 = null;
        builder71.httpExecutor = executor72;
        retrofit.RestAdapter.Builder builder75 = builder71.setServer("hi!");
        retrofit.Profiler profiler76 = null;
        builder75.profiler = profiler76;
        retrofit.RequestInterceptor requestInterceptor78 = null;
        builder75.requestInterceptor = requestInterceptor78;
        retrofit.RestAdapter restAdapter80 = builder75.build();
        retrofit.converter.Converter converter81 = restAdapter80.converter;
        retrofit.RestAdapter.Builder builder82 = builder62.setConverter(converter81);
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter84 = builder83.converter;
        retrofit.Profiler profiler85 = null;
        builder83.profiler = profiler85;
        retrofit.ErrorHandler errorHandler87 = null;
        builder83.errorHandler = errorHandler87;
        retrofit.RestAdapter.Builder builder90 = builder83.setServer("hi!");
        java.util.concurrent.Executor executor91 = builder83.httpExecutor;
        builder83.ensureSaneDefaults();
        retrofit.client.Client.Provider provider93 = builder83.clientProvider;
        builder82.clientProvider = provider93;
        retrofit.RestAdapter.Builder builder95 = builder8.setClient(provider93);
        restAdapter0.clientProvider = provider93;
        retrofit.converter.Converter converter97 = restAdapter0.converter;
        retrofit.ErrorHandler errorHandler98 = null;
        restAdapter0.errorHandler = errorHandler98;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(log6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNull(requestInterceptor64);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNotNull(converter81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(converter84);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNull(executor91);
        org.junit.Assert.assertNotNull(provider93);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNull(converter97);
    }

    @Test
    public void test11548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11548");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder14.setLog(log19);
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter21.logLevel = logLevel23;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter21.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter21.logLevel = logLevel27;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log19, logLevel27);
        builder0.logLevel = logLevel27;
        retrofit.RequestInterceptor requestInterceptor31 = builder0.requestInterceptor;
        retrofit.RestAdapter.Log log32 = null;
        builder0.log = log32;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Log log35 = builder0.log;
        retrofit.Server server36 = builder0.server;
        java.util.concurrent.Executor executor37 = builder0.callbackExecutor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertNotNull(executor37);
    }

    @Test
    public void test11549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11549");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.getUrl();
        java.util.List<retrofit.client.Header> headerList8 = request6.getHeaders();
        java.lang.String str9 = request6.getMethod();
        retrofit.mime.TypedOutput typedOutput10 = request6.getBody();
        java.util.List<retrofit.client.Header> headerList11 = request6.getHeaders();
        java.lang.String str12 = request6.getUrl();
        java.lang.String str13 = request6.getUrl();
        java.util.List<retrofit.client.Header> headerList14 = request6.getHeaders();
        java.util.List<retrofit.client.Header> headerList15 = request6.getHeaders();
        java.lang.String str16 = request6.getUrl();
        retrofit.mime.TypedOutput typedOutput17 = request6.getBody();
        retrofit.mime.TypedOutput typedOutput18 = request6.getBody();
        java.lang.String str19 = request6.getMethod();
        java.lang.String str20 = request6.getUrl();
        java.lang.String str21 = request6.getMethod();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertNull(typedOutput18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test11550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11550");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter0.logLevel = logLevel5;
        retrofit.Server server7 = restAdapter0.server;
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor9 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor9);
    }

    @Test
    public void test11551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11551");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder21.requestInterceptor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder23.setLog(log28);
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor31 = restAdapter30.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        restAdapter30.requestInterceptor = requestInterceptor32;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel43);
        restAdapter30.log = log42;
        retrofit.ErrorHandler errorHandler46 = null;
        restAdapter30.errorHandler = errorHandler46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter49 = builder48.converter;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor51 = restAdapter50.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        restAdapter50.requestInterceptor = requestInterceptor52;
        retrofit.Server server54 = null;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log62, logLevel63);
        restAdapter50.log = log62;
        retrofit.ErrorHandler errorHandler66 = null;
        restAdapter50.errorHandler = errorHandler66;
        retrofit.RestAdapter.Log log68 = restAdapter50.log;
        retrofit.RestAdapter.Builder builder69 = builder48.setLog(log68);
        retrofit.RequestInterceptor requestInterceptor70 = builder48.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor71 = builder48.requestInterceptor;
        retrofit.RestAdapter.Builder builder73 = builder48.setServer("hi!");
        retrofit.Server server74 = builder48.server;
        restAdapter30.server = server74;
        builder29.server = server74;
        java.util.concurrent.Executor executor77 = builder29.callbackExecutor;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor79 = null;
        builder78.httpExecutor = executor79;
        retrofit.RestAdapter.Builder builder82 = builder78.setServer("hi!");
        java.util.concurrent.Executor executor83 = null;
        builder78.httpExecutor = executor83;
        retrofit.RestAdapter restAdapter85 = builder78.build();
        retrofit.converter.Converter converter86 = restAdapter85.converter;
        builder29.converter = converter86;
        retrofit.RestAdapter.Builder builder88 = builder21.setConverter(converter86);
        java.util.concurrent.Executor executor89 = null;
        java.util.concurrent.Executor executor90 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder91 = builder88.setExecutors(executor89, executor90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter49);
        org.junit.Assert.assertNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(requestInterceptor70);
        org.junit.Assert.assertNull(requestInterceptor71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(server74);
        org.junit.Assert.assertNull(executor77);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(restAdapter85);
        org.junit.Assert.assertNotNull(converter86);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test11552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11552");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = null;
        restAdapter10.errorHandler = errorHandler11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder13.setLog(log18);
        retrofit.RestAdapter restAdapter20 = builder13.build();
        retrofit.converter.Converter converter21 = null;
        builder13.converter = converter21;
        retrofit.ErrorHandler errorHandler23 = null;
        builder13.errorHandler = errorHandler23;
        retrofit.RequestInterceptor requestInterceptor25 = builder13.requestInterceptor;
        restAdapter10.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter10.logLevel;
        retrofit.RequestInterceptor requestInterceptor28 = restAdapter10.requestInterceptor;
        retrofit.RestAdapter.Log log29 = restAdapter10.log;
        log29.log("");
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(log29);
    }

    @Test
    public void test11553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11553");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor9 = null;
        restAdapter8.httpExecutor = executor9;
        retrofit.Profiler profiler11 = null;
        restAdapter8.profiler = profiler11;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        restAdapter8.requestInterceptor = requestInterceptor13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter16 = builder15.converter;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter17.requestInterceptor = requestInterceptor19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        restAdapter17.log = log29;
        retrofit.ErrorHandler errorHandler33 = null;
        restAdapter17.errorHandler = errorHandler33;
        retrofit.RestAdapter.Log log35 = restAdapter17.log;
        retrofit.RestAdapter.Builder builder36 = builder15.setLog(log35);
        retrofit.RequestInterceptor requestInterceptor37 = builder15.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor38 = builder15.requestInterceptor;
        retrofit.RestAdapter.Builder builder40 = builder15.setServer("hi!");
        retrofit.Server server41 = builder15.server;
        restAdapter8.server = server41;
        builder0.server = server41;
        retrofit.RestAdapter restAdapter44 = builder0.build();
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.httpExecutor = executor46;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("hi!");
        retrofit.RestAdapter restAdapter50 = builder49.build();
        retrofit.client.Header[] headerArray53 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList54 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList54, headerArray53);
        retrofit.mime.TypedOutput typedOutput56 = null;
        retrofit.client.Request request57 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList54, typedOutput56);
        java.lang.String str58 = request57.getMethod();
        java.lang.String str59 = request57.getMethod();
        retrofit.client.Request request60 = restAdapter50.logAndReplaceRequest(request57);
        retrofit.converter.Converter converter61 = restAdapter50.converter;
        restAdapter44.converter = converter61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter64 = builder63.converter;
        retrofit.Profiler profiler65 = null;
        builder63.profiler = profiler65;
        retrofit.RestAdapter.Builder builder68 = builder63.setServer("Retrofit-Idle");
        retrofit.RequestInterceptor requestInterceptor69 = builder68.requestInterceptor;
        retrofit.client.Client.Provider provider70 = builder68.clientProvider;
        retrofit.Profiler profiler71 = builder68.profiler;
        retrofit.RestAdapter.LogLevel logLevel72 = null;
        builder68.logLevel = logLevel72;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor75 = null;
        builder74.httpExecutor = executor75;
        retrofit.RestAdapter.Builder builder78 = builder74.setServer("hi!");
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder80 = builder74.setLog(log79);
        retrofit.RestAdapter restAdapter81 = builder74.build();
        java.util.concurrent.Executor executor82 = restAdapter81.httpExecutor;
        retrofit.client.Client.Provider provider83 = null;
        restAdapter81.clientProvider = provider83;
        retrofit.Profiler profiler85 = restAdapter81.profiler;
        retrofit.Server server86 = restAdapter81.server;
        retrofit.RestAdapter.LogLevel logLevel87 = restAdapter81.logLevel;
        java.util.concurrent.Executor executor88 = restAdapter81.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler89 = restAdapter81.new RestHandler();
        retrofit.ErrorHandler errorHandler90 = restAdapter81.errorHandler;
        retrofit.RestAdapter.Builder builder91 = builder68.setErrorHandler(errorHandler90);
        restAdapter44.errorHandler = errorHandler90;
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(requestInterceptor37);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(server41);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(restAdapter50);
        org.junit.Assert.assertNotNull(headerArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(request60);
        org.junit.Assert.assertNotNull(converter61);
        org.junit.Assert.assertNull(converter64);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(requestInterceptor69);
        org.junit.Assert.assertNull(provider70);
        org.junit.Assert.assertNull(profiler71);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(restAdapter81);
        org.junit.Assert.assertNotNull(executor82);
        org.junit.Assert.assertNull(profiler85);
        org.junit.Assert.assertNotNull(server86);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor88);
        org.junit.Assert.assertNotNull(errorHandler90);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test11554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11554");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        restAdapter0.log = log12;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter0.requestInterceptor;
        retrofit.client.Client.Provider provider19 = restAdapter0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter0.getLogLevel();
        retrofit.Profiler profiler21 = null;
        restAdapter0.profiler = profiler21;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(logLevel20);
    }

    @Test
    public void test11555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11555");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.Server server6 = builder0.server;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        builder7.ensureSaneDefaults();
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.httpExecutor = executor20;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("hi!");
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder19.setLog(log24);
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter26.logLevel = logLevel28;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter26.requestInterceptor = requestInterceptor30;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter26.logLevel = logLevel32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log24, logLevel32);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.httpExecutor = executor36;
        retrofit.RestAdapter.Builder builder39 = builder35.setServer("hi!");
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder35.setLog(log40);
        restAdapter34.log = log40;
        builder7.log = log40;
        retrofit.RestAdapter.Builder builder44 = builder0.setLog(log40);
        retrofit.RestAdapter.LogLevel logLevel45 = null;
        builder0.logLevel = logLevel45;
        retrofit.client.Client client47 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder48 = builder0.setClient(client47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test11556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11556");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter7.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        restAdapter7.requestInterceptor = requestInterceptor9;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        restAdapter7.log = log19;
        retrofit.ErrorHandler errorHandler23 = null;
        restAdapter7.errorHandler = errorHandler23;
        retrofit.RestAdapter.Log log25 = restAdapter7.log;
        retrofit.RestAdapter.Builder builder26 = builder5.setLog(log25);
        restAdapter0.log = log25;
        retrofit.RestAdapter.Log log28 = restAdapter0.log;
        retrofit.Profiler profiler29 = null;
        restAdapter0.profiler = profiler29;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(log28);
    }

    @Test
    public void test11557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11557");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.RestAdapter.Log log26 = restAdapter8.log;
        retrofit.RestAdapter.Builder builder27 = builder6.setLog(log26);
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter29.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder28.setLogLevel(logLevel31);
        java.lang.Class<?> wildcardClass34 = builder33.getClass();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test11558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11558");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.client.Client.Provider provider1 = null;
        restAdapter0.clientProvider = provider1;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = null;
        builder5.httpExecutor = executor6;
        retrofit.RestAdapter.Builder builder9 = builder5.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder5.logLevel = logLevel10;
        retrofit.converter.Converter converter12 = null;
        builder5.converter = converter12;
        retrofit.client.Client.Provider provider14 = null;
        builder5.clientProvider = provider14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter17 = builder16.converter;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter18.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        restAdapter18.requestInterceptor = requestInterceptor20;
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        restAdapter18.log = log30;
        retrofit.ErrorHandler errorHandler34 = null;
        restAdapter18.errorHandler = errorHandler34;
        retrofit.RestAdapter.Log log36 = restAdapter18.log;
        retrofit.RestAdapter.Builder builder37 = builder16.setLog(log36);
        builder16.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder39.setLog(log44);
        retrofit.RestAdapter restAdapter46 = builder39.build();
        java.util.concurrent.Executor executor47 = restAdapter46.httpExecutor;
        builder16.callbackExecutor = executor47;
        builder5.httpExecutor = executor47;
        restAdapter0.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = null;
        builder51.httpExecutor = executor52;
        retrofit.RestAdapter.Builder builder55 = builder51.setServer("hi!");
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder57 = builder51.setLog(log56);
        retrofit.RestAdapter restAdapter58 = builder51.build();
        java.util.concurrent.Executor executor59 = restAdapter58.httpExecutor;
        java.util.concurrent.Executor executor60 = restAdapter58.httpExecutor;
        retrofit.ErrorHandler errorHandler61 = restAdapter58.errorHandler;
        restAdapter0.errorHandler = errorHandler61;
        retrofit.converter.Converter converter63 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor65 = null;
        builder64.httpExecutor = executor65;
        retrofit.client.Client.Provider provider67 = null;
        builder64.clientProvider = provider67;
        retrofit.client.Client.Provider provider69 = builder64.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder71 = builder64.setLogLevel(logLevel70);
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor73 = null;
        builder72.httpExecutor = executor73;
        retrofit.RestAdapter.Builder builder76 = builder72.setServer("hi!");
        retrofit.Profiler profiler77 = null;
        builder76.profiler = profiler77;
        retrofit.RequestInterceptor requestInterceptor79 = null;
        builder76.requestInterceptor = requestInterceptor79;
        retrofit.RestAdapter restAdapter81 = builder76.build();
        retrofit.converter.Converter converter82 = restAdapter81.converter;
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        log83.log("");
        restAdapter81.log = log83;
        retrofit.RestAdapter.Builder builder87 = builder64.setLog(log83);
        log83.log("Retrofit-Idle");
        restAdapter0.log = log83;
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(restAdapter58);
        org.junit.Assert.assertNotNull(executor59);
        org.junit.Assert.assertNotNull(executor60);
        org.junit.Assert.assertNotNull(errorHandler61);
        org.junit.Assert.assertNull(converter63);
        org.junit.Assert.assertNull(provider69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(restAdapter81);
        org.junit.Assert.assertNotNull(converter82);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test11559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11559");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        builder4.logLevel = logLevel6;
        retrofit.RestAdapter restAdapter9 = builder4.build();
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.converter.Converter converter13 = null;
        restAdapter10.converter = converter13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter16 = builder15.converter;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter17.requestInterceptor = requestInterceptor19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        restAdapter17.log = log29;
        retrofit.ErrorHandler errorHandler33 = null;
        restAdapter17.errorHandler = errorHandler33;
        retrofit.RestAdapter.Log log35 = restAdapter17.log;
        retrofit.RestAdapter.Builder builder36 = builder15.setLog(log35);
        restAdapter10.log = log35;
        retrofit.RestAdapter.Builder builder38 = builder4.setLog(log35);
        retrofit.RequestInterceptor requestInterceptor39 = null;
        builder38.requestInterceptor = requestInterceptor39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.httpExecutor = executor42;
        retrofit.RestAdapter.Builder builder45 = builder41.setServer("hi!");
        retrofit.Profiler profiler46 = null;
        builder45.profiler = profiler46;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        builder45.requestInterceptor = requestInterceptor48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = builder50.callbackExecutor;
        retrofit.RestAdapter.Log log52 = builder50.log;
        retrofit.Server server53 = null;
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel70);
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter72.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter72.logLevel = logLevel74;
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter72.setLogLevel(logLevel76);
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter(server53, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log69, logLevel76);
        retrofit.RestAdapter.Builder builder79 = builder50.setLogLevel(logLevel76);
        builder45.logLevel = logLevel76;
        builder38.logLevel = logLevel76;
        builder38.ensureSaneDefaults();
        retrofit.Profiler profiler83 = null;
        builder38.profiler = profiler83;
        retrofit.RestAdapter.LogLevel logLevel85 = builder38.logLevel;
        builder38.ensureSaneDefaults();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test11560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11560");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.httpExecutor = executor9;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder8.setLog(log13);
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter15.logLevel = logLevel17;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter15.requestInterceptor = requestInterceptor19;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter15.logLevel = logLevel21;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log13, logLevel21);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder30 = builder24.setLog(log29);
        restAdapter23.log = log29;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter23.errorHandler = errorHandler32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.RestAdapter.Builder builder38 = builder34.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder34.logLevel = logLevel39;
        retrofit.converter.Converter converter41 = null;
        builder34.converter = converter41;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor44 = restAdapter43.requestInterceptor;
        retrofit.converter.Converter converter45 = restAdapter43.converter;
        java.util.concurrent.Executor executor46 = null;
        restAdapter43.callbackExecutor = executor46;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor49 = null;
        restAdapter48.httpExecutor = executor49;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        restAdapter48.requestInterceptor = requestInterceptor51;
        retrofit.RestAdapter.Log log53 = restAdapter48.log;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter48.logLevel = logLevel54;
        restAdapter43.logLevel = logLevel54;
        retrofit.RestAdapter.Builder builder57 = builder34.setLogLevel(logLevel54);
        retrofit.RestAdapter.Log log58 = builder57.log;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor60 = null;
        builder59.httpExecutor = executor60;
        retrofit.RestAdapter.Builder builder63 = builder59.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder59.logLevel = logLevel64;
        retrofit.converter.Converter converter66 = null;
        builder59.converter = converter66;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor69 = restAdapter68.requestInterceptor;
        retrofit.converter.Converter converter70 = restAdapter68.converter;
        java.util.concurrent.Executor executor71 = null;
        restAdapter68.callbackExecutor = executor71;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor74 = null;
        restAdapter73.httpExecutor = executor74;
        retrofit.RequestInterceptor requestInterceptor76 = null;
        restAdapter73.requestInterceptor = requestInterceptor76;
        retrofit.RestAdapter.Log log78 = restAdapter73.log;
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter73.logLevel = logLevel79;
        restAdapter68.logLevel = logLevel79;
        retrofit.RestAdapter.Builder builder82 = builder59.setLogLevel(logLevel79);
        builder57.logLevel = logLevel79;
        restAdapter23.setLogLevel(logLevel79);
        retrofit.RestAdapter.LogLevel logLevel85 = restAdapter23.logLevel;
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor44);
        org.junit.Assert.assertNull(converter45);
        org.junit.Assert.assertNull(log53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(log58);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor69);
        org.junit.Assert.assertNull(converter70);
        org.junit.Assert.assertNull(log78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test11561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11561");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.converter.Converter converter8 = null;
        builder0.converter = converter8;
        retrofit.ErrorHandler errorHandler10 = null;
        builder0.errorHandler = errorHandler10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter13 = builder12.converter;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter14.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        restAdapter14.requestInterceptor = requestInterceptor16;
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        restAdapter14.log = log26;
        retrofit.ErrorHandler errorHandler30 = null;
        restAdapter14.errorHandler = errorHandler30;
        retrofit.RestAdapter.Log log32 = restAdapter14.log;
        retrofit.RestAdapter.Builder builder33 = builder12.setLog(log32);
        retrofit.Profiler profiler34 = builder12.profiler;
        retrofit.converter.Converter converter35 = null;
        builder12.converter = converter35;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.httpExecutor = executor46;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("hi!");
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder45.setLog(log50);
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter52.logLevel = logLevel54;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        restAdapter52.requestInterceptor = requestInterceptor56;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter52.logLevel = logLevel58;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log50, logLevel58);
        retrofit.RestAdapter.Builder builder61 = builder12.setLog(log50);
        retrofit.client.Client.Provider provider62 = builder61.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel63 = builder61.logLevel;
        retrofit.RestAdapter.Builder builder64 = builder0.setLogLevel(logLevel63);
        java.util.concurrent.Executor executor65 = builder0.httpExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(profiler34);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(executor65);
    }

    @Test
    public void test11562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11562");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor6 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder15 = builder9.setLog(log14);
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter16.logLevel = logLevel18;
        retrofit.Profiler profiler20 = restAdapter16.profiler;
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter16.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor22 = null;
        restAdapter16.requestInterceptor = requestInterceptor22;
        retrofit.Profiler profiler24 = null;
        restAdapter16.profiler = profiler24;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter26.requestInterceptor;
        retrofit.converter.Converter converter28 = restAdapter26.converter;
        java.util.concurrent.Executor executor29 = null;
        restAdapter26.callbackExecutor = executor29;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter26.logLevel = logLevel31;
        restAdapter16.setLogLevel(logLevel31);
        builder9.logLevel = logLevel31;
        builder9.ensureSaneDefaults();
        java.util.concurrent.Executor executor36 = builder9.httpExecutor;
        retrofit.client.Client.Provider provider37 = builder9.clientProvider;
        restAdapter0.clientProvider = provider37;
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter0.getLogLevel();
        retrofit.Profiler profiler40 = restAdapter0.profiler;
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(executor36);
        org.junit.Assert.assertNotNull(provider37);
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertNull(profiler40);
    }

    @Test
    public void test11563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11563");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList9, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput17);
        java.lang.String str19 = request18.getMethod();
        java.lang.String str20 = request18.getMethod();
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test11564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11564");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder0.requestInterceptor = requestInterceptor20;
        retrofit.RestAdapter restAdapter22 = builder0.build();
        retrofit.Server server23 = builder0.server;
        retrofit.Profiler profiler24 = null;
        builder0.profiler = profiler24;
        retrofit.RestAdapter restAdapter26 = builder0.build();
        retrofit.client.Client.Provider provider27 = builder0.clientProvider;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder40 = builder36.setServer("hi!");
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder36.setLog(log41);
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter43.logLevel = logLevel45;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        restAdapter43.requestInterceptor = requestInterceptor47;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter43.logLevel = logLevel49;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log41, logLevel49);
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = null;
        builder52.httpExecutor = executor53;
        retrofit.RestAdapter.Builder builder56 = builder52.setServer("hi!");
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder52.setLog(log57);
        restAdapter51.log = log57;
        retrofit.client.Header[] headerArray62 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList63 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList63, headerArray62);
        retrofit.mime.TypedOutput typedOutput65 = null;
        retrofit.client.Request request66 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList63, typedOutput65);
        java.lang.String str67 = request66.getUrl();
        java.lang.String str68 = request66.getUrl();
        retrofit.client.Request request69 = restAdapter51.logAndReplaceRequest(request66);
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor72 = null;
        builder71.httpExecutor = executor72;
        retrofit.RestAdapter.Builder builder75 = builder71.setServer("hi!");
        retrofit.Profiler profiler76 = null;
        builder75.profiler = profiler76;
        retrofit.RequestInterceptor requestInterceptor78 = null;
        builder75.requestInterceptor = requestInterceptor78;
        retrofit.RestAdapter restAdapter80 = builder75.build();
        retrofit.converter.Converter converter81 = restAdapter80.converter;
        retrofit.RestAdapter.Log log82 = restAdapter80.log;
        retrofit.converter.Converter converter83 = restAdapter80.converter;
        restAdapter51.converter = converter83;
        builder0.converter = converter83;
        retrofit.RequestInterceptor requestInterceptor86 = builder0.requestInterceptor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNotNull(restAdapter22);
        org.junit.Assert.assertNotNull(server23);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNotNull(provider27);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(headerArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(request69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNotNull(converter81);
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNotNull(converter83);
        org.junit.Assert.assertNotNull(requestInterceptor86);
    }

    @Test
    public void test11565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11565");
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList13, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList13, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("Retrofit-Idle", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList13, typedOutput25);
        java.util.List<retrofit.client.Header> headerList27 = request26.getHeaders();
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(headerList27);
    }

    @Test
    public void test11566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11566");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RestAdapter.Log log2 = builder0.log;
        retrofit.Server server3 = builder0.server;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log7 = restAdapter6.log;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor10 = builder8.requestInterceptor;
        retrofit.ErrorHandler errorHandler11 = null;
        builder8.errorHandler = errorHandler11;
        retrofit.converter.Converter converter13 = null;
        builder8.converter = converter13;
        retrofit.ErrorHandler errorHandler15 = null;
        builder8.errorHandler = errorHandler15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.httpExecutor = executor18;
        retrofit.RestAdapter.Builder builder21 = builder17.setServer("hi!");
        retrofit.Profiler profiler22 = null;
        builder21.profiler = profiler22;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        builder21.requestInterceptor = requestInterceptor24;
        retrofit.RestAdapter restAdapter26 = builder21.build();
        retrofit.converter.Converter converter27 = restAdapter26.converter;
        retrofit.RestAdapter.Builder builder28 = builder8.setConverter(converter27);
        restAdapter6.converter = converter27;
        builder0.converter = converter27;
        retrofit.Server server31 = builder0.server;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter33 = builder32.converter;
        retrofit.Profiler profiler34 = null;
        builder32.profiler = profiler34;
        retrofit.ErrorHandler errorHandler36 = null;
        builder32.errorHandler = errorHandler36;
        retrofit.RestAdapter.Builder builder39 = builder32.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor41 = restAdapter40.requestInterceptor;
        java.util.concurrent.Executor executor42 = restAdapter40.callbackExecutor;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter43.logLevel = logLevel45;
        retrofit.Profiler profiler47 = restAdapter43.profiler;
        retrofit.RestAdapter.RestHandler restHandler48 = restAdapter43.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor49 = restAdapter43.requestInterceptor;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log51 = restAdapter50.log;
        java.util.concurrent.Executor executor52 = restAdapter50.callbackExecutor;
        retrofit.Profiler profiler53 = restAdapter50.profiler;
        retrofit.Profiler profiler54 = null;
        restAdapter50.profiler = profiler54;
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel65);
        restAdapter50.log = log64;
        restAdapter43.log = log64;
        restAdapter40.log = log64;
        retrofit.RestAdapter.Builder builder70 = builder32.setLog(log64);
        java.util.concurrent.Executor executor71 = builder70.httpExecutor;
        retrofit.Server server72 = builder70.server;
        retrofit.RestAdapter.Builder builder73 = builder0.setServer(server72);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(server3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNotNull(converter27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertNull(converter33);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(requestInterceptor41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler47);
        org.junit.Assert.assertNull(requestInterceptor49);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(executor71);
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test11567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11567");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.Profiler profiler23 = builder21.profiler;
        java.util.concurrent.Executor executor24 = builder21.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        builder21.requestInterceptor = requestInterceptor25;
        builder21.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter28.requestInterceptor;
        java.util.concurrent.Executor executor30 = restAdapter28.callbackExecutor;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter31.logLevel = logLevel33;
        retrofit.Profiler profiler35 = restAdapter31.profiler;
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter31.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor37 = restAdapter31.requestInterceptor;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log39 = restAdapter38.log;
        java.util.concurrent.Executor executor40 = restAdapter38.callbackExecutor;
        retrofit.Profiler profiler41 = restAdapter38.profiler;
        retrofit.Profiler profiler42 = null;
        restAdapter38.profiler = profiler42;
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel53);
        restAdapter38.log = log52;
        restAdapter31.log = log52;
        restAdapter28.log = log52;
        java.util.concurrent.Executor executor58 = restAdapter28.httpExecutor;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor60 = restAdapter59.requestInterceptor;
        java.util.concurrent.Executor executor61 = restAdapter59.callbackExecutor;
        retrofit.RestAdapter.Log log62 = restAdapter59.log;
        java.util.concurrent.Executor executor63 = restAdapter59.httpExecutor;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log65 = restAdapter64.log;
        retrofit.ErrorHandler errorHandler66 = restAdapter64.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter64.new RestHandler();
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor69 = null;
        builder68.httpExecutor = executor69;
        retrofit.RestAdapter.Builder builder72 = builder68.setServer("hi!");
        retrofit.Profiler profiler73 = null;
        builder72.profiler = profiler73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor76 = null;
        builder75.httpExecutor = executor76;
        retrofit.RestAdapter.Builder builder79 = builder75.setServer("hi!");
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder81 = builder75.setLog(log80);
        retrofit.RestAdapter restAdapter82 = builder75.build();
        retrofit.converter.Converter converter83 = null;
        builder75.converter = converter83;
        retrofit.ErrorHandler errorHandler85 = null;
        builder75.errorHandler = errorHandler85;
        retrofit.RequestInterceptor requestInterceptor87 = builder75.requestInterceptor;
        builder72.requestInterceptor = requestInterceptor87;
        restAdapter64.requestInterceptor = requestInterceptor87;
        retrofit.RequestInterceptor requestInterceptor90 = restAdapter64.requestInterceptor;
        restAdapter59.requestInterceptor = requestInterceptor90;
        restAdapter28.requestInterceptor = requestInterceptor90;
        builder21.requestInterceptor = requestInterceptor90;
        retrofit.converter.Converter converter94 = builder21.converter;
        retrofit.RequestInterceptor requestInterceptor95 = builder21.requestInterceptor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler35);
        org.junit.Assert.assertNull(requestInterceptor37);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNull(requestInterceptor60);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNull(log62);
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNull(log65);
        org.junit.Assert.assertNull(errorHandler66);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(restAdapter82);
        org.junit.Assert.assertNotNull(requestInterceptor87);
        org.junit.Assert.assertNotNull(requestInterceptor90);
        org.junit.Assert.assertNotNull(converter94);
        org.junit.Assert.assertNotNull(requestInterceptor95);
    }

    @Test
    public void test11568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11568");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter0.requestInterceptor = requestInterceptor4;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter0.logLevel = logLevel6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.httpExecutor = executor9;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        retrofit.Profiler profiler13 = null;
        builder12.profiler = profiler13;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        builder12.requestInterceptor = requestInterceptor15;
        retrofit.RestAdapter restAdapter17 = builder12.build();
        retrofit.converter.Converter converter18 = null;
        builder12.converter = converter18;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor21 = restAdapter20.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        restAdapter20.requestInterceptor = requestInterceptor22;
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter20.getLogLevel();
        retrofit.client.Client.Provider provider25 = null;
        restAdapter20.clientProvider = provider25;
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter20.logLevel;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter28.logLevel = logLevel30;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        restAdapter28.requestInterceptor = requestInterceptor32;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter28.logLevel = logLevel34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter37 = builder36.converter;
        retrofit.Profiler profiler38 = null;
        builder36.profiler = profiler38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.httpExecutor = executor41;
        retrofit.client.Client.Provider provider43 = null;
        builder40.clientProvider = provider43;
        retrofit.RestAdapter.Builder builder46 = builder40.setServer("hi!");
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = null;
        builder47.httpExecutor = executor48;
        retrofit.RestAdapter.Builder builder51 = builder47.setServer("hi!");
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = builder47.setLog(log52);
        retrofit.RestAdapter restAdapter54 = builder47.build();
        java.util.concurrent.Executor executor55 = restAdapter54.httpExecutor;
        builder46.callbackExecutor = executor55;
        builder36.callbackExecutor = executor55;
        restAdapter28.httpExecutor = executor55;
        restAdapter20.callbackExecutor = executor55;
        builder12.callbackExecutor = executor55;
        restAdapter0.callbackExecutor = executor55;
        retrofit.RestAdapter.RestHandler restHandler62 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor63 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(restAdapter17);
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter37);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter54);
        org.junit.Assert.assertNotNull(executor55);
        org.junit.Assert.assertNull(executor63);
    }

    @Test
    public void test11569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11569");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.Profiler profiler5 = builder0.profiler;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.httpExecutor = executor7;
        retrofit.RestAdapter.Builder builder10 = builder6.setServer("hi!");
        retrofit.client.Client.Provider provider11 = builder10.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean13 = logLevel12.log();
        builder10.logLevel = logLevel12;
        builder0.logLevel = logLevel12;
        retrofit.ErrorHandler errorHandler16 = builder0.errorHandler;
        retrofit.Profiler profiler17 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder18 = builder0.setProfiler(profiler17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(errorHandler16);
    }

    @Test
    public void test11570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11570");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor6 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor9 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("hi!");
        retrofit.Profiler profiler15 = null;
        builder14.profiler = profiler15;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        builder14.requestInterceptor = requestInterceptor17;
        retrofit.RestAdapter restAdapter19 = builder14.build();
        retrofit.converter.Converter converter20 = restAdapter19.converter;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        log21.log("");
        restAdapter19.log = log21;
        retrofit.RequestInterceptor requestInterceptor25 = restAdapter19.requestInterceptor;
        retrofit.client.Header[] headerArray30 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList31 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList31, headerArray30);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList31, typedOutput33);
        java.lang.String str35 = request34.getUrl();
        java.util.List<retrofit.client.Header> headerList36 = request34.getHeaders();
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("hi!", "", headerList36, typedOutput37);
        java.lang.String str39 = request38.getMethod();
        retrofit.mime.TypedOutput typedOutput40 = request38.getBody();
        java.lang.String str41 = request38.getMethod();
        retrofit.client.Request request42 = restAdapter19.logAndReplaceRequest(request38);
        java.util.concurrent.Executor executor43 = restAdapter19.callbackExecutor;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = builder44.callbackExecutor;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.Server server48 = restAdapter46.server;
        retrofit.client.Client.Provider provider49 = null;
        restAdapter46.clientProvider = provider49;
        retrofit.client.Client.Provider provider51 = null;
        restAdapter46.clientProvider = provider51;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor54 = restAdapter53.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        restAdapter53.requestInterceptor = requestInterceptor55;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel66);
        restAdapter53.log = log65;
        retrofit.ErrorHandler errorHandler69 = null;
        restAdapter53.errorHandler = errorHandler69;
        retrofit.RestAdapter.Log log71 = restAdapter53.log;
        java.util.concurrent.Executor executor72 = restAdapter53.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter53.logLevel = logLevel73;
        restAdapter46.logLevel = logLevel73;
        retrofit.RestAdapter.Builder builder76 = builder44.setLogLevel(logLevel73);
        restAdapter19.logLevel = logLevel73;
        restAdapter0.logLevel = logLevel73;
        retrofit.Profiler profiler79 = null;
        restAdapter0.profiler = profiler79;
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(restAdapter19);
        org.junit.Assert.assertNotNull(converter20);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(headerArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(headerList36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNull(typedOutput40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(request42);
        org.junit.Assert.assertNotNull(executor43);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertNull(server48);
        org.junit.Assert.assertNull(requestInterceptor54);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertNull(executor72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test11571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11571");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log22, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLog(log22);
        retrofit.RequestInterceptor requestInterceptor30 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.httpExecutor = executor32;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("hi!");
        retrofit.Profiler profiler36 = null;
        builder35.profiler = profiler36;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        builder35.requestInterceptor = requestInterceptor38;
        retrofit.RestAdapter restAdapter40 = builder35.build();
        retrofit.converter.Converter converter41 = restAdapter40.converter;
        java.util.concurrent.Executor executor42 = restAdapter40.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter40.logLevel;
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter40.logLevel;
        builder0.logLevel = logLevel44;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(restAdapter40);
        org.junit.Assert.assertNotNull(converter41);
        org.junit.Assert.assertNotNull(executor42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test11572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11572");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.Server server9 = null;
        builder0.server = server9;
        retrofit.converter.Converter converter11 = null;
        builder0.converter = converter11;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        restAdapter13.requestInterceptor = requestInterceptor15;
        retrofit.ErrorHandler errorHandler17 = null;
        restAdapter13.errorHandler = errorHandler17;
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel28);
        retrofit.ErrorHandler errorHandler30 = null;
        restAdapter29.errorHandler = errorHandler30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.httpExecutor = executor33;
        retrofit.RestAdapter.Builder builder36 = builder32.setServer("hi!");
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder38 = builder32.setLog(log37);
        retrofit.RestAdapter restAdapter39 = builder32.build();
        retrofit.converter.Converter converter40 = null;
        builder32.converter = converter40;
        retrofit.ErrorHandler errorHandler42 = null;
        builder32.errorHandler = errorHandler42;
        retrofit.RequestInterceptor requestInterceptor44 = builder32.requestInterceptor;
        restAdapter29.requestInterceptor = requestInterceptor44;
        restAdapter13.requestInterceptor = requestInterceptor44;
        retrofit.RestAdapter.Builder builder47 = builder0.setRequestInterceptor(requestInterceptor44);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter48 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(restAdapter39);
        org.junit.Assert.assertNotNull(requestInterceptor44);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test11573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11573");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder6.setLogLevel(logLevel9);
        retrofit.converter.Converter converter11 = builder6.converter;
        java.util.concurrent.Executor executor12 = builder6.callbackExecutor;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter13.logLevel = logLevel15;
        retrofit.RestAdapter.Builder builder17 = builder6.setLogLevel(logLevel15);
        java.util.concurrent.Executor executor18 = builder6.httpExecutor;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.httpExecutor = executor20;
        retrofit.client.Client.Provider provider22 = null;
        builder19.clientProvider = provider22;
        retrofit.RestAdapter.Builder builder25 = builder19.setServer("hi!");
        retrofit.Profiler profiler26 = builder19.profiler;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter28 = builder27.converter;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor30 = restAdapter29.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        restAdapter29.requestInterceptor = requestInterceptor31;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        restAdapter29.log = log41;
        retrofit.ErrorHandler errorHandler45 = null;
        restAdapter29.errorHandler = errorHandler45;
        retrofit.RestAdapter.Log log47 = restAdapter29.log;
        retrofit.RestAdapter.Builder builder48 = builder27.setLog(log47);
        retrofit.RequestInterceptor requestInterceptor49 = builder27.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor50 = builder27.requestInterceptor;
        retrofit.RestAdapter.Log log51 = builder27.log;
        builder19.log = log51;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor54 = restAdapter53.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        restAdapter53.requestInterceptor = requestInterceptor55;
        java.util.concurrent.Executor executor57 = restAdapter53.httpExecutor;
        java.util.concurrent.Executor executor58 = restAdapter53.httpExecutor;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor60 = null;
        builder59.httpExecutor = executor60;
        retrofit.RestAdapter.Builder builder63 = builder59.setServer("hi!");
        retrofit.Profiler profiler64 = null;
        builder63.profiler = profiler64;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        builder63.requestInterceptor = requestInterceptor66;
        retrofit.RestAdapter restAdapter68 = builder63.build();
        retrofit.converter.Converter converter69 = restAdapter68.converter;
        restAdapter53.converter = converter69;
        builder19.converter = converter69;
        retrofit.RestAdapter.LogLevel logLevel72 = builder19.logLevel;
        builder6.logLevel = logLevel72;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor75 = null;
        builder74.httpExecutor = executor75;
        retrofit.RestAdapter.Builder builder78 = builder74.setServer("hi!");
        retrofit.RestAdapter restAdapter79 = builder78.build();
        retrofit.RestAdapter.LogLevel logLevel80 = null;
        restAdapter79.logLevel = logLevel80;
        retrofit.client.Client.Provider provider82 = restAdapter79.clientProvider;
        retrofit.RestAdapter.Builder builder83 = builder6.setClient(provider82);
        retrofit.RestAdapter.LogLevel logLevel84 = builder6.logLevel;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(profiler26);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(requestInterceptor49);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNull(requestInterceptor54);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(restAdapter68);
        org.junit.Assert.assertNotNull(converter69);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(restAdapter79);
        org.junit.Assert.assertNotNull(provider82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test11574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11574");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter10.errorHandler = errorHandler26;
        retrofit.RestAdapter.Log log28 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder29 = builder8.setLog(log28);
        retrofit.RequestInterceptor requestInterceptor30 = builder8.requestInterceptor;
        java.util.concurrent.Executor executor31 = builder8.httpExecutor;
        retrofit.ErrorHandler errorHandler32 = builder8.errorHandler;
        retrofit.RestAdapter.Log log33 = builder8.log;
        retrofit.RestAdapter.Builder builder34 = builder0.setLog(log33);
        retrofit.Server server35 = builder34.server;
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(server35);
    }

    @Test
    public void test11575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11575");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("hi!");
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.RestAdapter.Builder builder38 = builder34.setServer("hi!");
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder40 = builder34.setLog(log39);
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter41.logLevel = logLevel43;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        restAdapter41.requestInterceptor = requestInterceptor45;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter41.logLevel = logLevel47;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log39, logLevel47);
        boolean boolean50 = logLevel47.log();
        retrofit.RestAdapter.Builder builder51 = builder25.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = null;
        builder52.httpExecutor = executor53;
        retrofit.RestAdapter.Builder builder56 = builder52.setServer("hi!");
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder52.setLog(log57);
        retrofit.RestAdapter restAdapter59 = builder52.build();
        java.util.concurrent.Executor executor60 = restAdapter59.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler61 = restAdapter59.new RestHandler();
        retrofit.converter.Converter converter62 = restAdapter59.converter;
        builder51.converter = converter62;
        builder51.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler65 = builder51.errorHandler;
        retrofit.RestAdapter restAdapter66 = builder51.build();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertNotNull(executor60);
        org.junit.Assert.assertNotNull(converter62);
        org.junit.Assert.assertNotNull(errorHandler65);
        org.junit.Assert.assertNotNull(restAdapter66);
    }

    @Test
    public void test11576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11576");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter7.requestInterceptor;
        retrofit.Profiler profiler9 = restAdapter7.profiler;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter10.logLevel = logLevel12;
        retrofit.Profiler profiler14 = restAdapter10.profiler;
        retrofit.converter.Converter converter15 = restAdapter10.converter;
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.logLevel;
        restAdapter7.setLogLevel(logLevel16);
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter7.new RestHandler();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.httpExecutor = executor20;
        retrofit.client.Client.Provider provider22 = null;
        builder19.clientProvider = provider22;
        retrofit.RestAdapter.Builder builder25 = builder19.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor26 = builder25.requestInterceptor;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.httpExecutor = executor28;
        retrofit.RestAdapter.Builder builder31 = builder27.setServer("hi!");
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder27.setLog(log32);
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel43);
        builder27.logLevel = logLevel43;
        retrofit.converter.Converter converter46 = builder27.converter;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        builder27.requestInterceptor = requestInterceptor47;
        retrofit.RestAdapter restAdapter49 = builder27.build();
        retrofit.Server server50 = builder27.server;
        retrofit.Profiler profiler51 = null;
        builder27.profiler = profiler51;
        retrofit.RestAdapter restAdapter53 = builder27.build();
        retrofit.client.Client.Provider provider54 = builder27.clientProvider;
        retrofit.converter.Converter converter55 = builder27.converter;
        builder25.converter = converter55;
        restAdapter7.converter = converter55;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(requestInterceptor8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertNotNull(restAdapter49);
        org.junit.Assert.assertNotNull(server50);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(provider54);
        org.junit.Assert.assertNotNull(converter55);
    }

    @Test
    public void test11577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11577");
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        java.lang.String str17 = request16.getMethod();
        java.util.List<retrofit.client.Header> headerList18 = request16.getHeaders();
        java.lang.String str19 = request16.getUrl();
        java.util.List<retrofit.client.Header> headerList20 = request16.getHeaders();
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("Retrofit-Idle", "", headerList20, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "Retrofit-Idle", headerList20, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList20, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", headerList20, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("Retrofit-Idle", "", headerList20, typedOutput29);
        java.util.List<retrofit.client.Header> headerList31 = request30.getHeaders();
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertNotNull(headerList31);
    }

    @Test
    public void test11578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11578");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.ErrorHandler errorHandler5 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor6 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(executor6);
    }

    @Test
    public void test11579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11579");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        restAdapter0.log = log12;
        retrofit.ErrorHandler errorHandler16 = null;
        restAdapter0.errorHandler = errorHandler16;
        retrofit.converter.Converter converter18 = null;
        restAdapter0.converter = converter18;
        retrofit.Server server20 = restAdapter0.server;
        retrofit.converter.Converter converter21 = restAdapter0.converter;
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider23 = restAdapter0.clientProvider;
        retrofit.Profiler profiler24 = null;
        restAdapter0.profiler = profiler24;
        java.lang.Throwable throwable26 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable26, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertNull(provider23);
    }

    @Test
    public void test11580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11580");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter0.requestInterceptor = requestInterceptor4;
        retrofit.RestAdapter.Log log6 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter8.getLogLevel();
        retrofit.client.Client.Provider provider13 = null;
        restAdapter8.clientProvider = provider13;
        retrofit.ErrorHandler errorHandler15 = restAdapter8.errorHandler;
        retrofit.client.Client.Provider provider16 = restAdapter8.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter8.new RestHandler();
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter18.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        restAdapter18.requestInterceptor = requestInterceptor20;
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        restAdapter18.log = log30;
        retrofit.ErrorHandler errorHandler34 = null;
        restAdapter18.errorHandler = errorHandler34;
        retrofit.converter.Converter converter36 = null;
        restAdapter18.converter = converter36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = builder38.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor40 = builder38.requestInterceptor;
        retrofit.ErrorHandler errorHandler41 = null;
        builder38.errorHandler = errorHandler41;
        retrofit.converter.Converter converter43 = null;
        builder38.converter = converter43;
        retrofit.ErrorHandler errorHandler45 = null;
        builder38.errorHandler = errorHandler45;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor48 = restAdapter47.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        restAdapter47.requestInterceptor = requestInterceptor49;
        retrofit.Server server51 = null;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel60);
        restAdapter47.log = log59;
        retrofit.ErrorHandler errorHandler63 = null;
        restAdapter47.errorHandler = errorHandler63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter66 = builder65.converter;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor68 = restAdapter67.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor69 = null;
        restAdapter67.requestInterceptor = requestInterceptor69;
        retrofit.Server server71 = null;
        retrofit.client.Client.Provider provider72 = null;
        java.util.concurrent.Executor executor73 = null;
        java.util.concurrent.Executor executor74 = null;
        retrofit.RequestInterceptor requestInterceptor75 = null;
        retrofit.converter.Converter converter76 = null;
        retrofit.Profiler profiler77 = null;
        retrofit.ErrorHandler errorHandler78 = null;
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server71, provider72, executor73, executor74, requestInterceptor75, converter76, profiler77, errorHandler78, log79, logLevel80);
        restAdapter67.log = log79;
        retrofit.ErrorHandler errorHandler83 = null;
        restAdapter67.errorHandler = errorHandler83;
        retrofit.RestAdapter.Log log85 = restAdapter67.log;
        retrofit.RestAdapter.Builder builder86 = builder65.setLog(log85);
        retrofit.RequestInterceptor requestInterceptor87 = builder65.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor88 = builder65.requestInterceptor;
        retrofit.RestAdapter.Builder builder90 = builder65.setServer("hi!");
        retrofit.Server server91 = builder65.server;
        restAdapter47.server = server91;
        retrofit.RestAdapter.Builder builder93 = builder38.setServer(server91);
        restAdapter18.server = server91;
        restAdapter8.server = server91;
        restAdapter0.server = server91;
        retrofit.ErrorHandler errorHandler97 = restAdapter0.errorHandler;
        retrofit.Profiler profiler98 = restAdapter0.profiler;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(log6);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(requestInterceptor40);
        org.junit.Assert.assertNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter66);
        org.junit.Assert.assertNull(requestInterceptor68);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNull(requestInterceptor87);
        org.junit.Assert.assertNull(requestInterceptor88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(server91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNull(errorHandler97);
        org.junit.Assert.assertNull(profiler98);
    }

    @Test
    public void test11581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11581");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.Profiler profiler3 = null;
        restAdapter0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        retrofit.Profiler profiler7 = null;
        restAdapter0.profiler = profiler7;
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log18 = restAdapter17.log;
        java.util.concurrent.Executor executor19 = restAdapter17.callbackExecutor;
        retrofit.Profiler profiler20 = restAdapter17.profiler;
        retrofit.Profiler profiler21 = null;
        restAdapter17.profiler = profiler21;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel32);
        restAdapter17.log = log31;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.httpExecutor = executor36;
        retrofit.RestAdapter.Builder builder39 = builder35.setServer("hi!");
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder35.setLog(log40);
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel51);
        builder35.logLevel = logLevel51;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log31, logLevel51);
        restAdapter0.log = log31;
        retrofit.ErrorHandler errorHandler56 = null;
        restAdapter0.errorHandler = errorHandler56;
        retrofit.RestAdapter.Log log58 = restAdapter0.log;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log58);
    }

    @Test
    public void test11582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11582");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList10 = request8.getHeaders();
        java.lang.String str11 = request8.getMethod();
        retrofit.mime.TypedOutput typedOutput12 = request8.getBody();
        java.util.List<retrofit.client.Header> headerList13 = request8.getHeaders();
        java.lang.String str14 = request8.getUrl();
        java.lang.String str15 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList16 = request8.getHeaders();
        java.util.List<retrofit.client.Header> headerList17 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput18 = null;
        retrofit.client.Request request19 = new retrofit.client.Request("", "hi!", headerList17, typedOutput18);
        java.lang.String str20 = request19.getMethod();
        java.lang.String str21 = request19.getMethod();
        retrofit.mime.TypedOutput typedOutput22 = request19.getBody();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(typedOutput22);
    }

    @Test
    public void test11583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11583");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log22, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLog(log22);
        retrofit.Server server30 = builder29.server;
        retrofit.ErrorHandler errorHandler31 = null;
        builder29.errorHandler = errorHandler31;
        retrofit.Profiler profiler33 = null;
        builder29.profiler = profiler33;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log36 = restAdapter35.log;
        retrofit.ErrorHandler errorHandler37 = restAdapter35.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.Profiler profiler44 = null;
        builder43.profiler = profiler44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder46.setLog(log51);
        retrofit.RestAdapter restAdapter53 = builder46.build();
        retrofit.converter.Converter converter54 = null;
        builder46.converter = converter54;
        retrofit.ErrorHandler errorHandler56 = null;
        builder46.errorHandler = errorHandler56;
        retrofit.RequestInterceptor requestInterceptor58 = builder46.requestInterceptor;
        builder43.requestInterceptor = requestInterceptor58;
        restAdapter35.requestInterceptor = requestInterceptor58;
        retrofit.RestAdapter.Builder builder61 = builder29.setRequestInterceptor(requestInterceptor58);
        retrofit.converter.Converter converter62 = builder29.converter;
        retrofit.RestAdapter.Builder builder64 = builder29.setServer("hi!");
        retrofit.client.Client.Provider provider65 = builder64.clientProvider;
        retrofit.Server server66 = builder64.server;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(converter62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(provider65);
        org.junit.Assert.assertNotNull(server66);
    }

    @Test
    public void test11584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11584");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        builder0.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor6 = null;
        builder0.requestInterceptor = requestInterceptor6;
        retrofit.ErrorHandler errorHandler8 = null;
        builder0.errorHandler = errorHandler8;
        retrofit.converter.Converter converter10 = builder0.converter;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        restAdapter13.requestInterceptor = requestInterceptor15;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        restAdapter13.log = log25;
        retrofit.ErrorHandler errorHandler29 = null;
        restAdapter13.errorHandler = errorHandler29;
        retrofit.RestAdapter.Log log31 = restAdapter13.log;
        retrofit.RestAdapter.Builder builder32 = builder11.setLog(log31);
        retrofit.Profiler profiler33 = builder32.profiler;
        retrofit.client.Client.Provider provider34 = builder32.clientProvider;
        retrofit.RestAdapter.Builder builder36 = builder32.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter37 = builder36.build();
        retrofit.RequestInterceptor requestInterceptor38 = restAdapter37.requestInterceptor;
        retrofit.RestAdapter.Builder builder39 = builder0.setRequestInterceptor(requestInterceptor38);
        retrofit.Profiler profiler40 = builder39.profiler;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.httpExecutor = executor42;
        retrofit.RestAdapter.Builder builder45 = builder41.setServer("hi!");
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder41.setLog(log46);
        retrofit.RestAdapter restAdapter48 = builder41.build();
        java.util.concurrent.Executor executor49 = restAdapter48.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter48.new RestHandler();
        retrofit.converter.Converter converter51 = restAdapter48.converter;
        retrofit.client.Client.Provider provider52 = restAdapter48.clientProvider;
        builder39.clientProvider = provider52;
        retrofit.converter.Converter converter54 = builder39.converter;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNotNull(converter10);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(restAdapter37);
        org.junit.Assert.assertNotNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(profiler40);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertNotNull(executor49);
        org.junit.Assert.assertNotNull(converter51);
        org.junit.Assert.assertNotNull(provider52);
        org.junit.Assert.assertNotNull(converter54);
    }

    @Test
    public void test11585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11585");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.client.Client.Provider provider3 = restAdapter0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.logLevel;
        retrofit.Server server5 = restAdapter0.server;
        java.util.concurrent.Executor executor6 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Log log27 = restAdapter9.log;
        retrofit.RestAdapter.Builder builder28 = builder7.setLog(log27);
        retrofit.RequestInterceptor requestInterceptor29 = builder7.requestInterceptor;
        java.util.concurrent.Executor executor30 = builder7.httpExecutor;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.httpExecutor = executor32;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("hi!");
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder31.setLog(log36);
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter39 = builder38.converter;
        retrofit.RestAdapter.LogLevel logLevel40 = builder38.logLevel;
        retrofit.RestAdapter.Builder builder41 = builder37.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter43 = builder42.converter;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter44.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        restAdapter44.requestInterceptor = requestInterceptor46;
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel57);
        restAdapter44.log = log56;
        retrofit.ErrorHandler errorHandler60 = null;
        restAdapter44.errorHandler = errorHandler60;
        retrofit.RestAdapter.Log log62 = restAdapter44.log;
        retrofit.RestAdapter.Builder builder63 = builder42.setLog(log62);
        retrofit.RequestInterceptor requestInterceptor64 = builder42.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor65 = builder42.requestInterceptor;
        retrofit.RestAdapter.Builder builder67 = builder42.setServer("hi!");
        retrofit.Server server68 = builder42.server;
        retrofit.RestAdapter.Builder builder69 = builder37.setServer(server68);
        retrofit.RestAdapter.Builder builder70 = builder7.setServer(server68);
        retrofit.Profiler profiler71 = builder7.profiler;
        java.util.concurrent.Executor executor72 = builder7.httpExecutor;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor74 = null;
        builder73.httpExecutor = executor74;
        retrofit.RestAdapter.Builder builder77 = builder73.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder73.logLevel = logLevel78;
        retrofit.converter.Converter converter80 = null;
        builder73.converter = converter80;
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor83 = null;
        builder82.httpExecutor = executor83;
        retrofit.RestAdapter.Builder builder86 = builder82.setServer("hi!");
        retrofit.RestAdapter.Log log87 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder88 = builder82.setLog(log87);
        retrofit.RestAdapter restAdapter89 = builder82.build();
        retrofit.converter.Converter converter90 = null;
        builder82.converter = converter90;
        retrofit.ErrorHandler errorHandler92 = null;
        builder82.errorHandler = errorHandler92;
        retrofit.RequestInterceptor requestInterceptor94 = builder82.requestInterceptor;
        builder73.requestInterceptor = requestInterceptor94;
        builder7.requestInterceptor = requestInterceptor94;
        retrofit.RestAdapter.Log log97 = builder7.log;
        restAdapter0.log = log97;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(requestInterceptor64);
        org.junit.Assert.assertNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(server68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(profiler71);
        org.junit.Assert.assertNull(executor72);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(log87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(restAdapter89);
        org.junit.Assert.assertNotNull(requestInterceptor94);
        org.junit.Assert.assertNotNull(log97);
    }

    @Test
    public void test11586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11586");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor8 = builder0.httpExecutor;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter10 = builder0.build();
        java.util.concurrent.Executor executor11 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter13 = builder12.converter;
        retrofit.Profiler profiler14 = null;
        builder12.profiler = profiler14;
        retrofit.RestAdapter.Log log16 = builder12.log;
        builder12.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor18 = null;
        builder12.requestInterceptor = requestInterceptor18;
        retrofit.ErrorHandler errorHandler20 = null;
        builder12.errorHandler = errorHandler20;
        retrofit.converter.Converter converter22 = builder12.converter;
        restAdapter10.converter = converter22;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNotNull(converter22);
    }

    @Test
    public void test11587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11587");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        java.util.concurrent.Executor executor5 = builder0.httpExecutor;
        retrofit.Profiler profiler6 = builder0.profiler;
        retrofit.RestAdapter.Log log7 = builder0.log;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.callbackExecutor;
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log18, logLevel19);
        retrofit.RestAdapter.Builder builder21 = builder8.setLogLevel(logLevel19);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter22.logLevel = logLevel24;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.setLogLevel(logLevel26);
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter22.getLogLevel();
        builder21.logLevel = logLevel28;
        retrofit.RestAdapter.Builder builder30 = builder0.setLogLevel(logLevel28);
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor32 = restAdapter31.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        restAdapter31.requestInterceptor = requestInterceptor33;
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter31.getLogLevel();
        retrofit.Server server36 = restAdapter31.server;
        java.util.concurrent.Executor executor37 = restAdapter31.callbackExecutor;
        retrofit.ErrorHandler errorHandler38 = null;
        restAdapter31.errorHandler = errorHandler38;
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter42 = builder41.converter;
        retrofit.Profiler profiler43 = null;
        builder41.profiler = profiler43;
        retrofit.RestAdapter.Log log45 = builder41.log;
        builder41.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor47 = null;
        builder41.requestInterceptor = requestInterceptor47;
        retrofit.ErrorHandler errorHandler49 = null;
        builder41.errorHandler = errorHandler49;
        retrofit.converter.Converter converter51 = builder41.converter;
        retrofit.Server server52 = null;
        builder41.server = server52;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter54.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter54.logLevel = logLevel56;
        retrofit.Profiler profiler58 = restAdapter54.profiler;
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter54.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor60 = null;
        restAdapter54.requestInterceptor = requestInterceptor60;
        retrofit.Profiler profiler62 = null;
        restAdapter54.profiler = profiler62;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor65 = restAdapter64.requestInterceptor;
        retrofit.converter.Converter converter66 = restAdapter64.converter;
        java.util.concurrent.Executor executor67 = null;
        restAdapter64.callbackExecutor = executor67;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter64.logLevel = logLevel69;
        restAdapter54.setLogLevel(logLevel69);
        retrofit.RestAdapter.Builder builder72 = builder41.setLogLevel(logLevel69);
        retrofit.client.Client.Provider provider73 = builder72.clientProvider;
        restAdapter31.clientProvider = provider73;
        builder30.clientProvider = provider73;
        retrofit.Profiler profiler76 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder77 = builder30.setProfiler(profiler76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(requestInterceptor32);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertNull(converter42);
        org.junit.Assert.assertNull(log45);
        org.junit.Assert.assertNotNull(converter51);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler58);
        org.junit.Assert.assertNull(requestInterceptor65);
        org.junit.Assert.assertNull(converter66);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(provider73);
    }

    @Test
    public void test11588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11588");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor3 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter0.log;
        java.util.concurrent.Executor executor8 = restAdapter0.httpExecutor;
        retrofit.converter.Converter converter9 = restAdapter0.converter;
        java.util.concurrent.Executor executor10 = restAdapter0.httpExecutor;
        retrofit.converter.Converter converter11 = restAdapter0.converter;
        java.lang.Throwable throwable12 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable12, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(converter11);
    }

    @Test
    public void test11589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11589");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.RestAdapter.LogLevel logLevel23 = builder21.logLevel;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter.Builder builder25 = builder21.setLogLevel(logLevel24);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.client.Client.Provider provider29 = null;
        builder26.clientProvider = provider29;
        builder26.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.httpExecutor = executor33;
        retrofit.RestAdapter.Builder builder36 = builder32.setServer("hi!");
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder38 = builder32.setLog(log37);
        retrofit.RestAdapter restAdapter39 = builder32.build();
        retrofit.converter.Converter converter40 = null;
        builder32.converter = converter40;
        retrofit.ErrorHandler errorHandler42 = null;
        builder32.errorHandler = errorHandler42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter45 = builder44.converter;
        retrofit.RestAdapter.LogLevel logLevel46 = builder44.logLevel;
        builder44.ensureSaneDefaults();
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = null;
        builder56.httpExecutor = executor57;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = builder56.setLog(log61);
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter63.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter63.logLevel = logLevel65;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        restAdapter63.requestInterceptor = requestInterceptor67;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter63.logLevel = logLevel69;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log61, logLevel69);
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor73 = null;
        builder72.httpExecutor = executor73;
        retrofit.RestAdapter.Builder builder76 = builder72.setServer("hi!");
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder78 = builder72.setLog(log77);
        restAdapter71.log = log77;
        builder44.log = log77;
        java.util.concurrent.Executor executor81 = null;
        builder44.httpExecutor = executor81;
        retrofit.converter.Converter converter83 = null;
        builder44.converter = converter83;
        retrofit.ErrorHandler errorHandler85 = builder44.errorHandler;
        retrofit.RestAdapter.Builder builder86 = builder32.setErrorHandler(errorHandler85);
        builder26.errorHandler = errorHandler85;
        builder25.errorHandler = errorHandler85;
        retrofit.client.Client.Provider provider89 = builder25.clientProvider;
        retrofit.Profiler profiler90 = builder25.profiler;
        retrofit.Profiler profiler91 = null;
        builder25.profiler = profiler91;
        retrofit.RequestInterceptor requestInterceptor93 = builder25.requestInterceptor;
        retrofit.ErrorHandler errorHandler94 = builder25.errorHandler;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(restAdapter39);
        org.junit.Assert.assertNull(converter45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(logLevel64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(errorHandler85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNull(provider89);
        org.junit.Assert.assertNull(profiler90);
        org.junit.Assert.assertNull(requestInterceptor93);
        org.junit.Assert.assertNotNull(errorHandler94);
    }

    @Test
    public void test11590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11590");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        restAdapter0.log = log12;
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(logLevel18);
    }

    @Test
    public void test11591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11591");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder12.setLog(log17);
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter19.logLevel = logLevel21;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter19.requestInterceptor = requestInterceptor23;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter19.logLevel = logLevel25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log17, logLevel25);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("hi!");
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder28.setLog(log33);
        restAdapter27.log = log33;
        builder0.log = log33;
        java.util.concurrent.Executor executor37 = null;
        builder0.httpExecutor = executor37;
        retrofit.converter.Converter converter39 = null;
        builder0.converter = converter39;
        retrofit.RestAdapter.Builder builder42 = builder0.setServer("hi!");
        retrofit.converter.Converter converter43 = builder42.converter;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter45 = builder44.converter;
        retrofit.Profiler profiler46 = null;
        builder44.profiler = profiler46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.httpExecutor = executor49;
        retrofit.client.Client.Provider provider51 = null;
        builder48.clientProvider = provider51;
        retrofit.RestAdapter.Builder builder54 = builder48.setServer("hi!");
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.httpExecutor = executor56;
        retrofit.RestAdapter.Builder builder59 = builder55.setServer("hi!");
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder61 = builder55.setLog(log60);
        retrofit.RestAdapter restAdapter62 = builder55.build();
        java.util.concurrent.Executor executor63 = restAdapter62.httpExecutor;
        builder54.callbackExecutor = executor63;
        builder44.callbackExecutor = executor63;
        builder44.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = null;
        builder67.httpExecutor = executor68;
        retrofit.RestAdapter.Builder builder71 = builder67.setServer("hi!");
        java.util.concurrent.Executor executor72 = null;
        builder67.httpExecutor = executor72;
        retrofit.RestAdapter restAdapter74 = builder67.build();
        retrofit.RestAdapter.LogLevel logLevel75 = restAdapter74.getLogLevel();
        retrofit.client.Client.Provider provider76 = restAdapter74.clientProvider;
        builder44.clientProvider = provider76;
        retrofit.RestAdapter.Builder builder78 = builder42.setClient(provider76);
        retrofit.RestAdapter.LogLevel logLevel79 = builder78.logLevel;
        builder78.ensureSaneDefaults();
        retrofit.Server server81 = builder78.server;
        retrofit.RestAdapter.LogLevel logLevel82 = builder78.logLevel;
        java.lang.Class<?> wildcardClass83 = logLevel82.getClass();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(converter45);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(restAdapter62);
        org.junit.Assert.assertNotNull(executor63);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(restAdapter74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(provider76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(server81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test11592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11592");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.client.Client.Provider provider1 = null;
        restAdapter0.clientProvider = provider1;
        retrofit.Server server3 = restAdapter0.server;
        org.junit.Assert.assertNull(server3);
    }

    @Test
    public void test11593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11593");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = builder0.build();
        java.util.concurrent.Executor executor8 = restAdapter7.httpExecutor;
        retrofit.client.Client.Provider provider9 = null;
        restAdapter7.clientProvider = provider9;
        retrofit.Profiler profiler11 = restAdapter7.profiler;
        retrofit.Server server12 = restAdapter7.server;
        retrofit.RestAdapter.LogLevel logLevel13 = null;
        restAdapter7.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.httpExecutor = executor16;
        retrofit.RestAdapter.Builder builder19 = builder15.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder15.logLevel = logLevel20;
        retrofit.converter.Converter converter22 = null;
        builder15.converter = converter22;
        retrofit.client.Client.Provider provider24 = null;
        builder15.clientProvider = provider24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter27 = builder26.converter;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter28.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter28.requestInterceptor = requestInterceptor30;
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        restAdapter28.log = log40;
        retrofit.ErrorHandler errorHandler44 = null;
        restAdapter28.errorHandler = errorHandler44;
        retrofit.RestAdapter.Log log46 = restAdapter28.log;
        retrofit.RestAdapter.Builder builder47 = builder26.setLog(log46);
        builder26.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = builder49.setServer("hi!");
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder49.setLog(log54);
        retrofit.RestAdapter restAdapter56 = builder49.build();
        java.util.concurrent.Executor executor57 = restAdapter56.httpExecutor;
        builder26.callbackExecutor = executor57;
        builder15.httpExecutor = executor57;
        restAdapter7.callbackExecutor = executor57;
        retrofit.Server server61 = restAdapter7.server;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(executor8);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNotNull(server12);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNotNull(executor57);
        org.junit.Assert.assertNotNull(server61);
    }

    @Test
    public void test11594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11594");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter0.requestInterceptor = requestInterceptor4;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter0.logLevel = logLevel6;
        retrofit.client.Client.Provider provider8 = restAdapter0.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log10 = restAdapter0.log;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(log10);
    }

    @Test
    public void test11595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11595");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.client.Client.Provider provider7 = null;
        builder4.clientProvider = provider7;
        retrofit.RestAdapter.Builder builder10 = builder4.setServer("hi!");
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder11.setLog(log16);
        retrofit.RestAdapter restAdapter18 = builder11.build();
        java.util.concurrent.Executor executor19 = restAdapter18.httpExecutor;
        builder10.callbackExecutor = executor19;
        builder0.callbackExecutor = executor19;
        builder0.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter25 = builder24.converter;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter26.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        restAdapter26.requestInterceptor = requestInterceptor28;
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel39);
        restAdapter26.log = log38;
        retrofit.ErrorHandler errorHandler42 = null;
        restAdapter26.errorHandler = errorHandler42;
        retrofit.RestAdapter.Log log44 = restAdapter26.log;
        retrofit.RestAdapter.Builder builder45 = builder24.setLog(log44);
        retrofit.RequestInterceptor requestInterceptor46 = builder24.requestInterceptor;
        builder24.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor48 = builder24.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel49 = builder24.logLevel;
        retrofit.RestAdapter.Builder builder50 = builder0.setLogLevel(logLevel49);
        retrofit.Profiler profiler51 = null;
        builder0.profiler = profiler51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor54 = null;
        builder53.httpExecutor = executor54;
        retrofit.client.Client.Provider provider56 = null;
        builder53.clientProvider = provider56;
        retrofit.client.Client.Provider provider58 = builder53.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder60 = builder53.setLogLevel(logLevel59);
        retrofit.RequestInterceptor requestInterceptor61 = null;
        builder60.requestInterceptor = requestInterceptor61;
        retrofit.client.Client.Provider provider63 = builder60.clientProvider;
        java.util.concurrent.Executor executor64 = builder60.httpExecutor;
        builder60.ensureSaneDefaults();
        java.util.concurrent.Executor executor66 = builder60.callbackExecutor;
        java.util.concurrent.Executor executor67 = null;
        retrofit.RestAdapter.Builder builder68 = builder0.setExecutors(executor66, executor67);
        builder68.ensureSaneDefaults();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertNotNull(requestInterceptor48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(provider58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(provider63);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNotNull(executor66);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test11596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11596");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        java.util.concurrent.Executor executor9 = builder0.httpExecutor;
        retrofit.ErrorHandler errorHandler10 = builder0.errorHandler;
        retrofit.Profiler profiler11 = null;
        builder0.profiler = profiler11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log22 = restAdapter21.log;
        java.util.concurrent.Executor executor23 = restAdapter21.callbackExecutor;
        retrofit.Profiler profiler24 = restAdapter21.profiler;
        retrofit.Profiler profiler25 = null;
        restAdapter21.profiler = profiler25;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel36);
        restAdapter21.log = log35;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder39.setLog(log44);
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel55);
        builder39.logLevel = logLevel55;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log35, logLevel55);
        retrofit.converter.Converter converter59 = restAdapter58.converter;
        retrofit.RestAdapter.LogLevel logLevel60 = restAdapter58.logLevel;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.httpExecutor = executor62;
        retrofit.RestAdapter.Builder builder65 = builder61.setServer("hi!");
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder61.setLog(log66);
        retrofit.RestAdapter restAdapter68 = builder61.build();
        java.util.concurrent.Executor executor69 = restAdapter68.httpExecutor;
        restAdapter58.callbackExecutor = executor69;
        retrofit.Server server71 = restAdapter58.server;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter72.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter72.logLevel = logLevel74;
        retrofit.RequestInterceptor requestInterceptor76 = restAdapter72.requestInterceptor;
        java.util.concurrent.Executor executor77 = restAdapter72.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler78 = restAdapter72.new RestHandler();
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor80 = null;
        builder79.httpExecutor = executor80;
        retrofit.RestAdapter.Builder builder83 = builder79.setServer("hi!");
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder85 = builder79.setLog(log84);
        restAdapter72.log = log84;
        restAdapter58.log = log84;
        builder0.log = log84;
        retrofit.RestAdapter.Builder builder90 = builder0.setServer("Retrofit-Idle");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(profiler24);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(restAdapter68);
        org.junit.Assert.assertNotNull(executor69);
        org.junit.Assert.assertNull(server71);
        org.junit.Assert.assertNull(logLevel73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor76);
        org.junit.Assert.assertNull(executor77);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test11597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11597");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.RestAdapter.Log log9 = builder0.log;
        java.util.concurrent.Executor executor10 = builder0.callbackExecutor;
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor12 = builder0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor13 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.Profiler profiler19 = null;
        builder18.profiler = profiler19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.httpExecutor = executor22;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("hi!");
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder27 = builder21.setLog(log26);
        retrofit.RestAdapter restAdapter28 = builder21.build();
        retrofit.converter.Converter converter29 = null;
        builder21.converter = converter29;
        retrofit.ErrorHandler errorHandler31 = null;
        builder21.errorHandler = errorHandler31;
        retrofit.RequestInterceptor requestInterceptor33 = builder21.requestInterceptor;
        builder18.requestInterceptor = requestInterceptor33;
        retrofit.ErrorHandler errorHandler35 = builder18.errorHandler;
        retrofit.Profiler profiler36 = builder18.profiler;
        builder18.ensureSaneDefaults();
        java.util.concurrent.Executor executor38 = builder18.callbackExecutor;
        builder0.callbackExecutor = executor38;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNotNull(executor12);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(restAdapter28);
        org.junit.Assert.assertNotNull(requestInterceptor33);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNotNull(executor38);
    }

    @Test
    public void test11598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11598");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.Log log6 = builder0.log;
        retrofit.RequestInterceptor requestInterceptor7 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter10.errorHandler = errorHandler26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter29 = builder28.converter;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor31 = restAdapter30.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        restAdapter30.requestInterceptor = requestInterceptor32;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel43);
        restAdapter30.log = log42;
        retrofit.ErrorHandler errorHandler46 = null;
        restAdapter30.errorHandler = errorHandler46;
        retrofit.RestAdapter.Log log48 = restAdapter30.log;
        retrofit.RestAdapter.Builder builder49 = builder28.setLog(log48);
        retrofit.RequestInterceptor requestInterceptor50 = builder28.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor51 = builder28.requestInterceptor;
        retrofit.RestAdapter.Builder builder53 = builder28.setServer("hi!");
        retrofit.Server server54 = builder28.server;
        restAdapter10.server = server54;
        builder8.server = server54;
        retrofit.Server server57 = builder8.server;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor59 = restAdapter58.requestInterceptor;
        java.util.concurrent.Executor executor60 = restAdapter58.callbackExecutor;
        retrofit.ErrorHandler errorHandler61 = restAdapter58.errorHandler;
        retrofit.Server server62 = null;
        retrofit.client.Client.Provider provider63 = null;
        java.util.concurrent.Executor executor64 = null;
        java.util.concurrent.Executor executor65 = null;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        retrofit.converter.Converter converter67 = null;
        retrofit.Profiler profiler68 = null;
        retrofit.ErrorHandler errorHandler69 = null;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor71 = null;
        builder70.httpExecutor = executor71;
        retrofit.RestAdapter.Builder builder74 = builder70.setServer("hi!");
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder76 = builder70.setLog(log75);
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel78 = restAdapter77.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter77.logLevel = logLevel79;
        retrofit.RequestInterceptor requestInterceptor81 = null;
        restAdapter77.requestInterceptor = requestInterceptor81;
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter77.logLevel = logLevel83;
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter(server62, provider63, executor64, executor65, requestInterceptor66, converter67, profiler68, errorHandler69, log75, logLevel83);
        log75.log("Retrofit-Idle");
        restAdapter58.log = log75;
        log75.log("");
        retrofit.RestAdapter.Builder builder91 = builder8.setLog(log75);
        retrofit.RestAdapter.Builder builder92 = builder0.setLog(log75);
        java.util.concurrent.Executor executor93 = builder92.httpExecutor;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNull(log6);
        org.junit.Assert.assertNull(requestInterceptor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter29);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(server54);
        org.junit.Assert.assertNotNull(server57);
        org.junit.Assert.assertNull(requestInterceptor59);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertNull(errorHandler61);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(logLevel78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNull(executor93);
    }

    @Test
    public void test11599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11599");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.httpExecutor = executor9;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        retrofit.Profiler profiler13 = null;
        builder12.profiler = profiler13;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        builder12.requestInterceptor = requestInterceptor15;
        retrofit.RestAdapter restAdapter17 = builder12.build();
        retrofit.converter.Converter converter18 = restAdapter17.converter;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        log19.log("");
        restAdapter17.log = log19;
        retrofit.RestAdapter.Builder builder23 = builder0.setLog(log19);
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter43.logLevel = logLevel45;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter43.setLogLevel(logLevel47);
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log40, logLevel47);
        builder23.log = log40;
        retrofit.Profiler profiler51 = null;
        builder23.profiler = profiler51;
        retrofit.converter.Converter converter53 = builder23.converter;
        java.util.concurrent.Executor executor54 = builder23.httpExecutor;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(restAdapter17);
        org.junit.Assert.assertNotNull(converter18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter53);
        org.junit.Assert.assertNull(executor54);
    }

    @Test
    public void test11600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11600");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter1 = null;
        restAdapter0.converter = converter1;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter4 = builder3.converter;
        retrofit.Profiler profiler5 = null;
        builder3.profiler = profiler5;
        retrofit.ErrorHandler errorHandler7 = null;
        builder3.errorHandler = errorHandler7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter10 = builder9.converter;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor12 = restAdapter11.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        restAdapter11.requestInterceptor = requestInterceptor13;
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel24);
        restAdapter11.log = log23;
        retrofit.ErrorHandler errorHandler27 = null;
        restAdapter11.errorHandler = errorHandler27;
        retrofit.RestAdapter.Log log29 = restAdapter11.log;
        retrofit.RestAdapter.Builder builder30 = builder9.setLog(log29);
        retrofit.RestAdapter.Builder builder31 = builder3.setLog(log29);
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter32.logLevel = logLevel34;
        retrofit.RestAdapter.Builder builder36 = builder31.setLogLevel(logLevel34);
        restAdapter0.logLevel = logLevel34;
        retrofit.client.Client.Provider provider38 = null;
        restAdapter0.clientProvider = provider38;
        retrofit.Profiler profiler40 = restAdapter0.profiler;
        retrofit.Server server41 = restAdapter0.server;
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(profiler40);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test11601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11601");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor23 = builder0.httpExecutor;
        retrofit.client.Client.Provider provider24 = builder0.clientProvider;
        retrofit.converter.Converter converter25 = builder0.converter;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(provider24);
        org.junit.Assert.assertNull(converter25);
    }

    @Test
    public void test11602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11602");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.Profiler profiler7 = null;
        builder5.profiler = profiler7;
        retrofit.ErrorHandler errorHandler9 = null;
        builder5.errorHandler = errorHandler9;
        retrofit.RestAdapter.Builder builder12 = builder5.setServer("hi!");
        java.util.concurrent.Executor executor13 = builder5.httpExecutor;
        retrofit.RestAdapter restAdapter14 = builder5.build();
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.httpExecutor = executor16;
        retrofit.RestAdapter.Builder builder19 = builder15.setServer("hi!");
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder15.setLog(log20);
        retrofit.RestAdapter restAdapter22 = builder15.build();
        retrofit.converter.Converter converter23 = null;
        builder15.converter = converter23;
        retrofit.ErrorHandler errorHandler25 = null;
        builder15.errorHandler = errorHandler25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.httpExecutor = executor28;
        retrofit.RestAdapter.Builder builder31 = builder27.setServer("hi!");
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder27.setLog(log32);
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter34.logLevel;
        retrofit.converter.Converter converter37 = null;
        restAdapter34.converter = converter37;
        retrofit.ErrorHandler errorHandler39 = restAdapter34.errorHandler;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter41 = null;
        builder40.converter = converter41;
        retrofit.client.Client.Provider provider43 = null;
        builder40.clientProvider = provider43;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        builder40.requestInterceptor = requestInterceptor45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = null;
        builder47.httpExecutor = executor48;
        retrofit.RestAdapter.Builder builder51 = builder47.setServer("hi!");
        retrofit.Profiler profiler52 = null;
        builder51.profiler = profiler52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor55 = null;
        builder54.httpExecutor = executor55;
        retrofit.RestAdapter.Builder builder58 = builder54.setServer("hi!");
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder60 = builder54.setLog(log59);
        retrofit.RestAdapter restAdapter61 = builder54.build();
        retrofit.converter.Converter converter62 = null;
        builder54.converter = converter62;
        retrofit.ErrorHandler errorHandler64 = null;
        builder54.errorHandler = errorHandler64;
        retrofit.RequestInterceptor requestInterceptor66 = builder54.requestInterceptor;
        builder51.requestInterceptor = requestInterceptor66;
        retrofit.RestAdapter.Builder builder68 = builder40.setRequestInterceptor(requestInterceptor66);
        restAdapter34.requestInterceptor = requestInterceptor66;
        builder27.requestInterceptor = requestInterceptor66;
        builder15.requestInterceptor = requestInterceptor66;
        retrofit.RestAdapter.LogLevel logLevel72 = builder15.logLevel;
        builder5.logLevel = logLevel72;
        restAdapter0.logLevel = logLevel72;
        retrofit.Profiler profiler75 = null;
        restAdapter0.profiler = profiler75;
        retrofit.Profiler profiler77 = null;
        restAdapter0.profiler = profiler77;
        java.lang.Throwable throwable79 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable79, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(restAdapter22);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(restAdapter61);
        org.junit.Assert.assertNotNull(requestInterceptor66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test11603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11603");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = restAdapter0.clientProvider;
        retrofit.client.Client.Provider provider4 = null;
        restAdapter0.clientProvider = provider4;
        retrofit.Profiler profiler6 = null;
        restAdapter0.profiler = profiler6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = null;
        builder8.converter = converter9;
        retrofit.client.Client.Provider provider11 = null;
        builder8.clientProvider = provider11;
        java.util.concurrent.Executor executor13 = builder8.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        builder8.requestInterceptor = requestInterceptor14;
        retrofit.converter.Converter converter16 = null;
        builder8.converter = converter16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter19 = null;
        restAdapter18.converter = converter19;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        restAdapter18.requestInterceptor = requestInterceptor21;
        retrofit.Profiler profiler23 = restAdapter18.profiler;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean25 = logLevel24.log();
        restAdapter18.logLevel = logLevel24;
        java.util.concurrent.Executor executor27 = restAdapter18.httpExecutor;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = builder28.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor30 = builder28.requestInterceptor;
        retrofit.ErrorHandler errorHandler31 = null;
        builder28.errorHandler = errorHandler31;
        retrofit.converter.Converter converter33 = null;
        builder28.converter = converter33;
        retrofit.ErrorHandler errorHandler35 = null;
        builder28.errorHandler = errorHandler35;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor38 = restAdapter37.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        restAdapter37.requestInterceptor = requestInterceptor39;
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel50);
        restAdapter37.log = log49;
        retrofit.ErrorHandler errorHandler53 = null;
        restAdapter37.errorHandler = errorHandler53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter56 = builder55.converter;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor58 = restAdapter57.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        restAdapter57.requestInterceptor = requestInterceptor59;
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel70);
        restAdapter57.log = log69;
        retrofit.ErrorHandler errorHandler73 = null;
        restAdapter57.errorHandler = errorHandler73;
        retrofit.RestAdapter.Log log75 = restAdapter57.log;
        retrofit.RestAdapter.Builder builder76 = builder55.setLog(log75);
        retrofit.RequestInterceptor requestInterceptor77 = builder55.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor78 = builder55.requestInterceptor;
        retrofit.RestAdapter.Builder builder80 = builder55.setServer("hi!");
        retrofit.Server server81 = builder55.server;
        restAdapter37.server = server81;
        retrofit.RestAdapter.Builder builder83 = builder28.setServer(server81);
        restAdapter18.server = server81;
        retrofit.RestAdapter.Builder builder85 = builder8.setServer(server81);
        retrofit.Server server86 = builder85.server;
        restAdapter0.server = server86;
        retrofit.Server server88 = restAdapter0.server;
        java.util.concurrent.Executor executor89 = null;
        restAdapter0.callbackExecutor = executor89;
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter56);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(requestInterceptor77);
        org.junit.Assert.assertNull(requestInterceptor78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(server81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(server86);
        org.junit.Assert.assertNotNull(server88);
    }

    @Test
    public void test11604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11604");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.RestAdapter.LogLevel logLevel23 = builder21.logLevel;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("Retrofit-Idle");
        retrofit.client.Client.Provider provider26 = builder25.clientProvider;
        retrofit.RestAdapter.Builder builder28 = builder25.setServer("hi!");
        retrofit.Profiler profiler29 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder30 = builder28.setProfiler(profiler29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test11605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11605");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor26 = builder25.httpExecutor;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor36 = restAdapter35.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        restAdapter35.requestInterceptor = requestInterceptor37;
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel48);
        restAdapter35.log = log47;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean52 = logLevel51.log();
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log47, logLevel51);
        retrofit.RestAdapter.Builder builder54 = builder25.setLogLevel(logLevel51);
        retrofit.RestAdapter restAdapter55 = builder25.build();
        retrofit.RestAdapter.Log log56 = builder25.log;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNotNull(log56);
    }

    @Test
    public void test11606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11606");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter10.errorHandler = errorHandler26;
        retrofit.RestAdapter.Log log28 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder29 = builder8.setLog(log28);
        retrofit.Profiler profiler30 = builder29.profiler;
        retrofit.Profiler profiler31 = builder29.profiler;
        java.util.concurrent.Executor executor32 = builder29.callbackExecutor;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.RestAdapter restAdapter40 = builder33.build();
        java.util.concurrent.Executor executor41 = restAdapter40.httpExecutor;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.httpExecutor = executor43;
        retrofit.client.Client.Provider provider45 = null;
        builder42.clientProvider = provider45;
        retrofit.RestAdapter.Builder builder48 = builder42.setServer("hi!");
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = builder49.setServer("hi!");
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder49.setLog(log54);
        retrofit.RestAdapter restAdapter56 = builder49.build();
        java.util.concurrent.Executor executor57 = restAdapter56.httpExecutor;
        builder48.callbackExecutor = executor57;
        retrofit.RestAdapter.Builder builder59 = builder29.setExecutors(executor41, executor57);
        restAdapter7.httpExecutor = executor41;
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel70);
        restAdapter7.logLevel = logLevel70;
        retrofit.ErrorHandler errorHandler73 = restAdapter7.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler74 = restAdapter7.new RestHandler();
        java.util.concurrent.Executor executor75 = restAdapter7.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler76 = restAdapter7.new RestHandler();
        retrofit.Profiler profiler77 = null;
        restAdapter7.profiler = profiler77;
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter7.logLevel;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter40);
        org.junit.Assert.assertNotNull(executor41);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNotNull(executor57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(errorHandler73);
        org.junit.Assert.assertNotNull(executor75);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test11607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11607");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.converter.Converter converter5 = null;
        restAdapter2.converter = converter5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Log log27 = restAdapter9.log;
        retrofit.RestAdapter.Builder builder28 = builder7.setLog(log27);
        restAdapter2.log = log27;
        log27.log("");
        log27.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder34 = builder0.setLog(log27);
        retrofit.RequestInterceptor requestInterceptor35 = builder34.requestInterceptor;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter37 = builder36.converter;
        retrofit.Profiler profiler38 = null;
        builder36.profiler = profiler38;
        retrofit.RestAdapter.Builder builder41 = builder36.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter42 = builder41.converter;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor44 = null;
        builder43.httpExecutor = executor44;
        retrofit.client.Client.Provider provider46 = null;
        builder43.clientProvider = provider46;
        retrofit.client.Client.Provider provider48 = builder43.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder50 = builder43.setLogLevel(logLevel49);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = null;
        builder51.httpExecutor = executor52;
        retrofit.RestAdapter.Builder builder55 = builder51.setServer("hi!");
        retrofit.Profiler profiler56 = null;
        builder55.profiler = profiler56;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        builder55.requestInterceptor = requestInterceptor58;
        retrofit.RestAdapter restAdapter60 = builder55.build();
        retrofit.converter.Converter converter61 = restAdapter60.converter;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        log62.log("");
        restAdapter60.log = log62;
        retrofit.RestAdapter.Builder builder66 = builder43.setLog(log62);
        retrofit.RestAdapter.Builder builder67 = builder41.setLog(log62);
        retrofit.RestAdapter restAdapter68 = builder41.build();
        retrofit.RequestInterceptor requestInterceptor69 = builder41.requestInterceptor;
        retrofit.RestAdapter.Builder builder70 = builder34.setRequestInterceptor(requestInterceptor69);
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor72 = null;
        builder71.httpExecutor = executor72;
        retrofit.RestAdapter.Builder builder75 = builder71.setServer("hi!");
        retrofit.Profiler profiler76 = null;
        builder75.profiler = profiler76;
        retrofit.RequestInterceptor requestInterceptor78 = null;
        builder75.requestInterceptor = requestInterceptor78;
        retrofit.RestAdapter restAdapter80 = builder75.build();
        retrofit.converter.Converter converter81 = null;
        builder75.converter = converter81;
        retrofit.client.Client.Provider provider83 = builder75.clientProvider;
        builder34.clientProvider = provider83;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNull(converter37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(converter42);
        org.junit.Assert.assertNull(provider48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNotNull(converter61);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(restAdapter68);
        org.junit.Assert.assertNotNull(requestInterceptor69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNotNull(provider83);
    }

    @Test
    public void test11608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11608");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        restAdapter0.log = log12;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.client.Response response19 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response21 = restAdapter0.logAndReplaceResponse("hi!", response19, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test11609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11609");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel11);
        retrofit.RestAdapter.Builder builder13 = builder0.setLogLevel(logLevel11);
        builder13.ensureSaneDefaults();
        retrofit.Server server15 = builder13.server;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter17 = null;
        restAdapter16.converter = converter17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter20 = builder19.converter;
        retrofit.Profiler profiler21 = null;
        builder19.profiler = profiler21;
        retrofit.ErrorHandler errorHandler23 = null;
        builder19.errorHandler = errorHandler23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter26 = builder25.converter;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor28 = restAdapter27.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        restAdapter27.requestInterceptor = requestInterceptor29;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        restAdapter27.log = log39;
        retrofit.ErrorHandler errorHandler43 = null;
        restAdapter27.errorHandler = errorHandler43;
        retrofit.RestAdapter.Log log45 = restAdapter27.log;
        retrofit.RestAdapter.Builder builder46 = builder25.setLog(log45);
        retrofit.RestAdapter.Builder builder47 = builder19.setLog(log45);
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter48.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter48.logLevel = logLevel50;
        retrofit.RestAdapter.Builder builder52 = builder47.setLogLevel(logLevel50);
        restAdapter16.logLevel = logLevel50;
        boolean boolean54 = logLevel50.log();
        builder13.logLevel = logLevel50;
        retrofit.converter.Converter converter56 = builder13.converter;
        retrofit.converter.Converter converter57 = builder13.converter;
        java.util.concurrent.Executor executor58 = builder13.httpExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(converter26);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(logLevel49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(converter56);
        org.junit.Assert.assertNotNull(converter57);
        org.junit.Assert.assertNotNull(executor58);
    }

    @Test
    public void test11610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11610");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = builder0.build();
        java.util.concurrent.Executor executor8 = restAdapter7.httpExecutor;
        retrofit.client.Client.Provider provider9 = null;
        restAdapter7.clientProvider = provider9;
        retrofit.client.Client.Provider provider11 = null;
        restAdapter7.clientProvider = provider11;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter7.logLevel;
        retrofit.Profiler profiler14 = null;
        restAdapter7.profiler = profiler14;
        java.lang.Class<?> wildcardClass16 = restAdapter7.getClass();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(executor8);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test11611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11611");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.Profiler profiler5 = builder0.profiler;
        java.util.concurrent.Executor executor6 = builder0.httpExecutor;
        retrofit.converter.Converter converter7 = builder0.converter;
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder10 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        java.util.concurrent.Executor executor16 = null;
        builder11.httpExecutor = executor16;
        retrofit.RestAdapter restAdapter18 = builder11.build();
        retrofit.converter.Converter converter19 = builder11.converter;
        builder0.converter = converter19;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(converter19);
    }

    @Test
    public void test11612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11612");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.RestAdapter.LogLevel logLevel23 = builder21.logLevel;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter.Builder builder25 = builder21.setLogLevel(logLevel24);
        retrofit.RestAdapter.Log log26 = builder25.log;
        log26.log("Retrofit-Idle");
        log26.log("Retrofit-Idle");
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(log26);
    }

    @Test
    public void test11613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11613");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.Server server2 = restAdapter0.server;
        retrofit.client.Client.Provider provider3 = null;
        restAdapter0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.Profiler profiler7 = null;
        restAdapter0.profiler = profiler7;
        retrofit.Profiler profiler9 = null;
        restAdapter0.profiler = profiler9;
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(server2);
    }

    @Test
    public void test11614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11614");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("hi!");
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.RestAdapter.Builder builder38 = builder34.setServer("hi!");
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder40 = builder34.setLog(log39);
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter41.logLevel = logLevel43;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        restAdapter41.requestInterceptor = requestInterceptor45;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter41.logLevel = logLevel47;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log39, logLevel47);
        boolean boolean50 = logLevel47.log();
        retrofit.RestAdapter.Builder builder51 = builder25.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = null;
        builder52.httpExecutor = executor53;
        retrofit.RestAdapter.Builder builder56 = builder52.setServer("hi!");
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder52.setLog(log57);
        retrofit.RestAdapter restAdapter59 = builder52.build();
        java.util.concurrent.Executor executor60 = restAdapter59.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler61 = restAdapter59.new RestHandler();
        retrofit.converter.Converter converter62 = restAdapter59.converter;
        builder51.converter = converter62;
        java.util.concurrent.Executor executor64 = builder51.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor65 = builder51.requestInterceptor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertNotNull(executor60);
        org.junit.Assert.assertNotNull(converter62);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(requestInterceptor65);
    }

    @Test
    public void test11615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11615");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter10.errorHandler = errorHandler26;
        retrofit.RestAdapter.Log log28 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder29 = builder8.setLog(log28);
        retrofit.Profiler profiler30 = builder29.profiler;
        retrofit.Profiler profiler31 = builder29.profiler;
        java.util.concurrent.Executor executor32 = builder29.callbackExecutor;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.RestAdapter restAdapter40 = builder33.build();
        java.util.concurrent.Executor executor41 = restAdapter40.httpExecutor;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.httpExecutor = executor43;
        retrofit.client.Client.Provider provider45 = null;
        builder42.clientProvider = provider45;
        retrofit.RestAdapter.Builder builder48 = builder42.setServer("hi!");
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = builder49.setServer("hi!");
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder49.setLog(log54);
        retrofit.RestAdapter restAdapter56 = builder49.build();
        java.util.concurrent.Executor executor57 = restAdapter56.httpExecutor;
        builder48.callbackExecutor = executor57;
        retrofit.RestAdapter.Builder builder59 = builder29.setExecutors(executor41, executor57);
        restAdapter7.httpExecutor = executor41;
        retrofit.client.Client.Provider provider61 = null;
        restAdapter7.clientProvider = provider61;
        retrofit.Profiler profiler63 = null;
        restAdapter7.profiler = profiler63;
        retrofit.RestAdapter.RestHandler restHandler65 = restAdapter7.new RestHandler();
        retrofit.Profiler profiler66 = null;
        restAdapter7.profiler = profiler66;
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter7.logLevel;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter40);
        org.junit.Assert.assertNotNull(executor41);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNotNull(executor57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test11616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11616");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList10 = request8.getHeaders();
        java.lang.String str11 = request8.getMethod();
        retrofit.mime.TypedOutput typedOutput12 = request8.getBody();
        java.util.List<retrofit.client.Header> headerList13 = request8.getHeaders();
        java.lang.String str14 = request8.getUrl();
        java.lang.String str15 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList16 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("Retrofit-Idle", "", headerList16, typedOutput17);
        java.lang.String str19 = request18.getMethod();
        java.util.List<retrofit.client.Header> headerList20 = request18.getHeaders();
        java.util.List<retrofit.client.Header> headerList21 = request18.getHeaders();
        java.lang.String str22 = request18.getUrl();
        java.lang.String str23 = request18.getUrl();
        retrofit.mime.TypedOutput typedOutput24 = request18.getBody();
        java.lang.String str25 = request18.getMethod();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Retrofit-Idle" + "'", str19, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertNotNull(headerList21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(typedOutput24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Retrofit-Idle" + "'", str25, "Retrofit-Idle");
    }

    @Test
    public void test11617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11617");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = null;
        restAdapter10.errorHandler = errorHandler11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder13.setLog(log18);
        retrofit.RestAdapter restAdapter20 = builder13.build();
        retrofit.converter.Converter converter21 = null;
        builder13.converter = converter21;
        retrofit.ErrorHandler errorHandler23 = null;
        builder13.errorHandler = errorHandler23;
        retrofit.RequestInterceptor requestInterceptor25 = builder13.requestInterceptor;
        restAdapter10.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor28 = restAdapter27.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        restAdapter27.requestInterceptor = requestInterceptor29;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        restAdapter27.log = log39;
        retrofit.ErrorHandler errorHandler43 = null;
        restAdapter27.errorHandler = errorHandler43;
        retrofit.converter.Converter converter45 = null;
        restAdapter27.converter = converter45;
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor56 = restAdapter55.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        restAdapter55.requestInterceptor = requestInterceptor57;
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server59, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log67, logLevel68);
        restAdapter55.log = log67;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean72 = logLevel71.log();
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log67, logLevel71);
        restAdapter27.logLevel = logLevel71;
        restAdapter10.setLogLevel(logLevel71);
        retrofit.client.Header[] headerArray78 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList79 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList79, headerArray78);
        retrofit.mime.TypedOutput typedOutput81 = null;
        retrofit.client.Request request82 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList79, typedOutput81);
        java.lang.String str83 = request82.getUrl();
        java.util.List<retrofit.client.Header> headerList84 = request82.getHeaders();
        java.lang.String str85 = request82.getMethod();
        java.util.List<retrofit.client.Header> headerList86 = request82.getHeaders();
        retrofit.client.Request request87 = restAdapter10.logAndReplaceRequest(request82);
        java.lang.String str88 = request82.getUrl();
        retrofit.mime.TypedOutput typedOutput89 = request82.getBody();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor56);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(headerArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(headerList84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(headerList86);
        org.junit.Assert.assertNotNull(request87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNull(typedOutput89);
    }

    @Test
    public void test11618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11618");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log9 = restAdapter8.log;
        java.util.concurrent.Executor executor10 = restAdapter8.callbackExecutor;
        retrofit.Profiler profiler11 = restAdapter8.profiler;
        retrofit.Profiler profiler12 = null;
        restAdapter8.profiler = profiler12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter8.log = log22;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("hi!");
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder26.setLog(log31);
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        builder26.logLevel = logLevel42;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log22, logLevel42);
        retrofit.converter.Converter converter46 = restAdapter45.converter;
        retrofit.converter.Converter converter47 = restAdapter45.converter;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.httpExecutor = executor49;
        retrofit.RestAdapter.Builder builder52 = builder48.setServer("hi!");
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder48.setLog(log53);
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel64);
        builder48.logLevel = logLevel64;
        java.util.concurrent.Executor executor67 = builder48.httpExecutor;
        retrofit.RestAdapter.Builder builder69 = builder48.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log71 = restAdapter70.log;
        retrofit.ErrorHandler errorHandler72 = restAdapter70.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler73 = restAdapter70.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter70.logLevel;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor76 = null;
        builder75.httpExecutor = executor76;
        retrofit.RestAdapter.Builder builder79 = builder75.setServer("hi!");
        retrofit.RestAdapter restAdapter80 = builder79.build();
        retrofit.client.Header[] headerArray83 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList84 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList84, headerArray83);
        retrofit.mime.TypedOutput typedOutput86 = null;
        retrofit.client.Request request87 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList84, typedOutput86);
        java.lang.String str88 = request87.getMethod();
        java.lang.String str89 = request87.getMethod();
        retrofit.client.Request request90 = restAdapter80.logAndReplaceRequest(request87);
        retrofit.converter.Converter converter91 = restAdapter80.converter;
        restAdapter70.converter = converter91;
        builder69.converter = converter91;
        restAdapter45.converter = converter91;
        retrofit.ErrorHandler errorHandler95 = restAdapter45.errorHandler;
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertNull(converter47);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(log71);
        org.junit.Assert.assertNull(errorHandler72);
        org.junit.Assert.assertNull(logLevel74);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNotNull(headerArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(request90);
        org.junit.Assert.assertNotNull(converter91);
        org.junit.Assert.assertNull(errorHandler95);
    }

    @Test
    public void test11619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11619");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.RequestInterceptor requestInterceptor8 = null;
        builder7.requestInterceptor = requestInterceptor8;
        retrofit.client.Client.Provider provider10 = builder7.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel11 = builder7.logLevel;
        boolean boolean12 = logLevel11.log();
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test11620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11620");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter7.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        restAdapter7.requestInterceptor = requestInterceptor9;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        restAdapter7.log = log19;
        retrofit.ErrorHandler errorHandler23 = null;
        restAdapter7.errorHandler = errorHandler23;
        retrofit.RestAdapter.Log log25 = restAdapter7.log;
        retrofit.RestAdapter.Builder builder26 = builder5.setLog(log25);
        restAdapter0.log = log25;
        retrofit.Profiler profiler28 = null;
        restAdapter0.profiler = profiler28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.httpExecutor = executor31;
        retrofit.client.Client.Provider provider33 = null;
        builder30.clientProvider = provider33;
        retrofit.RestAdapter.Builder builder36 = builder30.setServer("hi!");
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor38 = restAdapter37.requestInterceptor;
        java.util.concurrent.Executor executor39 = restAdapter37.callbackExecutor;
        retrofit.converter.Converter converter40 = null;
        restAdapter37.converter = converter40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter43 = builder42.converter;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter44.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        restAdapter44.requestInterceptor = requestInterceptor46;
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel57);
        restAdapter44.log = log56;
        retrofit.ErrorHandler errorHandler60 = null;
        restAdapter44.errorHandler = errorHandler60;
        retrofit.RestAdapter.Log log62 = restAdapter44.log;
        retrofit.RestAdapter.Builder builder63 = builder42.setLog(log62);
        restAdapter37.log = log62;
        retrofit.RestAdapter.Builder builder65 = builder30.setLog(log62);
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter67 = builder66.converter;
        retrofit.Profiler profiler68 = null;
        builder66.profiler = profiler68;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor71 = null;
        builder70.httpExecutor = executor71;
        retrofit.client.Client.Provider provider73 = null;
        builder70.clientProvider = provider73;
        retrofit.RestAdapter.Builder builder76 = builder70.setServer("hi!");
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor78 = null;
        builder77.httpExecutor = executor78;
        retrofit.RestAdapter.Builder builder81 = builder77.setServer("hi!");
        retrofit.RestAdapter.Log log82 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder83 = builder77.setLog(log82);
        retrofit.RestAdapter restAdapter84 = builder77.build();
        java.util.concurrent.Executor executor85 = restAdapter84.httpExecutor;
        builder76.callbackExecutor = executor85;
        builder66.callbackExecutor = executor85;
        builder65.httpExecutor = executor85;
        restAdapter0.callbackExecutor = executor85;
        retrofit.Profiler profiler90 = null;
        restAdapter0.profiler = profiler90;
        retrofit.client.Client.Provider provider92 = restAdapter0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor93 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter94 = restAdapter0.converter;
        retrofit.RestAdapter.LogLevel logLevel95 = null;
        restAdapter0.logLevel = logLevel95;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(converter67);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(restAdapter84);
        org.junit.Assert.assertNotNull(executor85);
        org.junit.Assert.assertNull(provider92);
        org.junit.Assert.assertNull(requestInterceptor93);
        org.junit.Assert.assertNull(converter94);
    }

    @Test
    public void test11621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11621");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.Profiler profiler5 = builder0.profiler;
        retrofit.Profiler profiler6 = null;
        builder0.profiler = profiler6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter10.errorHandler = errorHandler26;
        retrofit.RestAdapter.Log log28 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder29 = builder8.setLog(log28);
        retrofit.Profiler profiler30 = builder29.profiler;
        retrofit.RestAdapter.LogLevel logLevel31 = builder29.logLevel;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter.Builder builder33 = builder29.setLogLevel(logLevel32);
        builder0.logLevel = logLevel32;
        boolean boolean35 = logLevel32.log();
        boolean boolean36 = logLevel32.log();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test11622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11622");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.getUrl();
        java.util.List<retrofit.client.Header> headerList8 = request6.getHeaders();
        java.lang.String str9 = request6.getMethod();
        retrofit.mime.TypedOutput typedOutput10 = request6.getBody();
        java.lang.String str11 = request6.getUrl();
        java.lang.String str12 = request6.getUrl();
        java.util.List<retrofit.client.Header> headerList13 = request6.getHeaders();
        retrofit.mime.TypedOutput typedOutput14 = request6.getBody();
        java.lang.String str15 = request6.getMethod();
        java.lang.String str16 = request6.getUrl();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test11623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11623");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Profiler profiler7 = null;
        builder6.profiler = profiler7;
        retrofit.client.Client.Provider provider9 = builder6.clientProvider;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.converter.Converter converter13 = null;
        restAdapter10.converter = converter13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter16 = builder15.converter;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter17.requestInterceptor = requestInterceptor19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        restAdapter17.log = log29;
        retrofit.ErrorHandler errorHandler33 = null;
        restAdapter17.errorHandler = errorHandler33;
        retrofit.RestAdapter.Log log35 = restAdapter17.log;
        retrofit.RestAdapter.Builder builder36 = builder15.setLog(log35);
        restAdapter10.log = log35;
        retrofit.Profiler profiler38 = null;
        restAdapter10.profiler = profiler38;
        retrofit.converter.Converter converter40 = null;
        restAdapter10.converter = converter40;
        java.util.concurrent.Executor executor42 = restAdapter10.httpExecutor;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor44 = restAdapter43.requestInterceptor;
        java.util.concurrent.Executor executor45 = restAdapter43.callbackExecutor;
        retrofit.RestAdapter.Log log46 = restAdapter43.log;
        java.util.concurrent.Executor executor47 = restAdapter43.httpExecutor;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log49 = restAdapter48.log;
        retrofit.ErrorHandler errorHandler50 = restAdapter48.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter48.new RestHandler();
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = null;
        builder52.httpExecutor = executor53;
        retrofit.RestAdapter.Builder builder56 = builder52.setServer("hi!");
        retrofit.Profiler profiler57 = null;
        builder56.profiler = profiler57;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor60 = null;
        builder59.httpExecutor = executor60;
        retrofit.RestAdapter.Builder builder63 = builder59.setServer("hi!");
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder65 = builder59.setLog(log64);
        retrofit.RestAdapter restAdapter66 = builder59.build();
        retrofit.converter.Converter converter67 = null;
        builder59.converter = converter67;
        retrofit.ErrorHandler errorHandler69 = null;
        builder59.errorHandler = errorHandler69;
        retrofit.RequestInterceptor requestInterceptor71 = builder59.requestInterceptor;
        builder56.requestInterceptor = requestInterceptor71;
        restAdapter48.requestInterceptor = requestInterceptor71;
        retrofit.RequestInterceptor requestInterceptor74 = restAdapter48.requestInterceptor;
        restAdapter43.requestInterceptor = requestInterceptor74;
        restAdapter10.requestInterceptor = requestInterceptor74;
        java.util.concurrent.Executor executor77 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log78 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder79 = builder6.setLog(log78);
        retrofit.Server server80 = builder6.server;
        retrofit.RestAdapter restAdapter81 = builder6.build();
        retrofit.ErrorHandler errorHandler82 = null;
        restAdapter81.errorHandler = errorHandler82;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(requestInterceptor44);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(log46);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNull(log49);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(restAdapter66);
        org.junit.Assert.assertNotNull(requestInterceptor71);
        org.junit.Assert.assertNotNull(requestInterceptor74);
        org.junit.Assert.assertNull(executor77);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(server80);
        org.junit.Assert.assertNotNull(restAdapter81);
    }

    @Test
    public void test11624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11624");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        retrofit.RestAdapter.Log log8 = restAdapter0.log;
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.httpExecutor = executor18;
        retrofit.RestAdapter.Builder builder21 = builder17.setServer("hi!");
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = builder17.setLog(log22);
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter24.logLevel = logLevel26;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        restAdapter24.requestInterceptor = requestInterceptor28;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter24.logLevel = logLevel30;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log22, logLevel30);
        restAdapter0.logLevel = logLevel30;
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter0.logLevel;
        retrofit.client.Client.Provider provider35 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider35);
    }

    @Test
    public void test11625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11625");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.Profiler profiler11 = restAdapter10.profiler;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.client.Client.Provider provider15 = null;
        builder12.clientProvider = provider15;
        retrofit.client.Client.Provider provider17 = builder12.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder19 = builder12.setLogLevel(logLevel18);
        retrofit.Profiler profiler20 = null;
        builder12.profiler = profiler20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter23 = builder22.converter;
        retrofit.RestAdapter.LogLevel logLevel24 = builder22.logLevel;
        builder22.ensureSaneDefaults();
        retrofit.client.Client.Provider provider26 = null;
        builder22.clientProvider = provider26;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder40 = builder36.setServer("hi!");
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder36.setLog(log41);
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter43.logLevel = logLevel45;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        restAdapter43.requestInterceptor = requestInterceptor47;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter43.logLevel = logLevel49;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log41, logLevel49);
        builder22.logLevel = logLevel49;
        retrofit.RestAdapter.LogLevel logLevel53 = builder22.logLevel;
        java.util.concurrent.Executor executor54 = builder22.httpExecutor;
        builder12.callbackExecutor = executor54;
        restAdapter10.callbackExecutor = executor54;
        retrofit.converter.Converter converter57 = null;
        restAdapter10.converter = converter57;
        retrofit.Profiler profiler59 = null;
        restAdapter10.profiler = profiler59;
        retrofit.RequestInterceptor requestInterceptor61 = restAdapter10.requestInterceptor;
        retrofit.Profiler profiler62 = restAdapter10.profiler;
        java.util.concurrent.Executor executor63 = restAdapter10.httpExecutor;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor54);
        org.junit.Assert.assertNull(requestInterceptor61);
        org.junit.Assert.assertNull(profiler62);
        org.junit.Assert.assertNull(executor63);
    }

    @Test
    public void test11626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11626");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        java.util.concurrent.Executor executor6 = builder4.httpExecutor;
        retrofit.Profiler profiler7 = null;
        builder4.profiler = profiler7;
        retrofit.client.Client.Provider provider9 = builder4.clientProvider;
        retrofit.Profiler profiler10 = builder4.profiler;
        retrofit.RestAdapter.Log log11 = builder4.log;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter12.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        restAdapter12.requestInterceptor = requestInterceptor14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.httpExecutor = executor17;
        retrofit.RestAdapter.Builder builder20 = builder16.setServer("hi!");
        retrofit.client.Client.Provider provider21 = builder20.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        builder20.logLevel = logLevel22;
        retrofit.RestAdapter restAdapter25 = builder20.build();
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter26.requestInterceptor;
        java.util.concurrent.Executor executor28 = restAdapter26.callbackExecutor;
        retrofit.converter.Converter converter29 = null;
        restAdapter26.converter = converter29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter32 = builder31.converter;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter33.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        restAdapter33.requestInterceptor = requestInterceptor35;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel46);
        restAdapter33.log = log45;
        retrofit.ErrorHandler errorHandler49 = null;
        restAdapter33.errorHandler = errorHandler49;
        retrofit.RestAdapter.Log log51 = restAdapter33.log;
        retrofit.RestAdapter.Builder builder52 = builder31.setLog(log51);
        restAdapter26.log = log51;
        retrofit.RestAdapter.Builder builder54 = builder20.setLog(log51);
        restAdapter12.log = log51;
        log51.log("");
        builder4.log = log51;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel60 = restAdapter59.getLogLevel();
        retrofit.Server server61 = restAdapter59.server;
        retrofit.client.Client.Provider provider62 = null;
        restAdapter59.clientProvider = provider62;
        retrofit.Server server64 = null;
        restAdapter59.server = server64;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter67 = null;
        restAdapter66.converter = converter67;
        retrofit.RequestInterceptor requestInterceptor69 = null;
        restAdapter66.requestInterceptor = requestInterceptor69;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log72 = restAdapter71.log;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        restAdapter71.requestInterceptor = requestInterceptor73;
        retrofit.RestAdapter.LogLevel logLevel75 = null;
        restAdapter71.logLevel = logLevel75;
        retrofit.ErrorHandler errorHandler77 = restAdapter71.errorHandler;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor79 = null;
        builder78.httpExecutor = executor79;
        retrofit.RestAdapter.Builder builder82 = builder78.setServer("hi!");
        retrofit.Profiler profiler83 = null;
        builder82.profiler = profiler83;
        retrofit.RequestInterceptor requestInterceptor85 = null;
        builder82.requestInterceptor = requestInterceptor85;
        retrofit.RestAdapter restAdapter87 = builder82.build();
        retrofit.converter.Converter converter88 = restAdapter87.converter;
        restAdapter71.converter = converter88;
        restAdapter66.converter = converter88;
        restAdapter59.converter = converter88;
        builder4.converter = converter88;
        java.util.concurrent.Executor executor93 = builder4.httpExecutor;
        retrofit.RestAdapter.Log log94 = builder4.log;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(restAdapter25);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(logLevel60);
        org.junit.Assert.assertNull(server61);
        org.junit.Assert.assertNull(log72);
        org.junit.Assert.assertNull(errorHandler77);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(restAdapter87);
        org.junit.Assert.assertNotNull(converter88);
        org.junit.Assert.assertNull(executor93);
        org.junit.Assert.assertNotNull(log94);
    }

    @Test
    public void test11627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11627");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.Profiler profiler5 = builder0.profiler;
        java.util.concurrent.Executor executor6 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.callbackExecutor;
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel18);
        retrofit.RestAdapter.Builder builder20 = builder7.setLogLevel(logLevel18);
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter21.logLevel = logLevel23;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter21.setLogLevel(logLevel25);
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter21.getLogLevel();
        builder20.logLevel = logLevel27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter30 = builder29.converter;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor32 = restAdapter31.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        restAdapter31.requestInterceptor = requestInterceptor33;
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel44);
        restAdapter31.log = log43;
        retrofit.ErrorHandler errorHandler47 = null;
        restAdapter31.errorHandler = errorHandler47;
        retrofit.RestAdapter.Log log49 = restAdapter31.log;
        retrofit.RestAdapter.Builder builder50 = builder29.setLog(log49);
        builder20.log = log49;
        retrofit.RestAdapter.Builder builder52 = builder0.setLog(log49);
        retrofit.client.Client.Provider provider53 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor55 = null;
        builder54.httpExecutor = executor55;
        retrofit.RestAdapter.Builder builder58 = builder54.setServer("hi!");
        retrofit.RestAdapter restAdapter59 = builder58.build();
        retrofit.client.Header[] headerArray62 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList63 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList63, headerArray62);
        retrofit.mime.TypedOutput typedOutput65 = null;
        retrofit.client.Request request66 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList63, typedOutput65);
        java.lang.String str67 = request66.getMethod();
        java.lang.String str68 = request66.getMethod();
        retrofit.client.Request request69 = restAdapter59.logAndReplaceRequest(request66);
        retrofit.RequestInterceptor requestInterceptor70 = restAdapter59.requestInterceptor;
        retrofit.RestAdapter.Builder builder71 = builder0.setRequestInterceptor(requestInterceptor70);
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor73 = null;
        builder72.httpExecutor = executor73;
        retrofit.RestAdapter.Builder builder76 = builder72.setServer("hi!");
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder78 = builder72.setLog(log77);
        retrofit.Server server79 = null;
        retrofit.client.Client.Provider provider80 = null;
        java.util.concurrent.Executor executor81 = null;
        java.util.concurrent.Executor executor82 = null;
        retrofit.RequestInterceptor requestInterceptor83 = null;
        retrofit.converter.Converter converter84 = null;
        retrofit.Profiler profiler85 = null;
        retrofit.ErrorHandler errorHandler86 = null;
        retrofit.RestAdapter.Log log87 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel88 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter89 = new retrofit.RestAdapter(server79, provider80, executor81, executor82, requestInterceptor83, converter84, profiler85, errorHandler86, log87, logLevel88);
        builder72.logLevel = logLevel88;
        retrofit.Profiler profiler91 = builder72.profiler;
        retrofit.RestAdapter.Log log92 = builder72.log;
        retrofit.ErrorHandler errorHandler93 = builder72.errorHandler;
        retrofit.Server server94 = builder72.server;
        builder71.server = server94;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter30);
        org.junit.Assert.assertNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(provider53);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertNotNull(headerArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(request69);
        org.junit.Assert.assertNotNull(requestInterceptor70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(log87);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler91);
        org.junit.Assert.assertNotNull(log92);
        org.junit.Assert.assertNull(errorHandler93);
        org.junit.Assert.assertNotNull(server94);
    }

    @Test
    public void test11628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11628");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RestAdapter.Log log2 = builder0.log;
        retrofit.Server server3 = null;
        retrofit.client.Client.Provider provider4 = null;
        java.util.concurrent.Executor executor5 = null;
        java.util.concurrent.Executor executor6 = null;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        retrofit.converter.Converter converter8 = null;
        retrofit.Profiler profiler9 = null;
        retrofit.ErrorHandler errorHandler10 = null;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter22.logLevel = logLevel24;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server3, provider4, executor5, executor6, requestInterceptor7, converter8, profiler9, errorHandler10, log19, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLogLevel(logLevel26);
        java.util.concurrent.Executor executor30 = builder29.httpExecutor;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.httpExecutor = executor32;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("hi!");
        retrofit.Profiler profiler36 = null;
        builder35.profiler = profiler36;
        retrofit.RestAdapter.LogLevel logLevel38 = builder35.logLevel;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor40 = restAdapter39.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        restAdapter39.requestInterceptor = requestInterceptor41;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel52);
        restAdapter39.log = log51;
        retrofit.ErrorHandler errorHandler55 = null;
        restAdapter39.errorHandler = errorHandler55;
        retrofit.converter.Converter converter57 = null;
        restAdapter39.converter = converter57;
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor68 = restAdapter67.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor69 = null;
        restAdapter67.requestInterceptor = requestInterceptor69;
        retrofit.Server server71 = null;
        retrofit.client.Client.Provider provider72 = null;
        java.util.concurrent.Executor executor73 = null;
        java.util.concurrent.Executor executor74 = null;
        retrofit.RequestInterceptor requestInterceptor75 = null;
        retrofit.converter.Converter converter76 = null;
        retrofit.Profiler profiler77 = null;
        retrofit.ErrorHandler errorHandler78 = null;
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server71, provider72, executor73, executor74, requestInterceptor75, converter76, profiler77, errorHandler78, log79, logLevel80);
        restAdapter67.log = log79;
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean84 = logLevel83.log();
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter(server59, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log79, logLevel83);
        restAdapter39.logLevel = logLevel83;
        retrofit.RestAdapter.Builder builder87 = builder35.setLogLevel(logLevel83);
        builder29.logLevel = logLevel83;
        retrofit.client.Client.Provider provider89 = builder29.clientProvider;
        retrofit.RestAdapter.Builder builder91 = builder29.setServer("Retrofit-Idle");
        retrofit.Profiler profiler92 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder93 = builder29.setProfiler(profiler92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor40);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor68);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNull(provider89);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test11629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11629");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList7, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput13);
        java.util.List<retrofit.client.Header> headerList15 = request14.getHeaders();
        java.lang.String str16 = request14.getMethod();
        java.lang.String str17 = request14.getMethod();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test11630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11630");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        log20.log("");
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test11631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11631");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter5 = builder4.build();
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.getMethod();
        java.lang.String str14 = request12.getMethod();
        retrofit.client.Request request15 = restAdapter5.logAndReplaceRequest(request12);
        retrofit.client.Response response17 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response19 = restAdapter5.logAndReplaceResponse("hi!", response17, 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(request15);
    }

    @Test
    public void test11632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11632");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler7 = restAdapter0.errorHandler;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor9 = restAdapter8.httpExecutor;
        java.util.concurrent.Executor executor10 = restAdapter8.httpExecutor;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = null;
        builder11.converter = converter12;
        retrofit.client.Client.Provider provider14 = null;
        builder11.clientProvider = provider14;
        java.util.concurrent.Executor executor16 = builder11.httpExecutor;
        retrofit.Profiler profiler17 = builder11.profiler;
        retrofit.RestAdapter.Log log18 = builder11.log;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = builder19.callbackExecutor;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        retrofit.RestAdapter.Builder builder32 = builder19.setLogLevel(logLevel30);
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter33.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter33.logLevel = logLevel35;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter33.setLogLevel(logLevel37);
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter33.getLogLevel();
        builder32.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder41 = builder11.setLogLevel(logLevel39);
        retrofit.RequestInterceptor requestInterceptor42 = null;
        builder11.requestInterceptor = requestInterceptor42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.httpExecutor = executor45;
        retrofit.RestAdapter.Builder builder48 = builder44.setServer("hi!");
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder44.setLog(log49);
        retrofit.Profiler profiler51 = null;
        builder50.profiler = profiler51;
        retrofit.client.Client.Provider provider53 = builder50.clientProvider;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor55 = restAdapter54.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        restAdapter54.requestInterceptor = requestInterceptor56;
        java.util.concurrent.Executor executor58 = restAdapter54.httpExecutor;
        java.util.concurrent.Executor executor59 = restAdapter54.httpExecutor;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.httpExecutor = executor61;
        retrofit.RestAdapter.Builder builder64 = builder60.setServer("hi!");
        retrofit.Profiler profiler65 = null;
        builder64.profiler = profiler65;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        builder64.requestInterceptor = requestInterceptor67;
        retrofit.RestAdapter restAdapter69 = builder64.build();
        retrofit.converter.Converter converter70 = restAdapter69.converter;
        restAdapter54.converter = converter70;
        retrofit.RestAdapter.Builder builder72 = builder50.setConverter(converter70);
        builder11.converter = converter70;
        restAdapter8.converter = converter70;
        restAdapter0.converter = converter70;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(provider53);
        org.junit.Assert.assertNull(requestInterceptor55);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNull(executor59);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(restAdapter69);
        org.junit.Assert.assertNotNull(converter70);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test11633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11633");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        restAdapter0.requestInterceptor = requestInterceptor6;
        retrofit.converter.Converter converter8 = restAdapter0.converter;
        retrofit.client.Header[] headerArray19 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList20 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList20, headerArray19);
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList20, typedOutput22);
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList20, typedOutput24);
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList20, typedOutput26);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("hi!", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList20, typedOutput28);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("Retrofit-Idle", "", (java.util.List<retrofit.client.Header>) headerList20, typedOutput30);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request32 = restAdapter0.logAndReplaceRequest(request31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNotNull(headerArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test11634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11634");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        restAdapter0.log = log12;
        retrofit.ErrorHandler errorHandler16 = null;
        restAdapter0.errorHandler = errorHandler16;
        java.util.concurrent.Executor executor18 = restAdapter0.callbackExecutor;
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.httpExecutor = executor28;
        retrofit.RestAdapter.Builder builder31 = builder27.setServer("hi!");
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder27.setLog(log32);
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter34.logLevel = logLevel36;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        restAdapter34.requestInterceptor = requestInterceptor38;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter34.logLevel = logLevel40;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log32, logLevel40);
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor44 = null;
        builder43.httpExecutor = executor44;
        retrofit.RestAdapter.Builder builder47 = builder43.setServer("hi!");
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder43.setLog(log48);
        restAdapter42.log = log48;
        restAdapter0.log = log48;
        java.util.concurrent.Executor executor52 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler53 = restAdapter0.profiler;
        retrofit.RestAdapter.Log log54 = restAdapter0.log;
        java.util.concurrent.Executor executor55 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter56 = restAdapter0.converter;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNull(executor55);
        org.junit.Assert.assertNull(converter56);
    }

    @Test
    public void test11635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11635");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter0.logLevel = logLevel5;
        retrofit.Server server7 = restAdapter0.server;
        retrofit.client.Client.Provider provider8 = null;
        restAdapter0.clientProvider = provider8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter11 = null;
        builder10.converter = converter11;
        retrofit.client.Client.Provider provider13 = null;
        builder10.clientProvider = provider13;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        builder10.requestInterceptor = requestInterceptor15;
        retrofit.Profiler profiler17 = builder10.profiler;
        retrofit.Profiler profiler18 = null;
        builder10.profiler = profiler18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = builder20.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor22 = builder20.requestInterceptor;
        java.util.concurrent.Executor executor23 = builder20.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel24 = builder20.logLevel;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.Profiler profiler30 = null;
        builder29.profiler = profiler30;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        builder29.requestInterceptor = requestInterceptor32;
        retrofit.RestAdapter restAdapter34 = builder29.build();
        retrofit.converter.Converter converter35 = null;
        builder29.converter = converter35;
        retrofit.client.Client.Provider provider37 = builder29.clientProvider;
        retrofit.RestAdapter.Builder builder38 = builder20.setClient(provider37);
        retrofit.RestAdapter.Builder builder39 = builder10.setClient(provider37);
        restAdapter0.clientProvider = provider37;
        retrofit.RequestInterceptor requestInterceptor41 = restAdapter0.requestInterceptor;
        retrofit.client.Request request42 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request43 = restAdapter0.logAndReplaceRequest(request42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(restAdapter34);
        org.junit.Assert.assertNotNull(provider37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(requestInterceptor41);
    }

    @Test
    public void test11636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11636");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        java.util.concurrent.Executor executor27 = restAdapter9.callbackExecutor;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter29 = builder28.converter;
        retrofit.RestAdapter.LogLevel logLevel30 = builder28.logLevel;
        builder28.ensureSaneDefaults();
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.httpExecutor = executor41;
        retrofit.RestAdapter.Builder builder44 = builder40.setServer("hi!");
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder46 = builder40.setLog(log45);
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter47.logLevel = logLevel49;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        restAdapter47.requestInterceptor = requestInterceptor51;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter47.logLevel = logLevel53;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log45, logLevel53);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = null;
        builder56.httpExecutor = executor57;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = builder56.setLog(log61);
        restAdapter55.log = log61;
        builder28.log = log61;
        java.util.concurrent.Executor executor65 = null;
        builder28.httpExecutor = executor65;
        retrofit.converter.Converter converter67 = null;
        builder28.converter = converter67;
        retrofit.ErrorHandler errorHandler69 = builder28.errorHandler;
        restAdapter9.errorHandler = errorHandler69;
        retrofit.RestAdapter.Builder builder71 = builder0.setErrorHandler(errorHandler69);
        retrofit.RestAdapter.Builder builder73 = builder71.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor75 = null;
        builder74.httpExecutor = executor75;
        retrofit.RestAdapter.Builder builder78 = builder74.setServer("hi!");
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder80 = builder74.setLog(log79);
        retrofit.RestAdapter restAdapter81 = builder74.build();
        java.util.concurrent.Executor executor82 = restAdapter81.httpExecutor;
        retrofit.client.Client.Provider provider83 = null;
        restAdapter81.clientProvider = provider83;
        retrofit.Profiler profiler85 = restAdapter81.profiler;
        retrofit.Server server86 = restAdapter81.server;
        retrofit.RestAdapter.LogLevel logLevel87 = restAdapter81.logLevel;
        java.util.concurrent.Executor executor88 = restAdapter81.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler89 = restAdapter81.new RestHandler();
        retrofit.RestAdapter.Log log90 = restAdapter81.log;
        retrofit.RestAdapter.Builder builder91 = builder71.setLog(log90);
        builder91.ensureSaneDefaults();
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(converter29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(errorHandler69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(restAdapter81);
        org.junit.Assert.assertNotNull(executor82);
        org.junit.Assert.assertNull(profiler85);
        org.junit.Assert.assertNotNull(server86);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor88);
        org.junit.Assert.assertNotNull(log90);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test11637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11637");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log9 = restAdapter8.log;
        java.util.concurrent.Executor executor10 = restAdapter8.callbackExecutor;
        retrofit.Profiler profiler11 = restAdapter8.profiler;
        retrofit.Profiler profiler12 = null;
        restAdapter8.profiler = profiler12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter8.log = log22;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("hi!");
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder26.setLog(log31);
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        builder26.logLevel = logLevel42;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log22, logLevel42);
        retrofit.converter.Converter converter46 = restAdapter45.converter;
        retrofit.client.Client.Provider provider47 = null;
        restAdapter45.clientProvider = provider47;
        retrofit.converter.Converter converter49 = restAdapter45.converter;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log51 = restAdapter50.log;
        java.util.concurrent.Executor executor52 = restAdapter50.callbackExecutor;
        retrofit.Profiler profiler53 = restAdapter50.profiler;
        retrofit.Profiler profiler54 = null;
        restAdapter50.profiler = profiler54;
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel65);
        restAdapter50.log = log64;
        retrofit.Server server68 = null;
        restAdapter50.server = server68;
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter50.logLevel;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor72 = null;
        builder71.httpExecutor = executor72;
        retrofit.RestAdapter.Builder builder75 = builder71.setServer("hi!");
        retrofit.Profiler profiler76 = null;
        builder75.profiler = profiler76;
        retrofit.RequestInterceptor requestInterceptor78 = null;
        builder75.requestInterceptor = requestInterceptor78;
        retrofit.RestAdapter restAdapter80 = builder75.build();
        retrofit.converter.Converter converter81 = restAdapter80.converter;
        restAdapter50.converter = converter81;
        restAdapter45.converter = converter81;
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertNull(converter49);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel70);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNotNull(converter81);
    }

    @Test
    public void test11638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11638");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = restAdapter0.clientProvider;
        retrofit.client.Client.Provider provider4 = null;
        restAdapter0.clientProvider = provider4;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        retrofit.Server server8 = restAdapter0.server;
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter0.getLogLevel();
        retrofit.client.Request request10 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request11 = restAdapter0.logAndReplaceRequest(request10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertNull(logLevel9);
    }

    @Test
    public void test11639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11639");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter1 = null;
        restAdapter0.converter = converter1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.Profiler profiler5 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        restAdapter0.logLevel = logLevel6;
        java.util.concurrent.Executor executor9 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        restAdapter13.requestInterceptor = requestInterceptor15;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        restAdapter13.log = log25;
        retrofit.ErrorHandler errorHandler29 = null;
        restAdapter13.errorHandler = errorHandler29;
        retrofit.RestAdapter.Log log31 = restAdapter13.log;
        retrofit.RestAdapter.Builder builder32 = builder11.setLog(log31);
        java.util.concurrent.Executor executor33 = null;
        builder32.httpExecutor = executor33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter36 = null;
        builder35.converter = converter36;
        retrofit.client.Client.Provider provider38 = null;
        builder35.clientProvider = provider38;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        builder35.requestInterceptor = requestInterceptor40;
        java.util.concurrent.Executor executor42 = builder35.callbackExecutor;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor44 = null;
        restAdapter43.httpExecutor = executor44;
        retrofit.Profiler profiler46 = null;
        restAdapter43.profiler = profiler46;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        restAdapter43.requestInterceptor = requestInterceptor48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter51 = builder50.converter;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor53 = restAdapter52.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        restAdapter52.requestInterceptor = requestInterceptor54;
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel65);
        restAdapter52.log = log64;
        retrofit.ErrorHandler errorHandler68 = null;
        restAdapter52.errorHandler = errorHandler68;
        retrofit.RestAdapter.Log log70 = restAdapter52.log;
        retrofit.RestAdapter.Builder builder71 = builder50.setLog(log70);
        retrofit.RequestInterceptor requestInterceptor72 = builder50.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor73 = builder50.requestInterceptor;
        retrofit.RestAdapter.Builder builder75 = builder50.setServer("hi!");
        retrofit.Server server76 = builder50.server;
        restAdapter43.server = server76;
        builder35.server = server76;
        retrofit.RestAdapter restAdapter79 = builder35.build();
        retrofit.RestAdapter.Log log80 = builder35.log;
        builder32.log = log80;
        restAdapter0.log = log80;
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(converter51);
        org.junit.Assert.assertNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(requestInterceptor72);
        org.junit.Assert.assertNull(requestInterceptor73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(server76);
        org.junit.Assert.assertNotNull(restAdapter79);
        org.junit.Assert.assertNotNull(log80);
    }

    @Test
    public void test11640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11640");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = builder26.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor28 = builder26.requestInterceptor;
        retrofit.Profiler profiler29 = builder26.profiler;
        retrofit.RestAdapter.LogLevel logLevel30 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder31 = builder25.setLogLevel(logLevel30);
        retrofit.RestAdapter.LogLevel logLevel32 = builder31.logLevel;
        retrofit.RequestInterceptor requestInterceptor33 = builder31.requestInterceptor;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.RestAdapter.Builder builder38 = builder34.setServer("hi!");
        retrofit.RestAdapter restAdapter39 = builder38.build();
        retrofit.converter.Converter converter40 = null;
        restAdapter39.converter = converter40;
        retrofit.Profiler profiler42 = null;
        restAdapter39.profiler = profiler42;
        retrofit.converter.Converter converter44 = restAdapter39.converter;
        retrofit.RestAdapter.LogLevel logLevel45 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.Builder builder46 = builder31.setLogLevel(logLevel45);
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(restAdapter39);
        org.junit.Assert.assertNull(converter44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test11641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11641");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
        retrofit.Profiler profiler6 = builder0.profiler;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.callbackExecutor;
        retrofit.RestAdapter.Log log9 = builder7.log;
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter29.logLevel = logLevel31;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter29.setLogLevel(logLevel33);
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log26, logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder7.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.httpExecutor = executor38;
        retrofit.RestAdapter.Builder builder41 = builder37.setServer("hi!");
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder37.setLog(log42);
        builder7.log = log42;
        retrofit.RestAdapter.Builder builder45 = builder0.setLog(log42);
        java.util.concurrent.Executor executor46 = builder45.httpExecutor;
        retrofit.Server server47 = builder45.server;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.httpExecutor = executor49;
        retrofit.client.Client.Provider provider51 = null;
        builder48.clientProvider = provider51;
        retrofit.RestAdapter.Builder builder54 = builder48.setServer("hi!");
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter55.logLevel = logLevel57;
        retrofit.Profiler profiler59 = restAdapter55.profiler;
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter55.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor61 = restAdapter55.requestInterceptor;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log63 = restAdapter62.log;
        java.util.concurrent.Executor executor64 = restAdapter62.callbackExecutor;
        retrofit.Profiler profiler65 = restAdapter62.profiler;
        retrofit.Profiler profiler66 = null;
        restAdapter62.profiler = profiler66;
        retrofit.Server server68 = null;
        retrofit.client.Client.Provider provider69 = null;
        java.util.concurrent.Executor executor70 = null;
        java.util.concurrent.Executor executor71 = null;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        retrofit.converter.Converter converter73 = null;
        retrofit.Profiler profiler74 = null;
        retrofit.ErrorHandler errorHandler75 = null;
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter(server68, provider69, executor70, executor71, requestInterceptor72, converter73, profiler74, errorHandler75, log76, logLevel77);
        restAdapter62.log = log76;
        restAdapter55.log = log76;
        retrofit.RestAdapter.Builder builder81 = builder48.setLog(log76);
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor83 = null;
        builder82.httpExecutor = executor83;
        retrofit.RestAdapter.Builder builder86 = builder82.setServer("hi!");
        retrofit.Profiler profiler87 = null;
        builder86.profiler = profiler87;
        retrofit.RequestInterceptor requestInterceptor89 = null;
        builder86.requestInterceptor = requestInterceptor89;
        retrofit.RestAdapter restAdapter91 = builder86.build();
        retrofit.converter.Converter converter92 = restAdapter91.converter;
        java.util.concurrent.Executor executor93 = restAdapter91.callbackExecutor;
        builder48.callbackExecutor = executor93;
        builder48.ensureSaneDefaults();
        retrofit.client.Client.Provider provider96 = builder48.clientProvider;
        retrofit.RestAdapter.Builder builder97 = builder45.setClient(provider96);
        retrofit.client.Client client98 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder99 = builder45.setClient(client98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(executor46);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler59);
        org.junit.Assert.assertNull(requestInterceptor61);
        org.junit.Assert.assertNull(log63);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(profiler65);
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(restAdapter91);
        org.junit.Assert.assertNotNull(converter92);
        org.junit.Assert.assertNotNull(executor93);
        org.junit.Assert.assertNotNull(provider96);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test11642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11642");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.Profiler profiler4 = null;
        restAdapter0.profiler = profiler4;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        restAdapter0.requestInterceptor = requestInterceptor6;
        retrofit.client.Client.Provider provider8 = restAdapter0.clientProvider;
        retrofit.ErrorHandler errorHandler9 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor10 = restAdapter0.callbackExecutor;
        retrofit.Server server11 = restAdapter0.server;
        retrofit.Profiler profiler12 = null;
        restAdapter0.profiler = profiler12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter15 = builder14.converter;
        retrofit.Profiler profiler16 = null;
        builder14.profiler = profiler16;
        retrofit.RestAdapter.Log log18 = builder14.log;
        builder14.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder14.requestInterceptor = requestInterceptor20;
        retrofit.ErrorHandler errorHandler22 = null;
        builder14.errorHandler = errorHandler22;
        retrofit.client.Client.Provider provider24 = builder14.clientProvider;
        restAdapter0.clientProvider = provider24;
        java.util.concurrent.Executor executor26 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter28 = null;
        builder27.converter = converter28;
        retrofit.client.Client.Provider provider30 = null;
        builder27.clientProvider = provider30;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        builder27.requestInterceptor = requestInterceptor32;
        builder27.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter36 = builder35.converter;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor38 = restAdapter37.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        restAdapter37.requestInterceptor = requestInterceptor39;
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel50);
        restAdapter37.log = log49;
        retrofit.ErrorHandler errorHandler53 = null;
        restAdapter37.errorHandler = errorHandler53;
        retrofit.RestAdapter.Log log55 = restAdapter37.log;
        retrofit.RestAdapter.Builder builder56 = builder35.setLog(log55);
        retrofit.RequestInterceptor requestInterceptor57 = builder35.requestInterceptor;
        java.util.concurrent.Executor executor58 = builder35.httpExecutor;
        retrofit.ErrorHandler errorHandler59 = builder35.errorHandler;
        retrofit.RestAdapter.Log log60 = builder35.log;
        retrofit.RestAdapter.Builder builder61 = builder27.setLog(log60);
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor63 = restAdapter62.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        restAdapter62.requestInterceptor = requestInterceptor64;
        retrofit.Server server66 = null;
        retrofit.client.Client.Provider provider67 = null;
        java.util.concurrent.Executor executor68 = null;
        java.util.concurrent.Executor executor69 = null;
        retrofit.RequestInterceptor requestInterceptor70 = null;
        retrofit.converter.Converter converter71 = null;
        retrofit.Profiler profiler72 = null;
        retrofit.ErrorHandler errorHandler73 = null;
        retrofit.RestAdapter.Log log74 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server66, provider67, executor68, executor69, requestInterceptor70, converter71, profiler72, errorHandler73, log74, logLevel75);
        restAdapter62.log = log74;
        retrofit.ErrorHandler errorHandler78 = null;
        restAdapter62.errorHandler = errorHandler78;
        java.util.concurrent.Executor executor80 = null;
        restAdapter62.callbackExecutor = executor80;
        retrofit.RestAdapter.Log log82 = restAdapter62.log;
        builder27.log = log82;
        restAdapter0.log = log82;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNotNull(provider24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNull(errorHandler59);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(requestInterceptor63);
        org.junit.Assert.assertNotNull(log74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log82);
    }

    @Test
    public void test11643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11643");
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        java.lang.String str17 = request16.getUrl();
        java.util.List<retrofit.client.Header> headerList18 = request16.getHeaders();
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList18, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList18, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList18, typedOutput23);
        java.lang.String str25 = request24.getMethod();
        java.util.List<retrofit.client.Header> headerList26 = request24.getHeaders();
        java.util.List<retrofit.client.Header> headerList27 = request24.getHeaders();
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList27, typedOutput28);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("", "hi!", headerList27, typedOutput30);
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Retrofit-Idle" + "'", str25, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertNotNull(headerList27);
    }

    @Test
    public void test11644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11644");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.client.Client.Provider provider23 = builder21.clientProvider;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = null;
        builder29.httpExecutor = executor30;
        retrofit.RestAdapter.Builder builder33 = builder29.setServer("hi!");
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder29.setLog(log34);
        retrofit.RestAdapter restAdapter36 = builder29.build();
        retrofit.converter.Converter converter37 = null;
        builder29.converter = converter37;
        retrofit.ErrorHandler errorHandler39 = null;
        builder29.errorHandler = errorHandler39;
        retrofit.RequestInterceptor requestInterceptor41 = builder29.requestInterceptor;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.httpExecutor = executor43;
        retrofit.RestAdapter.Builder builder46 = builder42.setServer("hi!");
        retrofit.client.Client.Provider provider47 = builder46.clientProvider;
        builder46.ensureSaneDefaults();
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        log49.log("");
        builder46.log = log49;
        retrofit.Server server53 = builder46.server;
        builder29.server = server53;
        retrofit.RestAdapter.Builder builder55 = builder24.setServer(server53);
        builder21.server = server53;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor58 = null;
        builder57.httpExecutor = executor58;
        retrofit.client.Client.Provider provider60 = null;
        builder57.clientProvider = provider60;
        retrofit.RestAdapter.Builder builder63 = builder57.setServer("hi!");
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor65 = null;
        builder64.httpExecutor = executor65;
        retrofit.RestAdapter.Builder builder68 = builder64.setServer("hi!");
        retrofit.Profiler profiler69 = null;
        builder68.profiler = profiler69;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        builder68.requestInterceptor = requestInterceptor71;
        retrofit.RestAdapter restAdapter73 = builder68.build();
        retrofit.converter.Converter converter74 = restAdapter73.converter;
        retrofit.RestAdapter.Builder builder75 = builder57.setConverter(converter74);
        retrofit.RestAdapter.LogLevel logLevel76 = builder75.logLevel;
        builder21.logLevel = logLevel76;
        retrofit.RestAdapter.LogLevel logLevel78 = builder21.logLevel;
        retrofit.client.Client client79 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder80 = builder21.setClient(client79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(provider47);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(restAdapter73);
        org.junit.Assert.assertNotNull(converter74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test11645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11645");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.RestAdapter.Log log26 = restAdapter8.log;
        retrofit.RestAdapter.Builder builder27 = builder6.setLog(log26);
        retrofit.Profiler profiler28 = builder27.profiler;
        java.util.concurrent.Executor executor29 = builder27.callbackExecutor;
        retrofit.ErrorHandler errorHandler30 = null;
        builder27.errorHandler = errorHandler30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = builder32.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor34 = builder32.requestInterceptor;
        retrofit.Profiler profiler35 = builder32.profiler;
        retrofit.RestAdapter.LogLevel logLevel36 = builder32.logLevel;
        builder27.logLevel = logLevel36;
        retrofit.RestAdapter.Builder builder38 = builder0.setLogLevel(logLevel36);
        retrofit.client.Client.Provider provider39 = builder0.clientProvider;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(profiler28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNull(profiler35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(provider39);
    }

    @Test
    public void test11646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11646");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.logLevel;
        retrofit.RequestInterceptor requestInterceptor2 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler3 = null;
        restAdapter0.profiler = profiler3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(requestInterceptor5);
    }

    @Test
    public void test11647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11647");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Profiler profiler7 = null;
        builder6.profiler = profiler7;
        retrofit.client.Client.Provider provider9 = builder6.clientProvider;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        java.util.concurrent.Executor executor14 = restAdapter10.httpExecutor;
        java.util.concurrent.Executor executor15 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.httpExecutor = executor17;
        retrofit.RestAdapter.Builder builder20 = builder16.setServer("hi!");
        retrofit.Profiler profiler21 = null;
        builder20.profiler = profiler21;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        builder20.requestInterceptor = requestInterceptor23;
        retrofit.RestAdapter restAdapter25 = builder20.build();
        retrofit.converter.Converter converter26 = restAdapter25.converter;
        restAdapter10.converter = converter26;
        retrofit.RestAdapter.Builder builder28 = builder6.setConverter(converter26);
        retrofit.RestAdapter restAdapter29 = builder6.build();
        retrofit.RestAdapter.Log log30 = restAdapter29.log;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter25);
        org.junit.Assert.assertNotNull(converter26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertNotNull(log30);
    }

    @Test
    public void test11648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11648");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor7 = builder6.requestInterceptor;
        retrofit.Server server8 = builder6.server;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder15 = builder9.setLog(log14);
        retrofit.ErrorHandler errorHandler16 = builder9.errorHandler;
        retrofit.client.Client.Provider provider17 = builder9.clientProvider;
        java.util.concurrent.Executor executor18 = builder9.httpExecutor;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.httpExecutor = executor20;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("hi!");
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder19.setLog(log24);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter27 = builder26.converter;
        retrofit.RestAdapter.LogLevel logLevel28 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder29 = builder25.setLogLevel(logLevel28);
        retrofit.ErrorHandler errorHandler30 = builder25.errorHandler;
        java.util.concurrent.Executor executor31 = builder25.callbackExecutor;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter32.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter32.requestInterceptor = requestInterceptor34;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        restAdapter32.log = log44;
        retrofit.ErrorHandler errorHandler48 = null;
        restAdapter32.errorHandler = errorHandler48;
        java.util.concurrent.Executor executor50 = restAdapter32.callbackExecutor;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter52 = builder51.converter;
        retrofit.RestAdapter.LogLevel logLevel53 = builder51.logLevel;
        builder51.ensureSaneDefaults();
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor64 = null;
        builder63.httpExecutor = executor64;
        retrofit.RestAdapter.Builder builder67 = builder63.setServer("hi!");
        retrofit.RestAdapter.Log log68 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder69 = builder63.setLog(log68);
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter70.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter70.logLevel = logLevel72;
        retrofit.RequestInterceptor requestInterceptor74 = null;
        restAdapter70.requestInterceptor = requestInterceptor74;
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter70.logLevel = logLevel76;
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log68, logLevel76);
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor80 = null;
        builder79.httpExecutor = executor80;
        retrofit.RestAdapter.Builder builder83 = builder79.setServer("hi!");
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder85 = builder79.setLog(log84);
        restAdapter78.log = log84;
        builder51.log = log84;
        java.util.concurrent.Executor executor88 = null;
        builder51.httpExecutor = executor88;
        retrofit.converter.Converter converter90 = null;
        builder51.converter = converter90;
        retrofit.ErrorHandler errorHandler92 = builder51.errorHandler;
        restAdapter32.errorHandler = errorHandler92;
        builder25.errorHandler = errorHandler92;
        builder9.errorHandler = errorHandler92;
        builder6.errorHandler = errorHandler92;
        retrofit.RestAdapter.Log log97 = builder6.log;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertNull(converter52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(logLevel71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(errorHandler92);
        org.junit.Assert.assertNull(log97);
    }

    @Test
    public void test11649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11649");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        java.util.concurrent.Executor executor5 = builder0.httpExecutor;
        retrofit.Profiler profiler6 = builder0.profiler;
        retrofit.RestAdapter.Log log7 = builder0.log;
        java.util.concurrent.Executor executor8 = builder0.httpExecutor;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.Server server11 = restAdapter9.server;
        retrofit.client.Client.Provider provider12 = null;
        restAdapter9.clientProvider = provider12;
        retrofit.client.Client.Provider provider14 = null;
        restAdapter9.clientProvider = provider14;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter16.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        restAdapter16.requestInterceptor = requestInterceptor18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        restAdapter16.log = log28;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter16.errorHandler = errorHandler32;
        retrofit.RestAdapter.Log log34 = restAdapter16.log;
        java.util.concurrent.Executor executor35 = restAdapter16.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter16.logLevel = logLevel36;
        restAdapter9.logLevel = logLevel36;
        builder0.logLevel = logLevel36;
        retrofit.ErrorHandler errorHandler40 = builder0.errorHandler;
        retrofit.Server server41 = builder0.server;
        retrofit.Server server42 = builder0.server;
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertNull(server42);
    }

    @Test
    public void test11650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11650");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.httpExecutor = executor9;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        retrofit.Profiler profiler13 = null;
        builder12.profiler = profiler13;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        builder12.requestInterceptor = requestInterceptor15;
        retrofit.RestAdapter restAdapter17 = builder12.build();
        retrofit.converter.Converter converter18 = restAdapter17.converter;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        log19.log("");
        restAdapter17.log = log19;
        retrofit.RestAdapter.Builder builder23 = builder0.setLog(log19);
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter43.logLevel = logLevel45;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter43.setLogLevel(logLevel47);
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log40, logLevel47);
        builder23.log = log40;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter52 = builder51.converter;
        retrofit.Profiler profiler53 = null;
        builder51.profiler = profiler53;
        retrofit.RestAdapter.Builder builder56 = builder51.setServer("Retrofit-Idle");
        retrofit.Profiler profiler57 = builder56.profiler;
        retrofit.client.Client.Provider provider58 = builder56.clientProvider;
        retrofit.Profiler profiler59 = null;
        builder56.profiler = profiler59;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log62 = restAdapter61.log;
        java.util.concurrent.Executor executor63 = restAdapter61.callbackExecutor;
        java.util.concurrent.Executor executor64 = restAdapter61.callbackExecutor;
        retrofit.Profiler profiler65 = restAdapter61.profiler;
        retrofit.RestAdapter.Log log66 = restAdapter61.log;
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter61.new RestHandler();
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor69 = null;
        builder68.httpExecutor = executor69;
        retrofit.RestAdapter.Builder builder72 = builder68.setServer("hi!");
        retrofit.RestAdapter restAdapter73 = builder72.build();
        retrofit.client.Header[] headerArray76 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList77 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList77, headerArray76);
        retrofit.mime.TypedOutput typedOutput79 = null;
        retrofit.client.Request request80 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList77, typedOutput79);
        java.lang.String str81 = request80.getMethod();
        java.lang.String str82 = request80.getMethod();
        retrofit.client.Request request83 = restAdapter73.logAndReplaceRequest(request80);
        retrofit.RequestInterceptor requestInterceptor84 = restAdapter73.requestInterceptor;
        restAdapter61.requestInterceptor = requestInterceptor84;
        builder56.requestInterceptor = requestInterceptor84;
        retrofit.RestAdapter.Builder builder87 = builder23.setRequestInterceptor(requestInterceptor84);
        retrofit.RequestInterceptor requestInterceptor88 = builder87.requestInterceptor;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(restAdapter17);
        org.junit.Assert.assertNotNull(converter18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(profiler57);
        org.junit.Assert.assertNull(provider58);
        org.junit.Assert.assertNull(log62);
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(profiler65);
        org.junit.Assert.assertNull(log66);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(restAdapter73);
        org.junit.Assert.assertNotNull(headerArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(request83);
        org.junit.Assert.assertNotNull(requestInterceptor84);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(requestInterceptor88);
    }

    @Test
    public void test11651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11651");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log8 = restAdapter7.log;
        java.util.concurrent.Executor executor9 = restAdapter7.callbackExecutor;
        retrofit.Profiler profiler10 = restAdapter7.profiler;
        retrofit.Profiler profiler11 = null;
        restAdapter7.profiler = profiler11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter7.log = log21;
        restAdapter0.log = log21;
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = builder27.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor29 = builder27.requestInterceptor;
        retrofit.Profiler profiler30 = builder27.profiler;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler32 = builder31.errorHandler;
        retrofit.RestAdapter.Log log33 = builder31.log;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter35 = builder34.converter;
        retrofit.RestAdapter.LogLevel logLevel36 = builder34.logLevel;
        builder34.ensureSaneDefaults();
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder46.setLog(log51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter53.logLevel = logLevel55;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        restAdapter53.requestInterceptor = requestInterceptor57;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter53.logLevel = logLevel59;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log51, logLevel59);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.httpExecutor = executor63;
        retrofit.RestAdapter.Builder builder66 = builder62.setServer("hi!");
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder68 = builder62.setLog(log67);
        restAdapter61.log = log67;
        builder34.log = log67;
        java.util.concurrent.Executor executor71 = null;
        builder34.httpExecutor = executor71;
        retrofit.converter.Converter converter73 = null;
        builder34.converter = converter73;
        retrofit.ErrorHandler errorHandler75 = builder34.errorHandler;
        retrofit.RestAdapter.Builder builder76 = builder31.setErrorHandler(errorHandler75);
        retrofit.RestAdapter.Builder builder77 = builder27.setErrorHandler(errorHandler75);
        restAdapter0.errorHandler = errorHandler75;
        java.lang.Class<?> wildcardClass79 = restAdapter0.getClass();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(log33);
        org.junit.Assert.assertNull(converter35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(errorHandler75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test11652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11652");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder24 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter26 = builder25.converter;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor28 = restAdapter27.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        restAdapter27.requestInterceptor = requestInterceptor29;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        restAdapter27.log = log39;
        retrofit.ErrorHandler errorHandler43 = null;
        restAdapter27.errorHandler = errorHandler43;
        retrofit.RestAdapter.Log log45 = restAdapter27.log;
        retrofit.RestAdapter.Builder builder46 = builder25.setLog(log45);
        retrofit.Profiler profiler47 = builder46.profiler;
        retrofit.client.Client.Provider provider48 = builder46.clientProvider;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter51 = builder50.build();
        retrofit.RestAdapter.Log log52 = builder50.log;
        retrofit.client.Client.Provider provider53 = builder50.clientProvider;
        retrofit.RestAdapter.Builder builder54 = builder0.setClient(provider53);
        java.util.concurrent.Executor executor55 = builder54.callbackExecutor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(converter26);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(profiler47);
        org.junit.Assert.assertNull(provider48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(provider53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(executor55);
    }

    @Test
    public void test11653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11653");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder0.requestInterceptor = requestInterceptor20;
        retrofit.converter.Converter converter22 = builder0.converter;
        retrofit.RestAdapter.Log log23 = builder0.log;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter25 = builder24.converter;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter26.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        restAdapter26.requestInterceptor = requestInterceptor28;
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel39);
        restAdapter26.log = log38;
        retrofit.ErrorHandler errorHandler42 = null;
        restAdapter26.errorHandler = errorHandler42;
        retrofit.RestAdapter.Log log44 = restAdapter26.log;
        retrofit.RestAdapter.Builder builder45 = builder24.setLog(log44);
        retrofit.RequestInterceptor requestInterceptor46 = builder24.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor47 = builder24.requestInterceptor;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter49 = null;
        builder48.converter = converter49;
        retrofit.client.Client.Provider provider51 = null;
        builder48.clientProvider = provider51;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        builder48.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.httpExecutor = executor56;
        retrofit.RestAdapter.Builder builder59 = builder55.setServer("hi!");
        retrofit.Profiler profiler60 = null;
        builder59.profiler = profiler60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.httpExecutor = executor63;
        retrofit.RestAdapter.Builder builder66 = builder62.setServer("hi!");
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder68 = builder62.setLog(log67);
        retrofit.RestAdapter restAdapter69 = builder62.build();
        retrofit.converter.Converter converter70 = null;
        builder62.converter = converter70;
        retrofit.ErrorHandler errorHandler72 = null;
        builder62.errorHandler = errorHandler72;
        retrofit.RequestInterceptor requestInterceptor74 = builder62.requestInterceptor;
        builder59.requestInterceptor = requestInterceptor74;
        retrofit.RestAdapter.Builder builder76 = builder48.setRequestInterceptor(requestInterceptor74);
        retrofit.RestAdapter.Builder builder77 = builder24.setRequestInterceptor(requestInterceptor74);
        retrofit.RequestInterceptor requestInterceptor78 = builder77.requestInterceptor;
        retrofit.RestAdapter.Builder builder79 = builder0.setRequestInterceptor(requestInterceptor78);
        java.lang.Class<?> wildcardClass80 = builder0.getClass();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertNull(requestInterceptor47);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(restAdapter69);
        org.junit.Assert.assertNotNull(requestInterceptor74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(requestInterceptor78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test11654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11654");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor3 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.Profiler profiler9 = null;
        builder7.profiler = profiler9;
        retrofit.ErrorHandler errorHandler11 = null;
        builder7.errorHandler = errorHandler11;
        retrofit.RestAdapter.Builder builder14 = builder7.setServer("hi!");
        java.util.concurrent.Executor executor15 = builder7.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.httpExecutor = executor18;
        retrofit.RestAdapter.Builder builder21 = builder17.setServer("hi!");
        retrofit.RestAdapter restAdapter22 = builder21.build();
        retrofit.client.Header[] headerArray25 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList26 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList26, headerArray25);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList26, typedOutput28);
        java.lang.String str30 = request29.getMethod();
        java.lang.String str31 = request29.getMethod();
        retrofit.client.Request request32 = restAdapter22.logAndReplaceRequest(request29);
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter22.requestInterceptor;
        builder7.requestInterceptor = requestInterceptor33;
        restAdapter0.requestInterceptor = requestInterceptor33;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder40 = builder36.setServer("hi!");
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder36.setLog(log41);
        retrofit.Profiler profiler43 = null;
        builder42.profiler = profiler43;
        retrofit.client.Client.Provider provider45 = builder42.clientProvider;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor47 = restAdapter46.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        restAdapter46.requestInterceptor = requestInterceptor48;
        java.util.concurrent.Executor executor50 = restAdapter46.httpExecutor;
        java.util.concurrent.Executor executor51 = restAdapter46.httpExecutor;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = null;
        builder52.httpExecutor = executor53;
        retrofit.RestAdapter.Builder builder56 = builder52.setServer("hi!");
        retrofit.Profiler profiler57 = null;
        builder56.profiler = profiler57;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        builder56.requestInterceptor = requestInterceptor59;
        retrofit.RestAdapter restAdapter61 = builder56.build();
        retrofit.converter.Converter converter62 = restAdapter61.converter;
        restAdapter46.converter = converter62;
        retrofit.RestAdapter.Builder builder64 = builder42.setConverter(converter62);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = null;
        builder65.httpExecutor = executor66;
        retrofit.RestAdapter.Builder builder69 = builder65.setServer("hi!");
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder65.setLog(log70);
        retrofit.Server server72 = null;
        retrofit.client.Client.Provider provider73 = null;
        java.util.concurrent.Executor executor74 = null;
        java.util.concurrent.Executor executor75 = null;
        retrofit.RequestInterceptor requestInterceptor76 = null;
        retrofit.converter.Converter converter77 = null;
        retrofit.Profiler profiler78 = null;
        retrofit.ErrorHandler errorHandler79 = null;
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel81 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter(server72, provider73, executor74, executor75, requestInterceptor76, converter77, profiler78, errorHandler79, log80, logLevel81);
        builder65.logLevel = logLevel81;
        retrofit.converter.Converter converter84 = builder65.converter;
        retrofit.RequestInterceptor requestInterceptor85 = null;
        builder65.requestInterceptor = requestInterceptor85;
        retrofit.converter.Converter converter87 = builder65.converter;
        retrofit.RestAdapter.Log log88 = builder65.log;
        retrofit.RestAdapter.Builder builder89 = builder64.setLog(log88);
        retrofit.RestAdapter.Log log90 = builder89.log;
        restAdapter0.log = log90;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(restAdapter22);
        org.junit.Assert.assertNotNull(headerArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNotNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertNull(requestInterceptor47);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(restAdapter61);
        org.junit.Assert.assertNotNull(converter62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter84);
        org.junit.Assert.assertNull(converter87);
        org.junit.Assert.assertNotNull(log88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(log90);
    }

    @Test
    public void test11655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11655");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter1 = null;
        restAdapter0.converter = converter1;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter4 = builder3.converter;
        retrofit.Profiler profiler5 = null;
        builder3.profiler = profiler5;
        retrofit.ErrorHandler errorHandler7 = null;
        builder3.errorHandler = errorHandler7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter10 = builder9.converter;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor12 = restAdapter11.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        restAdapter11.requestInterceptor = requestInterceptor13;
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel24);
        restAdapter11.log = log23;
        retrofit.ErrorHandler errorHandler27 = null;
        restAdapter11.errorHandler = errorHandler27;
        retrofit.RestAdapter.Log log29 = restAdapter11.log;
        retrofit.RestAdapter.Builder builder30 = builder9.setLog(log29);
        retrofit.RestAdapter.Builder builder31 = builder3.setLog(log29);
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter32.logLevel = logLevel34;
        retrofit.RestAdapter.Builder builder36 = builder31.setLogLevel(logLevel34);
        restAdapter0.logLevel = logLevel34;
        retrofit.client.Client.Provider provider38 = null;
        restAdapter0.clientProvider = provider38;
        retrofit.Profiler profiler40 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter42 = restAdapter0.converter;
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter0.getLogLevel();
        retrofit.Profiler profiler44 = null;
        restAdapter0.profiler = profiler44;
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(profiler40);
        org.junit.Assert.assertNull(converter42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test11656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11656");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.client.Client.Provider provider23 = builder21.clientProvider;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler26 = builder21.errorHandler;
        java.util.concurrent.Executor executor27 = null;
        builder21.callbackExecutor = executor27;
        retrofit.ErrorHandler errorHandler29 = builder21.errorHandler;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter31 = builder30.converter;
        retrofit.Profiler profiler32 = null;
        builder30.profiler = profiler32;
        retrofit.RestAdapter.Log log34 = builder30.log;
        builder30.ensureSaneDefaults();
        retrofit.converter.Converter converter36 = builder30.converter;
        java.util.concurrent.Executor executor37 = builder30.httpExecutor;
        retrofit.ErrorHandler errorHandler38 = builder30.errorHandler;
        builder21.errorHandler = errorHandler38;
        retrofit.Profiler profiler40 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder41 = builder21.setProfiler(profiler40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertNotNull(converter36);
        org.junit.Assert.assertNotNull(executor37);
        org.junit.Assert.assertNotNull(errorHandler38);
    }

    @Test
    public void test11657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11657");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter4.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        restAdapter4.requestInterceptor = requestInterceptor6;
        retrofit.Server server8 = null;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server8, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log16, logLevel17);
        restAdapter4.log = log16;
        retrofit.ErrorHandler errorHandler20 = null;
        restAdapter4.errorHandler = errorHandler20;
        retrofit.converter.Converter converter22 = null;
        restAdapter4.converter = converter22;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter32.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter32.requestInterceptor = requestInterceptor34;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        restAdapter32.log = log44;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean49 = logLevel48.log();
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log44, logLevel48);
        restAdapter4.logLevel = logLevel48;
        retrofit.client.Header[] headerArray56 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList57 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList57, headerArray56);
        retrofit.mime.TypedOutput typedOutput59 = null;
        retrofit.client.Request request60 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList57, typedOutput59);
        java.lang.String str61 = request60.getUrl();
        java.util.List<retrofit.client.Header> headerList62 = request60.getHeaders();
        java.lang.String str63 = request60.getMethod();
        retrofit.mime.TypedOutput typedOutput64 = request60.getBody();
        java.util.List<retrofit.client.Header> headerList65 = request60.getHeaders();
        java.lang.String str66 = request60.getUrl();
        java.lang.String str67 = request60.getUrl();
        java.util.List<retrofit.client.Header> headerList68 = request60.getHeaders();
        java.util.List<retrofit.client.Header> headerList69 = request60.getHeaders();
        retrofit.mime.TypedOutput typedOutput70 = null;
        retrofit.client.Request request71 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", headerList69, typedOutput70);
        java.lang.String str72 = request71.getMethod();
        retrofit.client.Request request73 = restAdapter4.logAndReplaceRequest(request71);
        java.util.List<retrofit.client.Header> headerList74 = request71.getHeaders();
        java.util.List<retrofit.client.Header> headerList75 = request71.getHeaders();
        retrofit.mime.TypedOutput typedOutput76 = null;
        retrofit.client.Request request77 = new retrofit.client.Request("", "", headerList75, typedOutput76);
        retrofit.mime.TypedOutput typedOutput78 = null;
        retrofit.client.Request request79 = new retrofit.client.Request("", "", headerList75, typedOutput78);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(headerArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(headerList62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNull(typedOutput64);
        org.junit.Assert.assertNotNull(headerList65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(headerList68);
        org.junit.Assert.assertNotNull(headerList69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Retrofit-Idle" + "'", str72, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request73);
        org.junit.Assert.assertNotNull(headerList74);
        org.junit.Assert.assertNotNull(headerList75);
    }

    @Test
    public void test11658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11658");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler5 = null;
        restAdapter0.errorHandler = errorHandler5;
        java.util.concurrent.Executor executor7 = restAdapter0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter10 = builder9.converter;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor12 = restAdapter11.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        restAdapter11.requestInterceptor = requestInterceptor13;
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel24);
        restAdapter11.log = log23;
        retrofit.ErrorHandler errorHandler27 = null;
        restAdapter11.errorHandler = errorHandler27;
        retrofit.RestAdapter.Log log29 = restAdapter11.log;
        retrofit.RestAdapter.Builder builder30 = builder9.setLog(log29);
        retrofit.Profiler profiler31 = builder30.profiler;
        retrofit.Profiler profiler32 = builder30.profiler;
        java.util.concurrent.Executor executor33 = builder30.callbackExecutor;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.RestAdapter.Builder builder38 = builder34.setServer("hi!");
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder40 = builder34.setLog(log39);
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel50);
        builder34.logLevel = logLevel50;
        retrofit.converter.Converter converter53 = builder34.converter;
        retrofit.ErrorHandler errorHandler54 = builder34.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel55 = builder34.logLevel;
        retrofit.Server server56 = builder34.server;
        retrofit.RestAdapter.Builder builder57 = builder30.setServer(server56);
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.httpExecutor = executor59;
        retrofit.RestAdapter.Builder builder62 = builder58.setServer("hi!");
        retrofit.Profiler profiler63 = null;
        builder62.profiler = profiler63;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        builder62.requestInterceptor = requestInterceptor65;
        retrofit.RestAdapter restAdapter67 = builder62.build();
        retrofit.converter.Converter converter68 = null;
        builder62.converter = converter68;
        retrofit.client.Client.Provider provider70 = builder62.clientProvider;
        builder57.clientProvider = provider70;
        restAdapter0.clientProvider = provider70;
        retrofit.Profiler profiler73 = restAdapter0.profiler;
        java.util.concurrent.Executor executor74 = restAdapter0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor75 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(profiler32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter53);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(restAdapter67);
        org.junit.Assert.assertNotNull(provider70);
        org.junit.Assert.assertNull(profiler73);
        org.junit.Assert.assertNull(executor74);
        org.junit.Assert.assertNull(requestInterceptor75);
    }

    @Test
    public void test11659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11659");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.converter.Converter converter8 = null;
        builder0.converter = converter8;
        retrofit.RestAdapter restAdapter10 = builder0.build();
        java.util.concurrent.Executor executor11 = null;
        builder0.callbackExecutor = executor11;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(restAdapter10);
    }

    @Test
    public void test11660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11660");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor4 = null;
        builder3.httpExecutor = executor4;
        retrofit.RestAdapter.Builder builder7 = builder3.setServer("hi!");
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder3.setLog(log8);
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log18, logLevel19);
        builder3.logLevel = logLevel19;
        retrofit.converter.Converter converter22 = builder3.converter;
        retrofit.ErrorHandler errorHandler23 = builder3.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel24 = builder3.logLevel;
        retrofit.Server server25 = builder3.server;
        builder0.server = server25;
        retrofit.client.Client.Provider provider27 = builder0.clientProvider;
        retrofit.RestAdapter.Log log28 = builder0.log;
        retrofit.Profiler profiler29 = builder0.profiler;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter31 = builder30.converter;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter32.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter32.requestInterceptor = requestInterceptor34;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        restAdapter32.log = log44;
        retrofit.ErrorHandler errorHandler48 = null;
        restAdapter32.errorHandler = errorHandler48;
        retrofit.RestAdapter.Log log50 = restAdapter32.log;
        retrofit.RestAdapter.Builder builder51 = builder30.setLog(log50);
        retrofit.Profiler profiler52 = builder51.profiler;
        retrofit.Profiler profiler53 = builder51.profiler;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter55 = builder54.converter;
        retrofit.Profiler profiler56 = null;
        builder54.profiler = profiler56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.httpExecutor = executor59;
        retrofit.client.Client.Provider provider61 = null;
        builder58.clientProvider = provider61;
        retrofit.RestAdapter.Builder builder64 = builder58.setServer("hi!");
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = null;
        builder65.httpExecutor = executor66;
        retrofit.RestAdapter.Builder builder69 = builder65.setServer("hi!");
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder65.setLog(log70);
        retrofit.RestAdapter restAdapter72 = builder65.build();
        java.util.concurrent.Executor executor73 = restAdapter72.httpExecutor;
        builder64.callbackExecutor = executor73;
        builder54.callbackExecutor = executor73;
        builder51.callbackExecutor = executor73;
        builder0.callbackExecutor = executor73;
        retrofit.RequestInterceptor requestInterceptor78 = builder0.requestInterceptor;
        retrofit.Profiler profiler79 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder80 = builder0.setProfiler(profiler79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(profiler52);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNull(converter55);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(restAdapter72);
        org.junit.Assert.assertNotNull(executor73);
        org.junit.Assert.assertNull(requestInterceptor78);
    }

    @Test
    public void test11661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11661");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter7 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = null;
        builder8.converter = converter9;
        retrofit.client.Client.Provider provider11 = null;
        builder8.clientProvider = provider11;
        java.util.concurrent.Executor executor13 = builder8.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        builder8.requestInterceptor = requestInterceptor14;
        retrofit.converter.Converter converter16 = null;
        builder8.converter = converter16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter19 = null;
        restAdapter18.converter = converter19;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        restAdapter18.requestInterceptor = requestInterceptor21;
        retrofit.Profiler profiler23 = restAdapter18.profiler;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean25 = logLevel24.log();
        restAdapter18.logLevel = logLevel24;
        java.util.concurrent.Executor executor27 = restAdapter18.httpExecutor;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = builder28.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor30 = builder28.requestInterceptor;
        retrofit.ErrorHandler errorHandler31 = null;
        builder28.errorHandler = errorHandler31;
        retrofit.converter.Converter converter33 = null;
        builder28.converter = converter33;
        retrofit.ErrorHandler errorHandler35 = null;
        builder28.errorHandler = errorHandler35;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor38 = restAdapter37.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        restAdapter37.requestInterceptor = requestInterceptor39;
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel50);
        restAdapter37.log = log49;
        retrofit.ErrorHandler errorHandler53 = null;
        restAdapter37.errorHandler = errorHandler53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter56 = builder55.converter;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor58 = restAdapter57.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        restAdapter57.requestInterceptor = requestInterceptor59;
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel70);
        restAdapter57.log = log69;
        retrofit.ErrorHandler errorHandler73 = null;
        restAdapter57.errorHandler = errorHandler73;
        retrofit.RestAdapter.Log log75 = restAdapter57.log;
        retrofit.RestAdapter.Builder builder76 = builder55.setLog(log75);
        retrofit.RequestInterceptor requestInterceptor77 = builder55.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor78 = builder55.requestInterceptor;
        retrofit.RestAdapter.Builder builder80 = builder55.setServer("hi!");
        retrofit.Server server81 = builder55.server;
        restAdapter37.server = server81;
        retrofit.RestAdapter.Builder builder83 = builder28.setServer(server81);
        restAdapter18.server = server81;
        retrofit.RestAdapter.Builder builder85 = builder8.setServer(server81);
        retrofit.Server server86 = builder85.server;
        retrofit.client.Client.Provider provider87 = builder85.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel88 = builder85.logLevel;
        restAdapter0.logLevel = logLevel88;
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter56);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(requestInterceptor77);
        org.junit.Assert.assertNull(requestInterceptor78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(server81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(server86);
        org.junit.Assert.assertNull(provider87);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test11662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11662");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.ErrorHandler errorHandler20 = builder0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel21 = builder0.logLevel;
        retrofit.Server server22 = builder0.server;
        retrofit.client.Client.Provider provider23 = builder0.clientProvider;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor25 = restAdapter24.requestInterceptor;
        java.util.concurrent.Executor executor26 = restAdapter24.callbackExecutor;
        retrofit.converter.Converter converter27 = null;
        restAdapter24.converter = converter27;
        retrofit.RestAdapter.Log log29 = restAdapter24.log;
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.Log log32 = restAdapter24.log;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter34 = builder33.converter;
        retrofit.RestAdapter.LogLevel logLevel35 = builder33.logLevel;
        builder33.ensureSaneDefaults();
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.httpExecutor = executor46;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("hi!");
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder45.setLog(log50);
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter52.logLevel = logLevel54;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        restAdapter52.requestInterceptor = requestInterceptor56;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter52.logLevel = logLevel58;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log50, logLevel58);
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.httpExecutor = executor62;
        retrofit.RestAdapter.Builder builder65 = builder61.setServer("hi!");
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder61.setLog(log66);
        restAdapter60.log = log66;
        builder33.log = log66;
        java.util.concurrent.Executor executor70 = null;
        builder33.httpExecutor = executor70;
        retrofit.converter.Converter converter72 = null;
        builder33.converter = converter72;
        retrofit.ErrorHandler errorHandler74 = builder33.errorHandler;
        restAdapter24.errorHandler = errorHandler74;
        retrofit.RestAdapter.Builder builder76 = builder0.setErrorHandler(errorHandler74);
        retrofit.Profiler profiler77 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder78 = builder0.setProfiler(profiler77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNull(requestInterceptor25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(errorHandler74);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test11663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11663");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder24 = builder0.setServer("Retrofit-Idle");
        retrofit.RequestInterceptor requestInterceptor25 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor26 = builder0.requestInterceptor;
        retrofit.RestAdapter.Log log27 = builder0.log;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = builder28.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor30 = builder28.requestInterceptor;
        retrofit.ErrorHandler errorHandler31 = null;
        builder28.errorHandler = errorHandler31;
        retrofit.Profiler profiler33 = builder28.profiler;
        java.util.concurrent.Executor executor34 = builder28.httpExecutor;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = builder35.callbackExecutor;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel46);
        retrofit.RestAdapter.Builder builder48 = builder35.setLogLevel(logLevel46);
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter49.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter49.logLevel = logLevel51;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter49.setLogLevel(logLevel53);
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter49.getLogLevel();
        builder48.logLevel = logLevel55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter58 = builder57.converter;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor60 = restAdapter59.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        restAdapter59.requestInterceptor = requestInterceptor61;
        retrofit.Server server63 = null;
        retrofit.client.Client.Provider provider64 = null;
        java.util.concurrent.Executor executor65 = null;
        java.util.concurrent.Executor executor66 = null;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        retrofit.converter.Converter converter68 = null;
        retrofit.Profiler profiler69 = null;
        retrofit.ErrorHandler errorHandler70 = null;
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server63, provider64, executor65, executor66, requestInterceptor67, converter68, profiler69, errorHandler70, log71, logLevel72);
        restAdapter59.log = log71;
        retrofit.ErrorHandler errorHandler75 = null;
        restAdapter59.errorHandler = errorHandler75;
        retrofit.RestAdapter.Log log77 = restAdapter59.log;
        retrofit.RestAdapter.Builder builder78 = builder57.setLog(log77);
        builder48.log = log77;
        retrofit.RestAdapter.Builder builder80 = builder28.setLog(log77);
        builder28.ensureSaneDefaults();
        java.util.concurrent.Executor executor82 = builder28.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor83 = builder28.requestInterceptor;
        retrofit.RestAdapter.Builder builder84 = builder0.setRequestInterceptor(requestInterceptor83);
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter58);
        org.junit.Assert.assertNull(requestInterceptor60);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(executor82);
        org.junit.Assert.assertNotNull(requestInterceptor83);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test11664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11664");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel4 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.RestAdapter.LogLevel logLevel7 = builder5.logLevel;
        builder5.ensureSaneDefaults();
        retrofit.client.Client.Provider provider9 = null;
        builder5.clientProvider = provider9;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.httpExecutor = executor20;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("hi!");
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder19.setLog(log24);
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter26.logLevel = logLevel28;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter26.requestInterceptor = requestInterceptor30;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter26.logLevel = logLevel32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log24, logLevel32);
        builder5.logLevel = logLevel32;
        retrofit.RestAdapter.LogLevel logLevel36 = builder5.logLevel;
        builder0.logLevel = logLevel36;
        retrofit.client.Client client38 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder39 = builder0.setClient(client38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test11665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11665");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log22, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLog(log22);
        java.util.concurrent.Executor executor30 = builder29.httpExecutor;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.httpExecutor = executor32;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("hi!");
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder31.setLog(log36);
        retrofit.RestAdapter restAdapter38 = builder31.build();
        retrofit.RequestInterceptor requestInterceptor39 = restAdapter38.requestInterceptor;
        retrofit.RestAdapter.Builder builder40 = builder29.setRequestInterceptor(requestInterceptor39);
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNotNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test11666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11666");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList10 = request8.getHeaders();
        java.lang.String str11 = request8.getMethod();
        retrofit.mime.TypedOutput typedOutput12 = request8.getBody();
        java.util.List<retrofit.client.Header> headerList13 = request8.getHeaders();
        java.lang.String str14 = request8.getUrl();
        java.lang.String str15 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList16 = request8.getHeaders();
        java.util.List<retrofit.client.Header> headerList17 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput18 = null;
        retrofit.client.Request request19 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", headerList17, typedOutput18);
        java.lang.String str20 = request19.getUrl();
        retrofit.mime.TypedOutput typedOutput21 = request19.getBody();
        retrofit.mime.TypedOutput typedOutput22 = request19.getBody();
        retrofit.mime.TypedOutput typedOutput23 = request19.getBody();
        java.lang.String str24 = request19.getMethod();
        java.lang.String str25 = request19.getMethod();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Retrofit-Idle" + "'", str20, "Retrofit-Idle");
        org.junit.Assert.assertNull(typedOutput21);
        org.junit.Assert.assertNull(typedOutput22);
        org.junit.Assert.assertNull(typedOutput23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Retrofit-Idle" + "'", str24, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Retrofit-Idle" + "'", str25, "Retrofit-Idle");
    }

    @Test
    public void test11667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11667");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = null;
        restAdapter0.logLevel = logLevel4;
        retrofit.ErrorHandler errorHandler6 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.Profiler profiler12 = null;
        builder11.profiler = profiler12;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        builder11.requestInterceptor = requestInterceptor14;
        retrofit.RestAdapter restAdapter16 = builder11.build();
        retrofit.converter.Converter converter17 = restAdapter16.converter;
        restAdapter0.converter = converter17;
        retrofit.ErrorHandler errorHandler19 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter21 = builder20.converter;
        retrofit.Profiler profiler22 = null;
        builder20.profiler = profiler22;
        retrofit.RestAdapter.Log log24 = builder20.log;
        builder20.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor26 = null;
        builder20.requestInterceptor = requestInterceptor26;
        retrofit.ErrorHandler errorHandler28 = null;
        builder20.errorHandler = errorHandler28;
        retrofit.converter.Converter converter30 = builder20.converter;
        restAdapter0.converter = converter30;
        retrofit.Profiler profiler32 = restAdapter0.profiler;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(converter17);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertNotNull(converter30);
        org.junit.Assert.assertNull(profiler32);
    }

    @Test
    public void test11668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11668");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder0.logLevel = logLevel5;
        retrofit.RestAdapter.Log log7 = builder0.log;
        retrofit.ErrorHandler errorHandler8 = null;
        builder0.errorHandler = errorHandler8;
        java.util.concurrent.Executor executor10 = builder0.httpExecutor;
        retrofit.RestAdapter restAdapter11 = builder0.build();
        retrofit.RestAdapter.Builder builder13 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = builder14.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor16 = builder14.requestInterceptor;
        java.util.concurrent.Executor executor17 = builder14.httpExecutor;
        retrofit.RestAdapter.Builder builder19 = builder14.setServer("hi!");
        retrofit.RestAdapter.Log log20 = builder14.log;
        retrofit.RestAdapter restAdapter21 = builder14.build();
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter22.logLevel = logLevel24;
        retrofit.Profiler profiler26 = restAdapter22.profiler;
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter22.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor28 = null;
        restAdapter22.requestInterceptor = requestInterceptor28;
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter32 = builder31.converter;
        retrofit.RestAdapter.LogLevel logLevel33 = builder31.logLevel;
        builder31.ensureSaneDefaults();
        retrofit.client.Client.Provider provider35 = null;
        builder31.clientProvider = provider35;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.httpExecutor = executor46;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("hi!");
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder45.setLog(log50);
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter52.logLevel = logLevel54;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        restAdapter52.requestInterceptor = requestInterceptor56;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter52.logLevel = logLevel58;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log50, logLevel58);
        builder31.logLevel = logLevel58;
        retrofit.client.Client.Provider provider62 = null;
        builder31.clientProvider = provider62;
        retrofit.converter.Converter converter64 = builder31.converter;
        restAdapter22.converter = converter64;
        restAdapter21.converter = converter64;
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter21.logLevel;
        retrofit.RestAdapter.Builder builder68 = builder13.setLogLevel(logLevel67);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNotNull(restAdapter11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler26);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(converter64);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test11669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11669");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter25 = null;
        builder24.converter = converter25;
        retrofit.client.Client.Provider provider27 = null;
        builder24.clientProvider = provider27;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        builder24.requestInterceptor = requestInterceptor29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.httpExecutor = executor32;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("hi!");
        retrofit.Profiler profiler36 = null;
        builder35.profiler = profiler36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.httpExecutor = executor39;
        retrofit.RestAdapter.Builder builder42 = builder38.setServer("hi!");
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder38.setLog(log43);
        retrofit.RestAdapter restAdapter45 = builder38.build();
        retrofit.converter.Converter converter46 = null;
        builder38.converter = converter46;
        retrofit.ErrorHandler errorHandler48 = null;
        builder38.errorHandler = errorHandler48;
        retrofit.RequestInterceptor requestInterceptor50 = builder38.requestInterceptor;
        builder35.requestInterceptor = requestInterceptor50;
        retrofit.RestAdapter.Builder builder52 = builder24.setRequestInterceptor(requestInterceptor50);
        retrofit.RestAdapter.Builder builder53 = builder0.setRequestInterceptor(requestInterceptor50);
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor55 = restAdapter54.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter54.logLevel;
        retrofit.client.Client.Provider provider57 = restAdapter54.clientProvider;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter59 = builder58.converter;
        retrofit.Profiler profiler60 = null;
        builder58.profiler = profiler60;
        retrofit.RestAdapter.Log log62 = builder58.log;
        builder58.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor64 = null;
        builder58.requestInterceptor = requestInterceptor64;
        retrofit.ErrorHandler errorHandler66 = null;
        builder58.errorHandler = errorHandler66;
        retrofit.converter.Converter converter68 = builder58.converter;
        retrofit.Server server69 = null;
        builder58.server = server69;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter72 = null;
        builder71.converter = converter72;
        retrofit.client.Client.Provider provider74 = null;
        builder71.clientProvider = provider74;
        retrofit.RequestInterceptor requestInterceptor76 = null;
        builder71.requestInterceptor = requestInterceptor76;
        retrofit.Profiler profiler78 = builder71.profiler;
        retrofit.converter.Converter converter79 = builder71.converter;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor81 = null;
        builder80.httpExecutor = executor81;
        retrofit.RestAdapter.Builder builder84 = builder80.setServer("hi!");
        retrofit.client.Client.Provider provider85 = builder84.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean87 = logLevel86.log();
        builder84.logLevel = logLevel86;
        retrofit.RestAdapter restAdapter89 = builder84.build();
        retrofit.ErrorHandler errorHandler90 = builder84.errorHandler;
        retrofit.RestAdapter.Builder builder91 = builder71.setErrorHandler(errorHandler90);
        retrofit.RestAdapter.Builder builder92 = builder58.setErrorHandler(errorHandler90);
        restAdapter54.errorHandler = errorHandler90;
        builder0.errorHandler = errorHandler90;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(restAdapter45);
        org.junit.Assert.assertNotNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(executor55);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertNull(provider57);
        org.junit.Assert.assertNull(converter59);
        org.junit.Assert.assertNull(log62);
        org.junit.Assert.assertNotNull(converter68);
        org.junit.Assert.assertNull(profiler78);
        org.junit.Assert.assertNull(converter79);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(provider85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(restAdapter89);
        org.junit.Assert.assertNotNull(errorHandler90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test11670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11670");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.converter.Converter converter5 = null;
        builder0.converter = converter5;
        retrofit.ErrorHandler errorHandler7 = null;
        builder0.errorHandler = errorHandler7;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter28 = builder27.converter;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor30 = restAdapter29.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        restAdapter29.requestInterceptor = requestInterceptor31;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        restAdapter29.log = log41;
        retrofit.ErrorHandler errorHandler45 = null;
        restAdapter29.errorHandler = errorHandler45;
        retrofit.RestAdapter.Log log47 = restAdapter29.log;
        retrofit.RestAdapter.Builder builder48 = builder27.setLog(log47);
        retrofit.RequestInterceptor requestInterceptor49 = builder27.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor50 = builder27.requestInterceptor;
        retrofit.RestAdapter.Builder builder52 = builder27.setServer("hi!");
        retrofit.Server server53 = builder27.server;
        restAdapter9.server = server53;
        retrofit.RestAdapter.Builder builder55 = builder0.setServer(server53);
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter56.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter56.logLevel = logLevel58;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter56.setLogLevel(logLevel60);
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter56.getLogLevel();
        boolean boolean63 = logLevel62.log();
        builder55.logLevel = logLevel62;
        retrofit.RestAdapter.LogLevel logLevel65 = builder55.logLevel;
        retrofit.RestAdapter.Builder builder67 = builder55.setServer("Retrofit-Idle");
        retrofit.Server server68 = null;
        builder55.server = server68;
        retrofit.Server server70 = builder55.server;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(requestInterceptor49);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(server70);
    }

    @Test
    public void test11671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11671");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.ErrorHandler errorHandler20 = builder0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel21 = builder0.logLevel;
        retrofit.Server server22 = builder0.server;
        retrofit.client.Client.Provider provider23 = builder0.clientProvider;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor25 = restAdapter24.requestInterceptor;
        java.util.concurrent.Executor executor26 = restAdapter24.callbackExecutor;
        retrofit.converter.Converter converter27 = null;
        restAdapter24.converter = converter27;
        retrofit.RestAdapter.Log log29 = restAdapter24.log;
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.Log log32 = restAdapter24.log;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter34 = builder33.converter;
        retrofit.RestAdapter.LogLevel logLevel35 = builder33.logLevel;
        builder33.ensureSaneDefaults();
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.httpExecutor = executor46;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("hi!");
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder45.setLog(log50);
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter52.logLevel = logLevel54;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        restAdapter52.requestInterceptor = requestInterceptor56;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter52.logLevel = logLevel58;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log50, logLevel58);
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.httpExecutor = executor62;
        retrofit.RestAdapter.Builder builder65 = builder61.setServer("hi!");
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder61.setLog(log66);
        restAdapter60.log = log66;
        builder33.log = log66;
        java.util.concurrent.Executor executor70 = null;
        builder33.httpExecutor = executor70;
        retrofit.converter.Converter converter72 = null;
        builder33.converter = converter72;
        retrofit.ErrorHandler errorHandler74 = builder33.errorHandler;
        restAdapter24.errorHandler = errorHandler74;
        retrofit.RestAdapter.Builder builder76 = builder0.setErrorHandler(errorHandler74);
        retrofit.RestAdapter.LogLevel logLevel77 = builder76.logLevel;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNull(requestInterceptor25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(errorHandler74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test11672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11672");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.Server server2 = restAdapter0.server;
        retrofit.client.Client.Provider provider3 = null;
        restAdapter0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.ErrorHandler errorHandler7 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor8 = restAdapter0.httpExecutor;
        retrofit.client.Client.Provider provider9 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(provider9);
    }

    @Test
    public void test11673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11673");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.converter.Converter converter8 = null;
        builder0.converter = converter8;
        retrofit.ErrorHandler errorHandler10 = null;
        builder0.errorHandler = errorHandler10;
        retrofit.RequestInterceptor requestInterceptor12 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.client.Client.Provider provider18 = builder17.clientProvider;
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        log20.log("");
        builder17.log = log20;
        retrofit.Server server24 = builder17.server;
        builder0.server = server24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("hi!");
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder26.setLog(log31);
        retrofit.RestAdapter restAdapter33 = builder26.build();
        java.util.concurrent.Executor executor34 = restAdapter33.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter33.new RestHandler();
        retrofit.converter.Converter converter36 = restAdapter33.converter;
        builder0.converter = converter36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.httpExecutor = executor39;
        retrofit.client.Client.Provider provider41 = null;
        builder38.clientProvider = provider41;
        retrofit.RestAdapter.Builder builder44 = builder38.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean46 = logLevel45.log();
        retrofit.RestAdapter.Builder builder47 = builder44.setLogLevel(logLevel45);
        builder0.logLevel = logLevel45;
        retrofit.RestAdapter restAdapter49 = builder0.build();
        retrofit.ErrorHandler errorHandler50 = builder0.errorHandler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(server24);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(restAdapter33);
        org.junit.Assert.assertNotNull(executor34);
        org.junit.Assert.assertNotNull(converter36);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(restAdapter49);
        org.junit.Assert.assertNotNull(errorHandler50);
    }

    @Test
    public void test11674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11674");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel3 = builder0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel4 = builder0.logLevel;
        retrofit.Profiler profiler5 = null;
        builder0.profiler = profiler5;
        builder0.ensureSaneDefaults();
        retrofit.Server server8 = builder0.server;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = builder9.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor11 = builder9.requestInterceptor;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter13 = builder12.converter;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter14.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        restAdapter14.requestInterceptor = requestInterceptor16;
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        restAdapter14.log = log26;
        retrofit.ErrorHandler errorHandler30 = null;
        restAdapter14.errorHandler = errorHandler30;
        retrofit.RestAdapter.Log log32 = restAdapter14.log;
        retrofit.RestAdapter.Builder builder33 = builder12.setLog(log32);
        retrofit.Profiler profiler34 = builder33.profiler;
        retrofit.client.Client.Provider provider35 = builder33.clientProvider;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter39 = null;
        builder38.converter = converter39;
        retrofit.client.Client.Provider provider41 = null;
        builder38.clientProvider = provider41;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        builder38.requestInterceptor = requestInterceptor43;
        retrofit.Profiler profiler45 = builder38.profiler;
        retrofit.Profiler profiler46 = null;
        builder38.profiler = profiler46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = builder48.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor50 = builder48.requestInterceptor;
        java.util.concurrent.Executor executor51 = builder48.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel52 = builder48.logLevel;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor54 = null;
        builder53.httpExecutor = executor54;
        retrofit.RestAdapter.Builder builder57 = builder53.setServer("hi!");
        retrofit.Profiler profiler58 = null;
        builder57.profiler = profiler58;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        builder57.requestInterceptor = requestInterceptor60;
        retrofit.RestAdapter restAdapter62 = builder57.build();
        retrofit.converter.Converter converter63 = null;
        builder57.converter = converter63;
        retrofit.client.Client.Provider provider65 = builder57.clientProvider;
        retrofit.RestAdapter.Builder builder66 = builder48.setClient(provider65);
        retrofit.RestAdapter.Builder builder67 = builder38.setClient(provider65);
        builder37.clientProvider = provider65;
        builder9.clientProvider = provider65;
        retrofit.RestAdapter.Builder builder70 = builder0.setClient(provider65);
        retrofit.RestAdapter.Builder builder72 = builder70.setServer("hi!");
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor74 = null;
        builder73.httpExecutor = executor74;
        retrofit.client.Client.Provider provider76 = null;
        builder73.clientProvider = provider76;
        retrofit.RestAdapter.Builder builder79 = builder73.setServer("hi!");
        retrofit.RestAdapter.Builder builder81 = builder73.setServer("hi!");
        retrofit.Profiler profiler82 = builder81.profiler;
        retrofit.Server server83 = builder81.server;
        builder72.server = server83;
        builder72.ensureSaneDefaults();
        retrofit.converter.Converter converter86 = builder72.converter;
        retrofit.RestAdapter restAdapter87 = builder72.build();
        retrofit.RequestInterceptor requestInterceptor88 = restAdapter87.requestInterceptor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(profiler34);
        org.junit.Assert.assertNull(provider35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(profiler45);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(restAdapter62);
        org.junit.Assert.assertNotNull(provider65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(profiler82);
        org.junit.Assert.assertNotNull(server83);
        org.junit.Assert.assertNotNull(converter86);
        org.junit.Assert.assertNotNull(restAdapter87);
        org.junit.Assert.assertNotNull(requestInterceptor88);
    }

    @Test
    public void test11675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11675");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.RestAdapter restAdapter12 = builder11.build();
        builder11.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor15 = restAdapter14.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter14.logLevel;
        retrofit.ErrorHandler errorHandler17 = restAdapter14.errorHandler;
        retrofit.Profiler profiler18 = restAdapter14.profiler;
        retrofit.ErrorHandler errorHandler19 = null;
        restAdapter14.errorHandler = errorHandler19;
        java.util.concurrent.Executor executor21 = restAdapter14.callbackExecutor;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = builder22.callbackExecutor;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel33);
        retrofit.RestAdapter.Builder builder35 = builder22.setLogLevel(logLevel33);
        builder35.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter38 = null;
        builder37.converter = converter38;
        retrofit.client.Client.Provider provider40 = null;
        builder37.clientProvider = provider40;
        java.util.concurrent.Executor executor42 = builder37.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        builder37.requestInterceptor = requestInterceptor43;
        retrofit.converter.Converter converter45 = null;
        builder37.converter = converter45;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor48 = restAdapter47.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        restAdapter47.requestInterceptor = requestInterceptor49;
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter47.getLogLevel();
        retrofit.Server server52 = restAdapter47.server;
        java.util.concurrent.Executor executor53 = restAdapter47.callbackExecutor;
        retrofit.ErrorHandler errorHandler54 = null;
        restAdapter47.errorHandler = errorHandler54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter57 = builder56.converter;
        retrofit.RestAdapter.LogLevel logLevel58 = builder56.logLevel;
        builder56.ensureSaneDefaults();
        retrofit.client.Client.Provider provider60 = null;
        builder56.clientProvider = provider60;
        retrofit.Server server62 = null;
        retrofit.client.Client.Provider provider63 = null;
        java.util.concurrent.Executor executor64 = null;
        java.util.concurrent.Executor executor65 = null;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        retrofit.converter.Converter converter67 = null;
        retrofit.Profiler profiler68 = null;
        retrofit.ErrorHandler errorHandler69 = null;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor71 = null;
        builder70.httpExecutor = executor71;
        retrofit.RestAdapter.Builder builder74 = builder70.setServer("hi!");
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder76 = builder70.setLog(log75);
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel78 = restAdapter77.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter77.logLevel = logLevel79;
        retrofit.RequestInterceptor requestInterceptor81 = null;
        restAdapter77.requestInterceptor = requestInterceptor81;
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter77.logLevel = logLevel83;
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter(server62, provider63, executor64, executor65, requestInterceptor66, converter67, profiler68, errorHandler69, log75, logLevel83);
        builder56.logLevel = logLevel83;
        retrofit.client.Client.Provider provider87 = null;
        builder56.clientProvider = provider87;
        retrofit.converter.Converter converter89 = builder56.converter;
        restAdapter47.converter = converter89;
        builder37.converter = converter89;
        retrofit.RestAdapter.Builder builder92 = builder35.setConverter(converter89);
        restAdapter14.converter = converter89;
        retrofit.RestAdapter.Builder builder94 = builder11.setConverter(converter89);
        restAdapter0.converter = converter89;
        retrofit.client.Response response97 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response99 = restAdapter0.logAndReplaceResponse("", response97, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(requestInterceptor48);
        org.junit.Assert.assertNull(logLevel51);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertNull(converter57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(logLevel78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(converter89);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test11676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11676");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        builder4.logLevel = logLevel6;
        retrofit.RestAdapter restAdapter9 = builder4.build();
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.converter.Converter converter13 = null;
        restAdapter10.converter = converter13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter16 = builder15.converter;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter17.requestInterceptor = requestInterceptor19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        restAdapter17.log = log29;
        retrofit.ErrorHandler errorHandler33 = null;
        restAdapter17.errorHandler = errorHandler33;
        retrofit.RestAdapter.Log log35 = restAdapter17.log;
        retrofit.RestAdapter.Builder builder36 = builder15.setLog(log35);
        restAdapter10.log = log35;
        retrofit.RestAdapter.Builder builder38 = builder4.setLog(log35);
        retrofit.RequestInterceptor requestInterceptor39 = null;
        builder38.requestInterceptor = requestInterceptor39;
        retrofit.Profiler profiler41 = null;
        builder38.profiler = profiler41;
        retrofit.converter.Converter converter43 = builder38.converter;
        java.util.concurrent.Executor executor44 = builder38.callbackExecutor;
        java.util.concurrent.Executor executor45 = builder38.callbackExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(converter43);
        org.junit.Assert.assertNotNull(executor44);
        org.junit.Assert.assertNotNull(executor45);
    }

    @Test
    public void test11677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11677");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList11, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList11, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("Retrofit-Idle", "hi!", (java.util.List<retrofit.client.Header>) headerList11, typedOutput21);
        java.lang.String str23 = request22.getUrl();
        java.lang.String str24 = request22.getMethod();
        java.lang.String str25 = request22.getUrl();
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Retrofit-Idle" + "'", str24, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
    }

    @Test
    public void test11678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11678");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel3 = restAdapter0.getLogLevel();
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(logLevel3);
        org.junit.Assert.assertNull(profiler4);
    }

    @Test
    public void test11679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11679");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.client.Client.Provider provider3 = restAdapter0.clientProvider;
        java.util.concurrent.Executor executor4 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.logLevel;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter6.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter6.logLevel = logLevel8;
        retrofit.converter.Converter converter10 = restAdapter6.converter;
        java.util.concurrent.Executor executor11 = restAdapter6.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter6.new RestHandler();
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log22 = restAdapter21.log;
        java.util.concurrent.Executor executor23 = restAdapter21.callbackExecutor;
        retrofit.Profiler profiler24 = restAdapter21.profiler;
        retrofit.Profiler profiler25 = null;
        restAdapter21.profiler = profiler25;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel36);
        restAdapter21.log = log35;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder39.setLog(log44);
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel55);
        builder39.logLevel = logLevel55;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log35, logLevel55);
        retrofit.converter.Converter converter59 = restAdapter58.converter;
        retrofit.converter.Converter converter60 = restAdapter58.converter;
        retrofit.RestAdapter.RestHandler restHandler61 = restAdapter58.new RestHandler();
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter63 = null;
        builder62.converter = converter63;
        retrofit.client.Client.Provider provider65 = null;
        builder62.clientProvider = provider65;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        builder62.requestInterceptor = requestInterceptor67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = null;
        builder69.httpExecutor = executor70;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("hi!");
        retrofit.Profiler profiler74 = null;
        builder73.profiler = profiler74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor77 = null;
        builder76.httpExecutor = executor77;
        retrofit.RestAdapter.Builder builder80 = builder76.setServer("hi!");
        retrofit.RestAdapter.Log log81 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder82 = builder76.setLog(log81);
        retrofit.RestAdapter restAdapter83 = builder76.build();
        retrofit.converter.Converter converter84 = null;
        builder76.converter = converter84;
        retrofit.ErrorHandler errorHandler86 = null;
        builder76.errorHandler = errorHandler86;
        retrofit.RequestInterceptor requestInterceptor88 = builder76.requestInterceptor;
        builder73.requestInterceptor = requestInterceptor88;
        retrofit.RestAdapter.Builder builder90 = builder62.setRequestInterceptor(requestInterceptor88);
        restAdapter58.requestInterceptor = requestInterceptor88;
        restAdapter6.requestInterceptor = requestInterceptor88;
        restAdapter0.requestInterceptor = requestInterceptor88;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(profiler24);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter59);
        org.junit.Assert.assertNull(converter60);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(restAdapter83);
        org.junit.Assert.assertNotNull(requestInterceptor88);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test11680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11680");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        java.util.concurrent.Executor executor10 = restAdapter8.callbackExecutor;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter11.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter11.logLevel = logLevel13;
        retrofit.Profiler profiler15 = restAdapter11.profiler;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter11.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter11.requestInterceptor;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log19 = restAdapter18.log;
        java.util.concurrent.Executor executor20 = restAdapter18.callbackExecutor;
        retrofit.Profiler profiler21 = restAdapter18.profiler;
        retrofit.Profiler profiler22 = null;
        restAdapter18.profiler = profiler22;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel33);
        restAdapter18.log = log32;
        restAdapter11.log = log32;
        restAdapter8.log = log32;
        retrofit.RestAdapter.Builder builder38 = builder0.setLog(log32);
        retrofit.RestAdapter restAdapter39 = builder0.build();
        retrofit.client.Header[] headerArray42 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList43 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList43, headerArray42);
        retrofit.mime.TypedOutput typedOutput45 = null;
        retrofit.client.Request request46 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList43, typedOutput45);
        java.lang.String str47 = request46.getMethod();
        java.lang.String str48 = request46.getUrl();
        retrofit.mime.TypedOutput typedOutput49 = request46.getBody();
        retrofit.mime.TypedOutput typedOutput50 = request46.getBody();
        retrofit.client.Request request51 = restAdapter39.logAndReplaceRequest(request46);
        java.util.List<retrofit.client.Header> headerList52 = request46.getHeaders();
        java.lang.Class<?> wildcardClass53 = headerList52.getClass();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(restAdapter39);
        org.junit.Assert.assertNotNull(headerArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNull(typedOutput49);
        org.junit.Assert.assertNull(typedOutput50);
        org.junit.Assert.assertNotNull(request51);
        org.junit.Assert.assertNotNull(headerList52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test11681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11681");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter7.logLevel = logLevel9;
        retrofit.Profiler profiler11 = restAdapter7.profiler;
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter7.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter7.requestInterceptor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log15 = restAdapter14.log;
        java.util.concurrent.Executor executor16 = restAdapter14.callbackExecutor;
        retrofit.Profiler profiler17 = restAdapter14.profiler;
        retrofit.Profiler profiler18 = null;
        restAdapter14.profiler = profiler18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        restAdapter14.log = log28;
        restAdapter7.log = log28;
        retrofit.RestAdapter.Builder builder33 = builder0.setLog(log28);
        retrofit.RequestInterceptor requestInterceptor34 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder36 = builder0.setServer("Retrofit-Idle");
        retrofit.Profiler profiler37 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder38 = builder0.setProfiler(profiler37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test11682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11682");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter18.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        restAdapter18.requestInterceptor = requestInterceptor20;
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        restAdapter18.log = log30;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log30, logLevel34);
        retrofit.RestAdapter.Builder builder37 = builder8.setLog(log30);
        retrofit.Server server38 = builder37.server;
        retrofit.ErrorHandler errorHandler39 = null;
        builder37.errorHandler = errorHandler39;
        retrofit.Profiler profiler41 = null;
        builder37.profiler = profiler41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor44 = builder43.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor45 = builder43.requestInterceptor;
        java.util.concurrent.Executor executor46 = builder43.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel47 = builder43.logLevel;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.httpExecutor = executor49;
        retrofit.RestAdapter.Builder builder52 = builder48.setServer("hi!");
        retrofit.Profiler profiler53 = null;
        builder52.profiler = profiler53;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        builder52.requestInterceptor = requestInterceptor55;
        retrofit.RestAdapter restAdapter57 = builder52.build();
        retrofit.converter.Converter converter58 = null;
        builder52.converter = converter58;
        retrofit.client.Client.Provider provider60 = builder52.clientProvider;
        retrofit.RestAdapter.Builder builder61 = builder43.setClient(provider60);
        builder37.clientProvider = provider60;
        builder7.clientProvider = provider60;
        retrofit.converter.Converter converter64 = builder7.converter;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(restAdapter57);
        org.junit.Assert.assertNotNull(provider60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(converter64);
    }

    @Test
    public void test11683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11683");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.RestAdapter.Builder builder8 = builder4.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder4.logLevel = logLevel9;
        retrofit.converter.Converter converter11 = null;
        builder4.converter = converter11;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        retrofit.converter.Converter converter15 = restAdapter13.converter;
        java.util.concurrent.Executor executor16 = null;
        restAdapter13.callbackExecutor = executor16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = null;
        restAdapter18.httpExecutor = executor19;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        restAdapter18.requestInterceptor = requestInterceptor21;
        retrofit.RestAdapter.Log log23 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel24;
        restAdapter13.logLevel = logLevel24;
        retrofit.RestAdapter.Builder builder27 = builder4.setLogLevel(logLevel24);
        restAdapter0.logLevel = logLevel24;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter29.logLevel = logLevel31;
        retrofit.Profiler profiler33 = restAdapter29.profiler;
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter36 = builder35.converter;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor38 = restAdapter37.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        restAdapter37.requestInterceptor = requestInterceptor39;
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel50);
        restAdapter37.log = log49;
        retrofit.ErrorHandler errorHandler53 = null;
        restAdapter37.errorHandler = errorHandler53;
        retrofit.RestAdapter.Log log55 = restAdapter37.log;
        retrofit.RestAdapter.Builder builder56 = builder35.setLog(log55);
        retrofit.Profiler profiler57 = builder56.profiler;
        retrofit.RestAdapter.LogLevel logLevel58 = builder56.logLevel;
        restAdapter29.logLevel = logLevel58;
        java.util.concurrent.Executor executor60 = restAdapter29.callbackExecutor;
        retrofit.Server server61 = restAdapter29.server;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter63 = builder62.converter;
        retrofit.Profiler profiler64 = null;
        builder62.profiler = profiler64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = null;
        builder66.httpExecutor = executor67;
        retrofit.client.Client.Provider provider69 = null;
        builder66.clientProvider = provider69;
        retrofit.RestAdapter.Builder builder72 = builder66.setServer("hi!");
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor74 = null;
        builder73.httpExecutor = executor74;
        retrofit.RestAdapter.Builder builder77 = builder73.setServer("hi!");
        retrofit.RestAdapter.Log log78 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder79 = builder73.setLog(log78);
        retrofit.RestAdapter restAdapter80 = builder73.build();
        java.util.concurrent.Executor executor81 = restAdapter80.httpExecutor;
        builder72.callbackExecutor = executor81;
        builder62.callbackExecutor = executor81;
        restAdapter29.httpExecutor = executor81;
        retrofit.RestAdapter.LogLevel logLevel85 = restAdapter29.getLogLevel();
        boolean boolean86 = logLevel85.log();
        restAdapter0.setLogLevel(logLevel85);
        retrofit.RestAdapter.LogLevel logLevel88 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler89 = restAdapter0.errorHandler;
        retrofit.Server server90 = restAdapter0.server;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(log23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(profiler57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertNull(server61);
        org.junit.Assert.assertNull(converter63);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNotNull(executor81);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler89);
        org.junit.Assert.assertNull(server90);
    }

    @Test
    public void test11684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11684");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.Server server9 = null;
        builder0.server = server9;
        builder0.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler12 = builder0.errorHandler;
        retrofit.Profiler profiler13 = builder0.profiler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(errorHandler12);
        org.junit.Assert.assertNull(profiler13);
    }

    @Test
    public void test11685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11685");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.converter.Converter converter8 = builder0.converter;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.client.Client.Provider provider14 = builder13.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        builder13.logLevel = logLevel15;
        retrofit.RestAdapter restAdapter18 = builder13.build();
        retrofit.ErrorHandler errorHandler19 = builder13.errorHandler;
        retrofit.RestAdapter.Builder builder20 = builder0.setErrorHandler(errorHandler19);
        retrofit.converter.Converter converter21 = builder20.converter;
        retrofit.RestAdapter.Builder builder23 = builder20.setServer("hi!");
        retrofit.ErrorHandler errorHandler24 = builder20.errorHandler;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor26 = restAdapter25.requestInterceptor;
        java.util.concurrent.Executor executor27 = restAdapter25.callbackExecutor;
        retrofit.converter.Converter converter28 = null;
        restAdapter25.converter = converter28;
        retrofit.RestAdapter.Log log30 = restAdapter25.log;
        java.util.concurrent.Executor executor31 = restAdapter25.callbackExecutor;
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel49);
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter51.logLevel = logLevel53;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter51.setLogLevel(logLevel55);
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log48, logLevel55);
        log48.log("");
        restAdapter25.log = log48;
        retrofit.ErrorHandler errorHandler61 = restAdapter25.errorHandler;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.httpExecutor = executor63;
        retrofit.RestAdapter.Builder builder66 = builder62.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder62.logLevel = logLevel67;
        retrofit.RestAdapter.Log log69 = builder62.log;
        retrofit.ErrorHandler errorHandler70 = null;
        builder62.errorHandler = errorHandler70;
        retrofit.RestAdapter restAdapter72 = builder62.build();
        retrofit.client.Client.Provider provider73 = builder62.clientProvider;
        restAdapter25.clientProvider = provider73;
        retrofit.RestAdapter.Builder builder75 = builder20.setClient(provider73);
        retrofit.RestAdapter.LogLevel logLevel76 = builder75.logLevel;
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(errorHandler19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(errorHandler24);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler61);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log69);
        org.junit.Assert.assertNotNull(restAdapter72);
        org.junit.Assert.assertNotNull(provider73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test11686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11686");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.RestAdapter.Log log26 = restAdapter8.log;
        retrofit.RestAdapter.Builder builder27 = builder6.setLog(log26);
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = null;
        builder29.httpExecutor = executor30;
        retrofit.RestAdapter.Builder builder33 = builder29.setServer("hi!");
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder29.setLog(log34);
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter36.logLevel;
        retrofit.converter.Converter converter39 = null;
        restAdapter36.converter = converter39;
        retrofit.ErrorHandler errorHandler41 = restAdapter36.errorHandler;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter43 = null;
        builder42.converter = converter43;
        retrofit.client.Client.Provider provider45 = null;
        builder42.clientProvider = provider45;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        builder42.requestInterceptor = requestInterceptor47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = builder49.setServer("hi!");
        retrofit.Profiler profiler54 = null;
        builder53.profiler = profiler54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = null;
        builder56.httpExecutor = executor57;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = builder56.setLog(log61);
        retrofit.RestAdapter restAdapter63 = builder56.build();
        retrofit.converter.Converter converter64 = null;
        builder56.converter = converter64;
        retrofit.ErrorHandler errorHandler66 = null;
        builder56.errorHandler = errorHandler66;
        retrofit.RequestInterceptor requestInterceptor68 = builder56.requestInterceptor;
        builder53.requestInterceptor = requestInterceptor68;
        retrofit.RestAdapter.Builder builder70 = builder42.setRequestInterceptor(requestInterceptor68);
        restAdapter36.requestInterceptor = requestInterceptor68;
        builder29.requestInterceptor = requestInterceptor68;
        builder28.requestInterceptor = requestInterceptor68;
        retrofit.client.Client.Provider provider74 = builder28.clientProvider;
        java.lang.Class<?> wildcardClass75 = builder28.getClass();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertNull(logLevel38);
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(restAdapter63);
        org.junit.Assert.assertNotNull(requestInterceptor68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(provider74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test11687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11687");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter7.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        restAdapter7.requestInterceptor = requestInterceptor9;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        restAdapter7.log = log19;
        retrofit.ErrorHandler errorHandler23 = null;
        restAdapter7.errorHandler = errorHandler23;
        retrofit.RestAdapter.Log log25 = restAdapter7.log;
        retrofit.RestAdapter.Builder builder26 = builder5.setLog(log25);
        restAdapter0.log = log25;
        retrofit.Profiler profiler28 = null;
        restAdapter0.profiler = profiler28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.httpExecutor = executor31;
        retrofit.client.Client.Provider provider33 = null;
        builder30.clientProvider = provider33;
        retrofit.RestAdapter.Builder builder36 = builder30.setServer("hi!");
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor38 = restAdapter37.requestInterceptor;
        java.util.concurrent.Executor executor39 = restAdapter37.callbackExecutor;
        retrofit.converter.Converter converter40 = null;
        restAdapter37.converter = converter40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter43 = builder42.converter;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter44.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        restAdapter44.requestInterceptor = requestInterceptor46;
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel57);
        restAdapter44.log = log56;
        retrofit.ErrorHandler errorHandler60 = null;
        restAdapter44.errorHandler = errorHandler60;
        retrofit.RestAdapter.Log log62 = restAdapter44.log;
        retrofit.RestAdapter.Builder builder63 = builder42.setLog(log62);
        restAdapter37.log = log62;
        retrofit.RestAdapter.Builder builder65 = builder30.setLog(log62);
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter67 = builder66.converter;
        retrofit.Profiler profiler68 = null;
        builder66.profiler = profiler68;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor71 = null;
        builder70.httpExecutor = executor71;
        retrofit.client.Client.Provider provider73 = null;
        builder70.clientProvider = provider73;
        retrofit.RestAdapter.Builder builder76 = builder70.setServer("hi!");
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor78 = null;
        builder77.httpExecutor = executor78;
        retrofit.RestAdapter.Builder builder81 = builder77.setServer("hi!");
        retrofit.RestAdapter.Log log82 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder83 = builder77.setLog(log82);
        retrofit.RestAdapter restAdapter84 = builder77.build();
        java.util.concurrent.Executor executor85 = restAdapter84.httpExecutor;
        builder76.callbackExecutor = executor85;
        builder66.callbackExecutor = executor85;
        builder65.httpExecutor = executor85;
        restAdapter0.callbackExecutor = executor85;
        retrofit.Profiler profiler90 = null;
        restAdapter0.profiler = profiler90;
        retrofit.client.Client.Provider provider92 = restAdapter0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor93 = restAdapter0.requestInterceptor;
        retrofit.Server server94 = restAdapter0.server;
        retrofit.ErrorHandler errorHandler95 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(converter67);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(restAdapter84);
        org.junit.Assert.assertNotNull(executor85);
        org.junit.Assert.assertNull(provider92);
        org.junit.Assert.assertNull(requestInterceptor93);
        org.junit.Assert.assertNull(server94);
        org.junit.Assert.assertNull(errorHandler95);
    }

    @Test
    public void test11688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11688");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Server server22 = null;
        builder0.server = server22;
        java.util.concurrent.Executor executor24 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        builder0.requestInterceptor = requestInterceptor25;
        java.util.concurrent.Executor executor27 = builder0.callbackExecutor;
        retrofit.RestAdapter.Log log28 = builder0.log;
        log28.log("hi!");
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNotNull(log28);
    }

    @Test
    public void test11689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11689");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor9 = null;
        restAdapter0.httpExecutor = executor9;
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor13 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor14 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(executor14);
    }

    @Test
    public void test11690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11690");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = null;
        restAdapter0.logLevel = logLevel4;
        retrofit.ErrorHandler errorHandler6 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler8 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(errorHandler8);
    }

    @Test
    public void test11691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11691");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor4 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter5.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        restAdapter5.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter5.getLogLevel();
        retrofit.client.Client.Provider provider10 = null;
        restAdapter5.clientProvider = provider10;
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter5.logLevel;
        java.util.concurrent.Executor executor13 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor14 = null;
        restAdapter5.httpExecutor = executor14;
        retrofit.Server server16 = restAdapter5.server;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.httpExecutor = executor18;
        retrofit.RestAdapter.Builder builder21 = builder17.setServer("hi!");
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = builder17.setLog(log22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter25 = builder24.converter;
        retrofit.RestAdapter.LogLevel logLevel26 = builder24.logLevel;
        retrofit.RestAdapter.Builder builder27 = builder23.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = builder28.callbackExecutor;
        retrofit.RestAdapter.Log log30 = builder28.log;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel48);
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter50.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter50.logLevel = logLevel52;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter50.setLogLevel(logLevel54);
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log47, logLevel54);
        retrofit.RestAdapter.Builder builder57 = builder28.setLogLevel(logLevel54);
        retrofit.ErrorHandler errorHandler58 = null;
        builder57.errorHandler = errorHandler58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = builder60.callbackExecutor;
        retrofit.Server server62 = null;
        retrofit.client.Client.Provider provider63 = null;
        java.util.concurrent.Executor executor64 = null;
        java.util.concurrent.Executor executor65 = null;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        retrofit.converter.Converter converter67 = null;
        retrofit.Profiler profiler68 = null;
        retrofit.ErrorHandler errorHandler69 = null;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server62, provider63, executor64, executor65, requestInterceptor66, converter67, profiler68, errorHandler69, log70, logLevel71);
        retrofit.RestAdapter.Builder builder73 = builder60.setLogLevel(logLevel71);
        retrofit.RestAdapter.Builder builder74 = builder57.setLogLevel(logLevel71);
        retrofit.RestAdapter.LogLevel logLevel75 = builder74.logLevel;
        builder27.logLevel = logLevel75;
        retrofit.converter.Converter converter77 = builder27.converter;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor79 = null;
        builder78.httpExecutor = executor79;
        retrofit.RestAdapter.Builder builder82 = builder78.setServer("hi!");
        retrofit.Profiler profiler83 = null;
        builder82.profiler = profiler83;
        retrofit.RequestInterceptor requestInterceptor85 = null;
        builder82.requestInterceptor = requestInterceptor85;
        retrofit.RestAdapter restAdapter87 = builder82.build();
        retrofit.converter.Converter converter88 = restAdapter87.converter;
        retrofit.RequestInterceptor requestInterceptor89 = restAdapter87.requestInterceptor;
        retrofit.RestAdapter.Builder builder90 = builder27.setRequestInterceptor(requestInterceptor89);
        restAdapter5.requestInterceptor = requestInterceptor89;
        restAdapter0.requestInterceptor = requestInterceptor89;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter77);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(restAdapter87);
        org.junit.Assert.assertNotNull(converter88);
        org.junit.Assert.assertNotNull(requestInterceptor89);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test11692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11692");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.lang.String str15 = request14.getUrl();
        java.util.List<retrofit.client.Header> headerList16 = request14.getHeaders();
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "", headerList16, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList16, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "", headerList16, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList16, typedOutput23);
        java.lang.String str25 = request24.getMethod();
        retrofit.mime.TypedOutput typedOutput26 = request24.getBody();
        retrofit.mime.TypedOutput typedOutput27 = request24.getBody();
        java.lang.String str28 = request24.getUrl();
        java.util.List<retrofit.client.Header> headerList29 = request24.getHeaders();
        java.lang.Class<?> wildcardClass30 = headerList29.getClass();
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Retrofit-Idle" + "'", str25, "Retrofit-Idle");
        org.junit.Assert.assertNull(typedOutput26);
        org.junit.Assert.assertNull(typedOutput27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test11693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11693");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel3 = builder0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel4 = builder0.logLevel;
        retrofit.Profiler profiler5 = null;
        builder0.profiler = profiler5;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter8.logLevel = logLevel10;
        retrofit.RequestInterceptor requestInterceptor12 = restAdapter8.requestInterceptor;
        java.util.concurrent.Executor executor13 = restAdapter8.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter8.getLogLevel();
        java.util.concurrent.Executor executor15 = restAdapter8.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter8.new RestHandler();
        retrofit.Profiler profiler17 = null;
        restAdapter8.profiler = profiler17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.httpExecutor = executor20;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("hi!");
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder19.setLog(log24);
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log34, logLevel35);
        builder19.logLevel = logLevel35;
        retrofit.converter.Converter converter38 = builder19.converter;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        builder19.requestInterceptor = requestInterceptor39;
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.httpExecutor = executor43;
        retrofit.RestAdapter.Builder builder46 = builder42.setServer("hi!");
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder48 = builder42.setLog(log47);
        retrofit.RestAdapter restAdapter49 = builder42.build();
        retrofit.converter.Converter converter50 = null;
        builder42.converter = converter50;
        retrofit.ErrorHandler errorHandler52 = null;
        builder42.errorHandler = errorHandler52;
        retrofit.RequestInterceptor requestInterceptor54 = builder42.requestInterceptor;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.httpExecutor = executor56;
        retrofit.RestAdapter.Builder builder59 = builder55.setServer("hi!");
        retrofit.client.Client.Provider provider60 = builder59.clientProvider;
        builder59.ensureSaneDefaults();
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        log62.log("");
        builder59.log = log62;
        retrofit.Server server66 = builder59.server;
        builder42.server = server66;
        retrofit.RestAdapter.Builder builder68 = builder19.setServer(server66);
        retrofit.Server server69 = null;
        retrofit.client.Client.Provider provider70 = null;
        java.util.concurrent.Executor executor71 = null;
        java.util.concurrent.Executor executor72 = null;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        retrofit.converter.Converter converter74 = null;
        retrofit.Profiler profiler75 = null;
        retrofit.ErrorHandler errorHandler76 = null;
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server69, provider70, executor71, executor72, requestInterceptor73, converter74, profiler75, errorHandler76, log77, logLevel78);
        retrofit.ErrorHandler errorHandler80 = null;
        restAdapter79.errorHandler = errorHandler80;
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor83 = null;
        builder82.httpExecutor = executor83;
        retrofit.RestAdapter.Builder builder86 = builder82.setServer("hi!");
        retrofit.RestAdapter.Log log87 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder88 = builder82.setLog(log87);
        retrofit.RestAdapter restAdapter89 = builder82.build();
        retrofit.converter.Converter converter90 = null;
        builder82.converter = converter90;
        retrofit.ErrorHandler errorHandler92 = null;
        builder82.errorHandler = errorHandler92;
        retrofit.RequestInterceptor requestInterceptor94 = builder82.requestInterceptor;
        restAdapter79.requestInterceptor = requestInterceptor94;
        retrofit.RestAdapter.Builder builder96 = builder19.setRequestInterceptor(requestInterceptor94);
        restAdapter8.requestInterceptor = requestInterceptor94;
        builder0.requestInterceptor = requestInterceptor94;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter38);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(restAdapter49);
        org.junit.Assert.assertNotNull(requestInterceptor54);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(provider60);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(server66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(log87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(restAdapter89);
        org.junit.Assert.assertNotNull(requestInterceptor94);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test11694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11694");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter1 = null;
        restAdapter0.converter = converter1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.Profiler profiler5 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        restAdapter0.logLevel = logLevel6;
        retrofit.Profiler profiler9 = null;
        restAdapter0.profiler = profiler9;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor12 = restAdapter11.requestInterceptor;
        retrofit.converter.Converter converter13 = restAdapter11.converter;
        java.util.concurrent.Executor executor14 = restAdapter11.httpExecutor;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.httpExecutor = executor16;
        retrofit.RestAdapter.Builder builder19 = builder15.setServer("hi!");
        retrofit.client.Client.Provider provider20 = builder19.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean22 = logLevel21.log();
        builder19.logLevel = logLevel21;
        retrofit.RestAdapter restAdapter24 = builder19.build();
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor26 = restAdapter25.requestInterceptor;
        java.util.concurrent.Executor executor27 = restAdapter25.callbackExecutor;
        retrofit.converter.Converter converter28 = null;
        restAdapter25.converter = converter28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter31 = builder30.converter;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter32.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter32.requestInterceptor = requestInterceptor34;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        restAdapter32.log = log44;
        retrofit.ErrorHandler errorHandler48 = null;
        restAdapter32.errorHandler = errorHandler48;
        retrofit.RestAdapter.Log log50 = restAdapter32.log;
        retrofit.RestAdapter.Builder builder51 = builder30.setLog(log50);
        restAdapter25.log = log50;
        retrofit.RestAdapter.Builder builder53 = builder19.setLog(log50);
        restAdapter11.log = log50;
        retrofit.converter.Converter converter55 = restAdapter11.converter;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = builder56.callbackExecutor;
        retrofit.Server server58 = null;
        retrofit.client.Client.Provider provider59 = null;
        java.util.concurrent.Executor executor60 = null;
        java.util.concurrent.Executor executor61 = null;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        retrofit.converter.Converter converter63 = null;
        retrofit.Profiler profiler64 = null;
        retrofit.ErrorHandler errorHandler65 = null;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server58, provider59, executor60, executor61, requestInterceptor62, converter63, profiler64, errorHandler65, log66, logLevel67);
        retrofit.RestAdapter.Builder builder69 = builder56.setLogLevel(logLevel67);
        restAdapter11.logLevel = logLevel67;
        restAdapter0.logLevel = logLevel67;
        retrofit.Server server72 = restAdapter0.server;
        java.util.concurrent.Executor executor73 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(converter55);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(server72);
        org.junit.Assert.assertNull(executor73);
    }

    @Test
    public void test11695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11695");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.converter.Converter converter3 = restAdapter0.converter;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor5 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(executor5);
    }

    @Test
    public void test11696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11696");
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        java.lang.String str17 = request16.getUrl();
        java.util.List<retrofit.client.Header> headerList18 = request16.getHeaders();
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList18, typedOutput19);
        java.lang.String str21 = request20.getMethod();
        retrofit.mime.TypedOutput typedOutput22 = request20.getBody();
        java.util.List<retrofit.client.Header> headerList23 = request20.getHeaders();
        java.util.List<retrofit.client.Header> headerList24 = request20.getHeaders();
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "", headerList24, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "hi!", headerList24, typedOutput27);
        java.lang.String str29 = request28.getUrl();
        retrofit.mime.TypedOutput typedOutput30 = request28.getBody();
        java.lang.String str31 = request28.getUrl();
        java.util.List<retrofit.client.Header> headerList32 = request28.getHeaders();
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("hi!", "", headerList32, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("hi!", "hi!", headerList32, typedOutput35);
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNull(typedOutput22);
        org.junit.Assert.assertNotNull(headerList23);
        org.junit.Assert.assertNotNull(headerList24);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNull(typedOutput30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(headerList32);
    }

    @Test
    public void test11697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11697");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.Server server3 = restAdapter0.server;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor5 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.Profiler profiler8 = null;
        builder6.profiler = profiler8;
        retrofit.ErrorHandler errorHandler10 = null;
        builder6.errorHandler = errorHandler10;
        retrofit.Server server12 = builder6.server;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter14 = builder13.converter;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter15.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        restAdapter15.requestInterceptor = requestInterceptor17;
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel28);
        restAdapter15.log = log27;
        retrofit.ErrorHandler errorHandler31 = null;
        restAdapter15.errorHandler = errorHandler31;
        retrofit.RestAdapter.Log log33 = restAdapter15.log;
        retrofit.RestAdapter.Builder builder34 = builder13.setLog(log33);
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder40 = builder36.setServer("hi!");
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder36.setLog(log41);
        retrofit.RestAdapter restAdapter43 = builder36.build();
        java.util.concurrent.Executor executor44 = restAdapter43.httpExecutor;
        builder13.callbackExecutor = executor44;
        builder6.httpExecutor = executor44;
        java.util.concurrent.Executor executor47 = builder6.httpExecutor;
        restAdapter0.callbackExecutor = executor47;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(server3);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertNotNull(executor44);
        org.junit.Assert.assertNotNull(executor47);
    }

    @Test
    public void test11698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11698");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter1 = null;
        restAdapter0.converter = converter1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.Profiler profiler5 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        restAdapter0.logLevel = logLevel6;
        retrofit.Profiler profiler9 = null;
        restAdapter0.profiler = profiler9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        restAdapter13.requestInterceptor = requestInterceptor15;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        restAdapter13.log = log25;
        retrofit.ErrorHandler errorHandler29 = null;
        restAdapter13.errorHandler = errorHandler29;
        retrofit.RestAdapter.Log log31 = restAdapter13.log;
        retrofit.RestAdapter.Builder builder32 = builder11.setLog(log31);
        retrofit.RequestInterceptor requestInterceptor33 = builder11.requestInterceptor;
        java.util.concurrent.Executor executor34 = builder11.httpExecutor;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.httpExecutor = executor36;
        retrofit.RestAdapter.Builder builder39 = builder35.setServer("hi!");
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder35.setLog(log40);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter43 = builder42.converter;
        retrofit.RestAdapter.LogLevel logLevel44 = builder42.logLevel;
        retrofit.RestAdapter.Builder builder45 = builder41.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter47 = builder46.converter;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor49 = restAdapter48.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        restAdapter48.requestInterceptor = requestInterceptor50;
        retrofit.Server server52 = null;
        retrofit.client.Client.Provider provider53 = null;
        java.util.concurrent.Executor executor54 = null;
        java.util.concurrent.Executor executor55 = null;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        retrofit.converter.Converter converter57 = null;
        retrofit.Profiler profiler58 = null;
        retrofit.ErrorHandler errorHandler59 = null;
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server52, provider53, executor54, executor55, requestInterceptor56, converter57, profiler58, errorHandler59, log60, logLevel61);
        restAdapter48.log = log60;
        retrofit.ErrorHandler errorHandler64 = null;
        restAdapter48.errorHandler = errorHandler64;
        retrofit.RestAdapter.Log log66 = restAdapter48.log;
        retrofit.RestAdapter.Builder builder67 = builder46.setLog(log66);
        retrofit.RequestInterceptor requestInterceptor68 = builder46.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor69 = builder46.requestInterceptor;
        retrofit.RestAdapter.Builder builder71 = builder46.setServer("hi!");
        retrofit.Server server72 = builder46.server;
        retrofit.RestAdapter.Builder builder73 = builder41.setServer(server72);
        retrofit.RestAdapter.Builder builder74 = builder11.setServer(server72);
        retrofit.Profiler profiler75 = builder11.profiler;
        java.util.concurrent.Executor executor76 = builder11.httpExecutor;
        builder11.ensureSaneDefaults();
        retrofit.Server server78 = builder11.server;
        restAdapter0.server = server78;
        java.lang.Throwable throwable80 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable80, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(converter47);
        org.junit.Assert.assertNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(requestInterceptor68);
        org.junit.Assert.assertNull(requestInterceptor69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(profiler75);
        org.junit.Assert.assertNull(executor76);
        org.junit.Assert.assertNotNull(server78);
    }

    @Test
    public void test11699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11699");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.client.Client.Provider provider5 = restAdapter0.clientProvider;
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        retrofit.Server server10 = builder8.server;
        retrofit.RestAdapter.LogLevel logLevel11 = builder8.logLevel;
        retrofit.RestAdapter.LogLevel logLevel12 = builder8.logLevel;
        retrofit.Profiler profiler13 = null;
        builder8.profiler = profiler13;
        builder8.ensureSaneDefaults();
        retrofit.Server server16 = builder8.server;
        retrofit.client.Client.Provider provider17 = builder8.clientProvider;
        restAdapter0.clientProvider = provider17;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNotNull(provider17);
    }

    @Test
    public void test11700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11700");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        retrofit.ErrorHandler errorHandler8 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder15 = builder9.setLog(log14);
        retrofit.RestAdapter restAdapter16 = builder9.build();
        java.util.concurrent.Executor executor17 = restAdapter16.httpExecutor;
        retrofit.client.Client.Provider provider18 = null;
        restAdapter16.clientProvider = provider18;
        retrofit.client.Client.Provider provider20 = null;
        restAdapter16.clientProvider = provider20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.httpExecutor = executor23;
        retrofit.RestAdapter.Builder builder26 = builder22.setServer("hi!");
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = builder22.setLog(log27);
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel38);
        builder22.logLevel = logLevel38;
        retrofit.converter.Converter converter41 = builder22.converter;
        retrofit.ErrorHandler errorHandler42 = builder22.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel43 = builder22.logLevel;
        boolean boolean44 = logLevel43.log();
        boolean boolean45 = logLevel43.log();
        restAdapter16.logLevel = logLevel43;
        builder0.logLevel = logLevel43;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter49 = builder48.converter;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor51 = restAdapter50.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        restAdapter50.requestInterceptor = requestInterceptor52;
        retrofit.Server server54 = null;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log62, logLevel63);
        restAdapter50.log = log62;
        retrofit.ErrorHandler errorHandler66 = null;
        restAdapter50.errorHandler = errorHandler66;
        retrofit.RestAdapter.Log log68 = restAdapter50.log;
        retrofit.RestAdapter.Builder builder69 = builder48.setLog(log68);
        retrofit.Profiler profiler70 = builder69.profiler;
        retrofit.client.Client.Provider provider71 = builder69.clientProvider;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter74 = builder73.build();
        retrofit.RestAdapter.Log log75 = builder73.log;
        log75.log("hi!");
        retrofit.RestAdapter.Builder builder78 = builder0.setLog(log75);
        retrofit.ErrorHandler errorHandler79 = builder0.errorHandler;
        java.util.concurrent.Executor executor80 = builder0.httpExecutor;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(converter49);
        org.junit.Assert.assertNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(profiler70);
        org.junit.Assert.assertNull(provider71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(restAdapter74);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(errorHandler79);
        org.junit.Assert.assertNull(executor80);
    }

    @Test
    public void test11701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11701");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.lang.String str15 = request14.getUrl();
        java.util.List<retrofit.client.Header> headerList16 = request14.getHeaders();
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "", headerList16, typedOutput17);
        java.lang.String str19 = request18.getMethod();
        retrofit.mime.TypedOutput typedOutput20 = request18.getBody();
        java.util.List<retrofit.client.Header> headerList21 = request18.getHeaders();
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("hi!", "hi!", headerList21, typedOutput22);
        java.lang.String str24 = request23.getMethod();
        java.lang.String str25 = request23.getMethod();
        java.lang.String str26 = request23.getMethod();
        java.util.List<retrofit.client.Header> headerList27 = request23.getHeaders();
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("Retrofit-Idle", "", headerList27, typedOutput28);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("hi!", "", headerList27, typedOutput30);
        retrofit.mime.TypedOutput typedOutput32 = request31.getBody();
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(typedOutput20);
        org.junit.Assert.assertNotNull(headerList21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(headerList27);
        org.junit.Assert.assertNull(typedOutput32);
    }

    @Test
    public void test11702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11702");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.getMethod();
        java.util.List<retrofit.client.Header> headerList8 = request6.getHeaders();
        java.lang.String str9 = request6.getUrl();
        java.util.List<retrofit.client.Header> headerList10 = request6.getHeaders();
        java.lang.String str11 = request6.getMethod();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test11703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11703");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.client.Client.Provider provider10 = null;
        builder7.clientProvider = provider10;
        retrofit.client.Client.Provider provider12 = builder7.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.httpExecutor = executor16;
        retrofit.RestAdapter.Builder builder19 = builder15.setServer("hi!");
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        builder19.requestInterceptor = requestInterceptor22;
        retrofit.RestAdapter restAdapter24 = builder19.build();
        retrofit.converter.Converter converter25 = restAdapter24.converter;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        log26.log("");
        restAdapter24.log = log26;
        retrofit.RestAdapter.Builder builder30 = builder7.setLog(log26);
        retrofit.RestAdapter.Builder builder31 = builder5.setLog(log26);
        java.util.concurrent.Executor executor32 = builder31.httpExecutor;
        java.util.concurrent.Executor executor33 = builder31.callbackExecutor;
        retrofit.ErrorHandler errorHandler34 = builder31.errorHandler;
        retrofit.Profiler profiler35 = null;
        builder31.profiler = profiler35;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(converter25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(errorHandler34);
    }

    @Test
    public void test11704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11704");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.Profiler profiler12 = null;
        builder11.profiler = profiler12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder14.setLog(log19);
        retrofit.RestAdapter restAdapter21 = builder14.build();
        retrofit.converter.Converter converter22 = null;
        builder14.converter = converter22;
        retrofit.ErrorHandler errorHandler24 = null;
        builder14.errorHandler = errorHandler24;
        retrofit.RequestInterceptor requestInterceptor26 = builder14.requestInterceptor;
        builder11.requestInterceptor = requestInterceptor26;
        retrofit.RestAdapter.Builder builder28 = builder0.setRequestInterceptor(requestInterceptor26);
        builder28.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder31 = builder28.setServer("Retrofit-Idle");
        builder28.ensureSaneDefaults();
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test11705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11705");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder12.setLog(log17);
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter19.logLevel = logLevel21;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter19.requestInterceptor = requestInterceptor23;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter19.logLevel = logLevel25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log17, logLevel25);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("hi!");
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder28.setLog(log33);
        restAdapter27.log = log33;
        builder0.log = log33;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = builder37.callbackExecutor;
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel48);
        retrofit.RestAdapter.Builder builder50 = builder37.setLogLevel(logLevel48);
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log52 = restAdapter51.log;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor54 = builder53.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor55 = builder53.requestInterceptor;
        retrofit.ErrorHandler errorHandler56 = null;
        builder53.errorHandler = errorHandler56;
        retrofit.converter.Converter converter58 = null;
        builder53.converter = converter58;
        retrofit.ErrorHandler errorHandler60 = null;
        builder53.errorHandler = errorHandler60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.httpExecutor = executor63;
        retrofit.RestAdapter.Builder builder66 = builder62.setServer("hi!");
        retrofit.Profiler profiler67 = null;
        builder66.profiler = profiler67;
        retrofit.RequestInterceptor requestInterceptor69 = null;
        builder66.requestInterceptor = requestInterceptor69;
        retrofit.RestAdapter restAdapter71 = builder66.build();
        retrofit.converter.Converter converter72 = restAdapter71.converter;
        retrofit.RestAdapter.Builder builder73 = builder53.setConverter(converter72);
        restAdapter51.converter = converter72;
        builder37.converter = converter72;
        retrofit.RestAdapter.Builder builder76 = builder0.setConverter(converter72);
        retrofit.RestAdapter.LogLevel logLevel77 = builder76.logLevel;
        retrofit.client.Client.Provider provider78 = builder76.clientProvider;
        builder76.ensureSaneDefaults();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(restAdapter71);
        org.junit.Assert.assertNotNull(converter72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(provider78);
    }

    @Test
    public void test11706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11706");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.util.List<retrofit.client.Header> headerList9 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("Retrofit-Idle", "", headerList9, typedOutput10);
        java.lang.String str12 = request11.getMethod();
        retrofit.mime.TypedOutput typedOutput13 = request11.getBody();
        java.lang.String str14 = request11.getUrl();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(headerList9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test11707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11707");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.Server server6 = null;
        restAdapter0.server = server6;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter11 = null;
        restAdapter10.converter = converter11;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        restAdapter10.requestInterceptor = requestInterceptor13;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean17 = logLevel16.log();
        restAdapter10.logLevel = logLevel16;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.httpExecutor = executor20;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("hi!");
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder19.setLog(log24);
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter26.logLevel;
        retrofit.converter.Converter converter29 = null;
        restAdapter26.converter = converter29;
        retrofit.ErrorHandler errorHandler31 = restAdapter26.errorHandler;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter33 = null;
        builder32.converter = converter33;
        retrofit.client.Client.Provider provider35 = null;
        builder32.clientProvider = provider35;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        builder32.requestInterceptor = requestInterceptor37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.Profiler profiler44 = null;
        builder43.profiler = profiler44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder46.setLog(log51);
        retrofit.RestAdapter restAdapter53 = builder46.build();
        retrofit.converter.Converter converter54 = null;
        builder46.converter = converter54;
        retrofit.ErrorHandler errorHandler56 = null;
        builder46.errorHandler = errorHandler56;
        retrofit.RequestInterceptor requestInterceptor58 = builder46.requestInterceptor;
        builder43.requestInterceptor = requestInterceptor58;
        retrofit.RestAdapter.Builder builder60 = builder32.setRequestInterceptor(requestInterceptor58);
        restAdapter26.requestInterceptor = requestInterceptor58;
        builder19.requestInterceptor = requestInterceptor58;
        restAdapter10.requestInterceptor = requestInterceptor58;
        restAdapter0.requestInterceptor = requestInterceptor58;
        retrofit.Server server65 = restAdapter0.server;
        retrofit.client.Client.Provider provider66 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertNull(provider66);
    }

    @Test
    public void test11708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11708");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler3 = null;
        restAdapter0.profiler = profiler3;
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.Profiler profiler9 = null;
        builder7.profiler = profiler9;
        retrofit.RestAdapter.Log log11 = builder7.log;
        builder7.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor13 = null;
        builder7.requestInterceptor = requestInterceptor13;
        retrofit.client.Client.Provider provider15 = builder7.clientProvider;
        restAdapter0.clientProvider = provider15;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNotNull(provider15);
    }

    @Test
    public void test11709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11709");
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        java.lang.String str17 = request16.getUrl();
        java.util.List<retrofit.client.Header> headerList18 = request16.getHeaders();
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList18, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList18, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", headerList18, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList18, typedOutput25);
        java.lang.String str27 = request26.getUrl();
        java.util.List<retrofit.client.Header> headerList28 = request26.getHeaders();
        java.util.List<retrofit.client.Header> headerList29 = request26.getHeaders();
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("", "Retrofit-Idle", headerList29, typedOutput30);
        java.lang.String str32 = request31.getMethod();
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(headerList28);
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test11710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11710");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.getMethod();
        java.util.List<retrofit.client.Header> headerList8 = request6.getHeaders();
        java.lang.String str9 = request6.getMethod();
        java.util.List<retrofit.client.Header> headerList10 = request6.getHeaders();
        java.lang.String str11 = request6.getUrl();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test11711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11711");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.Profiler profiler4 = null;
        restAdapter0.profiler = profiler4;
        retrofit.Profiler profiler6 = null;
        restAdapter0.profiler = profiler6;
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(logLevel8);
    }

    @Test
    public void test11712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11712");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.client.Client.Provider provider7 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder11 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder12.setLog(log17);
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter20 = builder19.converter;
        retrofit.RestAdapter.LogLevel logLevel21 = builder19.logLevel;
        retrofit.RestAdapter.Builder builder22 = builder18.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter24 = builder23.converter;
        retrofit.RestAdapter.LogLevel logLevel25 = builder23.logLevel;
        builder23.ensureSaneDefaults();
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.httpExecutor = executor36;
        retrofit.RestAdapter.Builder builder39 = builder35.setServer("hi!");
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder35.setLog(log40);
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter42.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter42.logLevel = logLevel44;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        restAdapter42.requestInterceptor = requestInterceptor46;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter42.logLevel = logLevel48;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log40, logLevel48);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = null;
        builder51.httpExecutor = executor52;
        retrofit.RestAdapter.Builder builder55 = builder51.setServer("hi!");
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder57 = builder51.setLog(log56);
        restAdapter50.log = log56;
        builder23.log = log56;
        java.util.concurrent.Executor executor60 = null;
        builder23.httpExecutor = executor60;
        retrofit.converter.Converter converter62 = null;
        builder23.converter = converter62;
        retrofit.ErrorHandler errorHandler64 = builder23.errorHandler;
        retrofit.RestAdapter.Builder builder65 = builder18.setErrorHandler(errorHandler64);
        retrofit.ErrorHandler errorHandler66 = builder18.errorHandler;
        java.util.concurrent.Executor executor67 = builder18.httpExecutor;
        java.util.concurrent.Executor executor68 = builder18.callbackExecutor;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = null;
        builder69.httpExecutor = executor70;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("hi!");
        retrofit.RestAdapter.Log log74 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder75 = builder69.setLog(log74);
        retrofit.RestAdapter restAdapter76 = builder69.build();
        retrofit.RequestInterceptor requestInterceptor77 = restAdapter76.requestInterceptor;
        retrofit.RestAdapter.Builder builder78 = builder18.setRequestInterceptor(requestInterceptor77);
        retrofit.RestAdapter.Builder builder79 = builder11.setRequestInterceptor(requestInterceptor77);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(logLevel43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(errorHandler64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(errorHandler66);
        org.junit.Assert.assertNull(executor67);
        org.junit.Assert.assertNull(executor68);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(log74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(restAdapter76);
        org.junit.Assert.assertNotNull(requestInterceptor77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test11713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11713");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.Profiler profiler12 = null;
        builder11.profiler = profiler12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder14.setLog(log19);
        retrofit.RestAdapter restAdapter21 = builder14.build();
        retrofit.converter.Converter converter22 = null;
        builder14.converter = converter22;
        retrofit.ErrorHandler errorHandler24 = null;
        builder14.errorHandler = errorHandler24;
        retrofit.RequestInterceptor requestInterceptor26 = builder14.requestInterceptor;
        builder11.requestInterceptor = requestInterceptor26;
        retrofit.RestAdapter.Builder builder28 = builder0.setRequestInterceptor(requestInterceptor26);
        builder28.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder31 = builder28.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.httpExecutor = executor33;
        retrofit.RestAdapter.Builder builder36 = builder32.setServer("hi!");
        retrofit.Profiler profiler37 = null;
        builder36.profiler = profiler37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder39.setLog(log44);
        retrofit.RestAdapter restAdapter46 = builder39.build();
        retrofit.converter.Converter converter47 = null;
        builder39.converter = converter47;
        retrofit.ErrorHandler errorHandler49 = null;
        builder39.errorHandler = errorHandler49;
        retrofit.RequestInterceptor requestInterceptor51 = builder39.requestInterceptor;
        builder36.requestInterceptor = requestInterceptor51;
        builder31.requestInterceptor = requestInterceptor51;
        retrofit.Profiler profiler54 = null;
        builder31.profiler = profiler54;
        java.util.concurrent.Executor executor56 = builder31.httpExecutor;
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(executor56);
    }

    @Test
    public void test11714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11714");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder0.requestInterceptor = requestInterceptor20;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor23 = restAdapter22.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        restAdapter22.requestInterceptor = requestInterceptor24;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter26.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        restAdapter26.requestInterceptor = requestInterceptor28;
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel39);
        restAdapter26.log = log38;
        retrofit.ErrorHandler errorHandler42 = null;
        restAdapter26.errorHandler = errorHandler42;
        retrofit.converter.Converter converter44 = null;
        restAdapter26.converter = converter44;
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor55 = restAdapter54.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        restAdapter54.requestInterceptor = requestInterceptor56;
        retrofit.Server server58 = null;
        retrofit.client.Client.Provider provider59 = null;
        java.util.concurrent.Executor executor60 = null;
        java.util.concurrent.Executor executor61 = null;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        retrofit.converter.Converter converter63 = null;
        retrofit.Profiler profiler64 = null;
        retrofit.ErrorHandler errorHandler65 = null;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server58, provider59, executor60, executor61, requestInterceptor62, converter63, profiler64, errorHandler65, log66, logLevel67);
        restAdapter54.log = log66;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean71 = logLevel70.log();
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log66, logLevel70);
        restAdapter26.logLevel = logLevel70;
        restAdapter22.logLevel = logLevel70;
        retrofit.Profiler profiler75 = restAdapter22.profiler;
        retrofit.RequestInterceptor requestInterceptor76 = null;
        restAdapter22.requestInterceptor = requestInterceptor76;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor79 = null;
        builder78.httpExecutor = executor79;
        retrofit.RestAdapter.Builder builder82 = builder78.setServer("hi!");
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder84 = builder78.setLog(log83);
        retrofit.RestAdapter restAdapter85 = builder78.build();
        java.util.concurrent.Executor executor86 = restAdapter85.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler87 = restAdapter85.new RestHandler();
        retrofit.converter.Converter converter88 = restAdapter85.converter;
        restAdapter22.converter = converter88;
        builder0.converter = converter88;
        builder0.ensureSaneDefaults();
        retrofit.Profiler profiler92 = builder0.profiler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(profiler75);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(restAdapter85);
        org.junit.Assert.assertNotNull(executor86);
        org.junit.Assert.assertNotNull(converter88);
        org.junit.Assert.assertNull(profiler92);
    }

    @Test
    public void test11715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11715");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor6 = null;
        restAdapter0.requestInterceptor = requestInterceptor6;
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider9 = restAdapter0.clientProvider;
        java.util.concurrent.Executor executor10 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor11 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor12 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(executor12);
    }

    @Test
    public void test11716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11716");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder0.logLevel = logLevel5;
        retrofit.converter.Converter converter7 = null;
        builder0.converter = converter7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter10 = builder9.converter;
        retrofit.Profiler profiler11 = null;
        builder9.profiler = profiler11;
        retrofit.RestAdapter.Builder builder14 = builder9.setServer("Retrofit-Idle");
        retrofit.Profiler profiler15 = builder14.profiler;
        retrofit.Server server16 = builder14.server;
        retrofit.RestAdapter.Builder builder17 = builder0.setServer(server16);
        retrofit.RequestInterceptor requestInterceptor18 = builder0.requestInterceptor;
        java.lang.Class<?> wildcardClass19 = builder0.getClass();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNotNull(server16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test11717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11717");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log4 = restAdapter3.log;
        retrofit.ErrorHandler errorHandler5 = restAdapter3.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter3.new RestHandler();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.Profiler profiler12 = null;
        builder11.profiler = profiler12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder14.setLog(log19);
        retrofit.RestAdapter restAdapter21 = builder14.build();
        retrofit.converter.Converter converter22 = null;
        builder14.converter = converter22;
        retrofit.ErrorHandler errorHandler24 = null;
        builder14.errorHandler = errorHandler24;
        retrofit.RequestInterceptor requestInterceptor26 = builder14.requestInterceptor;
        builder11.requestInterceptor = requestInterceptor26;
        restAdapter3.requestInterceptor = requestInterceptor26;
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter3.requestInterceptor;
        restAdapter0.requestInterceptor = requestInterceptor29;
        retrofit.Server server31 = restAdapter0.server;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter32.requestInterceptor;
        java.util.concurrent.Executor executor34 = restAdapter32.callbackExecutor;
        retrofit.converter.Converter converter35 = null;
        restAdapter32.converter = converter35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter38 = builder37.converter;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor40 = restAdapter39.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        restAdapter39.requestInterceptor = requestInterceptor41;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel52);
        restAdapter39.log = log51;
        retrofit.ErrorHandler errorHandler55 = null;
        restAdapter39.errorHandler = errorHandler55;
        retrofit.RestAdapter.Log log57 = restAdapter39.log;
        retrofit.RestAdapter.Builder builder58 = builder37.setLog(log57);
        restAdapter32.log = log57;
        retrofit.RestAdapter.Log log60 = restAdapter32.log;
        retrofit.RestAdapter.Log log61 = restAdapter32.log;
        log61.log("hi!");
        log61.log("hi!");
        log61.log("");
        restAdapter0.log = log61;
        retrofit.RequestInterceptor requestInterceptor69 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(requestInterceptor29);
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(converter38);
        org.junit.Assert.assertNull(requestInterceptor40);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(requestInterceptor69);
    }

    @Test
    public void test11718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11718");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.client.Client.Provider provider5 = restAdapter0.clientProvider;
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        retrofit.Profiler profiler7 = null;
        restAdapter0.profiler = profiler7;
        retrofit.ErrorHandler errorHandler9 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = null;
        restAdapter11.httpExecutor = executor12;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        restAdapter11.requestInterceptor = requestInterceptor14;
        retrofit.RestAdapter.Log log16 = restAdapter11.log;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter11.logLevel = logLevel17;
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter11.logLevel;
        java.util.concurrent.Executor executor20 = restAdapter11.callbackExecutor;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log22 = restAdapter21.log;
        java.util.concurrent.Executor executor23 = restAdapter21.callbackExecutor;
        retrofit.Profiler profiler24 = restAdapter21.profiler;
        retrofit.Profiler profiler25 = null;
        restAdapter21.profiler = profiler25;
        retrofit.converter.Converter converter27 = restAdapter21.converter;
        java.util.concurrent.Executor executor28 = restAdapter21.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter21.logLevel;
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.httpExecutor = executor32;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        builder31.requestInterceptor = requestInterceptor34;
        retrofit.RequestInterceptor requestInterceptor36 = builder31.requestInterceptor;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.httpExecutor = executor38;
        retrofit.RestAdapter.Builder builder41 = builder37.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder37.logLevel = logLevel42;
        retrofit.converter.Converter converter44 = null;
        builder37.converter = converter44;
        retrofit.client.Client.Provider provider46 = null;
        builder37.clientProvider = provider46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter49 = builder48.converter;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor51 = restAdapter50.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        restAdapter50.requestInterceptor = requestInterceptor52;
        retrofit.Server server54 = null;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log62, logLevel63);
        restAdapter50.log = log62;
        retrofit.ErrorHandler errorHandler66 = null;
        restAdapter50.errorHandler = errorHandler66;
        retrofit.RestAdapter.Log log68 = restAdapter50.log;
        retrofit.RestAdapter.Builder builder69 = builder48.setLog(log68);
        builder48.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor72 = null;
        builder71.httpExecutor = executor72;
        retrofit.RestAdapter.Builder builder75 = builder71.setServer("hi!");
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder77 = builder71.setLog(log76);
        retrofit.RestAdapter restAdapter78 = builder71.build();
        java.util.concurrent.Executor executor79 = restAdapter78.httpExecutor;
        builder48.callbackExecutor = executor79;
        builder37.httpExecutor = executor79;
        builder31.httpExecutor = executor79;
        restAdapter21.httpExecutor = executor79;
        java.util.concurrent.Executor executor84 = restAdapter21.httpExecutor;
        restAdapter11.callbackExecutor = executor84;
        restAdapter0.callbackExecutor = executor84;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(profiler24);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter49);
        org.junit.Assert.assertNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(restAdapter78);
        org.junit.Assert.assertNotNull(executor79);
        org.junit.Assert.assertNotNull(executor84);
    }

    @Test
    public void test11719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11719");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.httpExecutor = executor9;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder8.setLog(log13);
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter15.logLevel = logLevel17;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter15.requestInterceptor = requestInterceptor19;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter15.logLevel = logLevel21;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log13, logLevel21);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder30 = builder24.setLog(log29);
        restAdapter23.log = log29;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter23.errorHandler = errorHandler32;
        retrofit.ErrorHandler errorHandler34 = null;
        restAdapter23.errorHandler = errorHandler34;
        java.util.concurrent.Executor executor36 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter38 = builder37.converter;
        retrofit.Profiler profiler39 = null;
        builder37.profiler = profiler39;
        retrofit.RestAdapter.Log log41 = builder37.log;
        builder37.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor43 = null;
        builder37.requestInterceptor = requestInterceptor43;
        retrofit.ErrorHandler errorHandler45 = null;
        builder37.errorHandler = errorHandler45;
        retrofit.converter.Converter converter47 = builder37.converter;
        retrofit.Server server48 = null;
        builder37.server = server48;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log51 = restAdapter50.log;
        retrofit.ErrorHandler errorHandler52 = restAdapter50.errorHandler;
        retrofit.converter.Converter converter53 = null;
        restAdapter50.converter = converter53;
        retrofit.RequestInterceptor requestInterceptor55 = restAdapter50.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor56 = restAdapter50.requestInterceptor;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor58 = builder57.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor59 = builder57.requestInterceptor;
        retrofit.ErrorHandler errorHandler60 = null;
        builder57.errorHandler = errorHandler60;
        retrofit.converter.Converter converter62 = null;
        builder57.converter = converter62;
        retrofit.ErrorHandler errorHandler64 = null;
        builder57.errorHandler = errorHandler64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = null;
        builder66.httpExecutor = executor67;
        retrofit.RestAdapter.Builder builder70 = builder66.setServer("hi!");
        retrofit.Profiler profiler71 = null;
        builder70.profiler = profiler71;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        builder70.requestInterceptor = requestInterceptor73;
        retrofit.RestAdapter restAdapter75 = builder70.build();
        retrofit.converter.Converter converter76 = restAdapter75.converter;
        retrofit.RestAdapter.Builder builder77 = builder57.setConverter(converter76);
        restAdapter50.converter = converter76;
        retrofit.RestAdapter.Builder builder79 = builder37.setConverter(converter76);
        restAdapter23.converter = converter76;
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor82 = null;
        builder81.httpExecutor = executor82;
        retrofit.RestAdapter.Builder builder85 = builder81.setServer("hi!");
        retrofit.RestAdapter restAdapter86 = builder85.build();
        retrofit.RestAdapter.LogLevel logLevel87 = null;
        restAdapter86.logLevel = logLevel87;
        retrofit.client.Client.Provider provider89 = restAdapter86.clientProvider;
        retrofit.converter.Converter converter90 = restAdapter86.converter;
        restAdapter23.converter = converter90;
        retrofit.client.Client.Provider provider92 = null;
        restAdapter23.clientProvider = provider92;
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(converter38);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertNotNull(converter47);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNull(requestInterceptor55);
        org.junit.Assert.assertNull(requestInterceptor56);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNull(requestInterceptor59);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(restAdapter75);
        org.junit.Assert.assertNotNull(converter76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertNotNull(provider89);
        org.junit.Assert.assertNotNull(converter90);
    }

    @Test
    public void test11720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11720");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter21 = builder20.converter;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor23 = restAdapter22.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        restAdapter22.requestInterceptor = requestInterceptor24;
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log34, logLevel35);
        restAdapter22.log = log34;
        retrofit.ErrorHandler errorHandler38 = null;
        restAdapter22.errorHandler = errorHandler38;
        retrofit.RestAdapter.Log log40 = restAdapter22.log;
        retrofit.RestAdapter.Builder builder41 = builder20.setLog(log40);
        retrofit.RequestInterceptor requestInterceptor42 = builder20.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor43 = builder20.requestInterceptor;
        retrofit.RestAdapter.Builder builder45 = builder20.setServer("hi!");
        retrofit.Server server46 = builder20.server;
        restAdapter2.server = server46;
        builder0.server = server46;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Log log50 = builder0.log;
        retrofit.ErrorHandler errorHandler51 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = null;
        builder52.httpExecutor = executor53;
        retrofit.client.Client.Provider provider55 = null;
        builder52.clientProvider = provider55;
        retrofit.client.Client.Provider provider57 = builder52.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder59 = builder52.setLogLevel(logLevel58);
        retrofit.client.Client.Provider provider60 = builder52.clientProvider;
        retrofit.Profiler profiler61 = builder52.profiler;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor63 = restAdapter62.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        restAdapter62.requestInterceptor = requestInterceptor64;
        retrofit.Server server66 = null;
        retrofit.client.Client.Provider provider67 = null;
        java.util.concurrent.Executor executor68 = null;
        java.util.concurrent.Executor executor69 = null;
        retrofit.RequestInterceptor requestInterceptor70 = null;
        retrofit.converter.Converter converter71 = null;
        retrofit.Profiler profiler72 = null;
        retrofit.ErrorHandler errorHandler73 = null;
        retrofit.RestAdapter.Log log74 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server66, provider67, executor68, executor69, requestInterceptor70, converter71, profiler72, errorHandler73, log74, logLevel75);
        restAdapter62.log = log74;
        retrofit.ErrorHandler errorHandler78 = null;
        restAdapter62.errorHandler = errorHandler78;
        java.util.concurrent.Executor executor80 = null;
        restAdapter62.callbackExecutor = executor80;
        retrofit.RestAdapter.Log log82 = restAdapter62.log;
        retrofit.RestAdapter.Builder builder83 = builder52.setLog(log82);
        log82.log("Retrofit-Idle");
        builder0.log = log82;
        retrofit.RestAdapter.Log log87 = builder0.log;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(requestInterceptor42);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(server46);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(errorHandler51);
        org.junit.Assert.assertNull(provider57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(provider60);
        org.junit.Assert.assertNull(profiler61);
        org.junit.Assert.assertNull(requestInterceptor63);
        org.junit.Assert.assertNotNull(log74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(log87);
    }

    @Test
    public void test11721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11721");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = null;
        builder5.httpExecutor = executor6;
        retrofit.RestAdapter.Builder builder9 = builder5.setServer("hi!");
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder5.setLog(log10);
        retrofit.RestAdapter restAdapter12 = builder5.build();
        java.util.concurrent.Executor executor13 = restAdapter12.httpExecutor;
        retrofit.client.Client.Provider provider14 = null;
        restAdapter12.clientProvider = provider14;
        retrofit.Profiler profiler16 = restAdapter12.profiler;
        retrofit.Server server17 = restAdapter12.server;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter12.logLevel;
        java.util.concurrent.Executor executor19 = restAdapter12.httpExecutor;
        restAdapter0.httpExecutor = executor19;
        retrofit.Profiler profiler21 = null;
        restAdapter0.profiler = profiler21;
        retrofit.client.Client.Provider provider23 = restAdapter0.clientProvider;
        java.lang.Throwable throwable24 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable24, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter12);
        org.junit.Assert.assertNotNull(executor13);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertNull(provider23);
    }

    @Test
    public void test11722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11722");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.converter.Converter converter5 = null;
        restAdapter2.converter = converter5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Log log27 = restAdapter9.log;
        retrofit.RestAdapter.Builder builder28 = builder7.setLog(log27);
        restAdapter2.log = log27;
        log27.log("");
        log27.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder34 = builder0.setLog(log27);
        retrofit.Profiler profiler35 = null;
        builder0.profiler = profiler35;
        retrofit.Profiler profiler37 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder38 = builder0.setProfiler(profiler37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test11723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11723");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.Profiler profiler5 = builder0.profiler;
        java.util.concurrent.Executor executor6 = builder0.httpExecutor;
        retrofit.converter.Converter converter7 = builder0.converter;
        java.util.concurrent.Executor executor8 = builder0.httpExecutor;
        retrofit.converter.Converter converter9 = builder0.converter;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter11.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter11.logLevel = logLevel13;
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter11.logLevel;
        retrofit.Server server16 = restAdapter11.server;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.httpExecutor = executor18;
        retrofit.RestAdapter.Builder builder21 = builder17.setServer("hi!");
        retrofit.client.Client.Provider provider22 = builder21.clientProvider;
        builder21.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log25 = restAdapter24.log;
        retrofit.ErrorHandler errorHandler26 = restAdapter24.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("hi!");
        retrofit.Profiler profiler33 = null;
        builder32.profiler = profiler33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.httpExecutor = executor36;
        retrofit.RestAdapter.Builder builder39 = builder35.setServer("hi!");
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder35.setLog(log40);
        retrofit.RestAdapter restAdapter42 = builder35.build();
        retrofit.converter.Converter converter43 = null;
        builder35.converter = converter43;
        retrofit.ErrorHandler errorHandler45 = null;
        builder35.errorHandler = errorHandler45;
        retrofit.RequestInterceptor requestInterceptor47 = builder35.requestInterceptor;
        builder32.requestInterceptor = requestInterceptor47;
        restAdapter24.requestInterceptor = requestInterceptor47;
        retrofit.RestAdapter.Builder builder50 = builder21.setRequestInterceptor(requestInterceptor47);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter52 = builder51.converter;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor54 = restAdapter53.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        restAdapter53.requestInterceptor = requestInterceptor55;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel66);
        restAdapter53.log = log65;
        retrofit.ErrorHandler errorHandler69 = null;
        restAdapter53.errorHandler = errorHandler69;
        retrofit.RestAdapter.Log log71 = restAdapter53.log;
        retrofit.RestAdapter.Builder builder72 = builder51.setLog(log71);
        retrofit.Profiler profiler73 = builder72.profiler;
        retrofit.Profiler profiler74 = builder72.profiler;
        java.util.concurrent.Executor executor75 = builder72.callbackExecutor;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor77 = null;
        builder76.httpExecutor = executor77;
        retrofit.RestAdapter.Builder builder80 = builder76.setServer("hi!");
        retrofit.client.Client.Provider provider81 = builder80.clientProvider;
        builder80.ensureSaneDefaults();
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        log83.log("");
        builder80.log = log83;
        retrofit.Server server87 = builder80.server;
        builder72.server = server87;
        retrofit.RestAdapter.Builder builder89 = builder50.setServer(server87);
        java.util.concurrent.Executor executor90 = builder89.callbackExecutor;
        restAdapter11.httpExecutor = executor90;
        builder0.callbackExecutor = executor90;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(provider22);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(restAdapter42);
        org.junit.Assert.assertNotNull(requestInterceptor47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(converter52);
        org.junit.Assert.assertNull(requestInterceptor54);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(profiler73);
        org.junit.Assert.assertNull(profiler74);
        org.junit.Assert.assertNull(executor75);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(provider81);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(server87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(executor90);
    }

    @Test
    public void test11724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11724");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter3.requestInterceptor;
        retrofit.converter.Converter converter5 = restAdapter3.converter;
        java.util.concurrent.Executor executor6 = null;
        restAdapter3.callbackExecutor = executor6;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter3.logLevel = logLevel8;
        restAdapter0.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        java.util.concurrent.Executor executor16 = null;
        builder11.httpExecutor = executor16;
        retrofit.RestAdapter restAdapter18 = builder11.build();
        retrofit.converter.Converter converter19 = restAdapter18.converter;
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter18.requestInterceptor;
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        restAdapter0.log = log21;
        log21.log("hi!");
        log21.log("Retrofit-Idle");
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(converter19);
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(log21);
    }

    @Test
    public void test11725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11725");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.Server server9 = null;
        builder0.server = server9;
        retrofit.Server server11 = builder0.server;
        retrofit.converter.Converter converter12 = builder0.converter;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter15 = builder14.converter;
        retrofit.Profiler profiler16 = null;
        builder14.profiler = profiler16;
        retrofit.ErrorHandler errorHandler18 = null;
        builder14.errorHandler = errorHandler18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter21 = builder20.converter;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor23 = restAdapter22.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        restAdapter22.requestInterceptor = requestInterceptor24;
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log34, logLevel35);
        restAdapter22.log = log34;
        retrofit.ErrorHandler errorHandler38 = null;
        restAdapter22.errorHandler = errorHandler38;
        retrofit.RestAdapter.Log log40 = restAdapter22.log;
        retrofit.RestAdapter.Builder builder41 = builder20.setLog(log40);
        retrofit.RestAdapter.Builder builder42 = builder14.setLog(log40);
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter43.logLevel = logLevel45;
        retrofit.RestAdapter.Builder builder47 = builder42.setLogLevel(logLevel45);
        retrofit.Server server48 = builder42.server;
        builder42.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = null;
        builder50.httpExecutor = executor51;
        retrofit.RestAdapter.Builder builder54 = builder50.setServer("hi!");
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder56 = builder50.setLog(log55);
        retrofit.Profiler profiler57 = null;
        builder56.profiler = profiler57;
        retrofit.RestAdapter.Log log59 = builder56.log;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter61 = builder60.converter;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor63 = restAdapter62.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        restAdapter62.requestInterceptor = requestInterceptor64;
        retrofit.Server server66 = null;
        retrofit.client.Client.Provider provider67 = null;
        java.util.concurrent.Executor executor68 = null;
        java.util.concurrent.Executor executor69 = null;
        retrofit.RequestInterceptor requestInterceptor70 = null;
        retrofit.converter.Converter converter71 = null;
        retrofit.Profiler profiler72 = null;
        retrofit.ErrorHandler errorHandler73 = null;
        retrofit.RestAdapter.Log log74 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server66, provider67, executor68, executor69, requestInterceptor70, converter71, profiler72, errorHandler73, log74, logLevel75);
        restAdapter62.log = log74;
        retrofit.ErrorHandler errorHandler78 = null;
        restAdapter62.errorHandler = errorHandler78;
        retrofit.RestAdapter.Log log80 = restAdapter62.log;
        retrofit.RestAdapter.Builder builder81 = builder60.setLog(log80);
        builder60.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder84 = builder60.setServer("Retrofit-Idle");
        retrofit.RequestInterceptor requestInterceptor85 = builder60.requestInterceptor;
        builder56.requestInterceptor = requestInterceptor85;
        retrofit.RestAdapter.Builder builder87 = builder42.setRequestInterceptor(requestInterceptor85);
        builder0.requestInterceptor = requestInterceptor85;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(server48);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNull(converter61);
        org.junit.Assert.assertNull(requestInterceptor63);
        org.junit.Assert.assertNotNull(log74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(requestInterceptor85);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test11726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11726");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder0.logLevel = logLevel5;
        retrofit.converter.Converter converter7 = null;
        builder0.converter = converter7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter10 = builder9.converter;
        retrofit.Profiler profiler11 = null;
        builder9.profiler = profiler11;
        retrofit.RestAdapter.Builder builder14 = builder9.setServer("Retrofit-Idle");
        retrofit.Profiler profiler15 = builder14.profiler;
        retrofit.Server server16 = builder14.server;
        retrofit.RestAdapter.Builder builder17 = builder0.setServer(server16);
        retrofit.RestAdapter restAdapter18 = builder17.build();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.httpExecutor = executor20;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("hi!");
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder19.setLog(log24);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter27 = builder26.converter;
        retrofit.RestAdapter.LogLevel logLevel28 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder29 = builder25.setLogLevel(logLevel28);
        retrofit.RestAdapter.Builder builder31 = builder25.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.httpExecutor = executor33;
        retrofit.RestAdapter.Builder builder36 = builder32.setServer("hi!");
        retrofit.RestAdapter restAdapter37 = builder36.build();
        retrofit.client.Header[] headerArray40 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList41 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList41, headerArray40);
        retrofit.mime.TypedOutput typedOutput43 = null;
        retrofit.client.Request request44 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList41, typedOutput43);
        java.lang.String str45 = request44.getMethod();
        java.lang.String str46 = request44.getMethod();
        retrofit.client.Request request47 = restAdapter37.logAndReplaceRequest(request44);
        retrofit.converter.Converter converter48 = restAdapter37.converter;
        builder25.converter = converter48;
        restAdapter18.converter = converter48;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNotNull(server16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(restAdapter37);
        org.junit.Assert.assertNotNull(headerArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertNotNull(converter48);
    }

    @Test
    public void test11727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11727");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        restAdapter0.log = log12;
        retrofit.ErrorHandler errorHandler16 = null;
        restAdapter0.errorHandler = errorHandler16;
        java.util.concurrent.Executor executor18 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter20 = builder19.converter;
        retrofit.RestAdapter.LogLevel logLevel21 = builder19.logLevel;
        builder19.ensureSaneDefaults();
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.httpExecutor = executor32;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("hi!");
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder31.setLog(log36);
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter38.logLevel = logLevel40;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        restAdapter38.requestInterceptor = requestInterceptor42;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter38.logLevel = logLevel44;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log36, logLevel44);
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = null;
        builder47.httpExecutor = executor48;
        retrofit.RestAdapter.Builder builder51 = builder47.setServer("hi!");
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = builder47.setLog(log52);
        restAdapter46.log = log52;
        builder19.log = log52;
        java.util.concurrent.Executor executor56 = null;
        builder19.httpExecutor = executor56;
        retrofit.converter.Converter converter58 = null;
        builder19.converter = converter58;
        retrofit.ErrorHandler errorHandler60 = builder19.errorHandler;
        restAdapter0.errorHandler = errorHandler60;
        retrofit.ErrorHandler errorHandler62 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter63 = restAdapter0.converter;
        java.util.concurrent.Executor executor64 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(errorHandler60);
        org.junit.Assert.assertNotNull(errorHandler62);
        org.junit.Assert.assertNull(converter63);
        org.junit.Assert.assertNull(executor64);
    }

    @Test
    public void test11728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11728");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.client.Client.Provider provider10 = null;
        builder7.clientProvider = provider10;
        retrofit.client.Client.Provider provider12 = builder7.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.httpExecutor = executor16;
        retrofit.RestAdapter.Builder builder19 = builder15.setServer("hi!");
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        builder19.requestInterceptor = requestInterceptor22;
        retrofit.RestAdapter restAdapter24 = builder19.build();
        retrofit.converter.Converter converter25 = restAdapter24.converter;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        log26.log("");
        restAdapter24.log = log26;
        retrofit.RestAdapter.Builder builder30 = builder7.setLog(log26);
        retrofit.RestAdapter.Builder builder31 = builder5.setLog(log26);
        java.util.concurrent.Executor executor32 = builder31.httpExecutor;
        java.util.concurrent.Executor executor33 = builder31.callbackExecutor;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor35 = restAdapter34.requestInterceptor;
        retrofit.converter.Converter converter36 = restAdapter34.converter;
        java.util.concurrent.Executor executor37 = restAdapter34.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor38 = restAdapter34.requestInterceptor;
        retrofit.ErrorHandler errorHandler39 = restAdapter34.errorHandler;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter41 = builder40.converter;
        retrofit.RestAdapter.LogLevel logLevel42 = builder40.logLevel;
        builder40.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor44 = builder40.requestInterceptor;
        restAdapter34.requestInterceptor = requestInterceptor44;
        retrofit.RestAdapter.Builder builder46 = builder31.setRequestInterceptor(requestInterceptor44);
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(converter25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test11729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11729");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel11);
        retrofit.RestAdapter.Builder builder13 = builder0.setLogLevel(logLevel11);
        retrofit.RequestInterceptor requestInterceptor14 = builder13.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel15 = builder13.logLevel;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test11730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11730");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = null;
        builder5.httpExecutor = executor6;
        retrofit.RestAdapter.Builder builder9 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter10 = builder9.build();
        retrofit.client.Header[] headerArray13 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList14 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList14, headerArray13);
        retrofit.mime.TypedOutput typedOutput16 = null;
        retrofit.client.Request request17 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList14, typedOutput16);
        java.lang.String str18 = request17.getMethod();
        java.lang.String str19 = request17.getMethod();
        retrofit.client.Request request20 = restAdapter10.logAndReplaceRequest(request17);
        retrofit.converter.Converter converter21 = restAdapter10.converter;
        restAdapter0.converter = converter21;
        retrofit.Profiler profiler23 = null;
        restAdapter0.profiler = profiler23;
        retrofit.Server server25 = restAdapter0.server;
        retrofit.RestAdapter.Log log26 = restAdapter0.log;
        retrofit.client.Client.Provider provider27 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNotNull(headerArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(converter21);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertNull(provider27);
    }

    @Test
    public void test11731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11731");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("Retrofit-Idle");
        retrofit.Profiler profiler6 = builder5.profiler;
        retrofit.client.Client.Provider provider7 = builder5.clientProvider;
        retrofit.converter.Converter converter8 = builder5.converter;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNull(converter8);
    }

    @Test
    public void test11732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11732");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.client.Client.Provider provider10 = null;
        builder7.clientProvider = provider10;
        retrofit.client.Client.Provider provider12 = builder7.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.httpExecutor = executor16;
        retrofit.RestAdapter.Builder builder19 = builder15.setServer("hi!");
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        builder19.requestInterceptor = requestInterceptor22;
        retrofit.RestAdapter restAdapter24 = builder19.build();
        retrofit.converter.Converter converter25 = restAdapter24.converter;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        log26.log("");
        restAdapter24.log = log26;
        retrofit.RestAdapter.Builder builder30 = builder7.setLog(log26);
        retrofit.RestAdapter.Builder builder31 = builder5.setLog(log26);
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter33 = builder32.converter;
        retrofit.RestAdapter.LogLevel logLevel34 = builder32.logLevel;
        builder32.ensureSaneDefaults();
        retrofit.client.Client.Provider provider36 = null;
        builder32.clientProvider = provider36;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder46.setLog(log51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter53.logLevel = logLevel55;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        restAdapter53.requestInterceptor = requestInterceptor57;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter53.logLevel = logLevel59;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log51, logLevel59);
        builder32.logLevel = logLevel59;
        retrofit.RestAdapter.LogLevel logLevel63 = builder32.logLevel;
        retrofit.RestAdapter.Builder builder64 = builder5.setLogLevel(logLevel63);
        retrofit.ErrorHandler errorHandler65 = builder64.errorHandler;
        retrofit.Profiler profiler66 = builder64.profiler;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(converter25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(converter33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNull(profiler66);
    }

    @Test
    public void test11733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11733");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RestAdapter.Log log2 = builder0.log;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        builder0.requestInterceptor = requestInterceptor3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter6 = null;
        builder5.converter = converter6;
        retrofit.client.Client.Provider provider8 = null;
        builder5.clientProvider = provider8;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        builder5.requestInterceptor = requestInterceptor10;
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        java.util.concurrent.Executor executor18 = null;
        builder13.httpExecutor = executor18;
        retrofit.RestAdapter restAdapter20 = builder13.build();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter22 = builder21.converter;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor24 = restAdapter23.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter23.requestInterceptor = requestInterceptor25;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel36);
        restAdapter23.log = log35;
        retrofit.ErrorHandler errorHandler39 = null;
        restAdapter23.errorHandler = errorHandler39;
        retrofit.RestAdapter.Log log41 = restAdapter23.log;
        retrofit.RestAdapter.Builder builder42 = builder21.setLog(log41);
        retrofit.Profiler profiler43 = builder42.profiler;
        retrofit.Profiler profiler44 = builder42.profiler;
        java.util.concurrent.Executor executor45 = builder42.callbackExecutor;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder46.setLog(log51);
        retrofit.RestAdapter restAdapter53 = builder46.build();
        java.util.concurrent.Executor executor54 = restAdapter53.httpExecutor;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.httpExecutor = executor56;
        retrofit.client.Client.Provider provider58 = null;
        builder55.clientProvider = provider58;
        retrofit.RestAdapter.Builder builder61 = builder55.setServer("hi!");
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.httpExecutor = executor63;
        retrofit.RestAdapter.Builder builder66 = builder62.setServer("hi!");
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder68 = builder62.setLog(log67);
        retrofit.RestAdapter restAdapter69 = builder62.build();
        java.util.concurrent.Executor executor70 = restAdapter69.httpExecutor;
        builder61.callbackExecutor = executor70;
        retrofit.RestAdapter.Builder builder72 = builder42.setExecutors(executor54, executor70);
        restAdapter20.httpExecutor = executor54;
        retrofit.Server server74 = null;
        retrofit.client.Client.Provider provider75 = null;
        java.util.concurrent.Executor executor76 = null;
        java.util.concurrent.Executor executor77 = null;
        retrofit.RequestInterceptor requestInterceptor78 = null;
        retrofit.converter.Converter converter79 = null;
        retrofit.Profiler profiler80 = null;
        retrofit.ErrorHandler errorHandler81 = null;
        retrofit.RestAdapter.Log log82 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter(server74, provider75, executor76, executor77, requestInterceptor78, converter79, profiler80, errorHandler81, log82, logLevel83);
        restAdapter20.logLevel = logLevel83;
        retrofit.ErrorHandler errorHandler86 = restAdapter20.errorHandler;
        retrofit.RestAdapter.Log log87 = restAdapter20.log;
        builder5.log = log87;
        retrofit.RestAdapter.Builder builder89 = builder0.setLog(log87);
        log87.log("hi!");
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(profiler43);
        org.junit.Assert.assertNull(profiler44);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(executor54);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(restAdapter69);
        org.junit.Assert.assertNotNull(executor70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(errorHandler86);
        org.junit.Assert.assertNotNull(log87);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test11734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11734");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder14.setLog(log19);
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter21.logLevel = logLevel23;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter21.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter21.logLevel = logLevel27;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log19, logLevel27);
        builder0.logLevel = logLevel27;
        retrofit.client.Client.Provider provider31 = null;
        builder0.clientProvider = provider31;
        retrofit.converter.Converter converter33 = builder0.converter;
        retrofit.client.Client.Provider provider34 = builder0.clientProvider;
        retrofit.Server server35 = builder0.server;
        retrofit.ErrorHandler errorHandler36 = builder0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel37 = builder0.logLevel;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(converter33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test11735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11735");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        restAdapter0.log = log12;
        retrofit.ErrorHandler errorHandler16 = null;
        restAdapter0.errorHandler = errorHandler16;
        retrofit.converter.Converter converter18 = null;
        restAdapter0.converter = converter18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = builder20.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor22 = builder20.requestInterceptor;
        retrofit.ErrorHandler errorHandler23 = null;
        builder20.errorHandler = errorHandler23;
        retrofit.converter.Converter converter25 = null;
        builder20.converter = converter25;
        retrofit.ErrorHandler errorHandler27 = null;
        builder20.errorHandler = errorHandler27;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor30 = restAdapter29.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        restAdapter29.requestInterceptor = requestInterceptor31;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        restAdapter29.log = log41;
        retrofit.ErrorHandler errorHandler45 = null;
        restAdapter29.errorHandler = errorHandler45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter48 = builder47.converter;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor50 = restAdapter49.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        restAdapter49.requestInterceptor = requestInterceptor51;
        retrofit.Server server53 = null;
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server53, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log61, logLevel62);
        restAdapter49.log = log61;
        retrofit.ErrorHandler errorHandler65 = null;
        restAdapter49.errorHandler = errorHandler65;
        retrofit.RestAdapter.Log log67 = restAdapter49.log;
        retrofit.RestAdapter.Builder builder68 = builder47.setLog(log67);
        retrofit.RequestInterceptor requestInterceptor69 = builder47.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor70 = builder47.requestInterceptor;
        retrofit.RestAdapter.Builder builder72 = builder47.setServer("hi!");
        retrofit.Server server73 = builder47.server;
        restAdapter29.server = server73;
        retrofit.RestAdapter.Builder builder75 = builder20.setServer(server73);
        restAdapter0.server = server73;
        retrofit.client.Client.Provider provider77 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor79 = null;
        builder78.httpExecutor = executor79;
        retrofit.RestAdapter.Builder builder82 = builder78.setServer("hi!");
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder84 = builder78.setLog(log83);
        retrofit.RestAdapter restAdapter85 = builder78.build();
        retrofit.converter.Converter converter86 = null;
        builder78.converter = converter86;
        java.util.concurrent.Executor executor88 = builder78.httpExecutor;
        restAdapter0.httpExecutor = executor88;
        retrofit.RestAdapter.LogLevel logLevel90 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter48);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(requestInterceptor69);
        org.junit.Assert.assertNull(requestInterceptor70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(server73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(provider77);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(restAdapter85);
        org.junit.Assert.assertNotNull(executor88);
        org.junit.Assert.assertNull(logLevel90);
    }

    @Test
    public void test11736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11736");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.Server server5 = restAdapter0.server;
        java.util.concurrent.Executor executor6 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter7.logLevel = logLevel9;
        retrofit.Profiler profiler11 = restAdapter7.profiler;
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter7.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter7.requestInterceptor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log15 = restAdapter14.log;
        java.util.concurrent.Executor executor16 = restAdapter14.callbackExecutor;
        retrofit.Profiler profiler17 = restAdapter14.profiler;
        retrofit.Profiler profiler18 = null;
        restAdapter14.profiler = profiler18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        restAdapter14.log = log28;
        restAdapter7.log = log28;
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = builder34.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor36 = builder34.requestInterceptor;
        retrofit.Profiler profiler37 = builder34.profiler;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.RestAdapter.Log log40 = builder38.log;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter42 = builder41.converter;
        retrofit.RestAdapter.LogLevel logLevel43 = builder41.logLevel;
        builder41.ensureSaneDefaults();
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor54 = null;
        builder53.httpExecutor = executor54;
        retrofit.RestAdapter.Builder builder57 = builder53.setServer("hi!");
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder59 = builder53.setLog(log58);
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter60.logLevel = logLevel62;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        restAdapter60.requestInterceptor = requestInterceptor64;
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter60.logLevel = logLevel66;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log58, logLevel66);
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = null;
        builder69.httpExecutor = executor70;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("hi!");
        retrofit.RestAdapter.Log log74 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder75 = builder69.setLog(log74);
        restAdapter68.log = log74;
        builder41.log = log74;
        java.util.concurrent.Executor executor78 = null;
        builder41.httpExecutor = executor78;
        retrofit.converter.Converter converter80 = null;
        builder41.converter = converter80;
        retrofit.ErrorHandler errorHandler82 = builder41.errorHandler;
        retrofit.RestAdapter.Builder builder83 = builder38.setErrorHandler(errorHandler82);
        retrofit.RestAdapter.Builder builder84 = builder34.setErrorHandler(errorHandler82);
        restAdapter7.errorHandler = errorHandler82;
        restAdapter0.errorHandler = errorHandler82;
        retrofit.RequestInterceptor requestInterceptor87 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(requestInterceptor36);
        org.junit.Assert.assertNull(profiler37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(log40);
        org.junit.Assert.assertNull(converter42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(log74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(errorHandler82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(requestInterceptor87);
    }

    @Test
    public void test11737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11737");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.Profiler profiler23 = builder21.profiler;
        java.util.concurrent.Executor executor24 = builder21.callbackExecutor;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.client.Client.Provider provider30 = builder29.clientProvider;
        builder29.ensureSaneDefaults();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        log32.log("");
        builder29.log = log32;
        retrofit.Server server36 = builder29.server;
        builder21.server = server36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter39 = builder38.converter;
        retrofit.Profiler profiler40 = null;
        builder38.profiler = profiler40;
        retrofit.RestAdapter.Log log42 = builder38.log;
        builder38.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor44 = null;
        builder38.requestInterceptor = requestInterceptor44;
        retrofit.ErrorHandler errorHandler46 = null;
        builder38.errorHandler = errorHandler46;
        retrofit.client.Client.Provider provider48 = builder38.clientProvider;
        builder21.clientProvider = provider48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter51 = builder50.converter;
        retrofit.Profiler profiler52 = null;
        builder50.profiler = profiler52;
        retrofit.RestAdapter.Log log54 = builder50.log;
        builder50.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor56 = null;
        builder50.requestInterceptor = requestInterceptor56;
        retrofit.ErrorHandler errorHandler58 = null;
        builder50.errorHandler = errorHandler58;
        retrofit.converter.Converter converter60 = builder50.converter;
        retrofit.Server server61 = null;
        builder50.server = server61;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log64 = restAdapter63.log;
        retrofit.ErrorHandler errorHandler65 = restAdapter63.errorHandler;
        retrofit.converter.Converter converter66 = null;
        restAdapter63.converter = converter66;
        retrofit.RequestInterceptor requestInterceptor68 = restAdapter63.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor69 = restAdapter63.requestInterceptor;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor71 = builder70.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor72 = builder70.requestInterceptor;
        retrofit.ErrorHandler errorHandler73 = null;
        builder70.errorHandler = errorHandler73;
        retrofit.converter.Converter converter75 = null;
        builder70.converter = converter75;
        retrofit.ErrorHandler errorHandler77 = null;
        builder70.errorHandler = errorHandler77;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor80 = null;
        builder79.httpExecutor = executor80;
        retrofit.RestAdapter.Builder builder83 = builder79.setServer("hi!");
        retrofit.Profiler profiler84 = null;
        builder83.profiler = profiler84;
        retrofit.RequestInterceptor requestInterceptor86 = null;
        builder83.requestInterceptor = requestInterceptor86;
        retrofit.RestAdapter restAdapter88 = builder83.build();
        retrofit.converter.Converter converter89 = restAdapter88.converter;
        retrofit.RestAdapter.Builder builder90 = builder70.setConverter(converter89);
        restAdapter63.converter = converter89;
        retrofit.RestAdapter.Builder builder92 = builder50.setConverter(converter89);
        builder21.converter = converter89;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(server36);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertNotNull(provider48);
        org.junit.Assert.assertNull(converter51);
        org.junit.Assert.assertNull(log54);
        org.junit.Assert.assertNotNull(converter60);
        org.junit.Assert.assertNull(log64);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNull(requestInterceptor68);
        org.junit.Assert.assertNull(requestInterceptor69);
        org.junit.Assert.assertNull(executor71);
        org.junit.Assert.assertNull(requestInterceptor72);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(restAdapter88);
        org.junit.Assert.assertNotNull(converter89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test11738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11738");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RestAdapter.LogLevel logLevel7 = builder4.logLevel;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter8.logLevel = logLevel10;
        retrofit.Profiler profiler12 = restAdapter8.profiler;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter8.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor14 = null;
        restAdapter8.requestInterceptor = requestInterceptor14;
        retrofit.Profiler profiler16 = null;
        restAdapter8.profiler = profiler16;
        retrofit.RestAdapter.Log log18 = restAdapter8.log;
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.Builder builder20 = builder4.setLogLevel(logLevel19);
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        java.util.concurrent.Executor executor22 = builder20.callbackExecutor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = builder23.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor25 = builder23.requestInterceptor;
        java.util.concurrent.Executor executor26 = builder23.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel27 = builder23.logLevel;
        retrofit.ErrorHandler errorHandler28 = builder23.errorHandler;
        java.util.concurrent.Executor executor29 = builder23.httpExecutor;
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel39);
        retrofit.RestAdapter.Builder builder41 = builder23.setLog(log38);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.httpExecutor = executor43;
        retrofit.client.Client.Provider provider45 = null;
        builder42.clientProvider = provider45;
        retrofit.client.Client.Provider provider47 = builder42.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder49 = builder42.setLogLevel(logLevel48);
        retrofit.client.Client.Provider provider50 = builder42.clientProvider;
        retrofit.Profiler profiler51 = builder42.profiler;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor53 = restAdapter52.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        restAdapter52.requestInterceptor = requestInterceptor54;
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel65);
        restAdapter52.log = log64;
        retrofit.ErrorHandler errorHandler68 = null;
        restAdapter52.errorHandler = errorHandler68;
        java.util.concurrent.Executor executor70 = null;
        restAdapter52.callbackExecutor = executor70;
        retrofit.RestAdapter.Log log72 = restAdapter52.log;
        retrofit.RestAdapter.Builder builder73 = builder42.setLog(log72);
        log72.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder76 = builder23.setLog(log72);
        retrofit.RestAdapter.Builder builder77 = builder20.setLog(log72);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(requestInterceptor25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(provider47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(provider50);
        org.junit.Assert.assertNull(profiler51);
        org.junit.Assert.assertNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test11739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11739");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder12.setLog(log17);
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter19.logLevel = logLevel21;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter19.requestInterceptor = requestInterceptor23;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter19.logLevel = logLevel25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log17, logLevel25);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("hi!");
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder28.setLog(log33);
        restAdapter27.log = log33;
        builder0.log = log33;
        java.util.concurrent.Executor executor37 = null;
        builder0.httpExecutor = executor37;
        retrofit.converter.Converter converter39 = null;
        builder0.converter = converter39;
        retrofit.RestAdapter.Builder builder42 = builder0.setServer("hi!");
        retrofit.converter.Converter converter43 = builder42.converter;
        java.util.concurrent.Executor executor44 = builder42.callbackExecutor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNotNull(executor44);
    }

    @Test
    public void test11740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11740");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        builder4.logLevel = logLevel6;
        retrofit.RestAdapter restAdapter9 = builder4.build();
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.converter.Converter converter13 = null;
        restAdapter10.converter = converter13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter16 = builder15.converter;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter17.requestInterceptor = requestInterceptor19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        restAdapter17.log = log29;
        retrofit.ErrorHandler errorHandler33 = null;
        restAdapter17.errorHandler = errorHandler33;
        retrofit.RestAdapter.Log log35 = restAdapter17.log;
        retrofit.RestAdapter.Builder builder36 = builder15.setLog(log35);
        restAdapter10.log = log35;
        retrofit.RestAdapter.Builder builder38 = builder4.setLog(log35);
        retrofit.RequestInterceptor requestInterceptor39 = null;
        builder38.requestInterceptor = requestInterceptor39;
        retrofit.Profiler profiler41 = null;
        builder38.profiler = profiler41;
        retrofit.RestAdapter.LogLevel logLevel43 = builder38.logLevel;
        retrofit.RestAdapter.LogLevel logLevel44 = builder38.logLevel;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.httpExecutor = executor46;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("hi!");
        retrofit.Profiler profiler50 = null;
        builder49.profiler = profiler50;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        builder49.requestInterceptor = requestInterceptor52;
        retrofit.RestAdapter restAdapter54 = builder49.build();
        retrofit.converter.Converter converter55 = null;
        builder49.converter = converter55;
        retrofit.RestAdapter.LogLevel logLevel57 = builder49.logLevel;
        retrofit.RequestInterceptor requestInterceptor58 = builder49.requestInterceptor;
        builder38.requestInterceptor = requestInterceptor58;
        retrofit.RestAdapter.LogLevel logLevel60 = builder38.logLevel;
        retrofit.Server server61 = builder38.server;
        retrofit.ErrorHandler errorHandler62 = builder38.errorHandler;
        java.util.concurrent.Executor executor63 = builder38.callbackExecutor;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor65 = null;
        builder64.httpExecutor = executor65;
        retrofit.RestAdapter.Builder builder68 = builder64.setServer("hi!");
        retrofit.client.Client.Provider provider69 = builder68.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean71 = logLevel70.log();
        builder68.logLevel = logLevel70;
        builder68.ensureSaneDefaults();
        retrofit.client.Client.Provider provider74 = builder68.clientProvider;
        retrofit.RestAdapter.Builder builder75 = builder38.setClient(provider74);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(restAdapter54);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor58);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(server61);
        org.junit.Assert.assertNotNull(errorHandler62);
        org.junit.Assert.assertNotNull(executor63);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(provider69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(provider74);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test11741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11741");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.Profiler profiler9 = builder0.profiler;
        retrofit.RestAdapter.Log log10 = builder0.log;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        restAdapter13.requestInterceptor = requestInterceptor15;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        restAdapter13.log = log25;
        retrofit.ErrorHandler errorHandler29 = null;
        restAdapter13.errorHandler = errorHandler29;
        retrofit.RestAdapter.Log log31 = restAdapter13.log;
        retrofit.RestAdapter.Builder builder32 = builder11.setLog(log31);
        retrofit.Server server33 = null;
        builder11.server = server33;
        retrofit.Profiler profiler35 = null;
        builder11.profiler = profiler35;
        retrofit.client.Client.Provider provider37 = builder11.clientProvider;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log39 = restAdapter38.log;
        retrofit.ErrorHandler errorHandler40 = restAdapter38.errorHandler;
        retrofit.converter.Converter converter41 = null;
        restAdapter38.converter = converter41;
        retrofit.RequestInterceptor requestInterceptor43 = restAdapter38.requestInterceptor;
        retrofit.ErrorHandler errorHandler44 = null;
        restAdapter38.errorHandler = errorHandler44;
        retrofit.Profiler profiler46 = null;
        restAdapter38.profiler = profiler46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.httpExecutor = executor49;
        retrofit.RestAdapter.Builder builder52 = builder48.setServer("hi!");
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder48.setLog(log53);
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter55.logLevel;
        retrofit.converter.Converter converter58 = null;
        restAdapter55.converter = converter58;
        retrofit.ErrorHandler errorHandler60 = restAdapter55.errorHandler;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter62 = null;
        builder61.converter = converter62;
        retrofit.client.Client.Provider provider64 = null;
        builder61.clientProvider = provider64;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        builder61.requestInterceptor = requestInterceptor66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor69 = null;
        builder68.httpExecutor = executor69;
        retrofit.RestAdapter.Builder builder72 = builder68.setServer("hi!");
        retrofit.Profiler profiler73 = null;
        builder72.profiler = profiler73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor76 = null;
        builder75.httpExecutor = executor76;
        retrofit.RestAdapter.Builder builder79 = builder75.setServer("hi!");
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder81 = builder75.setLog(log80);
        retrofit.RestAdapter restAdapter82 = builder75.build();
        retrofit.converter.Converter converter83 = null;
        builder75.converter = converter83;
        retrofit.ErrorHandler errorHandler85 = null;
        builder75.errorHandler = errorHandler85;
        retrofit.RequestInterceptor requestInterceptor87 = builder75.requestInterceptor;
        builder72.requestInterceptor = requestInterceptor87;
        retrofit.RestAdapter.Builder builder89 = builder61.setRequestInterceptor(requestInterceptor87);
        restAdapter55.requestInterceptor = requestInterceptor87;
        builder48.requestInterceptor = requestInterceptor87;
        retrofit.RequestInterceptor requestInterceptor92 = builder48.requestInterceptor;
        restAdapter38.requestInterceptor = requestInterceptor92;
        retrofit.RestAdapter.Builder builder94 = builder11.setRequestInterceptor(requestInterceptor92);
        builder0.requestInterceptor = requestInterceptor92;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertNull(errorHandler60);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(restAdapter82);
        org.junit.Assert.assertNotNull(requestInterceptor87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(requestInterceptor92);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test11742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11742");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.converter.Converter converter5 = null;
        builder0.converter = converter5;
        retrofit.client.Client.Provider provider7 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor8 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder15 = builder9.setLog(log14);
        retrofit.Profiler profiler16 = null;
        builder15.profiler = profiler16;
        retrofit.client.Client.Provider provider18 = builder15.clientProvider;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter19.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        restAdapter19.requestInterceptor = requestInterceptor21;
        java.util.concurrent.Executor executor23 = restAdapter19.httpExecutor;
        java.util.concurrent.Executor executor24 = restAdapter19.httpExecutor;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.Profiler profiler30 = null;
        builder29.profiler = profiler30;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        builder29.requestInterceptor = requestInterceptor32;
        retrofit.RestAdapter restAdapter34 = builder29.build();
        retrofit.converter.Converter converter35 = restAdapter34.converter;
        restAdapter19.converter = converter35;
        retrofit.RestAdapter.Builder builder37 = builder15.setConverter(converter35);
        builder0.converter = converter35;
        retrofit.converter.Converter converter39 = builder0.converter;
        retrofit.Profiler profiler40 = builder0.profiler;
        java.util.concurrent.Executor executor41 = builder0.callbackExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(restAdapter34);
        org.junit.Assert.assertNotNull(converter35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(converter39);
        org.junit.Assert.assertNull(profiler40);
        org.junit.Assert.assertNull(executor41);
    }

    @Test
    public void test11743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11743");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.Server server9 = null;
        builder0.server = server9;
        retrofit.converter.Converter converter11 = null;
        builder0.converter = converter11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = builder13.callbackExecutor;
        retrofit.RestAdapter.Log log15 = builder13.log;
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel33);
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter35.logLevel = logLevel37;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter35.setLogLevel(logLevel39);
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log32, logLevel39);
        retrofit.RestAdapter.Builder builder42 = builder13.setLogLevel(logLevel39);
        retrofit.ErrorHandler errorHandler43 = null;
        builder42.errorHandler = errorHandler43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = builder45.callbackExecutor;
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel56);
        retrofit.RestAdapter.Builder builder58 = builder45.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder59 = builder42.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder60 = builder0.setLogLevel(logLevel56);
        retrofit.RequestInterceptor requestInterceptor61 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel62 = builder0.logLevel;
        java.util.concurrent.Executor executor63 = builder0.callbackExecutor;
        retrofit.Profiler profiler64 = builder0.profiler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(requestInterceptor61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNull(profiler64);
    }

    @Test
    public void test11744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11744");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.ErrorHandler errorHandler7 = restAdapter0.errorHandler;
        retrofit.client.Client.Provider provider8 = restAdapter0.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter10.errorHandler = errorHandler26;
        retrofit.converter.Converter converter28 = null;
        restAdapter10.converter = converter28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = builder30.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor32 = builder30.requestInterceptor;
        retrofit.ErrorHandler errorHandler33 = null;
        builder30.errorHandler = errorHandler33;
        retrofit.converter.Converter converter35 = null;
        builder30.converter = converter35;
        retrofit.ErrorHandler errorHandler37 = null;
        builder30.errorHandler = errorHandler37;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor40 = restAdapter39.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        restAdapter39.requestInterceptor = requestInterceptor41;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel52);
        restAdapter39.log = log51;
        retrofit.ErrorHandler errorHandler55 = null;
        restAdapter39.errorHandler = errorHandler55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter58 = builder57.converter;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor60 = restAdapter59.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        restAdapter59.requestInterceptor = requestInterceptor61;
        retrofit.Server server63 = null;
        retrofit.client.Client.Provider provider64 = null;
        java.util.concurrent.Executor executor65 = null;
        java.util.concurrent.Executor executor66 = null;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        retrofit.converter.Converter converter68 = null;
        retrofit.Profiler profiler69 = null;
        retrofit.ErrorHandler errorHandler70 = null;
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server63, provider64, executor65, executor66, requestInterceptor67, converter68, profiler69, errorHandler70, log71, logLevel72);
        restAdapter59.log = log71;
        retrofit.ErrorHandler errorHandler75 = null;
        restAdapter59.errorHandler = errorHandler75;
        retrofit.RestAdapter.Log log77 = restAdapter59.log;
        retrofit.RestAdapter.Builder builder78 = builder57.setLog(log77);
        retrofit.RequestInterceptor requestInterceptor79 = builder57.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor80 = builder57.requestInterceptor;
        retrofit.RestAdapter.Builder builder82 = builder57.setServer("hi!");
        retrofit.Server server83 = builder57.server;
        restAdapter39.server = server83;
        retrofit.RestAdapter.Builder builder85 = builder30.setServer(server83);
        restAdapter10.server = server83;
        restAdapter0.server = server83;
        retrofit.RestAdapter.LogLevel logLevel88 = restAdapter0.logLevel;
        retrofit.RestAdapter.Log log89 = null;
        restAdapter0.log = log89;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(requestInterceptor32);
        org.junit.Assert.assertNull(requestInterceptor40);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter58);
        org.junit.Assert.assertNull(requestInterceptor60);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(requestInterceptor79);
        org.junit.Assert.assertNull(requestInterceptor80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(server83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNull(logLevel88);
    }

    @Test
    public void test11745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11745");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = restAdapter0.clientProvider;
        retrofit.client.Client.Provider provider4 = null;
        restAdapter0.clientProvider = provider4;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        retrofit.Profiler profiler7 = null;
        restAdapter0.profiler = profiler7;
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(logLevel6);
    }

    @Test
    public void test11746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11746");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.Profiler profiler5 = builder0.profiler;
        java.util.concurrent.Executor executor6 = builder0.httpExecutor;
        retrofit.converter.Converter converter7 = builder0.converter;
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder10 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter11 = builder10.build();
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log13 = restAdapter12.log;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        restAdapter12.requestInterceptor = requestInterceptor14;
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter12.getLogLevel();
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter17.logLevel = logLevel19;
        retrofit.Profiler profiler21 = restAdapter17.profiler;
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter17.new RestHandler();
        retrofit.Server server23 = null;
        restAdapter17.server = server23;
        retrofit.Profiler profiler25 = null;
        restAdapter17.profiler = profiler25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter28 = null;
        restAdapter27.converter = converter28;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter27.requestInterceptor = requestInterceptor30;
        retrofit.Profiler profiler32 = restAdapter27.profiler;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        restAdapter27.logLevel = logLevel33;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder40 = builder36.setServer("hi!");
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder36.setLog(log41);
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel45 = restAdapter43.logLevel;
        retrofit.converter.Converter converter46 = null;
        restAdapter43.converter = converter46;
        retrofit.ErrorHandler errorHandler48 = restAdapter43.errorHandler;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter50 = null;
        builder49.converter = converter50;
        retrofit.client.Client.Provider provider52 = null;
        builder49.clientProvider = provider52;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        builder49.requestInterceptor = requestInterceptor54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = null;
        builder56.httpExecutor = executor57;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        retrofit.Profiler profiler61 = null;
        builder60.profiler = profiler61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor64 = null;
        builder63.httpExecutor = executor64;
        retrofit.RestAdapter.Builder builder67 = builder63.setServer("hi!");
        retrofit.RestAdapter.Log log68 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder69 = builder63.setLog(log68);
        retrofit.RestAdapter restAdapter70 = builder63.build();
        retrofit.converter.Converter converter71 = null;
        builder63.converter = converter71;
        retrofit.ErrorHandler errorHandler73 = null;
        builder63.errorHandler = errorHandler73;
        retrofit.RequestInterceptor requestInterceptor75 = builder63.requestInterceptor;
        builder60.requestInterceptor = requestInterceptor75;
        retrofit.RestAdapter.Builder builder77 = builder49.setRequestInterceptor(requestInterceptor75);
        restAdapter43.requestInterceptor = requestInterceptor75;
        builder36.requestInterceptor = requestInterceptor75;
        restAdapter27.requestInterceptor = requestInterceptor75;
        restAdapter17.requestInterceptor = requestInterceptor75;
        restAdapter12.requestInterceptor = requestInterceptor75;
        retrofit.RestAdapter.Builder builder83 = builder10.setRequestInterceptor(requestInterceptor75);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(restAdapter11);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNull(profiler32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertNull(logLevel45);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(restAdapter70);
        org.junit.Assert.assertNotNull(requestInterceptor75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test11747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11747");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter0.requestInterceptor = requestInterceptor4;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter0.logLevel = logLevel6;
        retrofit.client.Client.Provider provider8 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Log log9 = restAdapter0.log;
        retrofit.Profiler profiler10 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler11 = null;
        restAdapter0.errorHandler = errorHandler11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.Profiler profiler18 = null;
        builder17.profiler = profiler18;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder17.requestInterceptor = requestInterceptor20;
        retrofit.RestAdapter restAdapter22 = builder17.build();
        retrofit.client.Client.Provider provider23 = restAdapter22.clientProvider;
        restAdapter0.clientProvider = provider23;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor26 = restAdapter25.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        restAdapter25.requestInterceptor = requestInterceptor27;
        java.util.concurrent.Executor executor29 = restAdapter25.httpExecutor;
        retrofit.Server server30 = null;
        restAdapter25.server = server30;
        retrofit.client.Client.Provider provider32 = restAdapter25.clientProvider;
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter25.requestInterceptor;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.RestAdapter.Builder builder38 = builder34.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder34.logLevel = logLevel39;
        retrofit.converter.Converter converter41 = null;
        builder34.converter = converter41;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor44 = restAdapter43.requestInterceptor;
        retrofit.converter.Converter converter45 = restAdapter43.converter;
        java.util.concurrent.Executor executor46 = null;
        restAdapter43.callbackExecutor = executor46;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor49 = null;
        restAdapter48.httpExecutor = executor49;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        restAdapter48.requestInterceptor = requestInterceptor51;
        retrofit.RestAdapter.Log log53 = restAdapter48.log;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter48.logLevel = logLevel54;
        restAdapter43.logLevel = logLevel54;
        retrofit.RestAdapter.Builder builder57 = builder34.setLogLevel(logLevel54);
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.httpExecutor = executor59;
        retrofit.RestAdapter.Builder builder62 = builder58.setServer("hi!");
        retrofit.Profiler profiler63 = null;
        builder62.profiler = profiler63;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        builder62.requestInterceptor = requestInterceptor65;
        retrofit.RestAdapter restAdapter67 = builder62.build();
        retrofit.converter.Converter converter68 = restAdapter67.converter;
        java.util.concurrent.Executor executor69 = restAdapter67.callbackExecutor;
        builder34.httpExecutor = executor69;
        retrofit.RestAdapter restAdapter71 = builder34.build();
        java.util.concurrent.Executor executor72 = restAdapter71.httpExecutor;
        restAdapter25.httpExecutor = executor72;
        restAdapter0.callbackExecutor = executor72;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter22);
        org.junit.Assert.assertNotNull(provider23);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor44);
        org.junit.Assert.assertNull(converter45);
        org.junit.Assert.assertNull(log53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(restAdapter67);
        org.junit.Assert.assertNotNull(converter68);
        org.junit.Assert.assertNotNull(executor69);
        org.junit.Assert.assertNotNull(restAdapter71);
        org.junit.Assert.assertNotNull(executor72);
    }

    @Test
    public void test11748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11748");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test11749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11749");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.client.Client.Provider provider7 = null;
        builder4.clientProvider = provider7;
        retrofit.RestAdapter.Builder builder10 = builder4.setServer("hi!");
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder11.setLog(log16);
        retrofit.RestAdapter restAdapter18 = builder11.build();
        java.util.concurrent.Executor executor19 = restAdapter18.httpExecutor;
        builder10.callbackExecutor = executor19;
        builder0.callbackExecutor = executor19;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        java.util.concurrent.Executor executor28 = null;
        builder23.httpExecutor = executor28;
        retrofit.RestAdapter restAdapter30 = builder23.build();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.client.Client.Provider provider32 = restAdapter30.clientProvider;
        builder0.clientProvider = provider32;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log36 = restAdapter35.log;
        java.util.concurrent.Executor executor37 = restAdapter35.callbackExecutor;
        retrofit.Profiler profiler38 = restAdapter35.profiler;
        retrofit.Profiler profiler39 = null;
        restAdapter35.profiler = profiler39;
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel50);
        restAdapter35.log = log49;
        retrofit.Server server53 = null;
        restAdapter35.server = server53;
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter35.logLevel;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = null;
        builder56.httpExecutor = executor57;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        retrofit.Profiler profiler61 = null;
        builder60.profiler = profiler61;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        builder60.requestInterceptor = requestInterceptor63;
        retrofit.RestAdapter restAdapter65 = builder60.build();
        retrofit.converter.Converter converter66 = restAdapter65.converter;
        restAdapter35.converter = converter66;
        retrofit.RestAdapter.Builder builder68 = builder0.setConverter(converter66);
        retrofit.converter.Converter converter69 = builder0.converter;
        retrofit.client.Client.Provider provider70 = builder0.clientProvider;
        java.lang.Class<?> wildcardClass71 = builder0.getClass();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(provider32);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(profiler38);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertNotNull(converter66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(converter69);
        org.junit.Assert.assertNotNull(provider70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test11750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11750");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.callbackExecutor;
        retrofit.RestAdapter.Log log9 = builder7.log;
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter29.logLevel = logLevel31;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter29.setLogLevel(logLevel33);
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log26, logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder7.setLogLevel(logLevel33);
        retrofit.ErrorHandler errorHandler37 = null;
        builder36.errorHandler = errorHandler37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = builder39.callbackExecutor;
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel50);
        retrofit.RestAdapter.Builder builder52 = builder39.setLogLevel(logLevel50);
        retrofit.RestAdapter.Builder builder53 = builder36.setLogLevel(logLevel50);
        builder53.ensureSaneDefaults();
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor64 = restAdapter63.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        restAdapter63.requestInterceptor = requestInterceptor65;
        retrofit.Server server67 = null;
        retrofit.client.Client.Provider provider68 = null;
        java.util.concurrent.Executor executor69 = null;
        java.util.concurrent.Executor executor70 = null;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        retrofit.converter.Converter converter72 = null;
        retrofit.Profiler profiler73 = null;
        retrofit.ErrorHandler errorHandler74 = null;
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server67, provider68, executor69, executor70, requestInterceptor71, converter72, profiler73, errorHandler74, log75, logLevel76);
        restAdapter63.log = log75;
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean80 = logLevel79.log();
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log75, logLevel79);
        retrofit.RestAdapter.Builder builder82 = builder53.setLog(log75);
        retrofit.converter.Converter converter83 = builder53.converter;
        retrofit.RestAdapter.Builder builder84 = builder6.setConverter(converter83);
        retrofit.ErrorHandler errorHandler85 = builder84.errorHandler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(requestInterceptor64);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(converter83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(errorHandler85);
    }

    @Test
    public void test11751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11751");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log9 = restAdapter8.log;
        retrofit.ErrorHandler errorHandler10 = restAdapter8.errorHandler;
        retrofit.Profiler profiler11 = null;
        restAdapter8.profiler = profiler11;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter14 = null;
        restAdapter13.converter = converter14;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        restAdapter13.requestInterceptor = requestInterceptor16;
        retrofit.Profiler profiler18 = restAdapter13.profiler;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        restAdapter13.logLevel = logLevel19;
        java.util.concurrent.Executor executor22 = restAdapter13.httpExecutor;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log24 = restAdapter23.log;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = builder25.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor27 = builder25.requestInterceptor;
        retrofit.ErrorHandler errorHandler28 = null;
        builder25.errorHandler = errorHandler28;
        retrofit.converter.Converter converter30 = null;
        builder25.converter = converter30;
        retrofit.ErrorHandler errorHandler32 = null;
        builder25.errorHandler = errorHandler32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.RestAdapter.Builder builder38 = builder34.setServer("hi!");
        retrofit.Profiler profiler39 = null;
        builder38.profiler = profiler39;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        builder38.requestInterceptor = requestInterceptor41;
        retrofit.RestAdapter restAdapter43 = builder38.build();
        retrofit.converter.Converter converter44 = restAdapter43.converter;
        retrofit.RestAdapter.Builder builder45 = builder25.setConverter(converter44);
        restAdapter23.converter = converter44;
        restAdapter13.converter = converter44;
        restAdapter8.converter = converter44;
        retrofit.RestAdapter.Builder builder49 = builder0.setConverter(converter44);
        retrofit.RestAdapter.Builder builder51 = builder49.setServer("hi!");
        retrofit.RestAdapter.Log log52 = builder49.log;
        retrofit.Profiler profiler53 = builder49.profiler;
        retrofit.Profiler profiler54 = null;
        builder49.profiler = profiler54;
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertNotNull(converter44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertNull(profiler53);
    }

    @Test
    public void test11752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11752");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter10 = builder9.converter;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor12 = restAdapter11.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        restAdapter11.requestInterceptor = requestInterceptor13;
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel24);
        restAdapter11.log = log23;
        retrofit.ErrorHandler errorHandler27 = null;
        restAdapter11.errorHandler = errorHandler27;
        retrofit.RestAdapter.Log log29 = restAdapter11.log;
        retrofit.RestAdapter.Builder builder30 = builder9.setLog(log29);
        retrofit.Profiler profiler31 = builder30.profiler;
        retrofit.RestAdapter.LogLevel logLevel32 = builder30.logLevel;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter.Builder builder34 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Log log35 = builder34.log;
        retrofit.RestAdapter.Builder builder36 = builder8.setLog(log35);
        log35.log("");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test11753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11753");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor4 = null;
        builder3.httpExecutor = executor4;
        retrofit.RestAdapter.Builder builder7 = builder3.setServer("hi!");
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder3.setLog(log8);
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter10.logLevel;
        retrofit.converter.Converter converter13 = null;
        restAdapter10.converter = converter13;
        retrofit.ErrorHandler errorHandler15 = restAdapter10.errorHandler;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter17 = null;
        builder16.converter = converter17;
        retrofit.client.Client.Provider provider19 = null;
        builder16.clientProvider = provider19;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        builder16.requestInterceptor = requestInterceptor21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        retrofit.Profiler profiler28 = null;
        builder27.profiler = profiler28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.httpExecutor = executor31;
        retrofit.RestAdapter.Builder builder34 = builder30.setServer("hi!");
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder36 = builder30.setLog(log35);
        retrofit.RestAdapter restAdapter37 = builder30.build();
        retrofit.converter.Converter converter38 = null;
        builder30.converter = converter38;
        retrofit.ErrorHandler errorHandler40 = null;
        builder30.errorHandler = errorHandler40;
        retrofit.RequestInterceptor requestInterceptor42 = builder30.requestInterceptor;
        builder27.requestInterceptor = requestInterceptor42;
        retrofit.RestAdapter.Builder builder44 = builder16.setRequestInterceptor(requestInterceptor42);
        restAdapter10.requestInterceptor = requestInterceptor42;
        builder3.requestInterceptor = requestInterceptor42;
        retrofit.RequestInterceptor requestInterceptor47 = builder3.requestInterceptor;
        retrofit.RestAdapter restAdapter48 = builder3.build();
        java.util.concurrent.Executor executor49 = restAdapter48.callbackExecutor;
        restAdapter0.callbackExecutor = executor49;
        retrofit.client.Client.Provider provider51 = restAdapter0.clientProvider;
        retrofit.Profiler profiler52 = null;
        restAdapter0.profiler = profiler52;
        retrofit.ErrorHandler errorHandler54 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor55 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(restAdapter37);
        org.junit.Assert.assertNotNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(requestInterceptor47);
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertNotNull(executor49);
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNotNull(executor55);
    }

    @Test
    public void test11754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11754");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log22, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLog(log22);
        retrofit.Server server30 = builder29.server;
        retrofit.ErrorHandler errorHandler31 = null;
        builder29.errorHandler = errorHandler31;
        retrofit.Profiler profiler33 = null;
        builder29.profiler = profiler33;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log36 = restAdapter35.log;
        retrofit.ErrorHandler errorHandler37 = restAdapter35.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.Profiler profiler44 = null;
        builder43.profiler = profiler44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder46.setLog(log51);
        retrofit.RestAdapter restAdapter53 = builder46.build();
        retrofit.converter.Converter converter54 = null;
        builder46.converter = converter54;
        retrofit.ErrorHandler errorHandler56 = null;
        builder46.errorHandler = errorHandler56;
        retrofit.RequestInterceptor requestInterceptor58 = builder46.requestInterceptor;
        builder43.requestInterceptor = requestInterceptor58;
        restAdapter35.requestInterceptor = requestInterceptor58;
        retrofit.RestAdapter.Builder builder61 = builder29.setRequestInterceptor(requestInterceptor58);
        builder61.ensureSaneDefaults();
        builder61.ensureSaneDefaults();
        retrofit.converter.Converter converter64 = builder61.converter;
        java.util.concurrent.Executor executor65 = builder61.callbackExecutor;
        retrofit.Profiler profiler66 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder67 = builder61.setProfiler(profiler66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(converter64);
        org.junit.Assert.assertNotNull(executor65);
    }

    @Test
    public void test11755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11755");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("hi!");
        retrofit.Server server26 = builder0.server;
        retrofit.converter.Converter converter27 = builder0.converter;
        java.util.concurrent.Executor executor28 = builder0.httpExecutor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertNull(executor28);
    }

    @Test
    public void test11756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11756");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Log log7 = null;
        builder4.log = log7;
        retrofit.ErrorHandler errorHandler9 = builder4.errorHandler;
        retrofit.client.Client.Provider provider10 = builder4.clientProvider;
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log13 = restAdapter12.log;
        retrofit.ErrorHandler errorHandler14 = restAdapter12.errorHandler;
        retrofit.converter.Converter converter15 = null;
        restAdapter12.converter = converter15;
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter12.requestInterceptor;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter12.errorHandler = errorHandler18;
        retrofit.Profiler profiler20 = null;
        restAdapter12.profiler = profiler20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.httpExecutor = executor23;
        retrofit.RestAdapter.Builder builder26 = builder22.setServer("hi!");
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = builder22.setLog(log27);
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.logLevel;
        retrofit.converter.Converter converter32 = null;
        restAdapter29.converter = converter32;
        retrofit.ErrorHandler errorHandler34 = restAdapter29.errorHandler;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter36 = null;
        builder35.converter = converter36;
        retrofit.client.Client.Provider provider38 = null;
        builder35.clientProvider = provider38;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        builder35.requestInterceptor = requestInterceptor40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.httpExecutor = executor43;
        retrofit.RestAdapter.Builder builder46 = builder42.setServer("hi!");
        retrofit.Profiler profiler47 = null;
        builder46.profiler = profiler47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = builder49.setServer("hi!");
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder49.setLog(log54);
        retrofit.RestAdapter restAdapter56 = builder49.build();
        retrofit.converter.Converter converter57 = null;
        builder49.converter = converter57;
        retrofit.ErrorHandler errorHandler59 = null;
        builder49.errorHandler = errorHandler59;
        retrofit.RequestInterceptor requestInterceptor61 = builder49.requestInterceptor;
        builder46.requestInterceptor = requestInterceptor61;
        retrofit.RestAdapter.Builder builder63 = builder35.setRequestInterceptor(requestInterceptor61);
        restAdapter29.requestInterceptor = requestInterceptor61;
        builder22.requestInterceptor = requestInterceptor61;
        retrofit.RequestInterceptor requestInterceptor66 = builder22.requestInterceptor;
        restAdapter12.requestInterceptor = requestInterceptor66;
        builder4.requestInterceptor = requestInterceptor66;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(errorHandler9);
        org.junit.Assert.assertNotNull(provider10);
        org.junit.Assert.assertNotNull(provider11);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNotNull(requestInterceptor61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(requestInterceptor66);
    }

    @Test
    public void test11757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11757");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log6 = restAdapter0.log;
        retrofit.RestAdapter.Log log7 = restAdapter0.log;
        retrofit.client.Response response9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response11 = restAdapter0.logAndReplaceResponse("Retrofit-Idle", response9, 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(log6);
        org.junit.Assert.assertNull(log7);
    }

    @Test
    public void test11758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11758");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.httpExecutor = executor9;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder8.setLog(log13);
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter15.logLevel = logLevel17;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter15.requestInterceptor = requestInterceptor19;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter15.logLevel = logLevel21;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log13, logLevel21);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder30 = builder24.setLog(log29);
        restAdapter23.log = log29;
        retrofit.ErrorHandler errorHandler32 = restAdapter23.errorHandler;
        retrofit.client.Header[] headerArray35 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList36 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList36, headerArray35);
        retrofit.mime.TypedOutput typedOutput38 = null;
        retrofit.client.Request request39 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList36, typedOutput38);
        java.lang.String str40 = request39.getMethod();
        retrofit.client.Request request41 = restAdapter23.logAndReplaceRequest(request39);
        java.lang.String str42 = request39.getUrl();
        java.lang.String str43 = request39.getUrl();
        java.util.List<retrofit.client.Header> headerList44 = request39.getHeaders();
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNotNull(headerArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(request41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(headerList44);
    }

    @Test
    public void test11759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11759");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler5 = null;
        restAdapter0.errorHandler = errorHandler5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.Profiler profiler12 = null;
        builder11.profiler = profiler12;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        builder11.requestInterceptor = requestInterceptor14;
        retrofit.RestAdapter restAdapter16 = builder11.build();
        retrofit.converter.Converter converter17 = restAdapter16.converter;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        log18.log("");
        restAdapter16.log = log18;
        retrofit.RequestInterceptor requestInterceptor22 = restAdapter16.requestInterceptor;
        restAdapter0.requestInterceptor = requestInterceptor22;
        retrofit.Server server24 = restAdapter0.server;
        java.util.concurrent.Executor executor25 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter0.getLogLevel();
        retrofit.converter.Converter converter27 = restAdapter0.converter;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        restAdapter0.requestInterceptor = requestInterceptor28;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(converter17);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(requestInterceptor22);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(converter27);
    }

    @Test
    public void test11760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11760");
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList13, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList13, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList13, typedOutput25);
        java.lang.String str27 = request26.getMethod();
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Retrofit-Idle" + "'", str27, "Retrofit-Idle");
    }

    @Test
    public void test11761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11761");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.logLevel;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.Server server6 = restAdapter0.server;
        retrofit.RestAdapter.Log log7 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler8 = restAdapter0.errorHandler;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor10 = null;
        restAdapter9.httpExecutor = executor10;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter9.requestInterceptor = requestInterceptor12;
        retrofit.RestAdapter.Log log14 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel15;
        java.util.concurrent.Executor executor17 = restAdapter9.callbackExecutor;
        retrofit.RestAdapter.Log log18 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter9.setLogLevel(logLevel19);
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter21.logLevel = logLevel23;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter21.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter21.logLevel;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter29 = null;
        restAdapter28.converter = converter29;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        restAdapter28.requestInterceptor = requestInterceptor31;
        retrofit.Profiler profiler33 = restAdapter28.profiler;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        restAdapter28.logLevel = logLevel34;
        java.util.concurrent.Executor executor37 = restAdapter28.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter28.getLogLevel();
        restAdapter21.logLevel = logLevel38;
        restAdapter9.logLevel = logLevel38;
        retrofit.client.Client.Provider provider41 = restAdapter9.clientProvider;
        retrofit.client.Client.Provider provider42 = restAdapter9.clientProvider;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter44 = null;
        restAdapter43.converter = converter44;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        restAdapter43.requestInterceptor = requestInterceptor46;
        retrofit.Profiler profiler48 = restAdapter43.profiler;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean50 = logLevel49.log();
        restAdapter43.logLevel = logLevel49;
        java.util.concurrent.Executor executor52 = restAdapter43.httpExecutor;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log54 = restAdapter53.log;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = builder55.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor57 = builder55.requestInterceptor;
        retrofit.ErrorHandler errorHandler58 = null;
        builder55.errorHandler = errorHandler58;
        retrofit.converter.Converter converter60 = null;
        builder55.converter = converter60;
        retrofit.ErrorHandler errorHandler62 = null;
        builder55.errorHandler = errorHandler62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor65 = null;
        builder64.httpExecutor = executor65;
        retrofit.RestAdapter.Builder builder68 = builder64.setServer("hi!");
        retrofit.Profiler profiler69 = null;
        builder68.profiler = profiler69;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        builder68.requestInterceptor = requestInterceptor71;
        retrofit.RestAdapter restAdapter73 = builder68.build();
        retrofit.converter.Converter converter74 = restAdapter73.converter;
        retrofit.RestAdapter.Builder builder75 = builder55.setConverter(converter74);
        restAdapter53.converter = converter74;
        restAdapter43.converter = converter74;
        retrofit.RestAdapter.Log log78 = restAdapter43.log;
        retrofit.converter.Converter converter79 = restAdapter43.converter;
        restAdapter9.converter = converter79;
        restAdapter0.converter = converter79;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider41);
        org.junit.Assert.assertNull(provider42);
        org.junit.Assert.assertNull(profiler48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(log54);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(restAdapter73);
        org.junit.Assert.assertNotNull(converter74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(log78);
        org.junit.Assert.assertNotNull(converter79);
    }

    @Test
    public void test11762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11762");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.setLogLevel(logLevel4);
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.getLogLevel();
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor8 = null;
        restAdapter7.httpExecutor = executor8;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter7.requestInterceptor = requestInterceptor10;
        retrofit.RequestInterceptor requestInterceptor12 = restAdapter7.requestInterceptor;
        java.util.concurrent.Executor executor13 = restAdapter7.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter7.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter7.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter7.new RestHandler();
        retrofit.converter.Converter converter17 = null;
        restAdapter7.converter = converter17;
        retrofit.client.Client.Provider provider19 = restAdapter7.clientProvider;
        retrofit.converter.Converter converter20 = null;
        restAdapter7.converter = converter20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter23 = builder22.converter;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor25 = restAdapter24.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        restAdapter24.requestInterceptor = requestInterceptor26;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel37);
        restAdapter24.log = log36;
        retrofit.ErrorHandler errorHandler40 = null;
        restAdapter24.errorHandler = errorHandler40;
        retrofit.RestAdapter.Log log42 = restAdapter24.log;
        retrofit.RestAdapter.Builder builder43 = builder22.setLog(log42);
        retrofit.RequestInterceptor requestInterceptor44 = builder43.requestInterceptor;
        retrofit.Server server45 = null;
        builder43.server = server45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = null;
        builder47.httpExecutor = executor48;
        retrofit.RestAdapter.Builder builder51 = builder47.setServer("hi!");
        retrofit.client.Client.Provider provider52 = builder51.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean54 = logLevel53.log();
        builder51.logLevel = logLevel53;
        retrofit.RestAdapter restAdapter56 = builder51.build();
        retrofit.ErrorHandler errorHandler57 = builder51.errorHandler;
        retrofit.RestAdapter.Builder builder58 = builder43.setErrorHandler(errorHandler57);
        restAdapter7.errorHandler = errorHandler57;
        restAdapter0.errorHandler = errorHandler57;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(requestInterceptor44);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(provider52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNotNull(errorHandler57);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test11763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11763");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.RequestInterceptor requestInterceptor8 = null;
        builder7.requestInterceptor = requestInterceptor8;
        retrofit.Profiler profiler10 = builder7.profiler;
        retrofit.Profiler profiler11 = null;
        builder7.profiler = profiler11;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        java.util.concurrent.Executor executor15 = restAdapter13.callbackExecutor;
        retrofit.RestAdapter.Log log16 = restAdapter13.log;
        java.util.concurrent.Executor executor17 = restAdapter13.httpExecutor;
        retrofit.converter.Converter converter18 = restAdapter13.converter;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor20 = restAdapter19.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter19.logLevel;
        retrofit.ErrorHandler errorHandler22 = restAdapter19.errorHandler;
        retrofit.Profiler profiler23 = null;
        restAdapter19.profiler = profiler23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder25.setLog(log30);
        restAdapter19.log = log30;
        log30.log("Retrofit-Idle");
        log30.log("Retrofit-Idle");
        restAdapter13.log = log30;
        builder7.log = log30;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter39.logLevel = logLevel41;
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter39.logLevel;
        retrofit.RestAdapter.Builder builder44 = builder7.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.httpExecutor = executor46;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("hi!");
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder45.setLog(log50);
        retrofit.RestAdapter restAdapter52 = builder45.build();
        retrofit.RestAdapter.Log log53 = restAdapter52.log;
        java.util.concurrent.Executor executor54 = restAdapter52.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter52.getLogLevel();
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor57 = restAdapter56.httpExecutor;
        java.util.concurrent.Executor executor58 = restAdapter56.httpExecutor;
        retrofit.Profiler profiler59 = null;
        restAdapter56.profiler = profiler59;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor62 = restAdapter61.requestInterceptor;
        java.util.concurrent.Executor executor63 = restAdapter61.callbackExecutor;
        retrofit.converter.Converter converter64 = null;
        restAdapter61.converter = converter64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter67 = builder66.converter;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor69 = restAdapter68.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor70 = null;
        restAdapter68.requestInterceptor = requestInterceptor70;
        retrofit.Server server72 = null;
        retrofit.client.Client.Provider provider73 = null;
        java.util.concurrent.Executor executor74 = null;
        java.util.concurrent.Executor executor75 = null;
        retrofit.RequestInterceptor requestInterceptor76 = null;
        retrofit.converter.Converter converter77 = null;
        retrofit.Profiler profiler78 = null;
        retrofit.ErrorHandler errorHandler79 = null;
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel81 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter(server72, provider73, executor74, executor75, requestInterceptor76, converter77, profiler78, errorHandler79, log80, logLevel81);
        restAdapter68.log = log80;
        retrofit.ErrorHandler errorHandler84 = null;
        restAdapter68.errorHandler = errorHandler84;
        retrofit.RestAdapter.Log log86 = restAdapter68.log;
        retrofit.RestAdapter.Builder builder87 = builder66.setLog(log86);
        restAdapter61.log = log86;
        retrofit.RestAdapter.Log log89 = restAdapter61.log;
        retrofit.RestAdapter.Log log90 = restAdapter61.log;
        restAdapter56.log = log90;
        restAdapter52.log = log90;
        retrofit.RestAdapter.Builder builder93 = builder7.setLog(log90);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(executor54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNull(requestInterceptor62);
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNull(converter67);
        org.junit.Assert.assertNull(requestInterceptor69);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(log89);
        org.junit.Assert.assertNotNull(log90);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test11764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11764");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.converter.Converter converter9 = builder0.converter;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("hi!");
        retrofit.Profiler profiler15 = null;
        builder14.profiler = profiler15;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        builder14.requestInterceptor = requestInterceptor17;
        retrofit.RestAdapter restAdapter19 = builder14.build();
        retrofit.client.Client.Provider provider20 = builder14.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel21 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder22 = builder0.setLogLevel(logLevel21);
        boolean boolean23 = logLevel21.log();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(restAdapter19);
        org.junit.Assert.assertNotNull(provider20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test11765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11765");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter1 = null;
        restAdapter0.converter = converter1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.Profiler profiler5 = null;
        restAdapter0.profiler = profiler5;
        retrofit.Profiler profiler7 = null;
        restAdapter0.profiler = profiler7;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        restAdapter0.requestInterceptor = requestInterceptor9;
        retrofit.Server server11 = restAdapter0.server;
        java.util.concurrent.Executor executor12 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter14 = builder13.converter;
        retrofit.Profiler profiler15 = null;
        builder13.profiler = profiler15;
        retrofit.ErrorHandler errorHandler17 = null;
        builder13.errorHandler = errorHandler17;
        retrofit.RestAdapter.Builder builder20 = builder13.setServer("hi!");
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.httpExecutor = executor22;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("hi!");
        retrofit.Profiler profiler26 = null;
        builder25.profiler = profiler26;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        builder25.requestInterceptor = requestInterceptor28;
        retrofit.RestAdapter restAdapter30 = builder25.build();
        retrofit.converter.Converter converter31 = restAdapter30.converter;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        log32.log("");
        restAdapter30.log = log32;
        retrofit.RequestInterceptor requestInterceptor36 = restAdapter30.requestInterceptor;
        retrofit.RestAdapter.Builder builder37 = builder20.setRequestInterceptor(requestInterceptor36);
        retrofit.Server server38 = builder37.server;
        restAdapter0.server = server38;
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNotNull(converter31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(server38);
    }

    @Test
    public void test11766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11766");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.client.Client.Provider provider3 = restAdapter0.clientProvider;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter4.logLevel = logLevel6;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.setLogLevel(logLevel8);
        java.util.concurrent.Executor executor10 = restAdapter4.httpExecutor;
        retrofit.Server server11 = null;
        restAdapter4.server = server11;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        java.util.concurrent.Executor executor15 = restAdapter13.callbackExecutor;
        retrofit.ErrorHandler errorHandler16 = restAdapter13.errorHandler;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder25.setLog(log30);
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter32.logLevel = logLevel34;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        restAdapter32.requestInterceptor = requestInterceptor36;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter32.logLevel = logLevel38;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log30, logLevel38);
        log30.log("Retrofit-Idle");
        restAdapter13.log = log30;
        restAdapter4.log = log30;
        log30.log("Retrofit-Idle");
        restAdapter0.log = log30;
        retrofit.RequestInterceptor requestInterceptor48 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor48);
    }

    @Test
    public void test11767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11767");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.RestAdapter.Log log26 = restAdapter8.log;
        retrofit.RestAdapter.Builder builder27 = builder6.setLog(log26);
        retrofit.Profiler profiler28 = builder27.profiler;
        java.util.concurrent.Executor executor29 = builder27.callbackExecutor;
        retrofit.ErrorHandler errorHandler30 = null;
        builder27.errorHandler = errorHandler30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = builder32.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor34 = builder32.requestInterceptor;
        retrofit.Profiler profiler35 = builder32.profiler;
        retrofit.RestAdapter.LogLevel logLevel36 = builder32.logLevel;
        builder27.logLevel = logLevel36;
        retrofit.RestAdapter.Builder builder38 = builder0.setLogLevel(logLevel36);
        retrofit.Server server39 = builder38.server;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(profiler28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNull(profiler35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(server39);
    }

    @Test
    public void test11768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11768");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.converter.Converter converter5 = null;
        builder0.converter = converter5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.client.Client.Provider provider10 = null;
        builder7.clientProvider = provider10;
        retrofit.RestAdapter.Builder builder13 = builder7.setServer("hi!");
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter14.logLevel = logLevel16;
        retrofit.Profiler profiler18 = restAdapter14.profiler;
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter14.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter14.requestInterceptor;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log22 = restAdapter21.log;
        java.util.concurrent.Executor executor23 = restAdapter21.callbackExecutor;
        retrofit.Profiler profiler24 = restAdapter21.profiler;
        retrofit.Profiler profiler25 = null;
        restAdapter21.profiler = profiler25;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel36);
        restAdapter21.log = log35;
        restAdapter14.log = log35;
        retrofit.RestAdapter.Builder builder40 = builder7.setLog(log35);
        retrofit.Server server41 = builder7.server;
        retrofit.RestAdapter.Builder builder42 = builder0.setServer(server41);
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor44 = null;
        builder43.httpExecutor = executor44;
        retrofit.RestAdapter.Builder builder47 = builder43.setServer("hi!");
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder43.setLog(log48);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter51 = builder50.converter;
        retrofit.RestAdapter.LogLevel logLevel52 = builder50.logLevel;
        retrofit.RestAdapter.Builder builder53 = builder49.setLogLevel(logLevel52);
        retrofit.converter.Converter converter54 = builder49.converter;
        retrofit.RequestInterceptor requestInterceptor55 = builder49.requestInterceptor;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = builder56.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor58 = builder56.requestInterceptor;
        retrofit.ErrorHandler errorHandler59 = null;
        builder56.errorHandler = errorHandler59;
        retrofit.Profiler profiler61 = builder56.profiler;
        retrofit.Profiler profiler62 = null;
        builder56.profiler = profiler62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter65 = builder64.converter;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor67 = restAdapter66.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        restAdapter66.requestInterceptor = requestInterceptor68;
        retrofit.Server server70 = null;
        retrofit.client.Client.Provider provider71 = null;
        java.util.concurrent.Executor executor72 = null;
        java.util.concurrent.Executor executor73 = null;
        retrofit.RequestInterceptor requestInterceptor74 = null;
        retrofit.converter.Converter converter75 = null;
        retrofit.Profiler profiler76 = null;
        retrofit.ErrorHandler errorHandler77 = null;
        retrofit.RestAdapter.Log log78 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter(server70, provider71, executor72, executor73, requestInterceptor74, converter75, profiler76, errorHandler77, log78, logLevel79);
        restAdapter66.log = log78;
        retrofit.ErrorHandler errorHandler82 = null;
        restAdapter66.errorHandler = errorHandler82;
        retrofit.RestAdapter.Log log84 = restAdapter66.log;
        retrofit.RestAdapter.Builder builder85 = builder64.setLog(log84);
        retrofit.Profiler profiler86 = builder85.profiler;
        retrofit.RestAdapter.LogLevel logLevel87 = builder85.logLevel;
        retrofit.RestAdapter.LogLevel logLevel88 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter.Builder builder89 = builder85.setLogLevel(logLevel88);
        builder56.logLevel = logLevel88;
        retrofit.RestAdapter.Builder builder91 = builder49.setLogLevel(logLevel88);
        retrofit.RestAdapter.Log log92 = builder91.log;
        retrofit.RestAdapter restAdapter93 = builder91.build();
        retrofit.Server server94 = restAdapter93.server;
        builder42.server = server94;
        retrofit.client.Client client96 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder97 = builder42.setClient(client96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(profiler24);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(server41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(converter51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(converter54);
        org.junit.Assert.assertNull(requestInterceptor55);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNull(profiler61);
        org.junit.Assert.assertNull(converter65);
        org.junit.Assert.assertNull(requestInterceptor67);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNull(profiler86);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(log92);
        org.junit.Assert.assertNotNull(restAdapter93);
        org.junit.Assert.assertNotNull(server94);
    }

    @Test
    public void test11769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11769");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.RestAdapter.Log log9 = builder0.log;
        java.util.concurrent.Executor executor10 = builder0.callbackExecutor;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter13 = builder12.converter;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter14.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        restAdapter14.requestInterceptor = requestInterceptor16;
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        restAdapter14.log = log26;
        retrofit.ErrorHandler errorHandler30 = null;
        restAdapter14.errorHandler = errorHandler30;
        retrofit.RestAdapter.Log log32 = restAdapter14.log;
        retrofit.RestAdapter.Builder builder33 = builder12.setLog(log32);
        retrofit.RequestInterceptor requestInterceptor34 = builder12.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor35 = builder12.requestInterceptor;
        retrofit.RestAdapter.Builder builder37 = builder12.setServer("hi!");
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder46.setLog(log51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter53.logLevel = logLevel55;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        restAdapter53.requestInterceptor = requestInterceptor57;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter53.logLevel = logLevel59;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log51, logLevel59);
        boolean boolean62 = logLevel59.log();
        retrofit.RestAdapter.Builder builder63 = builder37.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor65 = null;
        builder64.httpExecutor = executor65;
        retrofit.RestAdapter.Builder builder68 = builder64.setServer("hi!");
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder70 = builder64.setLog(log69);
        retrofit.RestAdapter restAdapter71 = builder64.build();
        java.util.concurrent.Executor executor72 = restAdapter71.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler73 = restAdapter71.new RestHandler();
        retrofit.converter.Converter converter74 = restAdapter71.converter;
        builder63.converter = converter74;
        retrofit.converter.Converter converter76 = builder63.converter;
        builder0.converter = converter76;
        java.util.concurrent.Executor executor78 = builder0.httpExecutor;
        java.util.concurrent.Executor executor79 = builder0.callbackExecutor;
        retrofit.Server server80 = builder0.server;
        java.util.concurrent.Executor executor81 = builder0.callbackExecutor;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(restAdapter71);
        org.junit.Assert.assertNotNull(executor72);
        org.junit.Assert.assertNotNull(converter74);
        org.junit.Assert.assertNotNull(converter76);
        org.junit.Assert.assertNotNull(executor78);
        org.junit.Assert.assertNotNull(executor79);
        org.junit.Assert.assertNull(server80);
        org.junit.Assert.assertNotNull(executor81);
    }

    @Test
    public void test11770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11770");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder6.setLogLevel(logLevel9);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        restAdapter13.requestInterceptor = requestInterceptor15;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        restAdapter13.log = log25;
        retrofit.ErrorHandler errorHandler29 = null;
        restAdapter13.errorHandler = errorHandler29;
        retrofit.RestAdapter.Log log31 = restAdapter13.log;
        retrofit.RestAdapter.Builder builder32 = builder11.setLog(log31);
        retrofit.RequestInterceptor requestInterceptor33 = builder11.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor34 = builder11.requestInterceptor;
        retrofit.RestAdapter.Builder builder36 = builder11.setServer("hi!");
        retrofit.Server server37 = builder11.server;
        retrofit.RestAdapter.Builder builder38 = builder6.setServer(server37);
        retrofit.RestAdapter.LogLevel logLevel39 = builder6.logLevel;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter40.logLevel;
        retrofit.converter.Converter converter43 = null;
        restAdapter40.converter = converter43;
        retrofit.ErrorHandler errorHandler45 = restAdapter40.errorHandler;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = builder46.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor48 = builder46.requestInterceptor;
        retrofit.ErrorHandler errorHandler49 = null;
        builder46.errorHandler = errorHandler49;
        retrofit.converter.Converter converter51 = null;
        builder46.converter = converter51;
        retrofit.client.Client.Provider provider53 = builder46.clientProvider;
        retrofit.RequestInterceptor requestInterceptor54 = builder46.requestInterceptor;
        retrofit.Server server55 = builder46.server;
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel65);
        log64.log("hi!");
        log64.log("Retrofit-Idle");
        builder46.log = log64;
        restAdapter40.log = log64;
        builder6.log = log64;
        retrofit.RestAdapter restAdapter74 = builder6.build();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(server37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNull(requestInterceptor48);
        org.junit.Assert.assertNull(provider53);
        org.junit.Assert.assertNull(requestInterceptor54);
        org.junit.Assert.assertNull(server55);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(restAdapter74);
    }

    @Test
    public void test11771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11771");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder6.setLogLevel(logLevel9);
        retrofit.RestAdapter.Builder builder12 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.client.Client.Provider provider16 = null;
        builder13.clientProvider = provider16;
        retrofit.client.Client.Provider provider18 = builder13.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder20 = builder13.setLogLevel(logLevel19);
        retrofit.RequestInterceptor requestInterceptor21 = null;
        builder20.requestInterceptor = requestInterceptor21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter24 = builder23.converter;
        retrofit.RestAdapter.LogLevel logLevel25 = builder23.logLevel;
        builder23.ensureSaneDefaults();
        retrofit.client.Client.Provider provider27 = null;
        builder23.clientProvider = provider27;
        retrofit.Profiler profiler29 = builder23.profiler;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = builder30.callbackExecutor;
        retrofit.RestAdapter.Log log32 = builder30.log;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel50);
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter52.logLevel = logLevel54;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter52.setLogLevel(logLevel56);
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log49, logLevel56);
        retrofit.RestAdapter.Builder builder59 = builder30.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.httpExecutor = executor61;
        retrofit.RestAdapter.Builder builder64 = builder60.setServer("hi!");
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder66 = builder60.setLog(log65);
        builder30.log = log65;
        retrofit.RestAdapter.Builder builder68 = builder23.setLog(log65);
        java.util.concurrent.Executor executor69 = builder68.httpExecutor;
        builder20.callbackExecutor = executor69;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor72 = null;
        builder71.httpExecutor = executor72;
        retrofit.RestAdapter.Builder builder75 = builder71.setServer("hi!");
        retrofit.Profiler profiler76 = null;
        builder75.profiler = profiler76;
        retrofit.RequestInterceptor requestInterceptor78 = null;
        builder75.requestInterceptor = requestInterceptor78;
        retrofit.RestAdapter restAdapter80 = builder75.build();
        retrofit.converter.Converter converter81 = null;
        builder75.converter = converter81;
        retrofit.client.Client.Provider provider83 = builder75.clientProvider;
        builder20.clientProvider = provider83;
        builder12.clientProvider = provider83;
        retrofit.converter.Converter converter86 = builder12.converter;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(executor69);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNotNull(provider83);
        org.junit.Assert.assertNull(converter86);
    }

    @Test
    public void test11772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11772");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor26 = builder25.httpExecutor;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor36 = restAdapter35.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        restAdapter35.requestInterceptor = requestInterceptor37;
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel48);
        restAdapter35.log = log47;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean52 = logLevel51.log();
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log47, logLevel51);
        retrofit.RestAdapter.Builder builder54 = builder25.setLogLevel(logLevel51);
        retrofit.RestAdapter restAdapter55 = builder25.build();
        retrofit.RestAdapter.Builder builder57 = builder25.setServer("hi!");
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.httpExecutor = executor59;
        retrofit.RestAdapter.Builder builder62 = builder58.setServer("hi!");
        retrofit.Profiler profiler63 = null;
        builder62.profiler = profiler63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = null;
        builder65.httpExecutor = executor66;
        retrofit.RestAdapter.Builder builder69 = builder65.setServer("hi!");
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder65.setLog(log70);
        retrofit.RestAdapter restAdapter72 = builder65.build();
        retrofit.converter.Converter converter73 = null;
        builder65.converter = converter73;
        retrofit.ErrorHandler errorHandler75 = null;
        builder65.errorHandler = errorHandler75;
        retrofit.RequestInterceptor requestInterceptor77 = builder65.requestInterceptor;
        builder62.requestInterceptor = requestInterceptor77;
        retrofit.RestAdapter.Builder builder79 = builder25.setRequestInterceptor(requestInterceptor77);
        retrofit.RestAdapter.Builder builder81 = builder25.setServer("Retrofit-Idle");
        java.util.concurrent.Executor executor82 = builder25.httpExecutor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(restAdapter72);
        org.junit.Assert.assertNotNull(requestInterceptor77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(executor82);
    }

    @Test
    public void test11773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11773");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.RequestInterceptor requestInterceptor8 = null;
        builder7.requestInterceptor = requestInterceptor8;
        retrofit.Profiler profiler10 = builder7.profiler;
        retrofit.Profiler profiler11 = null;
        builder7.profiler = profiler11;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        java.util.concurrent.Executor executor15 = restAdapter13.callbackExecutor;
        retrofit.RestAdapter.Log log16 = restAdapter13.log;
        java.util.concurrent.Executor executor17 = restAdapter13.httpExecutor;
        retrofit.converter.Converter converter18 = restAdapter13.converter;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor20 = restAdapter19.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter19.logLevel;
        retrofit.ErrorHandler errorHandler22 = restAdapter19.errorHandler;
        retrofit.Profiler profiler23 = null;
        restAdapter19.profiler = profiler23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder25.setLog(log30);
        restAdapter19.log = log30;
        log30.log("Retrofit-Idle");
        log30.log("Retrofit-Idle");
        restAdapter13.log = log30;
        builder7.log = log30;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter39.logLevel = logLevel41;
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter39.logLevel;
        retrofit.RestAdapter.Builder builder44 = builder7.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter46 = builder45.converter;
        retrofit.Profiler profiler47 = null;
        builder45.profiler = profiler47;
        retrofit.RestAdapter.Log log49 = builder45.log;
        builder45.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor51 = null;
        builder45.requestInterceptor = requestInterceptor51;
        retrofit.ErrorHandler errorHandler53 = null;
        builder45.errorHandler = errorHandler53;
        retrofit.converter.Converter converter55 = builder45.converter;
        retrofit.Server server56 = null;
        builder45.server = server56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter59 = null;
        builder58.converter = converter59;
        retrofit.client.Client.Provider provider61 = null;
        builder58.clientProvider = provider61;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        builder58.requestInterceptor = requestInterceptor63;
        retrofit.Profiler profiler65 = builder58.profiler;
        retrofit.converter.Converter converter66 = builder58.converter;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = null;
        builder67.httpExecutor = executor68;
        retrofit.RestAdapter.Builder builder71 = builder67.setServer("hi!");
        retrofit.client.Client.Provider provider72 = builder71.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean74 = logLevel73.log();
        builder71.logLevel = logLevel73;
        retrofit.RestAdapter restAdapter76 = builder71.build();
        retrofit.ErrorHandler errorHandler77 = builder71.errorHandler;
        retrofit.RestAdapter.Builder builder78 = builder58.setErrorHandler(errorHandler77);
        retrofit.RestAdapter.Builder builder79 = builder45.setErrorHandler(errorHandler77);
        retrofit.RestAdapter.Builder builder80 = builder7.setErrorHandler(errorHandler77);
        retrofit.RequestInterceptor requestInterceptor81 = builder80.requestInterceptor;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertNull(log49);
        org.junit.Assert.assertNotNull(converter55);
        org.junit.Assert.assertNull(profiler65);
        org.junit.Assert.assertNull(converter66);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(provider72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(restAdapter76);
        org.junit.Assert.assertNotNull(errorHandler77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(requestInterceptor81);
    }

    @Test
    public void test11774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11774");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        java.util.concurrent.Executor executor5 = builder0.httpExecutor;
        retrofit.Profiler profiler6 = builder0.profiler;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder7.setLog(log12);
        retrofit.RestAdapter restAdapter14 = builder7.build();
        java.util.concurrent.Executor executor15 = restAdapter14.httpExecutor;
        retrofit.client.Client.Provider provider16 = null;
        restAdapter14.clientProvider = provider16;
        retrofit.client.Client.Provider provider18 = null;
        restAdapter14.clientProvider = provider18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.httpExecutor = executor21;
        retrofit.RestAdapter.Builder builder24 = builder20.setServer("hi!");
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder26 = builder20.setLog(log25);
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel36);
        builder20.logLevel = logLevel36;
        retrofit.converter.Converter converter39 = builder20.converter;
        retrofit.ErrorHandler errorHandler40 = builder20.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel41 = builder20.logLevel;
        boolean boolean42 = logLevel41.log();
        boolean boolean43 = logLevel41.log();
        restAdapter14.logLevel = logLevel41;
        retrofit.RestAdapter.Builder builder45 = builder0.setLogLevel(logLevel41);
        retrofit.Profiler profiler46 = builder0.profiler;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter47.logLevel = logLevel49;
        retrofit.Profiler profiler51 = restAdapter47.profiler;
        retrofit.ErrorHandler errorHandler52 = null;
        restAdapter47.errorHandler = errorHandler52;
        java.util.concurrent.Executor executor54 = restAdapter47.callbackExecutor;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter56 = builder55.converter;
        retrofit.Profiler profiler57 = null;
        builder55.profiler = profiler57;
        retrofit.RestAdapter.Log log59 = builder55.log;
        builder55.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor61 = null;
        builder55.requestInterceptor = requestInterceptor61;
        retrofit.converter.Converter converter63 = builder55.converter;
        restAdapter47.converter = converter63;
        retrofit.RestAdapter.Builder builder65 = builder0.setConverter(converter63);
        retrofit.Profiler profiler66 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder67 = builder0.setProfiler(profiler66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(profiler46);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler51);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNull(converter56);
        org.junit.Assert.assertNull(log59);
        org.junit.Assert.assertNotNull(converter63);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test11775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11775");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("hi!");
        retrofit.Server server10 = builder0.server;
        java.util.concurrent.Executor executor11 = builder0.callbackExecutor;
        retrofit.client.Client client12 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder13 = builder0.setClient(client12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(server10);
        org.junit.Assert.assertNotNull(executor11);
    }

    @Test
    public void test11776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11776");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor9 = null;
        restAdapter0.httpExecutor = executor9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        java.util.concurrent.Executor executor16 = null;
        builder11.httpExecutor = executor16;
        retrofit.RestAdapter restAdapter18 = builder11.build();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter20 = builder19.converter;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor22 = restAdapter21.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter21.requestInterceptor = requestInterceptor23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        restAdapter21.log = log33;
        retrofit.ErrorHandler errorHandler37 = null;
        restAdapter21.errorHandler = errorHandler37;
        retrofit.RestAdapter.Log log39 = restAdapter21.log;
        retrofit.RestAdapter.Builder builder40 = builder19.setLog(log39);
        retrofit.Profiler profiler41 = builder40.profiler;
        retrofit.Profiler profiler42 = builder40.profiler;
        java.util.concurrent.Executor executor43 = builder40.callbackExecutor;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.httpExecutor = executor45;
        retrofit.RestAdapter.Builder builder48 = builder44.setServer("hi!");
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder44.setLog(log49);
        retrofit.RestAdapter restAdapter51 = builder44.build();
        java.util.concurrent.Executor executor52 = restAdapter51.httpExecutor;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor54 = null;
        builder53.httpExecutor = executor54;
        retrofit.client.Client.Provider provider56 = null;
        builder53.clientProvider = provider56;
        retrofit.RestAdapter.Builder builder59 = builder53.setServer("hi!");
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.httpExecutor = executor61;
        retrofit.RestAdapter.Builder builder64 = builder60.setServer("hi!");
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder66 = builder60.setLog(log65);
        retrofit.RestAdapter restAdapter67 = builder60.build();
        java.util.concurrent.Executor executor68 = restAdapter67.httpExecutor;
        builder59.callbackExecutor = executor68;
        retrofit.RestAdapter.Builder builder70 = builder40.setExecutors(executor52, executor68);
        restAdapter18.httpExecutor = executor52;
        retrofit.Server server72 = null;
        retrofit.client.Client.Provider provider73 = null;
        java.util.concurrent.Executor executor74 = null;
        java.util.concurrent.Executor executor75 = null;
        retrofit.RequestInterceptor requestInterceptor76 = null;
        retrofit.converter.Converter converter77 = null;
        retrofit.Profiler profiler78 = null;
        retrofit.ErrorHandler errorHandler79 = null;
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel81 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter(server72, provider73, executor74, executor75, requestInterceptor76, converter77, profiler78, errorHandler79, log80, logLevel81);
        restAdapter18.logLevel = logLevel81;
        retrofit.ErrorHandler errorHandler84 = restAdapter18.errorHandler;
        restAdapter0.errorHandler = errorHandler84;
        retrofit.RestAdapter.LogLevel logLevel86 = restAdapter0.getLogLevel();
        retrofit.Profiler profiler87 = restAdapter0.profiler;
        retrofit.converter.Converter converter88 = restAdapter0.converter;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNull(profiler42);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertNotNull(executor52);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(restAdapter67);
        org.junit.Assert.assertNotNull(executor68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(errorHandler84);
        org.junit.Assert.assertNull(logLevel86);
        org.junit.Assert.assertNull(profiler87);
        org.junit.Assert.assertNull(converter88);
    }

    @Test
    public void test11777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11777");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = builder5.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor7 = builder5.requestInterceptor;
        retrofit.Profiler profiler8 = builder5.profiler;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.client.Client.Provider provider12 = null;
        builder9.clientProvider = provider12;
        retrofit.client.Client.Provider provider14 = builder9.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder16 = builder9.setLogLevel(logLevel15);
        retrofit.RequestInterceptor requestInterceptor17 = null;
        builder16.requestInterceptor = requestInterceptor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter20 = null;
        builder19.converter = converter20;
        retrofit.client.Client.Provider provider22 = null;
        builder19.clientProvider = provider22;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        builder19.requestInterceptor = requestInterceptor24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("hi!");
        retrofit.Profiler profiler31 = null;
        builder30.profiler = profiler31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.RestAdapter restAdapter40 = builder33.build();
        retrofit.converter.Converter converter41 = null;
        builder33.converter = converter41;
        retrofit.ErrorHandler errorHandler43 = null;
        builder33.errorHandler = errorHandler43;
        retrofit.RequestInterceptor requestInterceptor45 = builder33.requestInterceptor;
        builder30.requestInterceptor = requestInterceptor45;
        retrofit.RestAdapter.Builder builder47 = builder19.setRequestInterceptor(requestInterceptor45);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter49 = builder48.converter;
        retrofit.RestAdapter.LogLevel logLevel50 = builder48.logLevel;
        builder48.ensureSaneDefaults();
        retrofit.Server server52 = null;
        retrofit.client.Client.Provider provider53 = null;
        java.util.concurrent.Executor executor54 = null;
        java.util.concurrent.Executor executor55 = null;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        retrofit.converter.Converter converter57 = null;
        retrofit.Profiler profiler58 = null;
        retrofit.ErrorHandler errorHandler59 = null;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.httpExecutor = executor61;
        retrofit.RestAdapter.Builder builder64 = builder60.setServer("hi!");
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder66 = builder60.setLog(log65);
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter67.logLevel = logLevel69;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        restAdapter67.requestInterceptor = requestInterceptor71;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter67.logLevel = logLevel73;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server52, provider53, executor54, executor55, requestInterceptor56, converter57, profiler58, errorHandler59, log65, logLevel73);
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor77 = null;
        builder76.httpExecutor = executor77;
        retrofit.RestAdapter.Builder builder80 = builder76.setServer("hi!");
        retrofit.RestAdapter.Log log81 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder82 = builder76.setLog(log81);
        restAdapter75.log = log81;
        builder48.log = log81;
        java.util.concurrent.Executor executor85 = null;
        builder48.httpExecutor = executor85;
        retrofit.converter.Converter converter87 = null;
        builder48.converter = converter87;
        retrofit.ErrorHandler errorHandler89 = builder48.errorHandler;
        builder47.errorHandler = errorHandler89;
        retrofit.RequestInterceptor requestInterceptor91 = builder47.requestInterceptor;
        builder16.requestInterceptor = requestInterceptor91;
        retrofit.RestAdapter.Builder builder93 = builder5.setRequestInterceptor(requestInterceptor91);
        builder0.requestInterceptor = requestInterceptor91;
        retrofit.client.Client client95 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder96 = builder0.setClient(client95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(requestInterceptor7);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter40);
        org.junit.Assert.assertNotNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(converter49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(errorHandler89);
        org.junit.Assert.assertNotNull(requestInterceptor91);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test11778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11778");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.Profiler profiler5 = null;
        restAdapter0.profiler = profiler5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        builder7.ensureSaneDefaults();
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.httpExecutor = executor20;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("hi!");
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder19.setLog(log24);
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter26.logLevel = logLevel28;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter26.requestInterceptor = requestInterceptor30;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter26.logLevel = logLevel32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log24, logLevel32);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.httpExecutor = executor36;
        retrofit.RestAdapter.Builder builder39 = builder35.setServer("hi!");
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder35.setLog(log40);
        restAdapter34.log = log40;
        builder7.log = log40;
        java.util.concurrent.Executor executor44 = null;
        builder7.httpExecutor = executor44;
        retrofit.converter.Converter converter46 = null;
        builder7.converter = converter46;
        retrofit.RestAdapter.Builder builder49 = builder7.setServer("hi!");
        retrofit.converter.Converter converter50 = builder49.converter;
        retrofit.RestAdapter restAdapter51 = builder49.build();
        retrofit.RestAdapter.LogLevel logLevel52 = builder49.logLevel;
        restAdapter0.logLevel = logLevel52;
        boolean boolean54 = logLevel52.log();
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(converter50);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test11779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11779");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.Server server2 = restAdapter0.server;
        retrofit.client.Client.Provider provider3 = null;
        restAdapter0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.converter.Converter converter7 = restAdapter0.converter;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = builder10.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor12 = builder10.requestInterceptor;
        java.util.concurrent.Executor executor13 = builder10.httpExecutor;
        retrofit.RestAdapter.Builder builder15 = builder10.setServer("hi!");
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter17 = builder16.converter;
        retrofit.RestAdapter.LogLevel logLevel18 = builder16.logLevel;
        builder16.ensureSaneDefaults();
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("hi!");
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder28.setLog(log33);
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter35.logLevel = logLevel37;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        restAdapter35.requestInterceptor = requestInterceptor39;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter35.logLevel = logLevel41;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log33, logLevel41);
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.httpExecutor = executor45;
        retrofit.RestAdapter.Builder builder48 = builder44.setServer("hi!");
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder44.setLog(log49);
        restAdapter43.log = log49;
        builder16.log = log49;
        java.util.concurrent.Executor executor53 = null;
        builder16.httpExecutor = executor53;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter55.logLevel = logLevel57;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        restAdapter55.requestInterceptor = requestInterceptor59;
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter55.logLevel = logLevel61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter64 = builder63.converter;
        retrofit.Profiler profiler65 = null;
        builder63.profiler = profiler65;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = null;
        builder67.httpExecutor = executor68;
        retrofit.client.Client.Provider provider70 = null;
        builder67.clientProvider = provider70;
        retrofit.RestAdapter.Builder builder73 = builder67.setServer("hi!");
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor75 = null;
        builder74.httpExecutor = executor75;
        retrofit.RestAdapter.Builder builder78 = builder74.setServer("hi!");
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder80 = builder74.setLog(log79);
        retrofit.RestAdapter restAdapter81 = builder74.build();
        java.util.concurrent.Executor executor82 = restAdapter81.httpExecutor;
        builder73.callbackExecutor = executor82;
        builder63.callbackExecutor = executor82;
        restAdapter55.httpExecutor = executor82;
        builder16.callbackExecutor = executor82;
        builder15.httpExecutor = executor82;
        restAdapter0.httpExecutor = executor82;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter64);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(restAdapter81);
        org.junit.Assert.assertNotNull(executor82);
    }

    @Test
    public void test11780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11780");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList7, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput13);
        java.lang.String str15 = request14.getMethod();
        retrofit.mime.TypedOutput typedOutput16 = request14.getBody();
        java.util.List<retrofit.client.Header> headerList17 = request14.getHeaders();
        java.lang.String str18 = request14.getUrl();
        retrofit.mime.TypedOutput typedOutput19 = request14.getBody();
        java.lang.String str20 = request14.getUrl();
        java.lang.String str21 = request14.getUrl();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(typedOutput19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
    }

    @Test
    public void test11781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11781");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder0.profiler;
        retrofit.converter.Converter converter23 = null;
        builder0.converter = converter23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter40.logLevel = logLevel42;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        restAdapter40.requestInterceptor = requestInterceptor44;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter40.logLevel = logLevel46;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log38, logLevel46);
        retrofit.RestAdapter.Builder builder49 = builder0.setLog(log38);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = null;
        builder50.httpExecutor = executor51;
        retrofit.RestAdapter.Builder builder54 = builder50.setServer("hi!");
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder56 = builder50.setLog(log55);
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel66);
        builder50.logLevel = logLevel66;
        retrofit.Profiler profiler69 = builder50.profiler;
        retrofit.ErrorHandler errorHandler70 = null;
        builder50.errorHandler = errorHandler70;
        retrofit.Server server72 = builder50.server;
        retrofit.RestAdapter.Builder builder73 = builder49.setServer(server72);
        retrofit.Profiler profiler74 = builder73.profiler;
        retrofit.Profiler profiler75 = null;
        builder73.profiler = profiler75;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler69);
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(profiler74);
    }

    @Test
    public void test11782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11782");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.RestAdapter.Builder builder8 = builder4.setServer("hi!");
        retrofit.client.Client.Provider provider9 = builder8.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        builder8.logLevel = logLevel10;
        retrofit.RestAdapter restAdapter13 = builder8.build();
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter14.requestInterceptor;
        java.util.concurrent.Executor executor16 = restAdapter14.callbackExecutor;
        retrofit.converter.Converter converter17 = null;
        restAdapter14.converter = converter17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter20 = builder19.converter;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor22 = restAdapter21.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter21.requestInterceptor = requestInterceptor23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        restAdapter21.log = log33;
        retrofit.ErrorHandler errorHandler37 = null;
        restAdapter21.errorHandler = errorHandler37;
        retrofit.RestAdapter.Log log39 = restAdapter21.log;
        retrofit.RestAdapter.Builder builder40 = builder19.setLog(log39);
        restAdapter14.log = log39;
        retrofit.RestAdapter.Builder builder42 = builder8.setLog(log39);
        restAdapter0.log = log39;
        retrofit.converter.Converter converter44 = restAdapter0.converter;
        retrofit.converter.Converter converter45 = restAdapter0.converter;
        java.util.concurrent.Executor executor46 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler48 = builder47.errorHandler;
        retrofit.RestAdapter.Log log49 = builder47.log;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter51 = builder50.converter;
        retrofit.RestAdapter.LogLevel logLevel52 = builder50.logLevel;
        builder50.ensureSaneDefaults();
        retrofit.Server server54 = null;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.httpExecutor = executor63;
        retrofit.RestAdapter.Builder builder66 = builder62.setServer("hi!");
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder68 = builder62.setLog(log67);
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter69.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter69.logLevel = logLevel71;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        restAdapter69.requestInterceptor = requestInterceptor73;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter69.logLevel = logLevel75;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log67, logLevel75);
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor79 = null;
        builder78.httpExecutor = executor79;
        retrofit.RestAdapter.Builder builder82 = builder78.setServer("hi!");
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder84 = builder78.setLog(log83);
        restAdapter77.log = log83;
        builder50.log = log83;
        java.util.concurrent.Executor executor87 = null;
        builder50.httpExecutor = executor87;
        retrofit.converter.Converter converter89 = null;
        builder50.converter = converter89;
        retrofit.ErrorHandler errorHandler91 = builder50.errorHandler;
        retrofit.RestAdapter.Builder builder92 = builder47.setErrorHandler(errorHandler91);
        restAdapter0.errorHandler = errorHandler91;
        retrofit.client.Client.Provider provider94 = null;
        restAdapter0.clientProvider = provider94;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(restAdapter13);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(converter44);
        org.junit.Assert.assertNull(converter45);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNull(log49);
        org.junit.Assert.assertNull(converter51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(logLevel70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(errorHandler91);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test11783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11783");
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList13, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList13, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("Retrofit-Idle", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput25);
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test11784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11784");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.Server server2 = restAdapter0.server;
        retrofit.client.Client.Provider provider3 = null;
        restAdapter0.clientProvider = provider3;
        retrofit.Server server5 = null;
        restAdapter0.server = server5;
        retrofit.Server server7 = restAdapter0.server;
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log9 = restAdapter0.log;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertNull(log9);
    }

    @Test
    public void test11785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11785");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.Profiler profiler4 = null;
        restAdapter0.profiler = profiler4;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        restAdapter0.requestInterceptor = requestInterceptor6;
        retrofit.Server server8 = null;
        restAdapter0.server = server8;
        retrofit.client.Client.Provider provider10 = restAdapter0.clientProvider;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.ErrorHandler errorHandler22 = null;
        restAdapter21.errorHandler = errorHandler22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder30 = builder24.setLog(log29);
        retrofit.RestAdapter restAdapter31 = builder24.build();
        retrofit.converter.Converter converter32 = null;
        builder24.converter = converter32;
        retrofit.ErrorHandler errorHandler34 = null;
        builder24.errorHandler = errorHandler34;
        retrofit.RequestInterceptor requestInterceptor36 = builder24.requestInterceptor;
        restAdapter21.requestInterceptor = requestInterceptor36;
        restAdapter0.requestInterceptor = requestInterceptor36;
        retrofit.RestAdapter.Log log39 = restAdapter0.log;
        retrofit.RestAdapter.Log log40 = restAdapter0.log;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(provider10);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertNotNull(requestInterceptor36);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertNull(log40);
    }

    @Test
    public void test11786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11786");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.getLogLevel();
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(logLevel10);
    }

    @Test
    public void test11787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11787");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder7.setLog(log12);
        retrofit.RestAdapter restAdapter14 = builder7.build();
        retrofit.converter.Converter converter15 = null;
        builder7.converter = converter15;
        retrofit.ErrorHandler errorHandler17 = null;
        builder7.errorHandler = errorHandler17;
        retrofit.RequestInterceptor requestInterceptor19 = builder7.requestInterceptor;
        builder4.requestInterceptor = requestInterceptor19;
        retrofit.ErrorHandler errorHandler21 = builder4.errorHandler;
        java.util.concurrent.Executor executor22 = builder4.httpExecutor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        retrofit.Profiler profiler28 = null;
        builder27.profiler = profiler28;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        builder27.requestInterceptor = requestInterceptor30;
        retrofit.RestAdapter restAdapter32 = builder27.build();
        retrofit.client.Client.Provider provider33 = restAdapter32.clientProvider;
        java.util.concurrent.Executor executor34 = restAdapter32.httpExecutor;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.client.Client.Provider provider36 = null;
        restAdapter35.clientProvider = provider36;
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter40 = builder39.converter;
        retrofit.RestAdapter.LogLevel logLevel41 = builder39.logLevel;
        restAdapter35.logLevel = logLevel41;
        boolean boolean43 = logLevel41.log();
        restAdapter32.logLevel = logLevel41;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.httpExecutor = executor46;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("hi!");
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder45.setLog(log50);
        retrofit.RestAdapter restAdapter52 = builder45.build();
        retrofit.converter.Converter converter53 = null;
        builder45.converter = converter53;
        retrofit.ErrorHandler errorHandler55 = null;
        builder45.errorHandler = errorHandler55;
        retrofit.RequestInterceptor requestInterceptor57 = builder45.requestInterceptor;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.httpExecutor = executor59;
        retrofit.RestAdapter.Builder builder62 = builder58.setServer("hi!");
        retrofit.client.Client.Provider provider63 = builder62.clientProvider;
        builder62.ensureSaneDefaults();
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        log65.log("");
        builder62.log = log65;
        retrofit.Server server69 = builder62.server;
        builder45.server = server69;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor72 = null;
        builder71.httpExecutor = executor72;
        retrofit.RestAdapter.Builder builder75 = builder71.setServer("hi!");
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder77 = builder71.setLog(log76);
        retrofit.RestAdapter restAdapter78 = builder71.build();
        java.util.concurrent.Executor executor79 = restAdapter78.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler80 = restAdapter78.new RestHandler();
        retrofit.converter.Converter converter81 = restAdapter78.converter;
        builder45.converter = converter81;
        retrofit.Profiler profiler83 = null;
        builder45.profiler = profiler83;
        retrofit.Server server85 = builder45.server;
        restAdapter32.server = server85;
        retrofit.RestAdapter.Builder builder87 = builder4.setServer(server85);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNotNull(provider33);
        org.junit.Assert.assertNotNull(executor34);
        org.junit.Assert.assertNull(converter40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertNotNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(provider63);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNotNull(server69);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(restAdapter78);
        org.junit.Assert.assertNotNull(executor79);
        org.junit.Assert.assertNotNull(converter81);
        org.junit.Assert.assertNotNull(server85);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test11788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11788");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.RestAdapter.Log log26 = restAdapter8.log;
        retrofit.RestAdapter.Builder builder27 = builder6.setLog(log26);
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter29.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder28.setLogLevel(logLevel31);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.RestAdapter.Builder builder38 = builder34.setServer("hi!");
        retrofit.Profiler profiler39 = null;
        builder38.profiler = profiler39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.httpExecutor = executor42;
        retrofit.RestAdapter.Builder builder45 = builder41.setServer("hi!");
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder41.setLog(log46);
        retrofit.RestAdapter restAdapter48 = builder41.build();
        retrofit.converter.Converter converter49 = null;
        builder41.converter = converter49;
        retrofit.ErrorHandler errorHandler51 = null;
        builder41.errorHandler = errorHandler51;
        retrofit.RequestInterceptor requestInterceptor53 = builder41.requestInterceptor;
        builder38.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter.Builder builder55 = builder28.setRequestInterceptor(requestInterceptor53);
        java.util.concurrent.Executor executor56 = builder28.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel57 = builder28.logLevel;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.httpExecutor = executor59;
        retrofit.RestAdapter.Builder builder62 = builder58.setServer("hi!");
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder64 = builder58.setLog(log63);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter66 = builder65.converter;
        retrofit.RestAdapter.LogLevel logLevel67 = builder65.logLevel;
        retrofit.RestAdapter.Builder builder68 = builder64.setLogLevel(logLevel67);
        retrofit.converter.Converter converter69 = builder64.converter;
        java.util.concurrent.Executor executor70 = builder64.callbackExecutor;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter71.logLevel = logLevel73;
        retrofit.RestAdapter.Builder builder75 = builder64.setLogLevel(logLevel73);
        java.util.concurrent.Executor executor76 = builder75.callbackExecutor;
        retrofit.Profiler profiler77 = builder75.profiler;
        retrofit.RestAdapter restAdapter78 = builder75.build();
        retrofit.ErrorHandler errorHandler79 = restAdapter78.errorHandler;
        retrofit.converter.Converter converter80 = restAdapter78.converter;
        retrofit.RestAdapter.Builder builder81 = builder28.setConverter(converter80);
        retrofit.RequestInterceptor requestInterceptor82 = builder28.requestInterceptor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertNotNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(converter66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(converter69);
        org.junit.Assert.assertNull(executor70);
        org.junit.Assert.assertNull(logLevel72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(executor76);
        org.junit.Assert.assertNull(profiler77);
        org.junit.Assert.assertNotNull(restAdapter78);
        org.junit.Assert.assertNotNull(errorHandler79);
        org.junit.Assert.assertNotNull(converter80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(requestInterceptor82);
    }

    @Test
    public void test11789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11789");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.Server server5 = null;
        builder0.server = server5;
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        retrofit.converter.Converter converter8 = builder0.converter;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter10 = null;
        builder9.converter = converter10;
        retrofit.client.Client.Provider provider12 = null;
        builder9.clientProvider = provider12;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        builder9.requestInterceptor = requestInterceptor14;
        retrofit.Profiler profiler16 = builder9.profiler;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        java.util.concurrent.Executor executor19 = restAdapter17.callbackExecutor;
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        java.util.concurrent.Executor executor21 = restAdapter17.httpExecutor;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log23 = restAdapter22.log;
        retrofit.ErrorHandler errorHandler24 = restAdapter22.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("hi!");
        retrofit.Profiler profiler31 = null;
        builder30.profiler = profiler31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.RestAdapter restAdapter40 = builder33.build();
        retrofit.converter.Converter converter41 = null;
        builder33.converter = converter41;
        retrofit.ErrorHandler errorHandler43 = null;
        builder33.errorHandler = errorHandler43;
        retrofit.RequestInterceptor requestInterceptor45 = builder33.requestInterceptor;
        builder30.requestInterceptor = requestInterceptor45;
        restAdapter22.requestInterceptor = requestInterceptor45;
        retrofit.RequestInterceptor requestInterceptor48 = restAdapter22.requestInterceptor;
        restAdapter17.requestInterceptor = requestInterceptor48;
        builder9.requestInterceptor = requestInterceptor48;
        retrofit.RestAdapter.Builder builder51 = builder0.setRequestInterceptor(requestInterceptor48);
        java.lang.Class<?> wildcardClass52 = builder0.getClass();
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(log23);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter40);
        org.junit.Assert.assertNotNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test11790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11790");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.Profiler profiler3 = null;
        restAdapter0.profiler = profiler3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        restAdapter0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Log log27 = restAdapter9.log;
        retrofit.RestAdapter.Builder builder28 = builder7.setLog(log27);
        retrofit.Profiler profiler29 = builder28.profiler;
        retrofit.client.Client.Provider provider30 = builder28.clientProvider;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter33 = builder32.build();
        retrofit.RestAdapter.Log log34 = builder32.log;
        retrofit.RestAdapter restAdapter35 = builder32.build();
        retrofit.client.Client.Provider provider36 = restAdapter35.clientProvider;
        java.util.concurrent.Executor executor37 = restAdapter35.httpExecutor;
        restAdapter0.httpExecutor = executor37;
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(restAdapter33);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(restAdapter35);
        org.junit.Assert.assertNotNull(provider36);
        org.junit.Assert.assertNotNull(executor37);
    }

    @Test
    public void test11791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11791");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = null;
        restAdapter5.httpExecutor = executor6;
        retrofit.Profiler profiler8 = null;
        restAdapter5.profiler = profiler8;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter5.requestInterceptor = requestInterceptor10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter13 = builder12.converter;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter14.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        restAdapter14.requestInterceptor = requestInterceptor16;
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        restAdapter14.log = log26;
        retrofit.ErrorHandler errorHandler30 = null;
        restAdapter14.errorHandler = errorHandler30;
        retrofit.RestAdapter.Log log32 = restAdapter14.log;
        retrofit.RestAdapter.Builder builder33 = builder12.setLog(log32);
        retrofit.RequestInterceptor requestInterceptor34 = builder12.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor35 = builder12.requestInterceptor;
        retrofit.RestAdapter.Builder builder37 = builder12.setServer("hi!");
        retrofit.Server server38 = builder12.server;
        restAdapter5.server = server38;
        restAdapter0.server = server38;
        retrofit.Profiler profiler41 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertNull(profiler41);
    }

    @Test
    public void test11792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11792");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.Profiler profiler4 = null;
        restAdapter0.profiler = profiler4;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        restAdapter0.requestInterceptor = requestInterceptor6;
        retrofit.Server server8 = null;
        restAdapter0.server = server8;
        retrofit.client.Client.Provider provider10 = restAdapter0.clientProvider;
        retrofit.Server server11 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder12.logLevel = logLevel17;
        retrofit.converter.Converter converter19 = null;
        builder12.converter = converter19;
        retrofit.converter.Converter converter21 = null;
        builder12.converter = converter21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder23.logLevel = logLevel28;
        retrofit.converter.Converter converter30 = null;
        builder23.converter = converter30;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter32.requestInterceptor;
        retrofit.converter.Converter converter34 = restAdapter32.converter;
        java.util.concurrent.Executor executor35 = null;
        restAdapter32.callbackExecutor = executor35;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor38 = null;
        restAdapter37.httpExecutor = executor38;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        restAdapter37.requestInterceptor = requestInterceptor40;
        retrofit.RestAdapter.Log log42 = restAdapter37.log;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter37.logLevel = logLevel43;
        restAdapter32.logLevel = logLevel43;
        retrofit.RestAdapter.Builder builder46 = builder23.setLogLevel(logLevel43);
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor48 = restAdapter47.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        restAdapter47.requestInterceptor = requestInterceptor49;
        retrofit.Server server51 = null;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel60);
        restAdapter47.log = log59;
        retrofit.Profiler profiler63 = null;
        restAdapter47.profiler = profiler63;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        restAdapter47.requestInterceptor = requestInterceptor65;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = null;
        builder67.httpExecutor = executor68;
        retrofit.RestAdapter.Builder builder71 = builder67.setServer("hi!");
        retrofit.Profiler profiler72 = null;
        builder71.profiler = profiler72;
        retrofit.RequestInterceptor requestInterceptor74 = null;
        builder71.requestInterceptor = requestInterceptor74;
        retrofit.RestAdapter restAdapter76 = builder71.build();
        retrofit.converter.Converter converter77 = restAdapter76.converter;
        java.util.concurrent.Executor executor78 = restAdapter76.callbackExecutor;
        restAdapter47.httpExecutor = executor78;
        builder46.callbackExecutor = executor78;
        builder12.callbackExecutor = executor78;
        restAdapter0.callbackExecutor = executor78;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(provider10);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(restAdapter76);
        org.junit.Assert.assertNotNull(converter77);
        org.junit.Assert.assertNotNull(executor78);
    }

    @Test
    public void test11793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11793");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor9 = null;
        restAdapter0.httpExecutor = executor9;
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter0.getLogLevel();
        java.lang.Throwable throwable12 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable12, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(logLevel11);
    }

    @Test
    public void test11794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11794");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        java.util.concurrent.Executor executor4 = null;
        restAdapter0.callbackExecutor = executor4;
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.callbackExecutor;
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log18, logLevel19);
        retrofit.RestAdapter.Builder builder21 = builder8.setLogLevel(logLevel19);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log23 = restAdapter22.log;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = builder24.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor26 = builder24.requestInterceptor;
        retrofit.ErrorHandler errorHandler27 = null;
        builder24.errorHandler = errorHandler27;
        retrofit.converter.Converter converter29 = null;
        builder24.converter = converter29;
        retrofit.ErrorHandler errorHandler31 = null;
        builder24.errorHandler = errorHandler31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.Profiler profiler38 = null;
        builder37.profiler = profiler38;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        builder37.requestInterceptor = requestInterceptor40;
        retrofit.RestAdapter restAdapter42 = builder37.build();
        retrofit.converter.Converter converter43 = restAdapter42.converter;
        retrofit.RestAdapter.Builder builder44 = builder24.setConverter(converter43);
        restAdapter22.converter = converter43;
        builder8.converter = converter43;
        restAdapter0.converter = converter43;
        retrofit.ErrorHandler errorHandler48 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter50 = null;
        builder49.converter = converter50;
        retrofit.client.Client.Provider provider52 = null;
        builder49.clientProvider = provider52;
        java.util.concurrent.Executor executor54 = builder49.httpExecutor;
        java.util.concurrent.Executor executor55 = null;
        builder49.httpExecutor = executor55;
        retrofit.RestAdapter.Builder builder58 = builder49.setServer("hi!");
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor60 = builder59.callbackExecutor;
        retrofit.RestAdapter.Log log61 = builder59.log;
        retrofit.Server server62 = builder59.server;
        retrofit.converter.Converter converter63 = builder59.converter;
        retrofit.RestAdapter.Log log64 = builder59.log;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log66 = restAdapter65.log;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = builder67.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor69 = builder67.requestInterceptor;
        retrofit.ErrorHandler errorHandler70 = null;
        builder67.errorHandler = errorHandler70;
        retrofit.converter.Converter converter72 = null;
        builder67.converter = converter72;
        retrofit.ErrorHandler errorHandler74 = null;
        builder67.errorHandler = errorHandler74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor77 = null;
        builder76.httpExecutor = executor77;
        retrofit.RestAdapter.Builder builder80 = builder76.setServer("hi!");
        retrofit.Profiler profiler81 = null;
        builder80.profiler = profiler81;
        retrofit.RequestInterceptor requestInterceptor83 = null;
        builder80.requestInterceptor = requestInterceptor83;
        retrofit.RestAdapter restAdapter85 = builder80.build();
        retrofit.converter.Converter converter86 = restAdapter85.converter;
        retrofit.RestAdapter.Builder builder87 = builder67.setConverter(converter86);
        restAdapter65.converter = converter86;
        builder59.converter = converter86;
        builder49.converter = converter86;
        restAdapter0.converter = converter86;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(log23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(restAdapter42);
        org.junit.Assert.assertNotNull(converter43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertNull(log61);
        org.junit.Assert.assertNull(server62);
        org.junit.Assert.assertNull(converter63);
        org.junit.Assert.assertNull(log64);
        org.junit.Assert.assertNull(log66);
        org.junit.Assert.assertNull(executor68);
        org.junit.Assert.assertNull(requestInterceptor69);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(restAdapter85);
        org.junit.Assert.assertNotNull(converter86);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test11795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11795");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel9 = builder0.logLevel;
        retrofit.Server server10 = null;
        builder0.server = server10;
        retrofit.Server server12 = builder0.server;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log14 = restAdapter13.log;
        retrofit.ErrorHandler errorHandler15 = restAdapter13.errorHandler;
        retrofit.client.Client.Provider provider16 = null;
        restAdapter13.clientProvider = provider16;
        retrofit.RestAdapter.Log log18 = restAdapter13.log;
        retrofit.Profiler profiler19 = null;
        restAdapter13.profiler = profiler19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.httpExecutor = executor22;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("hi!");
        java.util.concurrent.Executor executor26 = null;
        builder21.httpExecutor = executor26;
        retrofit.RestAdapter restAdapter28 = builder21.build();
        retrofit.RestAdapter.Builder builder30 = builder21.setServer("hi!");
        retrofit.Server server31 = builder30.server;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor33 = restAdapter32.httpExecutor;
        java.util.concurrent.Executor executor34 = restAdapter32.httpExecutor;
        retrofit.Profiler profiler35 = null;
        restAdapter32.profiler = profiler35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.httpExecutor = executor38;
        retrofit.client.Client.Provider provider40 = null;
        builder37.clientProvider = provider40;
        retrofit.client.Client.Provider provider42 = builder37.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder44 = builder37.setLogLevel(logLevel43);
        java.util.concurrent.Executor executor45 = builder44.callbackExecutor;
        builder44.ensureSaneDefaults();
        java.util.concurrent.Executor executor47 = builder44.callbackExecutor;
        retrofit.RestAdapter.Log log48 = builder44.log;
        restAdapter32.log = log48;
        builder30.log = log48;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor52 = restAdapter51.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        restAdapter51.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter51.getLogLevel();
        retrofit.Server server56 = restAdapter51.server;
        java.util.concurrent.Executor executor57 = restAdapter51.httpExecutor;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.httpExecutor = executor59;
        retrofit.RestAdapter.Builder builder62 = builder58.setServer("hi!");
        java.util.concurrent.Executor executor63 = null;
        builder58.httpExecutor = executor63;
        retrofit.ErrorHandler errorHandler65 = builder58.errorHandler;
        java.util.concurrent.Executor executor66 = builder58.callbackExecutor;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = null;
        builder67.httpExecutor = executor68;
        retrofit.RestAdapter.Builder builder71 = builder67.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder67.logLevel = logLevel72;
        retrofit.converter.Converter converter74 = null;
        builder67.converter = converter74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter77 = builder76.converter;
        retrofit.Profiler profiler78 = null;
        builder76.profiler = profiler78;
        retrofit.RestAdapter.Builder builder81 = builder76.setServer("Retrofit-Idle");
        retrofit.Profiler profiler82 = builder81.profiler;
        retrofit.Server server83 = builder81.server;
        retrofit.RestAdapter.Builder builder84 = builder67.setServer(server83);
        retrofit.RestAdapter.Builder builder85 = builder58.setServer(server83);
        restAdapter51.server = server83;
        builder30.server = server83;
        restAdapter13.server = server83;
        builder0.server = server83;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(restAdapter28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(server31);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(provider42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNull(requestInterceptor52);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertNull(server56);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter77);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(profiler82);
        org.junit.Assert.assertNotNull(server83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test11796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11796");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor4 = null;
        builder3.httpExecutor = executor4;
        retrofit.RestAdapter.Builder builder7 = builder3.setServer("hi!");
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder3.setLog(log8);
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter10.logLevel;
        retrofit.converter.Converter converter13 = null;
        restAdapter10.converter = converter13;
        retrofit.ErrorHandler errorHandler15 = restAdapter10.errorHandler;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter17 = null;
        builder16.converter = converter17;
        retrofit.client.Client.Provider provider19 = null;
        builder16.clientProvider = provider19;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        builder16.requestInterceptor = requestInterceptor21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        retrofit.Profiler profiler28 = null;
        builder27.profiler = profiler28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.httpExecutor = executor31;
        retrofit.RestAdapter.Builder builder34 = builder30.setServer("hi!");
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder36 = builder30.setLog(log35);
        retrofit.RestAdapter restAdapter37 = builder30.build();
        retrofit.converter.Converter converter38 = null;
        builder30.converter = converter38;
        retrofit.ErrorHandler errorHandler40 = null;
        builder30.errorHandler = errorHandler40;
        retrofit.RequestInterceptor requestInterceptor42 = builder30.requestInterceptor;
        builder27.requestInterceptor = requestInterceptor42;
        retrofit.RestAdapter.Builder builder44 = builder16.setRequestInterceptor(requestInterceptor42);
        restAdapter10.requestInterceptor = requestInterceptor42;
        builder3.requestInterceptor = requestInterceptor42;
        retrofit.RequestInterceptor requestInterceptor47 = builder3.requestInterceptor;
        retrofit.RestAdapter restAdapter48 = builder3.build();
        java.util.concurrent.Executor executor49 = restAdapter48.callbackExecutor;
        restAdapter0.callbackExecutor = executor49;
        retrofit.client.Client.Provider provider51 = restAdapter0.clientProvider;
        retrofit.Profiler profiler52 = null;
        restAdapter0.profiler = profiler52;
        retrofit.client.Client.Provider provider54 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(restAdapter37);
        org.junit.Assert.assertNotNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(requestInterceptor47);
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertNotNull(executor49);
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertNull(provider54);
    }

    @Test
    public void test11797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11797");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter4.logLevel = logLevel6;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        restAdapter4.requestInterceptor = requestInterceptor8;
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter4.logLevel = logLevel10;
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter4.logLevel;
        builder0.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter16 = builder15.converter;
        retrofit.Profiler profiler17 = null;
        builder15.profiler = profiler17;
        retrofit.ErrorHandler errorHandler19 = null;
        builder15.errorHandler = errorHandler19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter22 = builder21.converter;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor24 = restAdapter23.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter23.requestInterceptor = requestInterceptor25;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel36);
        restAdapter23.log = log35;
        retrofit.ErrorHandler errorHandler39 = null;
        restAdapter23.errorHandler = errorHandler39;
        retrofit.RestAdapter.Log log41 = restAdapter23.log;
        retrofit.RestAdapter.Builder builder42 = builder21.setLog(log41);
        retrofit.Profiler profiler43 = builder42.profiler;
        java.util.concurrent.Executor executor44 = builder42.callbackExecutor;
        retrofit.ErrorHandler errorHandler45 = null;
        builder42.errorHandler = errorHandler45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = builder47.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor49 = builder47.requestInterceptor;
        retrofit.Profiler profiler50 = builder47.profiler;
        retrofit.RestAdapter.LogLevel logLevel51 = builder47.logLevel;
        builder42.logLevel = logLevel51;
        retrofit.RestAdapter.Builder builder53 = builder15.setLogLevel(logLevel51);
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter55 = builder54.converter;
        retrofit.RestAdapter.LogLevel logLevel56 = builder54.logLevel;
        retrofit.converter.Converter converter57 = builder54.converter;
        builder54.ensureSaneDefaults();
        java.util.concurrent.Executor executor59 = builder54.callbackExecutor;
        builder53.callbackExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.httpExecutor = executor62;
        retrofit.RestAdapter.Builder builder65 = builder61.setServer("hi!");
        retrofit.RestAdapter restAdapter66 = builder65.build();
        retrofit.RestAdapter.LogLevel logLevel67 = null;
        restAdapter66.logLevel = logLevel67;
        retrofit.client.Client.Provider provider69 = restAdapter66.clientProvider;
        retrofit.converter.Converter converter70 = restAdapter66.converter;
        builder53.converter = converter70;
        builder0.converter = converter70;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(profiler43);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNull(requestInterceptor49);
        org.junit.Assert.assertNull(profiler50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(converter55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter57);
        org.junit.Assert.assertNotNull(executor59);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(restAdapter66);
        org.junit.Assert.assertNotNull(provider69);
        org.junit.Assert.assertNotNull(converter70);
    }

    @Test
    public void test11798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11798");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder1 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter2 = builder1.converter;
        retrofit.RestAdapter.LogLevel logLevel3 = builder1.logLevel;
        builder1.ensureSaneDefaults();
        retrofit.client.Client.Provider provider5 = null;
        builder1.clientProvider = provider5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.httpExecutor = executor16;
        retrofit.RestAdapter.Builder builder19 = builder15.setServer("hi!");
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder15.setLog(log20);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter22.logLevel = logLevel24;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        restAdapter22.requestInterceptor = requestInterceptor26;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter22.logLevel = logLevel28;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log20, logLevel28);
        builder1.logLevel = logLevel28;
        retrofit.client.Client.Provider provider32 = null;
        builder1.clientProvider = provider32;
        retrofit.converter.Converter converter34 = builder1.converter;
        builder0.converter = converter34;
        retrofit.ErrorHandler errorHandler36 = builder0.errorHandler;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter38 = null;
        restAdapter37.converter = converter38;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        restAdapter37.requestInterceptor = requestInterceptor40;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log43 = restAdapter42.log;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        restAdapter42.requestInterceptor = requestInterceptor44;
        retrofit.RestAdapter.LogLevel logLevel46 = null;
        restAdapter42.logLevel = logLevel46;
        retrofit.ErrorHandler errorHandler48 = restAdapter42.errorHandler;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = builder49.setServer("hi!");
        retrofit.Profiler profiler54 = null;
        builder53.profiler = profiler54;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        builder53.requestInterceptor = requestInterceptor56;
        retrofit.RestAdapter restAdapter58 = builder53.build();
        retrofit.converter.Converter converter59 = restAdapter58.converter;
        restAdapter42.converter = converter59;
        restAdapter37.converter = converter59;
        builder0.converter = converter59;
        retrofit.RestAdapter.Builder builder64 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = builder65.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor67 = builder65.requestInterceptor;
        java.util.concurrent.Executor executor68 = builder65.httpExecutor;
        retrofit.RestAdapter.Builder builder70 = builder65.setServer("hi!");
        retrofit.RestAdapter restAdapter71 = builder70.build();
        retrofit.ErrorHandler errorHandler72 = restAdapter71.errorHandler;
        retrofit.RestAdapter.Builder builder73 = builder0.setErrorHandler(errorHandler72);
        java.lang.Class<?> wildcardClass74 = errorHandler72.getClass();
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(converter34);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter58);
        org.junit.Assert.assertNotNull(converter59);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertNull(requestInterceptor67);
        org.junit.Assert.assertNull(executor68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(restAdapter71);
        org.junit.Assert.assertNotNull(errorHandler72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test11799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11799");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList9, typedOutput13);
        java.util.List<retrofit.client.Header> headerList15 = request14.getHeaders();
        retrofit.mime.TypedOutput typedOutput16 = null;
        retrofit.client.Request request17 = new retrofit.client.Request("hi!", "", headerList15, typedOutput16);
        java.lang.String str18 = request17.getMethod();
        java.util.List<retrofit.client.Header> headerList19 = request17.getHeaders();
        java.util.List<retrofit.client.Header> headerList20 = request17.getHeaders();
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", headerList20, typedOutput21);
        java.util.List<retrofit.client.Header> headerList23 = request22.getHeaders();
        java.lang.String str24 = request22.getMethod();
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertNotNull(headerList23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Retrofit-Idle" + "'", str24, "Retrofit-Idle");
    }

    @Test
    public void test11800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11800");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log6 = builder0.log;
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter7.requestInterceptor;
        retrofit.Profiler profiler9 = restAdapter7.profiler;
        retrofit.client.Request request10 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request11 = restAdapter7.logAndReplaceRequest(request10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(log6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(requestInterceptor8);
        org.junit.Assert.assertNull(profiler9);
    }

    @Test
    public void test11801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11801");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        builder4.logLevel = logLevel6;
        retrofit.RestAdapter restAdapter9 = builder4.build();
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.converter.Converter converter13 = null;
        restAdapter10.converter = converter13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter16 = builder15.converter;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter17.requestInterceptor = requestInterceptor19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        restAdapter17.log = log29;
        retrofit.ErrorHandler errorHandler33 = null;
        restAdapter17.errorHandler = errorHandler33;
        retrofit.RestAdapter.Log log35 = restAdapter17.log;
        retrofit.RestAdapter.Builder builder36 = builder15.setLog(log35);
        restAdapter10.log = log35;
        retrofit.RestAdapter.Builder builder38 = builder4.setLog(log35);
        retrofit.ErrorHandler errorHandler39 = null;
        builder4.errorHandler = errorHandler39;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log42 = restAdapter41.log;
        java.util.concurrent.Executor executor43 = restAdapter41.callbackExecutor;
        retrofit.Profiler profiler44 = restAdapter41.profiler;
        retrofit.Profiler profiler45 = null;
        restAdapter41.profiler = profiler45;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        restAdapter41.requestInterceptor = requestInterceptor47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter50 = builder49.converter;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor52 = restAdapter51.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        restAdapter51.requestInterceptor = requestInterceptor53;
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel64);
        restAdapter51.log = log63;
        retrofit.ErrorHandler errorHandler67 = null;
        restAdapter51.errorHandler = errorHandler67;
        retrofit.RestAdapter.Log log69 = restAdapter51.log;
        retrofit.RestAdapter.Builder builder70 = builder49.setLog(log69);
        retrofit.RequestInterceptor requestInterceptor71 = builder49.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor72 = builder49.requestInterceptor;
        retrofit.RestAdapter.Log log73 = builder49.log;
        restAdapter41.log = log73;
        log73.log("hi!");
        retrofit.RestAdapter.Builder builder77 = builder4.setLog(log73);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(profiler44);
        org.junit.Assert.assertNull(converter50);
        org.junit.Assert.assertNull(requestInterceptor52);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(requestInterceptor71);
        org.junit.Assert.assertNull(requestInterceptor72);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test11802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11802");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log8 = restAdapter7.log;
        java.util.concurrent.Executor executor9 = restAdapter7.callbackExecutor;
        retrofit.Profiler profiler10 = restAdapter7.profiler;
        retrofit.Profiler profiler11 = null;
        restAdapter7.profiler = profiler11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter7.log = log21;
        restAdapter0.log = log21;
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = builder27.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor29 = builder27.requestInterceptor;
        retrofit.Profiler profiler30 = builder27.profiler;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler32 = builder31.errorHandler;
        retrofit.RestAdapter.Log log33 = builder31.log;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter35 = builder34.converter;
        retrofit.RestAdapter.LogLevel logLevel36 = builder34.logLevel;
        builder34.ensureSaneDefaults();
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder46.setLog(log51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter53.logLevel = logLevel55;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        restAdapter53.requestInterceptor = requestInterceptor57;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter53.logLevel = logLevel59;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log51, logLevel59);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.httpExecutor = executor63;
        retrofit.RestAdapter.Builder builder66 = builder62.setServer("hi!");
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder68 = builder62.setLog(log67);
        restAdapter61.log = log67;
        builder34.log = log67;
        java.util.concurrent.Executor executor71 = null;
        builder34.httpExecutor = executor71;
        retrofit.converter.Converter converter73 = null;
        builder34.converter = converter73;
        retrofit.ErrorHandler errorHandler75 = builder34.errorHandler;
        retrofit.RestAdapter.Builder builder76 = builder31.setErrorHandler(errorHandler75);
        retrofit.RestAdapter.Builder builder77 = builder27.setErrorHandler(errorHandler75);
        restAdapter0.errorHandler = errorHandler75;
        retrofit.client.Client.Provider provider79 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Log log80 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel81 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor82 = null;
        restAdapter0.httpExecutor = executor82;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(log33);
        org.junit.Assert.assertNull(converter35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(errorHandler75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(provider79);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test11803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11803");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        java.util.concurrent.Executor executor5 = builder0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        builder0.requestInterceptor = requestInterceptor6;
        retrofit.converter.Converter converter8 = null;
        builder0.converter = converter8;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter10.getLogLevel();
        retrofit.Server server15 = restAdapter10.server;
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        retrofit.ErrorHandler errorHandler17 = null;
        restAdapter10.errorHandler = errorHandler17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter20 = builder19.converter;
        retrofit.RestAdapter.LogLevel logLevel21 = builder19.logLevel;
        builder19.ensureSaneDefaults();
        retrofit.client.Client.Provider provider23 = null;
        builder19.clientProvider = provider23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter40.logLevel = logLevel42;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        restAdapter40.requestInterceptor = requestInterceptor44;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter40.logLevel = logLevel46;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log38, logLevel46);
        builder19.logLevel = logLevel46;
        retrofit.client.Client.Provider provider50 = null;
        builder19.clientProvider = provider50;
        retrofit.converter.Converter converter52 = builder19.converter;
        restAdapter10.converter = converter52;
        builder0.converter = converter52;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.httpExecutor = executor56;
        retrofit.RestAdapter.Builder builder59 = builder55.setServer("hi!");
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder61 = builder55.setLog(log60);
        retrofit.Server server62 = null;
        retrofit.client.Client.Provider provider63 = null;
        java.util.concurrent.Executor executor64 = null;
        java.util.concurrent.Executor executor65 = null;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        retrofit.converter.Converter converter67 = null;
        retrofit.Profiler profiler68 = null;
        retrofit.ErrorHandler errorHandler69 = null;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server62, provider63, executor64, executor65, requestInterceptor66, converter67, profiler68, errorHandler69, log70, logLevel71);
        builder55.logLevel = logLevel71;
        retrofit.converter.Converter converter74 = builder55.converter;
        retrofit.RequestInterceptor requestInterceptor75 = null;
        builder55.requestInterceptor = requestInterceptor75;
        builder55.ensureSaneDefaults();
        builder55.ensureSaneDefaults();
        retrofit.client.Client.Provider provider79 = builder55.clientProvider;
        retrofit.RestAdapter.Builder builder80 = builder0.setClient(provider79);
        retrofit.RestAdapter.LogLevel logLevel81 = builder80.logLevel;
        retrofit.Server server82 = builder80.server;
        retrofit.ErrorHandler errorHandler83 = builder80.errorHandler;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter84 = builder80.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(converter52);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter74);
        org.junit.Assert.assertNotNull(provider79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server82);
        org.junit.Assert.assertNull(errorHandler83);
    }

    @Test
    public void test11804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11804");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.Profiler profiler4 = null;
        restAdapter0.profiler = profiler4;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        restAdapter0.requestInterceptor = requestInterceptor6;
        retrofit.client.Client.Provider provider8 = restAdapter0.clientProvider;
        retrofit.ErrorHandler errorHandler9 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor10 = restAdapter0.callbackExecutor;
        retrofit.Server server11 = restAdapter0.server;
        retrofit.Profiler profiler12 = null;
        restAdapter0.profiler = profiler12;
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter15 = restAdapter0.converter;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(converter15);
    }

    @Test
    public void test11805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11805");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.Profiler profiler8 = null;
        builder0.profiler = profiler8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = builder10.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor12 = builder10.requestInterceptor;
        java.util.concurrent.Executor executor13 = builder10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel14 = builder10.logLevel;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.httpExecutor = executor16;
        retrofit.RestAdapter.Builder builder19 = builder15.setServer("hi!");
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        builder19.requestInterceptor = requestInterceptor22;
        retrofit.RestAdapter restAdapter24 = builder19.build();
        retrofit.converter.Converter converter25 = null;
        builder19.converter = converter25;
        retrofit.client.Client.Provider provider27 = builder19.clientProvider;
        retrofit.RestAdapter.Builder builder28 = builder10.setClient(provider27);
        retrofit.RestAdapter.Builder builder29 = builder0.setClient(provider27);
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor31 = restAdapter30.requestInterceptor;
        java.util.concurrent.Executor executor32 = restAdapter30.callbackExecutor;
        retrofit.converter.Converter converter33 = null;
        restAdapter30.converter = converter33;
        retrofit.RestAdapter.Log log35 = restAdapter30.log;
        retrofit.ErrorHandler errorHandler36 = restAdapter30.errorHandler;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter38 = builder37.converter;
        retrofit.RestAdapter.LogLevel logLevel39 = builder37.logLevel;
        builder37.ensureSaneDefaults();
        retrofit.client.Client.Provider provider41 = null;
        builder37.clientProvider = provider41;
        retrofit.Profiler profiler43 = builder37.profiler;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = builder44.callbackExecutor;
        retrofit.RestAdapter.Log log46 = builder44.log;
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel64);
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter66.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter66.logLevel = logLevel68;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter66.setLogLevel(logLevel70);
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log63, logLevel70);
        retrofit.RestAdapter.Builder builder73 = builder44.setLogLevel(logLevel70);
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor75 = null;
        builder74.httpExecutor = executor75;
        retrofit.RestAdapter.Builder builder78 = builder74.setServer("hi!");
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder80 = builder74.setLog(log79);
        builder44.log = log79;
        retrofit.RestAdapter.Builder builder82 = builder37.setLog(log79);
        log79.log("hi!");
        log79.log("");
        restAdapter30.log = log79;
        retrofit.RestAdapter.Builder builder88 = builder29.setLog(log79);
        retrofit.RestAdapter.Log log89 = builder29.log;
        retrofit.ErrorHandler errorHandler90 = builder29.errorHandler;
        retrofit.converter.Converter converter91 = null;
        builder29.converter = converter91;
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(provider27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNull(converter38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler43);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(log46);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(log89);
        org.junit.Assert.assertNull(errorHandler90);
    }

    @Test
    public void test11806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11806");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        java.util.concurrent.Executor executor10 = restAdapter8.callbackExecutor;
        retrofit.converter.Converter converter11 = null;
        restAdapter8.converter = converter11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter14 = builder13.converter;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter15.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        restAdapter15.requestInterceptor = requestInterceptor17;
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel28);
        restAdapter15.log = log27;
        retrofit.ErrorHandler errorHandler31 = null;
        restAdapter15.errorHandler = errorHandler31;
        retrofit.RestAdapter.Log log33 = restAdapter15.log;
        retrofit.RestAdapter.Builder builder34 = builder13.setLog(log33);
        restAdapter8.log = log33;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log33, logLevel45);
        java.util.concurrent.Executor executor48 = restAdapter47.httpExecutor;
        retrofit.client.Header[] headerArray51 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList52 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList52, headerArray51);
        retrofit.mime.TypedOutput typedOutput54 = null;
        retrofit.client.Request request55 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList52, typedOutput54);
        java.lang.String str56 = request55.getMethod();
        java.lang.String str57 = request55.getMethod();
        java.lang.String str58 = request55.getUrl();
        java.lang.String str59 = request55.getUrl();
        java.util.List<retrofit.client.Header> headerList60 = request55.getHeaders();
        retrofit.client.Request request61 = restAdapter47.logAndReplaceRequest(request55);
        java.lang.String str62 = request61.getMethod();
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNotNull(headerArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(headerList60);
        org.junit.Assert.assertNotNull(request61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test11807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11807");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter10.errorHandler = errorHandler26;
        retrofit.RestAdapter.Log log28 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder29 = builder8.setLog(log28);
        retrofit.Profiler profiler30 = builder29.profiler;
        retrofit.Profiler profiler31 = builder29.profiler;
        java.util.concurrent.Executor executor32 = builder29.callbackExecutor;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.RestAdapter restAdapter40 = builder33.build();
        java.util.concurrent.Executor executor41 = restAdapter40.httpExecutor;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.httpExecutor = executor43;
        retrofit.client.Client.Provider provider45 = null;
        builder42.clientProvider = provider45;
        retrofit.RestAdapter.Builder builder48 = builder42.setServer("hi!");
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = builder49.setServer("hi!");
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder49.setLog(log54);
        retrofit.RestAdapter restAdapter56 = builder49.build();
        java.util.concurrent.Executor executor57 = restAdapter56.httpExecutor;
        builder48.callbackExecutor = executor57;
        retrofit.RestAdapter.Builder builder59 = builder29.setExecutors(executor41, executor57);
        restAdapter7.httpExecutor = executor41;
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel70);
        restAdapter7.logLevel = logLevel70;
        retrofit.ErrorHandler errorHandler73 = restAdapter7.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler74 = restAdapter7.new RestHandler();
        java.util.concurrent.Executor executor75 = restAdapter7.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler76 = restAdapter7.new RestHandler();
        retrofit.Profiler profiler77 = null;
        restAdapter7.profiler = profiler77;
        retrofit.client.Client.Provider provider79 = restAdapter7.clientProvider;
        java.lang.Throwable throwable80 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter7.logException(throwable80, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter40);
        org.junit.Assert.assertNotNull(executor41);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNotNull(executor57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(errorHandler73);
        org.junit.Assert.assertNotNull(executor75);
        org.junit.Assert.assertNotNull(provider79);
    }

    @Test
    public void test11808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11808");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.Server server9 = null;
        builder0.server = server9;
        retrofit.converter.Converter converter11 = null;
        builder0.converter = converter11;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        restAdapter13.requestInterceptor = requestInterceptor15;
        retrofit.ErrorHandler errorHandler17 = null;
        restAdapter13.errorHandler = errorHandler17;
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel28);
        retrofit.ErrorHandler errorHandler30 = null;
        restAdapter29.errorHandler = errorHandler30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.httpExecutor = executor33;
        retrofit.RestAdapter.Builder builder36 = builder32.setServer("hi!");
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder38 = builder32.setLog(log37);
        retrofit.RestAdapter restAdapter39 = builder32.build();
        retrofit.converter.Converter converter40 = null;
        builder32.converter = converter40;
        retrofit.ErrorHandler errorHandler42 = null;
        builder32.errorHandler = errorHandler42;
        retrofit.RequestInterceptor requestInterceptor44 = builder32.requestInterceptor;
        restAdapter29.requestInterceptor = requestInterceptor44;
        restAdapter13.requestInterceptor = requestInterceptor44;
        retrofit.RestAdapter.Builder builder47 = builder0.setRequestInterceptor(requestInterceptor44);
        retrofit.RestAdapter.Builder builder49 = builder0.setServer("hi!");
        builder49.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor51 = builder49.requestInterceptor;
        retrofit.RestAdapter restAdapter52 = builder49.build();
        retrofit.RequestInterceptor requestInterceptor53 = builder49.requestInterceptor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(restAdapter39);
        org.junit.Assert.assertNotNull(requestInterceptor44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertNotNull(requestInterceptor53);
    }

    @Test
    public void test11809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11809");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.converter.Converter converter4 = null;
        restAdapter0.converter = converter4;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor7 = restAdapter6.requestInterceptor;
        retrofit.converter.Converter converter8 = restAdapter6.converter;
        java.util.concurrent.Executor executor9 = null;
        restAdapter6.callbackExecutor = executor9;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = null;
        restAdapter11.httpExecutor = executor12;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        restAdapter11.requestInterceptor = requestInterceptor14;
        retrofit.RestAdapter.Log log16 = restAdapter11.log;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter11.logLevel = logLevel17;
        restAdapter6.logLevel = logLevel17;
        restAdapter0.logLevel = logLevel17;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter21.logLevel = logLevel23;
        restAdapter0.logLevel = logLevel23;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.RestAdapter.Log log28 = builder26.log;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter30 = builder29.converter;
        retrofit.RestAdapter.LogLevel logLevel31 = builder29.logLevel;
        builder29.ensureSaneDefaults();
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.httpExecutor = executor42;
        retrofit.RestAdapter.Builder builder45 = builder41.setServer("hi!");
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder41.setLog(log46);
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter48.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter48.logLevel = logLevel50;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        restAdapter48.requestInterceptor = requestInterceptor52;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter48.logLevel = logLevel54;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log46, logLevel54);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor58 = null;
        builder57.httpExecutor = executor58;
        retrofit.RestAdapter.Builder builder61 = builder57.setServer("hi!");
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder63 = builder57.setLog(log62);
        restAdapter56.log = log62;
        builder29.log = log62;
        java.util.concurrent.Executor executor66 = null;
        builder29.httpExecutor = executor66;
        retrofit.converter.Converter converter68 = null;
        builder29.converter = converter68;
        retrofit.ErrorHandler errorHandler70 = builder29.errorHandler;
        retrofit.RestAdapter.Builder builder71 = builder26.setErrorHandler(errorHandler70);
        restAdapter0.errorHandler = errorHandler70;
        retrofit.client.Client.Provider provider73 = restAdapter0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(requestInterceptor7);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertNull(converter30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(logLevel49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(errorHandler70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(provider73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test11810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11810");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList5, typedOutput9);
        java.util.List<retrofit.client.Header> headerList11 = request10.getHeaders();
        java.lang.String str12 = request10.getMethod();
        java.lang.String str13 = request10.getUrl();
        java.util.List<retrofit.client.Header> headerList14 = request10.getHeaders();
        java.lang.String str15 = request10.getUrl();
        java.lang.String str16 = request10.getUrl();
        java.lang.String str17 = request10.getMethod();
        retrofit.mime.TypedOutput typedOutput18 = request10.getBody();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-Idle" + "'", str15, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertNull(typedOutput18);
    }

    @Test
    public void test11811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11811");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log22, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLog(log22);
        retrofit.Server server30 = builder29.server;
        retrofit.ErrorHandler errorHandler31 = null;
        builder29.errorHandler = errorHandler31;
        retrofit.Profiler profiler33 = null;
        builder29.profiler = profiler33;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log36 = restAdapter35.log;
        retrofit.ErrorHandler errorHandler37 = restAdapter35.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.Profiler profiler44 = null;
        builder43.profiler = profiler44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder46.setLog(log51);
        retrofit.RestAdapter restAdapter53 = builder46.build();
        retrofit.converter.Converter converter54 = null;
        builder46.converter = converter54;
        retrofit.ErrorHandler errorHandler56 = null;
        builder46.errorHandler = errorHandler56;
        retrofit.RequestInterceptor requestInterceptor58 = builder46.requestInterceptor;
        builder43.requestInterceptor = requestInterceptor58;
        restAdapter35.requestInterceptor = requestInterceptor58;
        retrofit.RestAdapter.Builder builder61 = builder29.setRequestInterceptor(requestInterceptor58);
        java.util.concurrent.Executor executor62 = builder61.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor63 = builder61.requestInterceptor;
        java.util.concurrent.Executor executor64 = builder61.callbackExecutor;
        retrofit.Server server65 = builder61.server;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = builder66.callbackExecutor;
        retrofit.RestAdapter.Log log68 = builder66.log;
        retrofit.Server server69 = builder66.server;
        retrofit.converter.Converter converter70 = builder66.converter;
        retrofit.RestAdapter.LogLevel logLevel71 = builder66.logLevel;
        retrofit.RestAdapter.LogLevel logLevel72 = builder66.logLevel;
        builder61.logLevel = logLevel72;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNotNull(requestInterceptor63);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertNull(executor67);
        org.junit.Assert.assertNull(log68);
        org.junit.Assert.assertNull(server69);
        org.junit.Assert.assertNull(converter70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test11812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11812");
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        java.lang.String str19 = request18.getUrl();
        java.util.List<retrofit.client.Header> headerList20 = request18.getHeaders();
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "", headerList20, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList20, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "", headerList20, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList20, typedOutput27);
        java.lang.String str29 = request28.getMethod();
        retrofit.mime.TypedOutput typedOutput30 = request28.getBody();
        retrofit.mime.TypedOutput typedOutput31 = request28.getBody();
        java.lang.String str32 = request28.getUrl();
        java.util.List<retrofit.client.Header> headerList33 = request28.getHeaders();
        retrofit.mime.TypedOutput typedOutput34 = null;
        retrofit.client.Request request35 = new retrofit.client.Request("", "Retrofit-Idle", headerList33, typedOutput34);
        retrofit.mime.TypedOutput typedOutput36 = null;
        retrofit.client.Request request37 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList33, typedOutput36);
        java.lang.String str38 = request37.getMethod();
        java.lang.String str39 = request37.getMethod();
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Retrofit-Idle" + "'", str29, "Retrofit-Idle");
        org.junit.Assert.assertNull(typedOutput30);
        org.junit.Assert.assertNull(typedOutput31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(headerList33);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
    }

    @Test
    public void test11813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11813");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.RequestInterceptor requestInterceptor8 = null;
        builder7.requestInterceptor = requestInterceptor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.RestAdapter restAdapter12 = builder7.build();
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        restAdapter13.requestInterceptor = requestInterceptor15;
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter13.getLogLevel();
        retrofit.client.Client.Provider provider18 = null;
        restAdapter13.clientProvider = provider18;
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter13.logLevel;
        java.util.concurrent.Executor executor21 = restAdapter13.callbackExecutor;
        java.util.concurrent.Executor executor22 = null;
        restAdapter13.httpExecutor = executor22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        java.util.concurrent.Executor executor29 = null;
        builder24.httpExecutor = executor29;
        retrofit.RestAdapter restAdapter31 = builder24.build();
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter33 = builder32.converter;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor35 = restAdapter34.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        restAdapter34.requestInterceptor = requestInterceptor36;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel47);
        restAdapter34.log = log46;
        retrofit.ErrorHandler errorHandler50 = null;
        restAdapter34.errorHandler = errorHandler50;
        retrofit.RestAdapter.Log log52 = restAdapter34.log;
        retrofit.RestAdapter.Builder builder53 = builder32.setLog(log52);
        retrofit.Profiler profiler54 = builder53.profiler;
        retrofit.Profiler profiler55 = builder53.profiler;
        java.util.concurrent.Executor executor56 = builder53.callbackExecutor;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor58 = null;
        builder57.httpExecutor = executor58;
        retrofit.RestAdapter.Builder builder61 = builder57.setServer("hi!");
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder63 = builder57.setLog(log62);
        retrofit.RestAdapter restAdapter64 = builder57.build();
        java.util.concurrent.Executor executor65 = restAdapter64.httpExecutor;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = null;
        builder66.httpExecutor = executor67;
        retrofit.client.Client.Provider provider69 = null;
        builder66.clientProvider = provider69;
        retrofit.RestAdapter.Builder builder72 = builder66.setServer("hi!");
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor74 = null;
        builder73.httpExecutor = executor74;
        retrofit.RestAdapter.Builder builder77 = builder73.setServer("hi!");
        retrofit.RestAdapter.Log log78 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder79 = builder73.setLog(log78);
        retrofit.RestAdapter restAdapter80 = builder73.build();
        java.util.concurrent.Executor executor81 = restAdapter80.httpExecutor;
        builder72.callbackExecutor = executor81;
        retrofit.RestAdapter.Builder builder83 = builder53.setExecutors(executor65, executor81);
        restAdapter31.httpExecutor = executor65;
        retrofit.Server server85 = null;
        retrofit.client.Client.Provider provider86 = null;
        java.util.concurrent.Executor executor87 = null;
        java.util.concurrent.Executor executor88 = null;
        retrofit.RequestInterceptor requestInterceptor89 = null;
        retrofit.converter.Converter converter90 = null;
        retrofit.Profiler profiler91 = null;
        retrofit.ErrorHandler errorHandler92 = null;
        retrofit.RestAdapter.Log log93 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel94 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter95 = new retrofit.RestAdapter(server85, provider86, executor87, executor88, requestInterceptor89, converter90, profiler91, errorHandler92, log93, logLevel94);
        restAdapter31.logLevel = logLevel94;
        retrofit.ErrorHandler errorHandler97 = restAdapter31.errorHandler;
        restAdapter13.errorHandler = errorHandler97;
        restAdapter12.errorHandler = errorHandler97;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter12);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertNull(converter33);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(profiler54);
        org.junit.Assert.assertNull(profiler55);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(restAdapter64);
        org.junit.Assert.assertNotNull(executor65);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNotNull(executor81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(log93);
        org.junit.Assert.assertTrue("'" + logLevel94 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel94.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(errorHandler97);
    }

    @Test
    public void test11814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11814");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RestAdapter.LogLevel logLevel7 = builder4.logLevel;
        builder4.ensureSaneDefaults();
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel18);
        java.util.concurrent.Executor executor20 = null;
        restAdapter19.httpExecutor = executor20;
        retrofit.RestAdapter.Log log22 = restAdapter19.log;
        retrofit.RestAdapter.Builder builder23 = builder4.setLog(log22);
        builder23.ensureSaneDefaults();
        builder23.ensureSaneDefaults();
        retrofit.converter.Converter converter26 = builder23.converter;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(converter26);
    }

    @Test
    public void test11815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11815");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler4 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter5 = restAdapter0.converter;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor7 = restAdapter6.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        restAdapter6.requestInterceptor = requestInterceptor8;
        java.util.concurrent.Executor executor10 = restAdapter6.httpExecutor;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor12 = restAdapter11.requestInterceptor;
        retrofit.converter.Converter converter13 = restAdapter11.converter;
        java.util.concurrent.Executor executor14 = null;
        restAdapter11.callbackExecutor = executor14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.httpExecutor = executor17;
        retrofit.RestAdapter.Builder builder20 = builder16.setServer("hi!");
        java.util.concurrent.Executor executor21 = null;
        builder16.httpExecutor = executor21;
        retrofit.RestAdapter restAdapter23 = builder16.build();
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter25 = builder24.converter;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter26.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        restAdapter26.requestInterceptor = requestInterceptor28;
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel39);
        restAdapter26.log = log38;
        retrofit.ErrorHandler errorHandler42 = null;
        restAdapter26.errorHandler = errorHandler42;
        retrofit.RestAdapter.Log log44 = restAdapter26.log;
        retrofit.RestAdapter.Builder builder45 = builder24.setLog(log44);
        retrofit.Profiler profiler46 = builder45.profiler;
        retrofit.Profiler profiler47 = builder45.profiler;
        java.util.concurrent.Executor executor48 = builder45.callbackExecutor;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = builder49.setServer("hi!");
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder49.setLog(log54);
        retrofit.RestAdapter restAdapter56 = builder49.build();
        java.util.concurrent.Executor executor57 = restAdapter56.httpExecutor;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.httpExecutor = executor59;
        retrofit.client.Client.Provider provider61 = null;
        builder58.clientProvider = provider61;
        retrofit.RestAdapter.Builder builder64 = builder58.setServer("hi!");
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = null;
        builder65.httpExecutor = executor66;
        retrofit.RestAdapter.Builder builder69 = builder65.setServer("hi!");
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder65.setLog(log70);
        retrofit.RestAdapter restAdapter72 = builder65.build();
        java.util.concurrent.Executor executor73 = restAdapter72.httpExecutor;
        builder64.callbackExecutor = executor73;
        retrofit.RestAdapter.Builder builder75 = builder45.setExecutors(executor57, executor73);
        restAdapter23.httpExecutor = executor57;
        retrofit.Server server77 = null;
        retrofit.client.Client.Provider provider78 = null;
        java.util.concurrent.Executor executor79 = null;
        java.util.concurrent.Executor executor80 = null;
        retrofit.RequestInterceptor requestInterceptor81 = null;
        retrofit.converter.Converter converter82 = null;
        retrofit.Profiler profiler83 = null;
        retrofit.ErrorHandler errorHandler84 = null;
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter87 = new retrofit.RestAdapter(server77, provider78, executor79, executor80, requestInterceptor81, converter82, profiler83, errorHandler84, log85, logLevel86);
        restAdapter23.logLevel = logLevel86;
        retrofit.ErrorHandler errorHandler89 = restAdapter23.errorHandler;
        retrofit.RequestInterceptor requestInterceptor90 = restAdapter23.requestInterceptor;
        restAdapter11.requestInterceptor = requestInterceptor90;
        restAdapter6.requestInterceptor = requestInterceptor90;
        restAdapter0.requestInterceptor = requestInterceptor90;
        retrofit.RestAdapter.LogLevel logLevel94 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(requestInterceptor7);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter23);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(profiler46);
        org.junit.Assert.assertNull(profiler47);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNotNull(executor57);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(restAdapter72);
        org.junit.Assert.assertNotNull(executor73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(errorHandler89);
        org.junit.Assert.assertNotNull(requestInterceptor90);
        org.junit.Assert.assertNull(logLevel94);
    }

    @Test
    public void test11816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11816");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.Profiler profiler3 = null;
        restAdapter0.profiler = profiler3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        restAdapter0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Log log27 = restAdapter9.log;
        retrofit.RestAdapter.Builder builder28 = builder7.setLog(log27);
        retrofit.RequestInterceptor requestInterceptor29 = builder7.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor30 = builder7.requestInterceptor;
        retrofit.RestAdapter.Builder builder32 = builder7.setServer("hi!");
        retrofit.Server server33 = builder7.server;
        restAdapter0.server = server33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = builder35.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor37 = builder35.requestInterceptor;
        retrofit.Profiler profiler38 = builder35.profiler;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = builder39.errorHandler;
        retrofit.RestAdapter.Log log41 = builder39.log;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter43 = builder42.converter;
        retrofit.RestAdapter.LogLevel logLevel44 = builder42.logLevel;
        builder42.ensureSaneDefaults();
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor55 = null;
        builder54.httpExecutor = executor55;
        retrofit.RestAdapter.Builder builder58 = builder54.setServer("hi!");
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder60 = builder54.setLog(log59);
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter61.logLevel = logLevel63;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        restAdapter61.requestInterceptor = requestInterceptor65;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter61.logLevel = logLevel67;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log59, logLevel67);
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor71 = null;
        builder70.httpExecutor = executor71;
        retrofit.RestAdapter.Builder builder74 = builder70.setServer("hi!");
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder76 = builder70.setLog(log75);
        restAdapter69.log = log75;
        builder42.log = log75;
        java.util.concurrent.Executor executor79 = null;
        builder42.httpExecutor = executor79;
        retrofit.converter.Converter converter81 = null;
        builder42.converter = converter81;
        retrofit.ErrorHandler errorHandler83 = builder42.errorHandler;
        retrofit.RestAdapter.Builder builder84 = builder39.setErrorHandler(errorHandler83);
        retrofit.RestAdapter.Builder builder85 = builder35.setErrorHandler(errorHandler83);
        restAdapter0.errorHandler = errorHandler83;
        retrofit.Profiler profiler87 = restAdapter0.profiler;
        retrofit.Server server88 = null;
        restAdapter0.server = server88;
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(server33);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(requestInterceptor37);
        org.junit.Assert.assertNull(profiler38);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(errorHandler83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNull(profiler87);
    }

    @Test
    public void test11817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11817");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter3.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter3.logLevel = logLevel5;
        retrofit.Profiler profiler7 = restAdapter3.profiler;
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter3.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter3.requestInterceptor;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log11 = restAdapter10.log;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.Profiler profiler13 = restAdapter10.profiler;
        retrofit.Profiler profiler14 = null;
        restAdapter10.profiler = profiler14;
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel25);
        restAdapter10.log = log24;
        restAdapter3.log = log24;
        restAdapter0.log = log24;
        retrofit.Server server30 = restAdapter0.server;
        retrofit.Profiler profiler31 = restAdapter0.profiler;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(profiler31);
    }

    @Test
    public void test11818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11818");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.getMethod();
        retrofit.mime.TypedOutput typedOutput10 = request8.getBody();
        retrofit.mime.TypedOutput typedOutput11 = request8.getBody();
        java.lang.String str12 = request8.getMethod();
        java.util.List<retrofit.client.Header> headerList13 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput14 = request8.getBody();
        java.util.List<retrofit.client.Header> headerList15 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput16 = null;
        retrofit.client.Request request17 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", headerList15, typedOutput16);
        java.lang.String str18 = request17.getUrl();
        java.util.List<retrofit.client.Header> headerList19 = request17.getHeaders();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Retrofit-Idle" + "'", str18, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(headerList19);
    }

    @Test
    public void test11819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11819");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel3 = builder0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel4 = builder0.logLevel;
        retrofit.Profiler profiler5 = null;
        builder0.profiler = profiler5;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor10 = builder8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = builder8.requestInterceptor;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.Profiler profiler17 = null;
        builder16.profiler = profiler17;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        builder16.requestInterceptor = requestInterceptor19;
        retrofit.RestAdapter restAdapter21 = builder16.build();
        retrofit.client.Client.Provider provider22 = builder16.clientProvider;
        builder8.clientProvider = provider22;
        retrofit.Profiler profiler24 = null;
        builder8.profiler = profiler24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("hi!");
        retrofit.RestAdapter restAdapter31 = builder30.build();
        retrofit.client.Header[] headerArray34 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList35 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList35, headerArray34);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList35, typedOutput37);
        java.lang.String str39 = request38.getMethod();
        java.lang.String str40 = request38.getMethod();
        retrofit.client.Request request41 = restAdapter31.logAndReplaceRequest(request38);
        retrofit.RequestInterceptor requestInterceptor42 = restAdapter31.requestInterceptor;
        retrofit.RestAdapter.Builder builder43 = builder8.setRequestInterceptor(requestInterceptor42);
        retrofit.RestAdapter.Builder builder44 = builder0.setRequestInterceptor(requestInterceptor42);
        java.util.concurrent.Executor executor45 = builder0.httpExecutor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(provider22);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertNotNull(headerArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(request41);
        org.junit.Assert.assertNotNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(executor45);
    }

    @Test
    public void test11820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11820");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder12.setLog(log17);
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter19.logLevel = logLevel21;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter19.requestInterceptor = requestInterceptor23;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter19.logLevel = logLevel25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log17, logLevel25);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("hi!");
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder28.setLog(log33);
        restAdapter27.log = log33;
        builder0.log = log33;
        java.util.concurrent.Executor executor37 = null;
        builder0.httpExecutor = executor37;
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel56);
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter58.logLevel = logLevel60;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter58.setLogLevel(logLevel62);
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log55, logLevel62);
        retrofit.RestAdapter.Builder builder65 = builder0.setLog(log55);
        log55.log("");
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test11821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11821");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log22, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLog(log22);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter31 = builder30.converter;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter32.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter32.requestInterceptor = requestInterceptor34;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        restAdapter32.log = log44;
        retrofit.ErrorHandler errorHandler48 = null;
        restAdapter32.errorHandler = errorHandler48;
        retrofit.RestAdapter.Log log50 = restAdapter32.log;
        retrofit.RestAdapter.Builder builder51 = builder30.setLog(log50);
        retrofit.RequestInterceptor requestInterceptor52 = builder30.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor53 = builder30.requestInterceptor;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter55 = null;
        builder54.converter = converter55;
        retrofit.client.Client.Provider provider57 = null;
        builder54.clientProvider = provider57;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        builder54.requestInterceptor = requestInterceptor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.httpExecutor = executor62;
        retrofit.RestAdapter.Builder builder65 = builder61.setServer("hi!");
        retrofit.Profiler profiler66 = null;
        builder65.profiler = profiler66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor69 = null;
        builder68.httpExecutor = executor69;
        retrofit.RestAdapter.Builder builder72 = builder68.setServer("hi!");
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder74 = builder68.setLog(log73);
        retrofit.RestAdapter restAdapter75 = builder68.build();
        retrofit.converter.Converter converter76 = null;
        builder68.converter = converter76;
        retrofit.ErrorHandler errorHandler78 = null;
        builder68.errorHandler = errorHandler78;
        retrofit.RequestInterceptor requestInterceptor80 = builder68.requestInterceptor;
        builder65.requestInterceptor = requestInterceptor80;
        retrofit.RestAdapter.Builder builder82 = builder54.setRequestInterceptor(requestInterceptor80);
        retrofit.RestAdapter.Builder builder83 = builder30.setRequestInterceptor(requestInterceptor80);
        retrofit.RestAdapter.Builder builder84 = builder0.setRequestInterceptor(requestInterceptor80);
        retrofit.RestAdapter.Log log85 = builder0.log;
        log85.log("hi!");
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(requestInterceptor52);
        org.junit.Assert.assertNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(restAdapter75);
        org.junit.Assert.assertNotNull(requestInterceptor80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(log85);
    }

    @Test
    public void test11822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11822");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.client.Client.Provider provider1 = null;
        restAdapter0.clientProvider = provider1;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log6 = restAdapter5.log;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        restAdapter5.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        restAdapter5.logLevel = logLevel9;
        retrofit.client.Client.Provider provider11 = restAdapter5.clientProvider;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.client.Client.Provider provider15 = null;
        builder12.clientProvider = provider15;
        retrofit.client.Client.Provider provider17 = builder12.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder19 = builder12.setLogLevel(logLevel18);
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder19.requestInterceptor = requestInterceptor20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter23 = null;
        builder22.converter = converter23;
        retrofit.client.Client.Provider provider25 = null;
        builder22.clientProvider = provider25;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        builder22.requestInterceptor = requestInterceptor27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = null;
        builder29.httpExecutor = executor30;
        retrofit.RestAdapter.Builder builder33 = builder29.setServer("hi!");
        retrofit.Profiler profiler34 = null;
        builder33.profiler = profiler34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder40 = builder36.setServer("hi!");
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder36.setLog(log41);
        retrofit.RestAdapter restAdapter43 = builder36.build();
        retrofit.converter.Converter converter44 = null;
        builder36.converter = converter44;
        retrofit.ErrorHandler errorHandler46 = null;
        builder36.errorHandler = errorHandler46;
        retrofit.RequestInterceptor requestInterceptor48 = builder36.requestInterceptor;
        builder33.requestInterceptor = requestInterceptor48;
        retrofit.RestAdapter.Builder builder50 = builder22.setRequestInterceptor(requestInterceptor48);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter52 = builder51.converter;
        retrofit.RestAdapter.LogLevel logLevel53 = builder51.logLevel;
        builder51.ensureSaneDefaults();
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor64 = null;
        builder63.httpExecutor = executor64;
        retrofit.RestAdapter.Builder builder67 = builder63.setServer("hi!");
        retrofit.RestAdapter.Log log68 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder69 = builder63.setLog(log68);
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter70.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter70.logLevel = logLevel72;
        retrofit.RequestInterceptor requestInterceptor74 = null;
        restAdapter70.requestInterceptor = requestInterceptor74;
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter70.logLevel = logLevel76;
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log68, logLevel76);
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor80 = null;
        builder79.httpExecutor = executor80;
        retrofit.RestAdapter.Builder builder83 = builder79.setServer("hi!");
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder85 = builder79.setLog(log84);
        restAdapter78.log = log84;
        builder51.log = log84;
        java.util.concurrent.Executor executor88 = null;
        builder51.httpExecutor = executor88;
        retrofit.converter.Converter converter90 = null;
        builder51.converter = converter90;
        retrofit.ErrorHandler errorHandler92 = builder51.errorHandler;
        builder50.errorHandler = errorHandler92;
        retrofit.RequestInterceptor requestInterceptor94 = builder50.requestInterceptor;
        builder19.requestInterceptor = requestInterceptor94;
        restAdapter5.requestInterceptor = requestInterceptor94;
        restAdapter0.requestInterceptor = requestInterceptor94;
        retrofit.converter.Converter converter98 = restAdapter0.converter;
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(log6);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertNotNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(converter52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(logLevel71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(errorHandler92);
        org.junit.Assert.assertNotNull(requestInterceptor94);
        org.junit.Assert.assertNull(converter98);
    }

    @Test
    public void test11823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11823");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.Profiler profiler5 = builder0.profiler;
        java.util.concurrent.Executor executor6 = builder0.httpExecutor;
        retrofit.converter.Converter converter7 = builder0.converter;
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder10 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.Profiler profiler13 = null;
        builder11.profiler = profiler13;
        retrofit.RestAdapter.Builder builder16 = builder11.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter17 = builder16.converter;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.httpExecutor = executor19;
        retrofit.client.Client.Provider provider21 = null;
        builder18.clientProvider = provider21;
        retrofit.client.Client.Provider provider23 = builder18.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder25 = builder18.setLogLevel(logLevel24);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("hi!");
        retrofit.Profiler profiler31 = null;
        builder30.profiler = profiler31;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        builder30.requestInterceptor = requestInterceptor33;
        retrofit.RestAdapter restAdapter35 = builder30.build();
        retrofit.converter.Converter converter36 = restAdapter35.converter;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        log37.log("");
        restAdapter35.log = log37;
        retrofit.RestAdapter.Builder builder41 = builder18.setLog(log37);
        retrofit.RestAdapter.Builder builder42 = builder16.setLog(log37);
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter44 = builder43.converter;
        retrofit.RestAdapter.LogLevel logLevel45 = builder43.logLevel;
        builder43.ensureSaneDefaults();
        retrofit.client.Client.Provider provider47 = null;
        builder43.clientProvider = provider47;
        retrofit.Server server49 = null;
        retrofit.client.Client.Provider provider50 = null;
        java.util.concurrent.Executor executor51 = null;
        java.util.concurrent.Executor executor52 = null;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        retrofit.converter.Converter converter54 = null;
        retrofit.Profiler profiler55 = null;
        retrofit.ErrorHandler errorHandler56 = null;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor58 = null;
        builder57.httpExecutor = executor58;
        retrofit.RestAdapter.Builder builder61 = builder57.setServer("hi!");
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder63 = builder57.setLog(log62);
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter64.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter64.logLevel = logLevel66;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        restAdapter64.requestInterceptor = requestInterceptor68;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter64.logLevel = logLevel70;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server49, provider50, executor51, executor52, requestInterceptor53, converter54, profiler55, errorHandler56, log62, logLevel70);
        builder43.logLevel = logLevel70;
        retrofit.RestAdapter.LogLevel logLevel74 = builder43.logLevel;
        retrofit.RestAdapter.Builder builder75 = builder16.setLogLevel(logLevel74);
        java.util.concurrent.Executor executor76 = builder16.callbackExecutor;
        retrofit.RestAdapter restAdapter77 = builder16.build();
        retrofit.RequestInterceptor requestInterceptor78 = builder16.requestInterceptor;
        builder0.requestInterceptor = requestInterceptor78;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(restAdapter35);
        org.junit.Assert.assertNotNull(converter36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(converter44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(logLevel65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(executor76);
        org.junit.Assert.assertNotNull(restAdapter77);
        org.junit.Assert.assertNotNull(requestInterceptor78);
    }

    @Test
    public void test11824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11824");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel3 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.Server server5 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.httpExecutor = executor7;
        retrofit.client.Client.Provider provider9 = null;
        builder6.clientProvider = provider9;
        retrofit.client.Client.Provider provider11 = builder6.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder13 = builder6.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.Profiler profiler19 = null;
        builder18.profiler = profiler19;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        builder18.requestInterceptor = requestInterceptor21;
        retrofit.RestAdapter restAdapter23 = builder18.build();
        retrofit.converter.Converter converter24 = restAdapter23.converter;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        log25.log("");
        restAdapter23.log = log25;
        retrofit.RestAdapter.Builder builder29 = builder6.setLog(log25);
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log31 = restAdapter30.log;
        retrofit.ErrorHandler errorHandler32 = restAdapter30.errorHandler;
        retrofit.converter.Converter converter33 = null;
        restAdapter30.converter = converter33;
        retrofit.RequestInterceptor requestInterceptor35 = restAdapter30.requestInterceptor;
        retrofit.ErrorHandler errorHandler36 = null;
        restAdapter30.errorHandler = errorHandler36;
        retrofit.ErrorHandler errorHandler38 = restAdapter30.errorHandler;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter40 = builder39.converter;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor42 = restAdapter41.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        restAdapter41.requestInterceptor = requestInterceptor43;
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel54);
        restAdapter41.log = log53;
        retrofit.ErrorHandler errorHandler57 = null;
        restAdapter41.errorHandler = errorHandler57;
        retrofit.RestAdapter.Log log59 = restAdapter41.log;
        retrofit.RestAdapter.Builder builder60 = builder39.setLog(log59);
        retrofit.Profiler profiler61 = builder60.profiler;
        retrofit.client.Client.Provider provider62 = builder60.clientProvider;
        retrofit.RestAdapter.Builder builder64 = builder60.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter65 = builder64.build();
        retrofit.RestAdapter.Log log66 = builder64.log;
        retrofit.client.Client.Provider provider67 = builder64.clientProvider;
        restAdapter30.clientProvider = provider67;
        retrofit.RestAdapter.Builder builder69 = builder6.setClient(provider67);
        retrofit.RestAdapter.LogLevel logLevel70 = builder69.logLevel;
        restAdapter0.logLevel = logLevel70;
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter0.getLogLevel();
        java.lang.Class<?> wildcardClass73 = restAdapter0.getClass();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(logLevel3);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(restAdapter23);
        org.junit.Assert.assertNotNull(converter24);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNull(converter40);
        org.junit.Assert.assertNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(profiler61);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(provider67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test11825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11825");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.httpExecutor = executor7;
        retrofit.client.Client.Provider provider9 = null;
        builder6.clientProvider = provider9;
        retrofit.RestAdapter.Builder builder12 = builder6.setServer("hi!");
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder13.setLog(log18);
        retrofit.RestAdapter restAdapter20 = builder13.build();
        java.util.concurrent.Executor executor21 = restAdapter20.httpExecutor;
        builder12.callbackExecutor = executor21;
        restAdapter0.httpExecutor = executor21;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.RestAdapter restAdapter29 = builder28.build();
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor31 = restAdapter30.requestInterceptor;
        retrofit.converter.Converter converter32 = restAdapter30.converter;
        java.util.concurrent.Executor executor33 = restAdapter30.httpExecutor;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.RestAdapter.Builder builder38 = builder34.setServer("hi!");
        retrofit.client.Client.Provider provider39 = builder38.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        builder38.logLevel = logLevel40;
        retrofit.RestAdapter restAdapter43 = builder38.build();
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter44.requestInterceptor;
        java.util.concurrent.Executor executor46 = restAdapter44.callbackExecutor;
        retrofit.converter.Converter converter47 = null;
        restAdapter44.converter = converter47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter50 = builder49.converter;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor52 = restAdapter51.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        restAdapter51.requestInterceptor = requestInterceptor53;
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel64);
        restAdapter51.log = log63;
        retrofit.ErrorHandler errorHandler67 = null;
        restAdapter51.errorHandler = errorHandler67;
        retrofit.RestAdapter.Log log69 = restAdapter51.log;
        retrofit.RestAdapter.Builder builder70 = builder49.setLog(log69);
        restAdapter44.log = log69;
        retrofit.RestAdapter.Builder builder72 = builder38.setLog(log69);
        restAdapter30.log = log69;
        retrofit.RestAdapter.Log log74 = restAdapter30.log;
        restAdapter29.log = log74;
        restAdapter0.log = log74;
        log74.log("Retrofit-Idle");
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNotNull(executor21);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(provider39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNull(converter50);
        org.junit.Assert.assertNull(requestInterceptor52);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(log74);
    }

    @Test
    public void test11826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11826");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.Profiler profiler8 = null;
        builder0.profiler = profiler8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter11 = builder10.converter;
        retrofit.RestAdapter.LogLevel logLevel12 = builder10.logLevel;
        builder10.ensureSaneDefaults();
        retrofit.client.Client.Provider provider14 = null;
        builder10.clientProvider = provider14;
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder30 = builder24.setLog(log29);
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter31.logLevel = logLevel33;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        restAdapter31.requestInterceptor = requestInterceptor35;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter31.logLevel = logLevel37;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log29, logLevel37);
        builder10.logLevel = logLevel37;
        retrofit.RestAdapter.LogLevel logLevel41 = builder10.logLevel;
        java.util.concurrent.Executor executor42 = builder10.httpExecutor;
        builder0.callbackExecutor = executor42;
        retrofit.Profiler profiler44 = builder0.profiler;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter45.getLogLevel();
        retrofit.Server server47 = restAdapter45.server;
        java.util.concurrent.Executor executor48 = restAdapter45.callbackExecutor;
        retrofit.converter.Converter converter49 = restAdapter45.converter;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = null;
        builder50.httpExecutor = executor51;
        retrofit.RestAdapter.Builder builder54 = builder50.setServer("hi!");
        retrofit.Profiler profiler55 = null;
        builder54.profiler = profiler55;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        builder54.requestInterceptor = requestInterceptor57;
        retrofit.RestAdapter restAdapter59 = builder54.build();
        retrofit.converter.Converter converter60 = restAdapter59.converter;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        log61.log("");
        restAdapter59.log = log61;
        java.util.concurrent.Executor executor65 = restAdapter59.callbackExecutor;
        retrofit.client.Header[] headerArray74 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList75 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList75, headerArray74);
        retrofit.mime.TypedOutput typedOutput77 = null;
        retrofit.client.Request request78 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList75, typedOutput77);
        java.lang.String str79 = request78.getMethod();
        retrofit.mime.TypedOutput typedOutput80 = request78.getBody();
        retrofit.mime.TypedOutput typedOutput81 = request78.getBody();
        java.lang.String str82 = request78.getMethod();
        java.util.List<retrofit.client.Header> headerList83 = request78.getHeaders();
        retrofit.mime.TypedOutput typedOutput84 = null;
        retrofit.client.Request request85 = new retrofit.client.Request("Retrofit-Idle", "", headerList83, typedOutput84);
        retrofit.mime.TypedOutput typedOutput86 = null;
        retrofit.client.Request request87 = new retrofit.client.Request("", "Retrofit-Idle", headerList83, typedOutput86);
        retrofit.mime.TypedOutput typedOutput88 = null;
        retrofit.client.Request request89 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList83, typedOutput88);
        retrofit.client.Request request90 = restAdapter59.logAndReplaceRequest(request89);
        retrofit.Server server91 = restAdapter59.server;
        restAdapter45.server = server91;
        retrofit.RestAdapter.Builder builder93 = builder0.setServer(server91);
        retrofit.RestAdapter.LogLevel logLevel94 = builder0.logLevel;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor42);
        org.junit.Assert.assertNull(profiler44);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNull(converter49);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertNotNull(converter60);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(executor65);
        org.junit.Assert.assertNotNull(headerArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNull(typedOutput80);
        org.junit.Assert.assertNull(typedOutput81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(headerList83);
        org.junit.Assert.assertNotNull(request90);
        org.junit.Assert.assertNotNull(server91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertTrue("'" + logLevel94 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel94.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test11827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11827");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.client.Client.Provider provider7 = null;
        builder4.clientProvider = provider7;
        retrofit.RestAdapter.Builder builder10 = builder4.setServer("hi!");
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder11.setLog(log16);
        retrofit.RestAdapter restAdapter18 = builder11.build();
        java.util.concurrent.Executor executor19 = restAdapter18.httpExecutor;
        builder10.callbackExecutor = executor19;
        builder0.callbackExecutor = executor19;
        retrofit.ErrorHandler errorHandler22 = builder0.errorHandler;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor25 = restAdapter24.requestInterceptor;
        java.util.concurrent.Executor executor26 = restAdapter24.callbackExecutor;
        retrofit.converter.Converter converter27 = null;
        restAdapter24.converter = converter27;
        retrofit.RestAdapter.Log log29 = restAdapter24.log;
        retrofit.ErrorHandler errorHandler30 = restAdapter24.errorHandler;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter32 = builder31.converter;
        retrofit.RestAdapter.LogLevel logLevel33 = builder31.logLevel;
        builder31.ensureSaneDefaults();
        retrofit.client.Client.Provider provider35 = null;
        builder31.clientProvider = provider35;
        retrofit.Profiler profiler37 = builder31.profiler;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = builder38.callbackExecutor;
        retrofit.RestAdapter.Log log40 = builder38.log;
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.Server server49 = null;
        retrofit.client.Client.Provider provider50 = null;
        java.util.concurrent.Executor executor51 = null;
        java.util.concurrent.Executor executor52 = null;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        retrofit.converter.Converter converter54 = null;
        retrofit.Profiler profiler55 = null;
        retrofit.ErrorHandler errorHandler56 = null;
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server49, provider50, executor51, executor52, requestInterceptor53, converter54, profiler55, errorHandler56, log57, logLevel58);
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter60.logLevel = logLevel62;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter60.setLogLevel(logLevel64);
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log57, logLevel64);
        retrofit.RestAdapter.Builder builder67 = builder38.setLogLevel(logLevel64);
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor69 = null;
        builder68.httpExecutor = executor69;
        retrofit.RestAdapter.Builder builder72 = builder68.setServer("hi!");
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder74 = builder68.setLog(log73);
        builder38.log = log73;
        retrofit.RestAdapter.Builder builder76 = builder31.setLog(log73);
        log73.log("hi!");
        log73.log("");
        restAdapter24.log = log73;
        builder0.log = log73;
        retrofit.Server server83 = builder0.server;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter84 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(requestInterceptor25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler37);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(log40);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(server83);
    }

    @Test
    public void test11828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11828");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler5 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter.LogLevel logLevel8 = builder6.logLevel;
        builder6.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor10 = builder6.requestInterceptor;
        restAdapter0.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.httpExecutor = executor17;
        retrofit.RestAdapter.Builder builder20 = builder16.setServer("hi!");
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder16.setLog(log21);
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel32);
        builder16.logLevel = logLevel32;
        retrofit.converter.Converter converter35 = builder16.converter;
        retrofit.ErrorHandler errorHandler36 = builder16.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel37 = builder16.logLevel;
        retrofit.Server server38 = builder16.server;
        builder13.server = server38;
        retrofit.client.Client.Provider provider40 = builder13.clientProvider;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = builder41.callbackExecutor;
        retrofit.RestAdapter.Log log43 = builder41.log;
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.Server server52 = null;
        retrofit.client.Client.Provider provider53 = null;
        java.util.concurrent.Executor executor54 = null;
        java.util.concurrent.Executor executor55 = null;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        retrofit.converter.Converter converter57 = null;
        retrofit.Profiler profiler58 = null;
        retrofit.ErrorHandler errorHandler59 = null;
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server52, provider53, executor54, executor55, requestInterceptor56, converter57, profiler58, errorHandler59, log60, logLevel61);
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter63.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter63.logLevel = logLevel65;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter63.setLogLevel(logLevel67);
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log60, logLevel67);
        retrofit.RestAdapter.Builder builder70 = builder41.setLogLevel(logLevel67);
        retrofit.ErrorHandler errorHandler71 = null;
        builder70.errorHandler = errorHandler71;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor74 = builder73.callbackExecutor;
        retrofit.Server server75 = null;
        retrofit.client.Client.Provider provider76 = null;
        java.util.concurrent.Executor executor77 = null;
        java.util.concurrent.Executor executor78 = null;
        retrofit.RequestInterceptor requestInterceptor79 = null;
        retrofit.converter.Converter converter80 = null;
        retrofit.Profiler profiler81 = null;
        retrofit.ErrorHandler errorHandler82 = null;
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter(server75, provider76, executor77, executor78, requestInterceptor79, converter80, profiler81, errorHandler82, log83, logLevel84);
        retrofit.RestAdapter.Builder builder86 = builder73.setLogLevel(logLevel84);
        retrofit.RestAdapter.Builder builder87 = builder70.setLogLevel(logLevel84);
        retrofit.RestAdapter.LogLevel logLevel88 = builder87.logLevel;
        boolean boolean89 = logLevel88.log();
        builder13.logLevel = logLevel88;
        restAdapter0.logLevel = logLevel88;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter35);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertNull(provider40);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(executor74);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test11829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11829");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.getMethod();
        retrofit.mime.TypedOutput typedOutput10 = request8.getBody();
        retrofit.mime.TypedOutput typedOutput11 = request8.getBody();
        java.lang.String str12 = request8.getMethod();
        java.util.List<retrofit.client.Header> headerList13 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("Retrofit-Idle", "", headerList13, typedOutput14);
        retrofit.mime.TypedOutput typedOutput16 = request15.getBody();
        retrofit.mime.TypedOutput typedOutput17 = request15.getBody();
        java.lang.String str18 = request15.getUrl();
        java.util.List<retrofit.client.Header> headerList19 = request15.getHeaders();
        java.lang.String str20 = request15.getMethod();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Retrofit-Idle" + "'", str20, "Retrofit-Idle");
    }

    @Test
    public void test11830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11830");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log4 = restAdapter3.log;
        retrofit.ErrorHandler errorHandler5 = restAdapter3.errorHandler;
        retrofit.Profiler profiler6 = null;
        restAdapter3.profiler = profiler6;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter9 = null;
        restAdapter8.converter = converter9;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter8.requestInterceptor = requestInterceptor11;
        retrofit.Profiler profiler13 = restAdapter8.profiler;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean15 = logLevel14.log();
        restAdapter8.logLevel = logLevel14;
        java.util.concurrent.Executor executor17 = restAdapter8.httpExecutor;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log19 = restAdapter18.log;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = builder20.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor22 = builder20.requestInterceptor;
        retrofit.ErrorHandler errorHandler23 = null;
        builder20.errorHandler = errorHandler23;
        retrofit.converter.Converter converter25 = null;
        builder20.converter = converter25;
        retrofit.ErrorHandler errorHandler27 = null;
        builder20.errorHandler = errorHandler27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = null;
        builder29.httpExecutor = executor30;
        retrofit.RestAdapter.Builder builder33 = builder29.setServer("hi!");
        retrofit.Profiler profiler34 = null;
        builder33.profiler = profiler34;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        builder33.requestInterceptor = requestInterceptor36;
        retrofit.RestAdapter restAdapter38 = builder33.build();
        retrofit.converter.Converter converter39 = restAdapter38.converter;
        retrofit.RestAdapter.Builder builder40 = builder20.setConverter(converter39);
        restAdapter18.converter = converter39;
        restAdapter8.converter = converter39;
        restAdapter3.converter = converter39;
        builder0.converter = converter39;
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor54 = restAdapter53.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        restAdapter53.requestInterceptor = requestInterceptor55;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel66);
        restAdapter53.log = log65;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean70 = logLevel69.log();
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log65, logLevel69);
        retrofit.RestAdapter.Builder builder72 = builder0.setLog(log65);
        retrofit.RestAdapter.LogLevel logLevel73 = builder0.logLevel;
        retrofit.client.Client.Provider provider74 = builder0.clientProvider;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNotNull(converter39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(requestInterceptor54);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider74);
    }

    @Test
    public void test11831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11831");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.client.Client.Provider provider1 = null;
        restAdapter0.clientProvider = provider1;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter4.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        restAdapter4.requestInterceptor = requestInterceptor6;
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter4.getLogLevel();
        retrofit.client.Client.Provider provider9 = null;
        restAdapter4.clientProvider = provider9;
        retrofit.ErrorHandler errorHandler11 = restAdapter4.errorHandler;
        retrofit.client.Client.Provider provider12 = restAdapter4.clientProvider;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter14 = builder13.converter;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter15.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        restAdapter15.requestInterceptor = requestInterceptor17;
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel28);
        restAdapter15.log = log27;
        retrofit.ErrorHandler errorHandler31 = null;
        restAdapter15.errorHandler = errorHandler31;
        retrofit.RestAdapter.Log log33 = restAdapter15.log;
        retrofit.RestAdapter.Builder builder34 = builder13.setLog(log33);
        retrofit.Profiler profiler35 = builder34.profiler;
        retrofit.Profiler profiler36 = builder34.profiler;
        java.util.concurrent.Executor executor37 = builder34.callbackExecutor;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.httpExecutor = executor39;
        retrofit.RestAdapter.Builder builder42 = builder38.setServer("hi!");
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder38.setLog(log43);
        retrofit.RestAdapter restAdapter45 = builder38.build();
        java.util.concurrent.Executor executor46 = restAdapter45.httpExecutor;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = null;
        builder47.httpExecutor = executor48;
        retrofit.client.Client.Provider provider50 = null;
        builder47.clientProvider = provider50;
        retrofit.RestAdapter.Builder builder53 = builder47.setServer("hi!");
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor55 = null;
        builder54.httpExecutor = executor55;
        retrofit.RestAdapter.Builder builder58 = builder54.setServer("hi!");
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder60 = builder54.setLog(log59);
        retrofit.RestAdapter restAdapter61 = builder54.build();
        java.util.concurrent.Executor executor62 = restAdapter61.httpExecutor;
        builder53.callbackExecutor = executor62;
        retrofit.RestAdapter.Builder builder64 = builder34.setExecutors(executor46, executor62);
        restAdapter4.callbackExecutor = executor46;
        restAdapter0.httpExecutor = executor46;
        retrofit.Server server67 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor69 = null;
        builder68.httpExecutor = executor69;
        retrofit.RestAdapter.Builder builder72 = builder68.setServer("hi!");
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder74 = builder68.setLog(log73);
        retrofit.Server server75 = null;
        retrofit.client.Client.Provider provider76 = null;
        java.util.concurrent.Executor executor77 = null;
        java.util.concurrent.Executor executor78 = null;
        retrofit.RequestInterceptor requestInterceptor79 = null;
        retrofit.converter.Converter converter80 = null;
        retrofit.Profiler profiler81 = null;
        retrofit.ErrorHandler errorHandler82 = null;
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter(server75, provider76, executor77, executor78, requestInterceptor79, converter80, profiler81, errorHandler82, log83, logLevel84);
        builder68.logLevel = logLevel84;
        retrofit.converter.Converter converter87 = builder68.converter;
        retrofit.RequestInterceptor requestInterceptor88 = null;
        builder68.requestInterceptor = requestInterceptor88;
        retrofit.RestAdapter restAdapter90 = builder68.build();
        retrofit.Server server91 = builder68.server;
        retrofit.Profiler profiler92 = null;
        builder68.profiler = profiler92;
        retrofit.RestAdapter restAdapter94 = builder68.build();
        retrofit.client.Client.Provider provider95 = builder68.clientProvider;
        restAdapter0.clientProvider = provider95;
        retrofit.client.Client.Provider provider97 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(profiler35);
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(restAdapter45);
        org.junit.Assert.assertNotNull(executor46);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(restAdapter61);
        org.junit.Assert.assertNotNull(executor62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(server67);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter87);
        org.junit.Assert.assertNotNull(restAdapter90);
        org.junit.Assert.assertNotNull(server91);
        org.junit.Assert.assertNotNull(restAdapter94);
        org.junit.Assert.assertNotNull(provider95);
        org.junit.Assert.assertNotNull(provider97);
    }

    @Test
    public void test11832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11832");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("hi!");
        retrofit.Server server26 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel27 = builder0.logLevel;
        retrofit.client.Client.Provider provider28 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter30 = builder29.converter;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor32 = restAdapter31.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        restAdapter31.requestInterceptor = requestInterceptor33;
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel44);
        restAdapter31.log = log43;
        retrofit.ErrorHandler errorHandler47 = null;
        restAdapter31.errorHandler = errorHandler47;
        retrofit.RestAdapter.Log log49 = restAdapter31.log;
        retrofit.RestAdapter.Builder builder50 = builder29.setLog(log49);
        retrofit.RequestInterceptor requestInterceptor51 = builder29.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor52 = builder29.requestInterceptor;
        retrofit.RestAdapter.Builder builder54 = builder29.setServer("hi!");
        java.util.concurrent.Executor executor55 = builder54.httpExecutor;
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor65 = restAdapter64.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        restAdapter64.requestInterceptor = requestInterceptor66;
        retrofit.Server server68 = null;
        retrofit.client.Client.Provider provider69 = null;
        java.util.concurrent.Executor executor70 = null;
        java.util.concurrent.Executor executor71 = null;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        retrofit.converter.Converter converter73 = null;
        retrofit.Profiler profiler74 = null;
        retrofit.ErrorHandler errorHandler75 = null;
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter(server68, provider69, executor70, executor71, requestInterceptor72, converter73, profiler74, errorHandler75, log76, logLevel77);
        restAdapter64.log = log76;
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean81 = logLevel80.log();
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log76, logLevel80);
        retrofit.RestAdapter.Builder builder83 = builder54.setLogLevel(logLevel80);
        retrofit.RestAdapter.Log log84 = builder83.log;
        log84.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder87 = builder0.setLog(log84);
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider28);
        org.junit.Assert.assertNull(converter30);
        org.junit.Assert.assertNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(requestInterceptor51);
        org.junit.Assert.assertNull(requestInterceptor52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(executor55);
        org.junit.Assert.assertNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test11833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11833");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder23.setLog(log28);
        retrofit.RestAdapter restAdapter30 = builder23.build();
        java.util.concurrent.Executor executor31 = restAdapter30.httpExecutor;
        builder0.callbackExecutor = executor31;
        java.util.concurrent.Executor executor33 = builder0.httpExecutor;
        java.util.concurrent.Executor executor34 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.httpExecutor = executor36;
        retrofit.RestAdapter.Builder builder39 = builder35.setServer("hi!");
        retrofit.Profiler profiler40 = null;
        builder39.profiler = profiler40;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        builder39.requestInterceptor = requestInterceptor42;
        retrofit.RestAdapter restAdapter44 = builder39.build();
        retrofit.client.Client.Provider provider45 = restAdapter44.clientProvider;
        retrofit.client.Client.Provider provider46 = restAdapter44.clientProvider;
        builder0.clientProvider = provider46;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNotNull(executor31);
        org.junit.Assert.assertNotNull(executor33);
        org.junit.Assert.assertNotNull(executor34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNotNull(provider45);
        org.junit.Assert.assertNotNull(provider46);
    }

    @Test
    public void test11834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11834");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.RestAdapter restAdapter8 = builder0.build();
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor10 = null;
        restAdapter9.httpExecutor = executor10;
        retrofit.client.Client.Provider provider12 = restAdapter9.clientProvider;
        retrofit.client.Client.Provider provider13 = null;
        restAdapter9.clientProvider = provider13;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter15.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        restAdapter15.requestInterceptor = requestInterceptor17;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter19.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        restAdapter19.requestInterceptor = requestInterceptor21;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel32);
        restAdapter19.log = log31;
        retrofit.ErrorHandler errorHandler35 = null;
        restAdapter19.errorHandler = errorHandler35;
        retrofit.converter.Converter converter37 = null;
        restAdapter19.converter = converter37;
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor48 = restAdapter47.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        restAdapter47.requestInterceptor = requestInterceptor49;
        retrofit.Server server51 = null;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel60);
        restAdapter47.log = log59;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean64 = logLevel63.log();
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log59, logLevel63);
        restAdapter19.logLevel = logLevel63;
        restAdapter15.logLevel = logLevel63;
        retrofit.Profiler profiler68 = restAdapter15.profiler;
        retrofit.RequestInterceptor requestInterceptor69 = null;
        restAdapter15.requestInterceptor = requestInterceptor69;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor72 = null;
        builder71.httpExecutor = executor72;
        retrofit.RestAdapter.Builder builder75 = builder71.setServer("hi!");
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder77 = builder71.setLog(log76);
        retrofit.RestAdapter restAdapter78 = builder71.build();
        java.util.concurrent.Executor executor79 = restAdapter78.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler80 = restAdapter78.new RestHandler();
        retrofit.converter.Converter converter81 = restAdapter78.converter;
        restAdapter15.converter = converter81;
        retrofit.converter.Converter converter83 = restAdapter15.converter;
        retrofit.converter.Converter converter84 = restAdapter15.converter;
        restAdapter9.converter = converter84;
        restAdapter8.converter = converter84;
        retrofit.client.Client.Provider provider87 = restAdapter8.clientProvider;
        java.util.concurrent.Executor executor88 = restAdapter8.httpExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(restAdapter8);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(profiler68);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(restAdapter78);
        org.junit.Assert.assertNotNull(executor79);
        org.junit.Assert.assertNotNull(converter81);
        org.junit.Assert.assertNotNull(converter83);
        org.junit.Assert.assertNotNull(converter84);
        org.junit.Assert.assertNotNull(provider87);
        org.junit.Assert.assertNotNull(executor88);
    }

    @Test
    public void test11835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11835");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        builder0.requestInterceptor = requestInterceptor3;
        retrofit.RequestInterceptor requestInterceptor5 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = builder6.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor8 = builder6.requestInterceptor;
        java.util.concurrent.Executor executor9 = builder6.httpExecutor;
        retrofit.RestAdapter.Builder builder11 = builder6.setServer("hi!");
        retrofit.RestAdapter restAdapter12 = builder11.build();
        retrofit.client.Header[] headerArray15 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList16 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList16, headerArray15);
        retrofit.mime.TypedOutput typedOutput18 = null;
        retrofit.client.Request request19 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList16, typedOutput18);
        java.lang.String str20 = request19.getUrl();
        java.util.List<retrofit.client.Header> headerList21 = request19.getHeaders();
        java.lang.String str22 = request19.getMethod();
        retrofit.mime.TypedOutput typedOutput23 = request19.getBody();
        java.lang.String str24 = request19.getUrl();
        java.lang.String str25 = request19.getUrl();
        java.util.List<retrofit.client.Header> headerList26 = request19.getHeaders();
        java.lang.String str27 = request19.getMethod();
        java.util.List<retrofit.client.Header> headerList28 = request19.getHeaders();
        java.lang.String str29 = request19.getUrl();
        retrofit.client.Request request30 = restAdapter12.logAndReplaceRequest(request19);
        retrofit.converter.Converter converter31 = restAdapter12.converter;
        java.util.concurrent.Executor executor32 = restAdapter12.httpExecutor;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder33.logLevel = logLevel38;
        retrofit.converter.Converter converter40 = null;
        builder33.converter = converter40;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor43 = restAdapter42.requestInterceptor;
        retrofit.converter.Converter converter44 = restAdapter42.converter;
        java.util.concurrent.Executor executor45 = null;
        restAdapter42.callbackExecutor = executor45;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor48 = null;
        restAdapter47.httpExecutor = executor48;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        restAdapter47.requestInterceptor = requestInterceptor50;
        retrofit.RestAdapter.Log log52 = restAdapter47.log;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter47.logLevel = logLevel53;
        restAdapter42.logLevel = logLevel53;
        retrofit.RestAdapter.Builder builder56 = builder33.setLogLevel(logLevel53);
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor58 = restAdapter57.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        restAdapter57.requestInterceptor = requestInterceptor59;
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel70);
        restAdapter57.log = log69;
        retrofit.Profiler profiler73 = null;
        restAdapter57.profiler = profiler73;
        retrofit.RequestInterceptor requestInterceptor75 = null;
        restAdapter57.requestInterceptor = requestInterceptor75;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor78 = null;
        builder77.httpExecutor = executor78;
        retrofit.RestAdapter.Builder builder81 = builder77.setServer("hi!");
        retrofit.Profiler profiler82 = null;
        builder81.profiler = profiler82;
        retrofit.RequestInterceptor requestInterceptor84 = null;
        builder81.requestInterceptor = requestInterceptor84;
        retrofit.RestAdapter restAdapter86 = builder81.build();
        retrofit.converter.Converter converter87 = restAdapter86.converter;
        java.util.concurrent.Executor executor88 = restAdapter86.callbackExecutor;
        restAdapter57.httpExecutor = executor88;
        builder56.callbackExecutor = executor88;
        retrofit.RestAdapter.Builder builder91 = builder0.setExecutors(executor32, executor88);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter12);
        org.junit.Assert.assertNotNull(headerArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(headerList21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(typedOutput23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(headerList28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(converter31);
        org.junit.Assert.assertNotNull(executor32);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNull(converter44);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertNotNull(converter87);
        org.junit.Assert.assertNotNull(executor88);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test11836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11836");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = null;
        restAdapter10.errorHandler = errorHandler11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder13.setLog(log18);
        retrofit.RestAdapter restAdapter20 = builder13.build();
        retrofit.converter.Converter converter21 = null;
        builder13.converter = converter21;
        retrofit.ErrorHandler errorHandler23 = null;
        builder13.errorHandler = errorHandler23;
        retrofit.RequestInterceptor requestInterceptor25 = builder13.requestInterceptor;
        restAdapter10.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor28 = restAdapter27.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        restAdapter27.requestInterceptor = requestInterceptor29;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        restAdapter27.log = log39;
        retrofit.ErrorHandler errorHandler43 = null;
        restAdapter27.errorHandler = errorHandler43;
        retrofit.converter.Converter converter45 = null;
        restAdapter27.converter = converter45;
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor56 = restAdapter55.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        restAdapter55.requestInterceptor = requestInterceptor57;
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server59, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log67, logLevel68);
        restAdapter55.log = log67;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean72 = logLevel71.log();
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log67, logLevel71);
        restAdapter27.logLevel = logLevel71;
        restAdapter10.setLogLevel(logLevel71);
        retrofit.client.Header[] headerArray78 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList79 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList79, headerArray78);
        retrofit.mime.TypedOutput typedOutput81 = null;
        retrofit.client.Request request82 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList79, typedOutput81);
        java.lang.String str83 = request82.getUrl();
        java.util.List<retrofit.client.Header> headerList84 = request82.getHeaders();
        java.lang.String str85 = request82.getMethod();
        java.util.List<retrofit.client.Header> headerList86 = request82.getHeaders();
        retrofit.client.Request request87 = restAdapter10.logAndReplaceRequest(request82);
        java.lang.String str88 = request87.getMethod();
        retrofit.mime.TypedOutput typedOutput89 = request87.getBody();
        java.lang.String str90 = request87.getMethod();
        java.lang.String str91 = request87.getUrl();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor56);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(headerArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(headerList84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(headerList86);
        org.junit.Assert.assertNotNull(request87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNull(typedOutput89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
    }

    @Test
    public void test11837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11837");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.converter.Converter converter8 = restAdapter7.converter;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder15 = builder9.setLog(log14);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter17 = builder16.converter;
        retrofit.RestAdapter.LogLevel logLevel18 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder19 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter21 = builder20.converter;
        retrofit.RestAdapter.LogLevel logLevel22 = builder20.logLevel;
        builder20.ensureSaneDefaults();
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.httpExecutor = executor33;
        retrofit.RestAdapter.Builder builder36 = builder32.setServer("hi!");
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder38 = builder32.setLog(log37);
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter39.logLevel = logLevel41;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        restAdapter39.requestInterceptor = requestInterceptor43;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter39.logLevel = logLevel45;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log37, logLevel45);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.httpExecutor = executor49;
        retrofit.RestAdapter.Builder builder52 = builder48.setServer("hi!");
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder48.setLog(log53);
        restAdapter47.log = log53;
        builder20.log = log53;
        java.util.concurrent.Executor executor57 = null;
        builder20.httpExecutor = executor57;
        retrofit.converter.Converter converter59 = null;
        builder20.converter = converter59;
        retrofit.ErrorHandler errorHandler61 = builder20.errorHandler;
        retrofit.RestAdapter.Builder builder62 = builder15.setErrorHandler(errorHandler61);
        retrofit.RestAdapter.LogLevel logLevel63 = builder15.logLevel;
        restAdapter7.logLevel = logLevel63;
        retrofit.Server server65 = restAdapter7.server;
        retrofit.Profiler profiler66 = restAdapter7.profiler;
        retrofit.Profiler profiler67 = restAdapter7.profiler;
        java.util.concurrent.Executor executor68 = restAdapter7.httpExecutor;
        retrofit.RestAdapter.Log log69 = restAdapter7.log;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(converter8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(errorHandler61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(server65);
        org.junit.Assert.assertNull(profiler66);
        org.junit.Assert.assertNull(profiler67);
        org.junit.Assert.assertNotNull(executor68);
        org.junit.Assert.assertNotNull(log69);
    }

    @Test
    public void test11838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11838");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler6 = null;
        restAdapter0.errorHandler = errorHandler6;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.converter.Converter converter10 = restAdapter0.converter;
        java.util.concurrent.Executor executor11 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor12 = restAdapter0.httpExecutor;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log14 = restAdapter13.log;
        retrofit.ErrorHandler errorHandler15 = restAdapter13.errorHandler;
        retrofit.converter.Converter converter16 = null;
        restAdapter13.converter = converter16;
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter13.requestInterceptor;
        retrofit.ErrorHandler errorHandler19 = restAdapter13.errorHandler;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("hi!");
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder28.setLog(log33);
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter35.logLevel = logLevel37;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        restAdapter35.requestInterceptor = requestInterceptor39;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter35.logLevel = logLevel41;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log33, logLevel41);
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.httpExecutor = executor45;
        retrofit.RestAdapter.Builder builder48 = builder44.setServer("hi!");
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder44.setLog(log49);
        restAdapter43.log = log49;
        retrofit.client.Header[] headerArray54 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList55 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList55, headerArray54);
        retrofit.mime.TypedOutput typedOutput57 = null;
        retrofit.client.Request request58 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList55, typedOutput57);
        java.lang.String str59 = request58.getUrl();
        java.lang.String str60 = request58.getUrl();
        retrofit.client.Request request61 = restAdapter43.logAndReplaceRequest(request58);
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter43.getLogLevel();
        java.util.concurrent.Executor executor63 = restAdapter43.callbackExecutor;
        java.util.concurrent.Executor executor64 = restAdapter43.callbackExecutor;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = null;
        builder65.httpExecutor = executor66;
        retrofit.RestAdapter.Builder builder69 = builder65.setServer("hi!");
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder65.setLog(log70);
        retrofit.RestAdapter restAdapter72 = builder65.build();
        retrofit.converter.Converter converter73 = null;
        builder65.converter = converter73;
        retrofit.ErrorHandler errorHandler75 = null;
        builder65.errorHandler = errorHandler75;
        retrofit.RequestInterceptor requestInterceptor77 = builder65.requestInterceptor;
        restAdapter43.requestInterceptor = requestInterceptor77;
        restAdapter13.requestInterceptor = requestInterceptor77;
        restAdapter0.requestInterceptor = requestInterceptor77;
        retrofit.RestAdapter.LogLevel logLevel81 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(headerArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(request61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(restAdapter72);
        org.junit.Assert.assertNotNull(requestInterceptor77);
        org.junit.Assert.assertNull(logLevel81);
    }

    @Test
    public void test11839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11839");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor8 = restAdapter0.httpExecutor;
        retrofit.Profiler profiler9 = null;
        restAdapter0.profiler = profiler9;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor12 = restAdapter11.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        restAdapter11.requestInterceptor = requestInterceptor13;
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter11.getLogLevel();
        retrofit.client.Client.Provider provider16 = null;
        restAdapter11.clientProvider = provider16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter11.logLevel;
        java.util.concurrent.Executor executor19 = restAdapter11.callbackExecutor;
        java.util.concurrent.Executor executor20 = null;
        restAdapter11.httpExecutor = executor20;
        retrofit.Server server22 = restAdapter11.server;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter24 = builder23.converter;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor26 = restAdapter25.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        restAdapter25.requestInterceptor = requestInterceptor27;
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel38);
        restAdapter25.log = log37;
        retrofit.ErrorHandler errorHandler41 = null;
        restAdapter25.errorHandler = errorHandler41;
        retrofit.RestAdapter.Log log43 = restAdapter25.log;
        retrofit.RestAdapter.Builder builder44 = builder23.setLog(log43);
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder47 = builder23.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log49 = restAdapter48.log;
        java.util.concurrent.Executor executor50 = restAdapter48.callbackExecutor;
        java.util.concurrent.Executor executor51 = restAdapter48.callbackExecutor;
        retrofit.Profiler profiler52 = restAdapter48.profiler;
        retrofit.RestAdapter.Log log53 = restAdapter48.log;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor55 = null;
        builder54.httpExecutor = executor55;
        retrofit.RestAdapter.Builder builder58 = builder54.setServer("hi!");
        retrofit.Profiler profiler59 = null;
        builder58.profiler = profiler59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.httpExecutor = executor62;
        retrofit.RestAdapter.Builder builder65 = builder61.setServer("hi!");
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder61.setLog(log66);
        retrofit.RestAdapter restAdapter68 = builder61.build();
        retrofit.converter.Converter converter69 = null;
        builder61.converter = converter69;
        retrofit.ErrorHandler errorHandler71 = null;
        builder61.errorHandler = errorHandler71;
        retrofit.RequestInterceptor requestInterceptor73 = builder61.requestInterceptor;
        builder58.requestInterceptor = requestInterceptor73;
        restAdapter48.requestInterceptor = requestInterceptor73;
        retrofit.RestAdapter.Builder builder76 = builder23.setRequestInterceptor(requestInterceptor73);
        retrofit.Server server77 = builder23.server;
        restAdapter11.server = server77;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor80 = null;
        builder79.httpExecutor = executor80;
        retrofit.RestAdapter.Builder builder83 = builder79.setServer("hi!");
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder85 = builder79.setLog(log84);
        retrofit.RestAdapter restAdapter86 = builder79.build();
        java.util.concurrent.Executor executor87 = restAdapter86.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler88 = restAdapter86.new RestHandler();
        retrofit.converter.Converter converter89 = restAdapter86.converter;
        retrofit.RestAdapter.LogLevel logLevel90 = restAdapter86.getLogLevel();
        restAdapter11.logLevel = logLevel90;
        restAdapter0.logLevel = logLevel90;
        retrofit.Profiler profiler93 = restAdapter0.profiler;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(log49);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(profiler52);
        org.junit.Assert.assertNull(log53);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(restAdapter68);
        org.junit.Assert.assertNotNull(requestInterceptor73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(server77);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertNotNull(executor87);
        org.junit.Assert.assertNotNull(converter89);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler93);
    }

    @Test
    public void test11840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11840");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.Server server2 = restAdapter0.server;
        retrofit.client.Client.Provider provider3 = null;
        restAdapter0.clientProvider = provider3;
        java.util.concurrent.Executor executor5 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.httpExecutor = executor7;
        retrofit.RestAdapter.Builder builder10 = builder6.setServer("hi!");
        retrofit.Profiler profiler11 = null;
        builder10.profiler = profiler11;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        builder10.requestInterceptor = requestInterceptor13;
        retrofit.RestAdapter restAdapter15 = builder10.build();
        retrofit.converter.Converter converter16 = restAdapter15.converter;
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter15.requestInterceptor;
        restAdapter0.requestInterceptor = requestInterceptor17;
        java.util.concurrent.Executor executor19 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(restAdapter15);
        org.junit.Assert.assertNotNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor17);
        org.junit.Assert.assertNull(executor19);
    }

    @Test
    public void test11841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11841");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = null;
        restAdapter5.httpExecutor = executor6;
        retrofit.Profiler profiler8 = null;
        restAdapter5.profiler = profiler8;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter5.requestInterceptor = requestInterceptor10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter13 = builder12.converter;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter14.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        restAdapter14.requestInterceptor = requestInterceptor16;
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        restAdapter14.log = log26;
        retrofit.ErrorHandler errorHandler30 = null;
        restAdapter14.errorHandler = errorHandler30;
        retrofit.RestAdapter.Log log32 = restAdapter14.log;
        retrofit.RestAdapter.Builder builder33 = builder12.setLog(log32);
        retrofit.RequestInterceptor requestInterceptor34 = builder12.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor35 = builder12.requestInterceptor;
        retrofit.RestAdapter.Builder builder37 = builder12.setServer("hi!");
        retrofit.Server server38 = builder12.server;
        restAdapter5.server = server38;
        restAdapter0.server = server38;
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter43 = builder42.converter;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter44.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        restAdapter44.requestInterceptor = requestInterceptor46;
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel57);
        restAdapter44.log = log56;
        retrofit.ErrorHandler errorHandler60 = null;
        restAdapter44.errorHandler = errorHandler60;
        retrofit.RestAdapter.Log log62 = restAdapter44.log;
        retrofit.RestAdapter.Builder builder63 = builder42.setLog(log62);
        retrofit.Profiler profiler64 = builder63.profiler;
        retrofit.client.Client.Provider provider65 = builder63.clientProvider;
        retrofit.RestAdapter.Builder builder67 = builder63.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler68 = builder63.errorHandler;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = builder69.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor71 = builder69.requestInterceptor;
        java.util.concurrent.Executor executor72 = builder69.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel73 = builder69.logLevel;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor75 = null;
        builder74.httpExecutor = executor75;
        retrofit.RestAdapter.Builder builder78 = builder74.setServer("hi!");
        retrofit.Profiler profiler79 = null;
        builder78.profiler = profiler79;
        retrofit.RequestInterceptor requestInterceptor81 = null;
        builder78.requestInterceptor = requestInterceptor81;
        retrofit.RestAdapter restAdapter83 = builder78.build();
        retrofit.converter.Converter converter84 = null;
        builder78.converter = converter84;
        retrofit.client.Client.Provider provider86 = builder78.clientProvider;
        retrofit.RestAdapter.Builder builder87 = builder69.setClient(provider86);
        builder63.clientProvider = provider86;
        restAdapter0.clientProvider = provider86;
        retrofit.RequestInterceptor requestInterceptor90 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel91 = restAdapter0.getLogLevel();
        retrofit.converter.Converter converter92 = restAdapter0.converter;
        retrofit.Profiler profiler93 = restAdapter0.profiler;
        retrofit.client.Client.Provider provider94 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(profiler64);
        org.junit.Assert.assertNull(provider65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(errorHandler68);
        org.junit.Assert.assertNull(executor70);
        org.junit.Assert.assertNull(requestInterceptor71);
        org.junit.Assert.assertNull(executor72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(restAdapter83);
        org.junit.Assert.assertNotNull(provider86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNull(requestInterceptor90);
        org.junit.Assert.assertNull(logLevel91);
        org.junit.Assert.assertNull(converter92);
        org.junit.Assert.assertNull(profiler93);
        org.junit.Assert.assertNotNull(provider94);
    }

    @Test
    public void test11842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11842");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.getUrl();
        java.util.List<retrofit.client.Header> headerList12 = request10.getHeaders();
        java.lang.String str13 = request10.getMethod();
        retrofit.mime.TypedOutput typedOutput14 = request10.getBody();
        retrofit.mime.TypedOutput typedOutput15 = request10.getBody();
        java.lang.String str16 = request10.getUrl();
        java.lang.String str17 = request10.getUrl();
        java.util.List<retrofit.client.Header> headerList18 = request10.getHeaders();
        java.util.List<retrofit.client.Header> headerList19 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput20 = null;
        retrofit.client.Request request21 = new retrofit.client.Request("hi!", "", headerList19, typedOutput20);
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("", "Retrofit-Idle", headerList19, typedOutput22);
        java.lang.String str24 = request23.getMethod();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNull(typedOutput15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test11843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11843");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        restAdapter0.log = log12;
        retrofit.ErrorHandler errorHandler16 = null;
        restAdapter0.errorHandler = errorHandler16;
        retrofit.converter.Converter converter18 = null;
        restAdapter0.converter = converter18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter28.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter28.requestInterceptor = requestInterceptor30;
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        restAdapter28.log = log40;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean45 = logLevel44.log();
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log40, logLevel44);
        restAdapter0.logLevel = logLevel44;
        retrofit.client.Header[] headerArray52 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList53 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList53, headerArray52);
        retrofit.mime.TypedOutput typedOutput55 = null;
        retrofit.client.Request request56 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList53, typedOutput55);
        java.lang.String str57 = request56.getUrl();
        java.util.List<retrofit.client.Header> headerList58 = request56.getHeaders();
        java.lang.String str59 = request56.getMethod();
        retrofit.mime.TypedOutput typedOutput60 = request56.getBody();
        java.util.List<retrofit.client.Header> headerList61 = request56.getHeaders();
        java.lang.String str62 = request56.getUrl();
        java.lang.String str63 = request56.getUrl();
        java.util.List<retrofit.client.Header> headerList64 = request56.getHeaders();
        java.util.List<retrofit.client.Header> headerList65 = request56.getHeaders();
        retrofit.mime.TypedOutput typedOutput66 = null;
        retrofit.client.Request request67 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", headerList65, typedOutput66);
        java.lang.String str68 = request67.getMethod();
        retrofit.client.Request request69 = restAdapter0.logAndReplaceRequest(request67);
        java.util.List<retrofit.client.Header> headerList70 = request67.getHeaders();
        java.util.List<retrofit.client.Header> headerList71 = request67.getHeaders();
        retrofit.mime.TypedOutput typedOutput72 = request67.getBody();
        java.lang.String str73 = request67.getMethod();
        retrofit.mime.TypedOutput typedOutput74 = request67.getBody();
        retrofit.mime.TypedOutput typedOutput75 = request67.getBody();
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(headerArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(headerList58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNull(typedOutput60);
        org.junit.Assert.assertNotNull(headerList61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(headerList64);
        org.junit.Assert.assertNotNull(headerList65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Retrofit-Idle" + "'", str68, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request69);
        org.junit.Assert.assertNotNull(headerList70);
        org.junit.Assert.assertNotNull(headerList71);
        org.junit.Assert.assertNull(typedOutput72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Retrofit-Idle" + "'", str73, "Retrofit-Idle");
        org.junit.Assert.assertNull(typedOutput74);
        org.junit.Assert.assertNull(typedOutput75);
    }

    @Test
    public void test11844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11844");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.getUrl();
        java.util.List<retrofit.client.Header> headerList12 = request10.getHeaders();
        java.lang.String str13 = request10.getMethod();
        retrofit.mime.TypedOutput typedOutput14 = request10.getBody();
        java.util.List<retrofit.client.Header> headerList15 = request10.getHeaders();
        java.lang.String str16 = request10.getUrl();
        java.lang.String str17 = request10.getUrl();
        java.util.List<retrofit.client.Header> headerList18 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("Retrofit-Idle", "", headerList18, typedOutput19);
        java.lang.String str21 = request20.getMethod();
        java.util.List<retrofit.client.Header> headerList22 = request20.getHeaders();
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("hi!", "hi!", headerList22, typedOutput23);
        java.lang.String str25 = request24.getMethod();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Retrofit-Idle" + "'", str21, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(headerList22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
    }

    @Test
    public void test11845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11845");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder0.logLevel = logLevel5;
        retrofit.RestAdapter.Log log7 = builder0.log;
        retrofit.ErrorHandler errorHandler8 = null;
        builder0.errorHandler = errorHandler8;
        java.util.concurrent.Executor executor10 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.Profiler profiler13 = null;
        builder11.profiler = profiler13;
        retrofit.RestAdapter.Builder builder16 = builder11.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter17 = builder16.converter;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter19 = builder18.converter;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor21 = restAdapter20.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        restAdapter20.requestInterceptor = requestInterceptor22;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel33);
        restAdapter20.log = log32;
        retrofit.ErrorHandler errorHandler36 = null;
        restAdapter20.errorHandler = errorHandler36;
        retrofit.RestAdapter.Log log38 = restAdapter20.log;
        retrofit.RestAdapter.Builder builder39 = builder18.setLog(log38);
        retrofit.Profiler profiler40 = builder39.profiler;
        retrofit.client.Client.Provider provider41 = builder39.clientProvider;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter44 = builder43.build();
        retrofit.ErrorHandler errorHandler45 = restAdapter44.errorHandler;
        builder16.errorHandler = errorHandler45;
        retrofit.RestAdapter.Builder builder47 = builder0.setErrorHandler(errorHandler45);
        retrofit.converter.Converter converter48 = builder0.converter;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log50 = restAdapter49.log;
        java.util.concurrent.Executor executor51 = restAdapter49.callbackExecutor;
        retrofit.Profiler profiler52 = restAdapter49.profiler;
        retrofit.Profiler profiler53 = null;
        restAdapter49.profiler = profiler53;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        restAdapter49.requestInterceptor = requestInterceptor55;
        retrofit.client.Client.Provider provider57 = restAdapter49.clientProvider;
        retrofit.RequestInterceptor requestInterceptor58 = restAdapter49.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter49.getLogLevel();
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.httpExecutor = executor61;
        retrofit.RestAdapter.Builder builder64 = builder60.setServer("hi!");
        retrofit.RestAdapter restAdapter65 = builder64.build();
        retrofit.client.Header[] headerArray68 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList69 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList69, headerArray68);
        retrofit.mime.TypedOutput typedOutput71 = null;
        retrofit.client.Request request72 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList69, typedOutput71);
        java.lang.String str73 = request72.getMethod();
        java.lang.String str74 = request72.getMethod();
        retrofit.client.Request request75 = restAdapter65.logAndReplaceRequest(request72);
        retrofit.RestAdapter.Log log76 = restAdapter65.log;
        retrofit.client.Client.Provider provider77 = restAdapter65.clientProvider;
        retrofit.ErrorHandler errorHandler78 = restAdapter65.errorHandler;
        restAdapter49.errorHandler = errorHandler78;
        retrofit.RestAdapter.Builder builder80 = builder0.setErrorHandler(errorHandler78);
        retrofit.client.Client.Provider provider81 = builder80.clientProvider;
        retrofit.Profiler profiler82 = null;
        builder80.profiler = profiler82;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(profiler40);
        org.junit.Assert.assertNull(provider41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNotNull(errorHandler45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(converter48);
        org.junit.Assert.assertNull(log50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(profiler52);
        org.junit.Assert.assertNull(provider57);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertNotNull(headerArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(request75);
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertNotNull(provider77);
        org.junit.Assert.assertNotNull(errorHandler78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(provider81);
    }

    @Test
    public void test11846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11846");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.converter.Converter converter5 = null;
        builder0.converter = converter5;
        retrofit.ErrorHandler errorHandler7 = null;
        builder0.errorHandler = errorHandler7;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter28 = builder27.converter;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor30 = restAdapter29.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        restAdapter29.requestInterceptor = requestInterceptor31;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        restAdapter29.log = log41;
        retrofit.ErrorHandler errorHandler45 = null;
        restAdapter29.errorHandler = errorHandler45;
        retrofit.RestAdapter.Log log47 = restAdapter29.log;
        retrofit.RestAdapter.Builder builder48 = builder27.setLog(log47);
        retrofit.RequestInterceptor requestInterceptor49 = builder27.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor50 = builder27.requestInterceptor;
        retrofit.RestAdapter.Builder builder52 = builder27.setServer("hi!");
        retrofit.Server server53 = builder27.server;
        restAdapter9.server = server53;
        retrofit.RestAdapter.Builder builder55 = builder0.setServer(server53);
        java.util.concurrent.Executor executor56 = builder55.callbackExecutor;
        retrofit.Server server57 = builder55.server;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        retrofit.Server server60 = restAdapter58.server;
        retrofit.client.Client.Provider provider61 = null;
        restAdapter58.clientProvider = provider61;
        retrofit.Server server63 = null;
        restAdapter58.server = server63;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter66 = null;
        restAdapter65.converter = converter66;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        restAdapter65.requestInterceptor = requestInterceptor68;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log71 = restAdapter70.log;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        restAdapter70.requestInterceptor = requestInterceptor72;
        retrofit.RestAdapter.LogLevel logLevel74 = null;
        restAdapter70.logLevel = logLevel74;
        retrofit.ErrorHandler errorHandler76 = restAdapter70.errorHandler;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor78 = null;
        builder77.httpExecutor = executor78;
        retrofit.RestAdapter.Builder builder81 = builder77.setServer("hi!");
        retrofit.Profiler profiler82 = null;
        builder81.profiler = profiler82;
        retrofit.RequestInterceptor requestInterceptor84 = null;
        builder81.requestInterceptor = requestInterceptor84;
        retrofit.RestAdapter restAdapter86 = builder81.build();
        retrofit.converter.Converter converter87 = restAdapter86.converter;
        restAdapter70.converter = converter87;
        restAdapter65.converter = converter87;
        restAdapter58.converter = converter87;
        retrofit.RestAdapter.Builder builder91 = builder55.setConverter(converter87);
        builder91.ensureSaneDefaults();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(requestInterceptor49);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNotNull(server57);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertNull(server60);
        org.junit.Assert.assertNull(log71);
        org.junit.Assert.assertNull(errorHandler76);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertNotNull(converter87);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test11847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11847");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.client.Client.Provider provider23 = builder21.clientProvider;
        retrofit.Profiler profiler24 = builder21.profiler;
        retrofit.client.Client client25 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder26 = builder21.setClient(client25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNull(profiler24);
    }

    @Test
    public void test11848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11848");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder4.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter restAdapter9 = builder4.build();
        retrofit.converter.Converter converter10 = null;
        builder4.converter = converter10;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter12.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        restAdapter12.requestInterceptor = requestInterceptor14;
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter12.getLogLevel();
        retrofit.client.Client.Provider provider17 = null;
        restAdapter12.clientProvider = provider17;
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter12.logLevel;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter20.logLevel = logLevel22;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        restAdapter20.requestInterceptor = requestInterceptor24;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter20.logLevel = logLevel26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter29 = builder28.converter;
        retrofit.Profiler profiler30 = null;
        builder28.profiler = profiler30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.httpExecutor = executor33;
        retrofit.client.Client.Provider provider35 = null;
        builder32.clientProvider = provider35;
        retrofit.RestAdapter.Builder builder38 = builder32.setServer("hi!");
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder39.setLog(log44);
        retrofit.RestAdapter restAdapter46 = builder39.build();
        java.util.concurrent.Executor executor47 = restAdapter46.httpExecutor;
        builder38.callbackExecutor = executor47;
        builder28.callbackExecutor = executor47;
        restAdapter20.httpExecutor = executor47;
        restAdapter12.callbackExecutor = executor47;
        builder4.callbackExecutor = executor47;
        builder4.ensureSaneDefaults();
        retrofit.Profiler profiler54 = builder4.profiler;
        retrofit.ErrorHandler errorHandler55 = builder4.errorHandler;
        java.util.concurrent.Executor executor56 = builder4.callbackExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter29);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNull(profiler54);
        org.junit.Assert.assertNotNull(errorHandler55);
        org.junit.Assert.assertNotNull(executor56);
    }

    @Test
    public void test11849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11849");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.getUrl();
        java.util.List<retrofit.client.Header> headerList8 = request6.getHeaders();
        java.lang.String str9 = request6.getMethod();
        retrofit.mime.TypedOutput typedOutput10 = request6.getBody();
        retrofit.mime.TypedOutput typedOutput11 = request6.getBody();
        java.lang.String str12 = request6.getUrl();
        java.lang.String str13 = request6.getUrl();
        java.util.List<retrofit.client.Header> headerList14 = request6.getHeaders();
        retrofit.mime.TypedOutput typedOutput15 = request6.getBody();
        java.lang.String str16 = request6.getUrl();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test11850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11850");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor7 = builder6.requestInterceptor;
        retrofit.Server server8 = builder6.server;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder15 = builder9.setLog(log14);
        retrofit.ErrorHandler errorHandler16 = builder9.errorHandler;
        retrofit.client.Client.Provider provider17 = builder9.clientProvider;
        java.util.concurrent.Executor executor18 = builder9.httpExecutor;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.httpExecutor = executor20;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("hi!");
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder19.setLog(log24);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter27 = builder26.converter;
        retrofit.RestAdapter.LogLevel logLevel28 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder29 = builder25.setLogLevel(logLevel28);
        retrofit.ErrorHandler errorHandler30 = builder25.errorHandler;
        java.util.concurrent.Executor executor31 = builder25.callbackExecutor;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter32.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter32.requestInterceptor = requestInterceptor34;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        restAdapter32.log = log44;
        retrofit.ErrorHandler errorHandler48 = null;
        restAdapter32.errorHandler = errorHandler48;
        java.util.concurrent.Executor executor50 = restAdapter32.callbackExecutor;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter52 = builder51.converter;
        retrofit.RestAdapter.LogLevel logLevel53 = builder51.logLevel;
        builder51.ensureSaneDefaults();
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor64 = null;
        builder63.httpExecutor = executor64;
        retrofit.RestAdapter.Builder builder67 = builder63.setServer("hi!");
        retrofit.RestAdapter.Log log68 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder69 = builder63.setLog(log68);
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter70.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter70.logLevel = logLevel72;
        retrofit.RequestInterceptor requestInterceptor74 = null;
        restAdapter70.requestInterceptor = requestInterceptor74;
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter70.logLevel = logLevel76;
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log68, logLevel76);
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor80 = null;
        builder79.httpExecutor = executor80;
        retrofit.RestAdapter.Builder builder83 = builder79.setServer("hi!");
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder85 = builder79.setLog(log84);
        restAdapter78.log = log84;
        builder51.log = log84;
        java.util.concurrent.Executor executor88 = null;
        builder51.httpExecutor = executor88;
        retrofit.converter.Converter converter90 = null;
        builder51.converter = converter90;
        retrofit.ErrorHandler errorHandler92 = builder51.errorHandler;
        restAdapter32.errorHandler = errorHandler92;
        builder25.errorHandler = errorHandler92;
        builder9.errorHandler = errorHandler92;
        builder6.errorHandler = errorHandler92;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder98 = builder6.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertNull(converter52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(logLevel71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(errorHandler92);
    }

    @Test
    public void test11851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11851");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.ErrorHandler errorHandler20 = builder0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel21 = builder0.logLevel;
        retrofit.Server server22 = builder0.server;
        retrofit.Profiler profiler23 = builder0.profiler;
        java.util.concurrent.Executor executor24 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder26 = builder0.setServer("Retrofit-Idle");
        java.util.concurrent.Executor executor27 = builder26.callbackExecutor;
        retrofit.Profiler profiler28 = null;
        builder26.profiler = profiler28;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor27);
    }

    @Test
    public void test11852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11852");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = builder0.build();
        java.util.concurrent.Executor executor8 = restAdapter7.httpExecutor;
        retrofit.Profiler profiler9 = null;
        restAdapter7.profiler = profiler9;
        retrofit.ErrorHandler errorHandler11 = restAdapter7.errorHandler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(executor8);
        org.junit.Assert.assertNotNull(errorHandler11);
    }

    @Test
    public void test11853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11853");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel3 = builder0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel4 = builder0.logLevel;
        retrofit.Profiler profiler5 = null;
        builder0.profiler = profiler5;
        builder0.ensureSaneDefaults();
        retrofit.Server server8 = builder0.server;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = builder9.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor11 = builder9.requestInterceptor;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter13 = builder12.converter;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter14.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        restAdapter14.requestInterceptor = requestInterceptor16;
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        restAdapter14.log = log26;
        retrofit.ErrorHandler errorHandler30 = null;
        restAdapter14.errorHandler = errorHandler30;
        retrofit.RestAdapter.Log log32 = restAdapter14.log;
        retrofit.RestAdapter.Builder builder33 = builder12.setLog(log32);
        retrofit.Profiler profiler34 = builder33.profiler;
        retrofit.client.Client.Provider provider35 = builder33.clientProvider;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter39 = null;
        builder38.converter = converter39;
        retrofit.client.Client.Provider provider41 = null;
        builder38.clientProvider = provider41;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        builder38.requestInterceptor = requestInterceptor43;
        retrofit.Profiler profiler45 = builder38.profiler;
        retrofit.Profiler profiler46 = null;
        builder38.profiler = profiler46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = builder48.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor50 = builder48.requestInterceptor;
        java.util.concurrent.Executor executor51 = builder48.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel52 = builder48.logLevel;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor54 = null;
        builder53.httpExecutor = executor54;
        retrofit.RestAdapter.Builder builder57 = builder53.setServer("hi!");
        retrofit.Profiler profiler58 = null;
        builder57.profiler = profiler58;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        builder57.requestInterceptor = requestInterceptor60;
        retrofit.RestAdapter restAdapter62 = builder57.build();
        retrofit.converter.Converter converter63 = null;
        builder57.converter = converter63;
        retrofit.client.Client.Provider provider65 = builder57.clientProvider;
        retrofit.RestAdapter.Builder builder66 = builder48.setClient(provider65);
        retrofit.RestAdapter.Builder builder67 = builder38.setClient(provider65);
        builder37.clientProvider = provider65;
        builder9.clientProvider = provider65;
        retrofit.RestAdapter.Builder builder70 = builder0.setClient(provider65);
        retrofit.RestAdapter.Builder builder72 = builder70.setServer("hi!");
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor74 = null;
        builder73.httpExecutor = executor74;
        retrofit.client.Client.Provider provider76 = null;
        builder73.clientProvider = provider76;
        retrofit.RestAdapter.Builder builder79 = builder73.setServer("hi!");
        retrofit.RestAdapter.Builder builder81 = builder73.setServer("hi!");
        retrofit.Profiler profiler82 = builder81.profiler;
        retrofit.Server server83 = builder81.server;
        builder72.server = server83;
        builder72.ensureSaneDefaults();
        retrofit.converter.Converter converter86 = builder72.converter;
        retrofit.RestAdapter restAdapter87 = builder72.build();
        retrofit.RestAdapter.Log log88 = builder72.log;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(profiler34);
        org.junit.Assert.assertNull(provider35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(profiler45);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(restAdapter62);
        org.junit.Assert.assertNotNull(provider65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(profiler82);
        org.junit.Assert.assertNotNull(server83);
        org.junit.Assert.assertNotNull(converter86);
        org.junit.Assert.assertNotNull(restAdapter87);
        org.junit.Assert.assertNotNull(log88);
    }

    @Test
    public void test11854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11854");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.Server server2 = restAdapter0.server;
        retrofit.Profiler profiler3 = null;
        restAdapter0.profiler = profiler3;
        retrofit.ErrorHandler errorHandler5 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.getLogLevel();
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter7.requestInterceptor;
        retrofit.converter.Converter converter9 = restAdapter7.converter;
        java.util.concurrent.Executor executor10 = null;
        restAdapter7.callbackExecutor = executor10;
        retrofit.converter.Converter converter12 = null;
        restAdapter7.converter = converter12;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter15 = null;
        restAdapter14.converter = converter15;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        restAdapter14.requestInterceptor = requestInterceptor17;
        retrofit.Profiler profiler19 = restAdapter14.profiler;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean21 = logLevel20.log();
        restAdapter14.logLevel = logLevel20;
        java.util.concurrent.Executor executor23 = restAdapter14.httpExecutor;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = builder24.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor26 = builder24.requestInterceptor;
        retrofit.ErrorHandler errorHandler27 = null;
        builder24.errorHandler = errorHandler27;
        retrofit.converter.Converter converter29 = null;
        builder24.converter = converter29;
        retrofit.ErrorHandler errorHandler31 = null;
        builder24.errorHandler = errorHandler31;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter33.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        restAdapter33.requestInterceptor = requestInterceptor35;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel46);
        restAdapter33.log = log45;
        retrofit.ErrorHandler errorHandler49 = null;
        restAdapter33.errorHandler = errorHandler49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter52 = builder51.converter;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor54 = restAdapter53.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        restAdapter53.requestInterceptor = requestInterceptor55;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel66);
        restAdapter53.log = log65;
        retrofit.ErrorHandler errorHandler69 = null;
        restAdapter53.errorHandler = errorHandler69;
        retrofit.RestAdapter.Log log71 = restAdapter53.log;
        retrofit.RestAdapter.Builder builder72 = builder51.setLog(log71);
        retrofit.RequestInterceptor requestInterceptor73 = builder51.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor74 = builder51.requestInterceptor;
        retrofit.RestAdapter.Builder builder76 = builder51.setServer("hi!");
        retrofit.Server server77 = builder51.server;
        restAdapter33.server = server77;
        retrofit.RestAdapter.Builder builder79 = builder24.setServer(server77);
        restAdapter14.server = server77;
        restAdapter7.server = server77;
        restAdapter0.server = server77;
        retrofit.RequestInterceptor requestInterceptor83 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Log log84 = restAdapter0.log;
        retrofit.Profiler profiler85 = null;
        restAdapter0.profiler = profiler85;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter52);
        org.junit.Assert.assertNull(requestInterceptor54);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(requestInterceptor73);
        org.junit.Assert.assertNull(requestInterceptor74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(server77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(requestInterceptor83);
        org.junit.Assert.assertNull(log84);
    }

    @Test
    public void test11855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11855");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.Server server8 = null;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server8, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log16, logLevel17);
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter19.logLevel = logLevel21;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter19.setLogLevel(logLevel23);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log16, logLevel23);
        java.util.concurrent.Executor executor26 = restAdapter25.callbackExecutor;
        retrofit.Profiler profiler27 = null;
        restAdapter25.profiler = profiler27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter30 = builder29.converter;
        retrofit.Profiler profiler31 = null;
        builder29.profiler = profiler31;
        retrofit.RestAdapter.Builder builder34 = builder29.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.httpExecutor = executor36;
        retrofit.client.Client.Provider provider38 = null;
        builder35.clientProvider = provider38;
        retrofit.RestAdapter.Builder builder41 = builder35.setServer("hi!");
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter42.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter42.logLevel = logLevel44;
        retrofit.Profiler profiler46 = restAdapter42.profiler;
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter42.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor48 = restAdapter42.requestInterceptor;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log50 = restAdapter49.log;
        java.util.concurrent.Executor executor51 = restAdapter49.callbackExecutor;
        retrofit.Profiler profiler52 = restAdapter49.profiler;
        retrofit.Profiler profiler53 = null;
        restAdapter49.profiler = profiler53;
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel64);
        restAdapter49.log = log63;
        restAdapter42.log = log63;
        retrofit.RestAdapter.Builder builder68 = builder35.setLog(log63);
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = null;
        builder69.httpExecutor = executor70;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("hi!");
        retrofit.Profiler profiler74 = null;
        builder73.profiler = profiler74;
        retrofit.RequestInterceptor requestInterceptor76 = null;
        builder73.requestInterceptor = requestInterceptor76;
        retrofit.RestAdapter restAdapter78 = builder73.build();
        retrofit.converter.Converter converter79 = restAdapter78.converter;
        java.util.concurrent.Executor executor80 = restAdapter78.callbackExecutor;
        builder35.callbackExecutor = executor80;
        builder35.ensureSaneDefaults();
        retrofit.Server server83 = builder35.server;
        retrofit.RestAdapter.Builder builder84 = builder34.setServer(server83);
        retrofit.RestAdapter.Builder builder86 = builder34.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler87 = builder34.errorHandler;
        builder34.ensureSaneDefaults();
        retrofit.client.Client.Provider provider89 = builder34.clientProvider;
        restAdapter25.clientProvider = provider89;
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(converter30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(logLevel43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler46);
        org.junit.Assert.assertNull(requestInterceptor48);
        org.junit.Assert.assertNull(log50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(profiler52);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(restAdapter78);
        org.junit.Assert.assertNotNull(converter79);
        org.junit.Assert.assertNotNull(executor80);
        org.junit.Assert.assertNotNull(server83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNull(errorHandler87);
        org.junit.Assert.assertNotNull(provider89);
    }

    @Test
    public void test11856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11856");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.converter.Converter converter5 = null;
        builder0.converter = converter5;
        retrofit.ErrorHandler errorHandler7 = null;
        builder0.errorHandler = errorHandler7;
        java.util.concurrent.Executor executor9 = builder0.httpExecutor;
        java.util.concurrent.Executor executor10 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor11 = builder0.requestInterceptor;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log13 = restAdapter12.log;
        retrofit.ErrorHandler errorHandler14 = restAdapter12.errorHandler;
        retrofit.converter.Converter converter15 = null;
        restAdapter12.converter = converter15;
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter12.requestInterceptor;
        retrofit.ErrorHandler errorHandler18 = restAdapter12.errorHandler;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.httpExecutor = executor20;
        retrofit.client.Client.Provider provider22 = null;
        builder19.clientProvider = provider22;
        retrofit.RestAdapter.Builder builder25 = builder19.setServer("hi!");
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("hi!");
        retrofit.Profiler profiler31 = null;
        builder30.profiler = profiler31;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        builder30.requestInterceptor = requestInterceptor33;
        retrofit.RestAdapter restAdapter35 = builder30.build();
        retrofit.converter.Converter converter36 = restAdapter35.converter;
        retrofit.RestAdapter.Builder builder37 = builder19.setConverter(converter36);
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log39 = restAdapter38.log;
        retrofit.ErrorHandler errorHandler40 = restAdapter38.errorHandler;
        retrofit.converter.Converter converter41 = null;
        restAdapter38.converter = converter41;
        retrofit.RequestInterceptor requestInterceptor43 = restAdapter38.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor44 = restAdapter38.requestInterceptor;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = builder45.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor47 = builder45.requestInterceptor;
        retrofit.ErrorHandler errorHandler48 = null;
        builder45.errorHandler = errorHandler48;
        retrofit.converter.Converter converter50 = null;
        builder45.converter = converter50;
        retrofit.ErrorHandler errorHandler52 = null;
        builder45.errorHandler = errorHandler52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor55 = null;
        builder54.httpExecutor = executor55;
        retrofit.RestAdapter.Builder builder58 = builder54.setServer("hi!");
        retrofit.Profiler profiler59 = null;
        builder58.profiler = profiler59;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        builder58.requestInterceptor = requestInterceptor61;
        retrofit.RestAdapter restAdapter63 = builder58.build();
        retrofit.converter.Converter converter64 = restAdapter63.converter;
        retrofit.RestAdapter.Builder builder65 = builder45.setConverter(converter64);
        restAdapter38.converter = converter64;
        builder37.converter = converter64;
        restAdapter12.converter = converter64;
        retrofit.ErrorHandler errorHandler69 = restAdapter12.errorHandler;
        retrofit.converter.Converter converter70 = restAdapter12.converter;
        builder0.converter = converter70;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(restAdapter35);
        org.junit.Assert.assertNotNull(converter36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNull(requestInterceptor44);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNull(requestInterceptor47);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter63);
        org.junit.Assert.assertNotNull(converter64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(errorHandler69);
        org.junit.Assert.assertNotNull(converter70);
    }

    @Test
    public void test11857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11857");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        java.util.concurrent.Executor executor5 = builder0.httpExecutor;
        java.util.concurrent.Executor executor6 = null;
        builder0.httpExecutor = executor6;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("hi!");
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter restAdapter11 = builder9.build();
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter11.requestInterceptor = requestInterceptor12;
        retrofit.client.Header[] headerArray16 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList17 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList17, headerArray16);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput19);
        java.lang.String str21 = request20.getUrl();
        java.util.List<retrofit.client.Header> headerList22 = request20.getHeaders();
        java.lang.String str23 = request20.getMethod();
        retrofit.mime.TypedOutput typedOutput24 = request20.getBody();
        java.util.List<retrofit.client.Header> headerList25 = request20.getHeaders();
        java.lang.String str26 = request20.getUrl();
        java.lang.String str27 = request20.getUrl();
        java.lang.String str28 = request20.getUrl();
        java.lang.String str29 = request20.getUrl();
        java.lang.String str30 = request20.getUrl();
        java.util.List<retrofit.client.Header> headerList31 = request20.getHeaders();
        retrofit.client.Request request32 = restAdapter11.logAndReplaceRequest(request20);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(server10);
        org.junit.Assert.assertNotNull(restAdapter11);
        org.junit.Assert.assertNotNull(headerArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(headerList22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(typedOutput24);
        org.junit.Assert.assertNotNull(headerList25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(headerList31);
        org.junit.Assert.assertNotNull(request32);
    }

    @Test
    public void test11858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11858");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = builder0.build();
        java.util.concurrent.Executor executor8 = restAdapter7.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter7.new RestHandler();
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        java.lang.String str19 = request18.getUrl();
        java.util.List<retrofit.client.Header> headerList20 = request18.getHeaders();
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "", headerList20, typedOutput21);
        java.lang.String str23 = request22.getMethod();
        retrofit.mime.TypedOutput typedOutput24 = request22.getBody();
        java.util.List<retrofit.client.Header> headerList25 = request22.getHeaders();
        retrofit.client.Request request26 = restAdapter7.logAndReplaceRequest(request22);
        retrofit.client.Header[] headerArray31 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList32 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList32, headerArray31);
        retrofit.mime.TypedOutput typedOutput34 = null;
        retrofit.client.Request request35 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList32, typedOutput34);
        java.lang.String str36 = request35.getUrl();
        java.util.List<retrofit.client.Header> headerList37 = request35.getHeaders();
        java.lang.String str38 = request35.getMethod();
        retrofit.mime.TypedOutput typedOutput39 = request35.getBody();
        java.util.List<retrofit.client.Header> headerList40 = request35.getHeaders();
        java.lang.String str41 = request35.getUrl();
        java.lang.String str42 = request35.getUrl();
        java.util.List<retrofit.client.Header> headerList43 = request35.getHeaders();
        java.util.List<retrofit.client.Header> headerList44 = request35.getHeaders();
        retrofit.mime.TypedOutput typedOutput45 = null;
        retrofit.client.Request request46 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", headerList44, typedOutput45);
        retrofit.mime.TypedOutput typedOutput47 = request46.getBody();
        retrofit.client.Request request48 = restAdapter7.logAndReplaceRequest(request46);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(executor8);
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(typedOutput24);
        org.junit.Assert.assertNotNull(headerList25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(headerArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(headerList37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNull(typedOutput39);
        org.junit.Assert.assertNotNull(headerList40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(headerList43);
        org.junit.Assert.assertNotNull(headerList44);
        org.junit.Assert.assertNull(typedOutput47);
        org.junit.Assert.assertNotNull(request48);
    }

    @Test
    public void test11859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11859");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.converter.Converter converter5 = null;
        restAdapter2.converter = converter5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Log log27 = restAdapter9.log;
        retrofit.RestAdapter.Builder builder28 = builder7.setLog(log27);
        restAdapter2.log = log27;
        log27.log("");
        log27.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder34 = builder0.setLog(log27);
        retrofit.RequestInterceptor requestInterceptor35 = builder34.requestInterceptor;
        retrofit.Server server36 = builder34.server;
        retrofit.RequestInterceptor requestInterceptor37 = builder34.requestInterceptor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertNull(requestInterceptor37);
    }

    @Test
    public void test11860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11860");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.Server server5 = restAdapter0.server;
        java.util.concurrent.Executor executor6 = restAdapter0.callbackExecutor;
        retrofit.ErrorHandler errorHandler7 = null;
        restAdapter0.errorHandler = errorHandler7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter10 = builder9.converter;
        retrofit.RestAdapter.LogLevel logLevel11 = builder9.logLevel;
        builder9.ensureSaneDefaults();
        retrofit.client.Client.Provider provider13 = null;
        builder9.clientProvider = provider13;
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder23.setLog(log28);
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter30.logLevel = logLevel32;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter30.requestInterceptor = requestInterceptor34;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter30.logLevel = logLevel36;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log28, logLevel36);
        builder9.logLevel = logLevel36;
        retrofit.client.Client.Provider provider40 = null;
        builder9.clientProvider = provider40;
        retrofit.converter.Converter converter42 = builder9.converter;
        restAdapter0.converter = converter42;
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler45 = restAdapter0.errorHandler;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log47 = restAdapter46.log;
        java.util.concurrent.Executor executor48 = restAdapter46.callbackExecutor;
        java.util.concurrent.Executor executor49 = restAdapter46.callbackExecutor;
        retrofit.Profiler profiler50 = restAdapter46.profiler;
        retrofit.RestAdapter.Log log51 = restAdapter46.log;
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter46.new RestHandler();
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor54 = null;
        builder53.httpExecutor = executor54;
        retrofit.RestAdapter.Builder builder57 = builder53.setServer("hi!");
        retrofit.RestAdapter restAdapter58 = builder57.build();
        retrofit.client.Header[] headerArray61 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList62 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList62, headerArray61);
        retrofit.mime.TypedOutput typedOutput64 = null;
        retrofit.client.Request request65 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList62, typedOutput64);
        java.lang.String str66 = request65.getMethod();
        java.lang.String str67 = request65.getMethod();
        retrofit.client.Request request68 = restAdapter58.logAndReplaceRequest(request65);
        retrofit.RequestInterceptor requestInterceptor69 = restAdapter58.requestInterceptor;
        restAdapter46.requestInterceptor = requestInterceptor69;
        restAdapter0.requestInterceptor = requestInterceptor69;
        retrofit.RequestInterceptor requestInterceptor72 = restAdapter0.requestInterceptor;
        retrofit.client.Header[] headerArray77 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList78 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList78, headerArray77);
        retrofit.mime.TypedOutput typedOutput80 = null;
        retrofit.client.Request request81 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList78, typedOutput80);
        java.lang.String str82 = request81.getUrl();
        java.util.List<retrofit.client.Header> headerList83 = request81.getHeaders();
        retrofit.mime.TypedOutput typedOutput84 = null;
        retrofit.client.Request request85 = new retrofit.client.Request("hi!", "", headerList83, typedOutput84);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request86 = restAdapter0.logAndReplaceRequest(request85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(converter42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertNull(log47);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertNull(profiler50);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(restAdapter58);
        org.junit.Assert.assertNotNull(headerArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(request68);
        org.junit.Assert.assertNotNull(requestInterceptor69);
        org.junit.Assert.assertNotNull(requestInterceptor72);
        org.junit.Assert.assertNotNull(headerArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(headerList83);
    }

    @Test
    public void test11861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11861");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = builder26.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor28 = builder26.requestInterceptor;
        retrofit.Profiler profiler29 = builder26.profiler;
        retrofit.RestAdapter.LogLevel logLevel30 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder31 = builder25.setLogLevel(logLevel30);
        retrofit.converter.Converter converter32 = builder31.converter;
        retrofit.Profiler profiler33 = builder31.profiler;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter34.logLevel = logLevel36;
        retrofit.Profiler profiler38 = restAdapter34.profiler;
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter34.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor40 = restAdapter34.requestInterceptor;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log42 = restAdapter41.log;
        java.util.concurrent.Executor executor43 = restAdapter41.callbackExecutor;
        retrofit.Profiler profiler44 = restAdapter41.profiler;
        retrofit.Profiler profiler45 = null;
        restAdapter41.profiler = profiler45;
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel56);
        restAdapter41.log = log55;
        restAdapter34.log = log55;
        builder31.log = log55;
        retrofit.ErrorHandler errorHandler61 = builder31.errorHandler;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler38);
        org.junit.Assert.assertNull(requestInterceptor40);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(profiler44);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler61);
    }

    @Test
    public void test11862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11862");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        restAdapter0.log = log12;
        retrofit.ErrorHandler errorHandler16 = null;
        restAdapter0.errorHandler = errorHandler16;
        java.util.concurrent.Executor executor18 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter20 = builder19.converter;
        retrofit.RestAdapter.LogLevel logLevel21 = builder19.logLevel;
        builder19.ensureSaneDefaults();
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.httpExecutor = executor32;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("hi!");
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder31.setLog(log36);
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter38.logLevel = logLevel40;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        restAdapter38.requestInterceptor = requestInterceptor42;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter38.logLevel = logLevel44;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log36, logLevel44);
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = null;
        builder47.httpExecutor = executor48;
        retrofit.RestAdapter.Builder builder51 = builder47.setServer("hi!");
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = builder47.setLog(log52);
        restAdapter46.log = log52;
        builder19.log = log52;
        java.util.concurrent.Executor executor56 = null;
        builder19.httpExecutor = executor56;
        retrofit.converter.Converter converter58 = null;
        builder19.converter = converter58;
        retrofit.ErrorHandler errorHandler60 = builder19.errorHandler;
        restAdapter0.errorHandler = errorHandler60;
        java.lang.Throwable throwable62 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable62, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(errorHandler60);
    }

    @Test
    public void test11863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11863");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder12.setLog(log17);
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter19.logLevel = logLevel21;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter19.requestInterceptor = requestInterceptor23;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter19.logLevel = logLevel25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log17, logLevel25);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("hi!");
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder28.setLog(log33);
        restAdapter27.log = log33;
        builder0.log = log33;
        java.util.concurrent.Executor executor37 = null;
        builder0.httpExecutor = executor37;
        retrofit.converter.Converter converter39 = null;
        builder0.converter = converter39;
        retrofit.RestAdapter.Builder builder42 = builder0.setServer("hi!");
        retrofit.converter.Converter converter43 = builder42.converter;
        retrofit.RestAdapter restAdapter44 = builder42.build();
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter44.new RestHandler();
        retrofit.Profiler profiler46 = restAdapter44.profiler;
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter44.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter44.logLevel;
        retrofit.RestAdapter.Log log49 = restAdapter44.log;
        retrofit.converter.Converter converter50 = restAdapter44.converter;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNull(profiler46);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(converter50);
    }

    @Test
    public void test11864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11864");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor8 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Log log9 = null;
        restAdapter0.log = log9;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = null;
        restAdapter11.httpExecutor = executor12;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        restAdapter11.requestInterceptor = requestInterceptor14;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter11.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter11.new RestHandler();
        java.util.concurrent.Executor executor18 = restAdapter11.httpExecutor;
        retrofit.client.Client.Provider provider19 = restAdapter11.clientProvider;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor31 = restAdapter30.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        restAdapter30.requestInterceptor = requestInterceptor32;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel43);
        restAdapter30.log = log42;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean47 = logLevel46.log();
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log42, logLevel46);
        retrofit.RestAdapter.Builder builder49 = builder20.setLog(log42);
        retrofit.RestAdapter.Builder builder51 = builder49.setServer("hi!");
        retrofit.RestAdapter restAdapter52 = builder49.build();
        java.util.concurrent.Executor executor53 = restAdapter52.httpExecutor;
        restAdapter11.httpExecutor = executor53;
        restAdapter0.callbackExecutor = executor53;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertNotNull(executor53);
    }

    @Test
    public void test11865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11865");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.Profiler profiler12 = null;
        builder11.profiler = profiler12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder14.setLog(log19);
        retrofit.RestAdapter restAdapter21 = builder14.build();
        retrofit.converter.Converter converter22 = null;
        builder14.converter = converter22;
        retrofit.ErrorHandler errorHandler24 = null;
        builder14.errorHandler = errorHandler24;
        retrofit.RequestInterceptor requestInterceptor26 = builder14.requestInterceptor;
        builder11.requestInterceptor = requestInterceptor26;
        retrofit.RestAdapter.Builder builder28 = builder0.setRequestInterceptor(requestInterceptor26);
        retrofit.client.Client.Provider provider29 = null;
        builder28.clientProvider = provider29;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        log31.log("");
        retrofit.RestAdapter.Builder builder34 = builder28.setLog(log31);
        java.util.concurrent.Executor executor35 = builder34.httpExecutor;
        builder34.ensureSaneDefaults();
        retrofit.client.Client.Provider provider37 = builder34.clientProvider;
        retrofit.Server server38 = builder34.server;
        retrofit.RequestInterceptor requestInterceptor39 = builder34.requestInterceptor;
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNotNull(provider37);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertNotNull(requestInterceptor39);
    }

    @Test
    public void test11866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11866");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder0.logLevel = logLevel5;
        retrofit.converter.Converter converter7 = null;
        builder0.converter = converter7;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.converter.Converter converter11 = restAdapter9.converter;
        java.util.concurrent.Executor executor12 = null;
        restAdapter9.callbackExecutor = executor12;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor15 = null;
        restAdapter14.httpExecutor = executor15;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        restAdapter14.requestInterceptor = requestInterceptor17;
        retrofit.RestAdapter.Log log19 = restAdapter14.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter14.logLevel = logLevel20;
        restAdapter9.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder23 = builder0.setLogLevel(logLevel20);
        retrofit.RestAdapter.Log log24 = builder23.log;
        retrofit.converter.Converter converter25 = builder23.converter;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter27 = builder26.converter;
        retrofit.RestAdapter.LogLevel logLevel28 = builder26.logLevel;
        builder26.ensureSaneDefaults();
        retrofit.client.Client.Provider provider30 = null;
        builder26.clientProvider = provider30;
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.httpExecutor = executor41;
        retrofit.RestAdapter.Builder builder44 = builder40.setServer("hi!");
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder46 = builder40.setLog(log45);
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter47.logLevel = logLevel49;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        restAdapter47.requestInterceptor = requestInterceptor51;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter47.logLevel = logLevel53;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log45, logLevel53);
        builder26.logLevel = logLevel53;
        retrofit.RestAdapter.LogLevel logLevel57 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder58 = builder23.setLogLevel(logLevel57);
        java.util.concurrent.Executor executor59 = builder58.callbackExecutor;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.httpExecutor = executor61;
        retrofit.client.Client.Provider provider63 = null;
        builder60.clientProvider = provider63;
        retrofit.client.Client.Provider provider65 = builder60.clientProvider;
        retrofit.RestAdapter.Log log66 = builder60.log;
        retrofit.RestAdapter.Builder builder68 = builder60.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = null;
        builder69.httpExecutor = executor70;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("hi!");
        retrofit.RestAdapter.Log log74 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder75 = builder69.setLog(log74);
        retrofit.RequestInterceptor requestInterceptor76 = builder75.requestInterceptor;
        retrofit.RestAdapter restAdapter77 = builder75.build();
        retrofit.Server server78 = builder75.server;
        builder60.server = server78;
        retrofit.RestAdapter.Builder builder80 = builder58.setServer(server78);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(executor59);
        org.junit.Assert.assertNull(provider65);
        org.junit.Assert.assertNull(log66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(log74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(requestInterceptor76);
        org.junit.Assert.assertNotNull(restAdapter77);
        org.junit.Assert.assertNotNull(server78);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test11867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11867");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log22, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLog(log22);
        java.util.concurrent.Executor executor30 = builder29.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor31 = builder29.requestInterceptor;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter33 = null;
        builder32.converter = converter33;
        retrofit.client.Client.Provider provider35 = null;
        builder32.clientProvider = provider35;
        java.util.concurrent.Executor executor37 = builder32.httpExecutor;
        retrofit.Profiler profiler38 = builder32.profiler;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder39.setLog(log44);
        retrofit.RestAdapter restAdapter46 = builder39.build();
        java.util.concurrent.Executor executor47 = restAdapter46.httpExecutor;
        retrofit.client.Client.Provider provider48 = null;
        restAdapter46.clientProvider = provider48;
        retrofit.client.Client.Provider provider50 = null;
        restAdapter46.clientProvider = provider50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = null;
        builder52.httpExecutor = executor53;
        retrofit.RestAdapter.Builder builder56 = builder52.setServer("hi!");
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder52.setLog(log57);
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server59, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log67, logLevel68);
        builder52.logLevel = logLevel68;
        retrofit.converter.Converter converter71 = builder52.converter;
        retrofit.ErrorHandler errorHandler72 = builder52.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel73 = builder52.logLevel;
        boolean boolean74 = logLevel73.log();
        boolean boolean75 = logLevel73.log();
        restAdapter46.logLevel = logLevel73;
        retrofit.RestAdapter.Builder builder77 = builder32.setLogLevel(logLevel73);
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor79 = null;
        builder78.httpExecutor = executor79;
        retrofit.RestAdapter.Builder builder82 = builder78.setServer("hi!");
        retrofit.client.Client.Provider provider83 = builder82.clientProvider;
        builder82.ensureSaneDefaults();
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        log85.log("");
        builder82.log = log85;
        retrofit.Server server89 = builder82.server;
        builder32.server = server89;
        retrofit.RestAdapter.Builder builder91 = builder29.setServer(server89);
        java.util.concurrent.Executor executor92 = builder29.httpExecutor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(profiler38);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter71);
        org.junit.Assert.assertNull(errorHandler72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(provider83);
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertNotNull(server89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNull(executor92);
    }

    @Test
    public void test11868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11868");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.RequestInterceptor requestInterceptor8 = null;
        builder7.requestInterceptor = requestInterceptor8;
        retrofit.client.Client.Provider provider10 = builder7.clientProvider;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = null;
        builder11.converter = converter12;
        retrofit.client.Client.Provider provider14 = null;
        builder11.clientProvider = provider14;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        builder11.requestInterceptor = requestInterceptor16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler19 = builder18.errorHandler;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor21 = restAdapter20.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        restAdapter20.requestInterceptor = requestInterceptor22;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel33);
        restAdapter20.log = log32;
        retrofit.ErrorHandler errorHandler36 = null;
        restAdapter20.errorHandler = errorHandler36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter39 = builder38.converter;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor41 = restAdapter40.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        restAdapter40.requestInterceptor = requestInterceptor42;
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel53);
        restAdapter40.log = log52;
        retrofit.ErrorHandler errorHandler56 = null;
        restAdapter40.errorHandler = errorHandler56;
        retrofit.RestAdapter.Log log58 = restAdapter40.log;
        retrofit.RestAdapter.Builder builder59 = builder38.setLog(log58);
        retrofit.RequestInterceptor requestInterceptor60 = builder38.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor61 = builder38.requestInterceptor;
        retrofit.RestAdapter.Builder builder63 = builder38.setServer("hi!");
        retrofit.Server server64 = builder38.server;
        restAdapter20.server = server64;
        builder18.server = server64;
        retrofit.RestAdapter.Builder builder67 = builder11.setServer(server64);
        retrofit.RestAdapter.LogLevel logLevel68 = builder11.logLevel;
        builder7.logLevel = logLevel68;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter71 = builder70.converter;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor73 = restAdapter72.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor74 = null;
        restAdapter72.requestInterceptor = requestInterceptor74;
        retrofit.Server server76 = null;
        retrofit.client.Client.Provider provider77 = null;
        java.util.concurrent.Executor executor78 = null;
        java.util.concurrent.Executor executor79 = null;
        retrofit.RequestInterceptor requestInterceptor80 = null;
        retrofit.converter.Converter converter81 = null;
        retrofit.Profiler profiler82 = null;
        retrofit.ErrorHandler errorHandler83 = null;
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel85 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter86 = new retrofit.RestAdapter(server76, provider77, executor78, executor79, requestInterceptor80, converter81, profiler82, errorHandler83, log84, logLevel85);
        restAdapter72.log = log84;
        retrofit.ErrorHandler errorHandler88 = null;
        restAdapter72.errorHandler = errorHandler88;
        retrofit.RestAdapter.Log log90 = restAdapter72.log;
        retrofit.RestAdapter.Builder builder91 = builder70.setLog(log90);
        builder70.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder94 = builder70.setServer("Retrofit-Idle");
        retrofit.RequestInterceptor requestInterceptor95 = builder70.requestInterceptor;
        retrofit.client.Client.Provider provider96 = builder70.clientProvider;
        retrofit.Server server97 = builder70.server;
        retrofit.RestAdapter.Builder builder98 = builder7.setServer(server97);
        retrofit.converter.Converter converter99 = builder98.converter;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider10);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(requestInterceptor60);
        org.junit.Assert.assertNull(requestInterceptor61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(server64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter71);
        org.junit.Assert.assertNull(requestInterceptor73);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(requestInterceptor95);
        org.junit.Assert.assertNotNull(provider96);
        org.junit.Assert.assertNotNull(server97);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNull(converter99);
    }

    @Test
    public void test11869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11869");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RestAdapter.Log log2 = builder0.log;
        retrofit.Server server3 = null;
        retrofit.client.Client.Provider provider4 = null;
        java.util.concurrent.Executor executor5 = null;
        java.util.concurrent.Executor executor6 = null;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        retrofit.converter.Converter converter8 = null;
        retrofit.Profiler profiler9 = null;
        retrofit.ErrorHandler errorHandler10 = null;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter22.logLevel = logLevel24;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server3, provider4, executor5, executor6, requestInterceptor7, converter8, profiler9, errorHandler10, log19, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter30.logLevel = logLevel32;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter30.setLogLevel(logLevel34);
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter30.getLogLevel();
        builder29.logLevel = logLevel36;
        retrofit.ErrorHandler errorHandler38 = builder29.errorHandler;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler38);
    }

    @Test
    public void test11870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11870");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.httpExecutor = executor9;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder8.setLog(log13);
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter15.logLevel = logLevel17;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter15.requestInterceptor = requestInterceptor19;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter15.logLevel = logLevel21;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log13, logLevel21);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder30 = builder24.setLog(log29);
        restAdapter23.log = log29;
        retrofit.ErrorHandler errorHandler32 = restAdapter23.errorHandler;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.client.Client.Provider provider38 = builder37.clientProvider;
        builder37.ensureSaneDefaults();
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        log40.log("");
        builder37.log = log40;
        retrofit.Server server44 = builder37.server;
        restAdapter23.server = server44;
        retrofit.Server server46 = restAdapter23.server;
        java.util.concurrent.Executor executor47 = null;
        restAdapter23.callbackExecutor = executor47;
        retrofit.RestAdapter.Log log49 = null;
        restAdapter23.log = log49;
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(provider38);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(server44);
        org.junit.Assert.assertNotNull(server46);
    }

    @Test
    public void test11871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11871");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.converter.Converter converter5 = null;
        builder0.converter = converter5;
        retrofit.ErrorHandler errorHandler7 = null;
        builder0.errorHandler = errorHandler7;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter28 = builder27.converter;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor30 = restAdapter29.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        restAdapter29.requestInterceptor = requestInterceptor31;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        restAdapter29.log = log41;
        retrofit.ErrorHandler errorHandler45 = null;
        restAdapter29.errorHandler = errorHandler45;
        retrofit.RestAdapter.Log log47 = restAdapter29.log;
        retrofit.RestAdapter.Builder builder48 = builder27.setLog(log47);
        retrofit.RequestInterceptor requestInterceptor49 = builder27.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor50 = builder27.requestInterceptor;
        retrofit.RestAdapter.Builder builder52 = builder27.setServer("hi!");
        retrofit.Server server53 = builder27.server;
        restAdapter9.server = server53;
        retrofit.RestAdapter.Builder builder55 = builder0.setServer(server53);
        java.util.concurrent.Executor executor56 = builder55.callbackExecutor;
        retrofit.converter.Converter converter57 = builder55.converter;
        retrofit.converter.Converter converter58 = builder55.converter;
        java.util.concurrent.Executor executor59 = builder55.callbackExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(requestInterceptor49);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNull(converter57);
        org.junit.Assert.assertNull(converter58);
        org.junit.Assert.assertNull(executor59);
    }

    @Test
    public void test11872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11872");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.httpExecutor = executor9;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder8.setLog(log13);
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter15.logLevel = logLevel17;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter15.requestInterceptor = requestInterceptor19;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter15.logLevel = logLevel21;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log13, logLevel21);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder30 = builder24.setLog(log29);
        restAdapter23.log = log29;
        retrofit.ErrorHandler errorHandler32 = restAdapter23.errorHandler;
        retrofit.client.Header[] headerArray35 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList36 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList36, headerArray35);
        retrofit.mime.TypedOutput typedOutput38 = null;
        retrofit.client.Request request39 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList36, typedOutput38);
        java.lang.String str40 = request39.getMethod();
        retrofit.client.Request request41 = restAdapter23.logAndReplaceRequest(request39);
        java.lang.String str42 = request39.getUrl();
        java.lang.String str43 = request39.getUrl();
        java.lang.String str44 = request39.getMethod();
        retrofit.mime.TypedOutput typedOutput45 = request39.getBody();
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNotNull(headerArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(request41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(typedOutput45);
    }

    @Test
    public void test11873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11873");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor4 = builder3.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor5 = builder3.requestInterceptor;
        retrofit.ErrorHandler errorHandler6 = null;
        builder3.errorHandler = errorHandler6;
        retrofit.converter.Converter converter8 = null;
        builder3.converter = converter8;
        retrofit.client.Client.Provider provider10 = builder3.clientProvider;
        retrofit.RequestInterceptor requestInterceptor11 = builder3.requestInterceptor;
        retrofit.Server server12 = builder3.server;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        log21.log("hi!");
        log21.log("Retrofit-Idle");
        builder3.log = log21;
        retrofit.RestAdapter.LogLevel logLevel29 = builder3.logLevel;
        restAdapter0.logLevel = logLevel29;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(provider10);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test11874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11874");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Log log27 = restAdapter9.log;
        retrofit.RestAdapter.Builder builder28 = builder7.setLog(log27);
        retrofit.Profiler profiler29 = builder28.profiler;
        retrofit.client.Client.Provider provider30 = builder28.clientProvider;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter33 = builder32.build();
        retrofit.ErrorHandler errorHandler34 = restAdapter33.errorHandler;
        builder5.errorHandler = errorHandler34;
        builder5.ensureSaneDefaults();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(restAdapter33);
        org.junit.Assert.assertNotNull(errorHandler34);
    }

    @Test
    public void test11875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11875");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        builder4.logLevel = logLevel6;
        retrofit.RestAdapter restAdapter9 = builder4.build();
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.converter.Converter converter13 = null;
        restAdapter10.converter = converter13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter16 = builder15.converter;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter17.requestInterceptor = requestInterceptor19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        restAdapter17.log = log29;
        retrofit.ErrorHandler errorHandler33 = null;
        restAdapter17.errorHandler = errorHandler33;
        retrofit.RestAdapter.Log log35 = restAdapter17.log;
        retrofit.RestAdapter.Builder builder36 = builder15.setLog(log35);
        restAdapter10.log = log35;
        retrofit.RestAdapter.Builder builder38 = builder4.setLog(log35);
        retrofit.RequestInterceptor requestInterceptor39 = null;
        builder38.requestInterceptor = requestInterceptor39;
        retrofit.Profiler profiler41 = null;
        builder38.profiler = profiler41;
        retrofit.RestAdapter.LogLevel logLevel43 = builder38.logLevel;
        retrofit.RestAdapter.LogLevel logLevel44 = builder38.logLevel;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.httpExecutor = executor46;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("hi!");
        retrofit.Profiler profiler50 = null;
        builder49.profiler = profiler50;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        builder49.requestInterceptor = requestInterceptor52;
        retrofit.RestAdapter restAdapter54 = builder49.build();
        retrofit.converter.Converter converter55 = null;
        builder49.converter = converter55;
        retrofit.RestAdapter.LogLevel logLevel57 = builder49.logLevel;
        retrofit.RequestInterceptor requestInterceptor58 = builder49.requestInterceptor;
        builder38.requestInterceptor = requestInterceptor58;
        retrofit.RestAdapter.LogLevel logLevel60 = builder38.logLevel;
        retrofit.Server server61 = builder38.server;
        retrofit.ErrorHandler errorHandler62 = builder38.errorHandler;
        java.util.concurrent.Executor executor63 = builder38.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel64 = builder38.logLevel;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(restAdapter54);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor58);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(server61);
        org.junit.Assert.assertNotNull(errorHandler62);
        org.junit.Assert.assertNotNull(executor63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test11876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11876");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.client.Client.Provider provider23 = builder21.clientProvider;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = null;
        builder29.httpExecutor = executor30;
        retrofit.RestAdapter.Builder builder33 = builder29.setServer("hi!");
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder29.setLog(log34);
        retrofit.RestAdapter restAdapter36 = builder29.build();
        retrofit.converter.Converter converter37 = null;
        builder29.converter = converter37;
        retrofit.ErrorHandler errorHandler39 = null;
        builder29.errorHandler = errorHandler39;
        retrofit.RequestInterceptor requestInterceptor41 = builder29.requestInterceptor;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.httpExecutor = executor43;
        retrofit.RestAdapter.Builder builder46 = builder42.setServer("hi!");
        retrofit.client.Client.Provider provider47 = builder46.clientProvider;
        builder46.ensureSaneDefaults();
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        log49.log("");
        builder46.log = log49;
        retrofit.Server server53 = builder46.server;
        builder29.server = server53;
        retrofit.RestAdapter.Builder builder55 = builder24.setServer(server53);
        builder21.server = server53;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor58 = null;
        builder57.httpExecutor = executor58;
        retrofit.client.Client.Provider provider60 = null;
        builder57.clientProvider = provider60;
        retrofit.RestAdapter.Builder builder63 = builder57.setServer("hi!");
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor65 = null;
        builder64.httpExecutor = executor65;
        retrofit.RestAdapter.Builder builder68 = builder64.setServer("hi!");
        retrofit.Profiler profiler69 = null;
        builder68.profiler = profiler69;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        builder68.requestInterceptor = requestInterceptor71;
        retrofit.RestAdapter restAdapter73 = builder68.build();
        retrofit.converter.Converter converter74 = restAdapter73.converter;
        retrofit.RestAdapter.Builder builder75 = builder57.setConverter(converter74);
        retrofit.RestAdapter.LogLevel logLevel76 = builder75.logLevel;
        builder21.logLevel = logLevel76;
        retrofit.converter.Converter converter78 = builder21.converter;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(provider47);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(restAdapter73);
        org.junit.Assert.assertNotNull(converter74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter78);
    }

    @Test
    public void test11877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11877");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList5, typedOutput9);
        java.util.List<retrofit.client.Header> headerList11 = request10.getHeaders();
        java.util.List<retrofit.client.Header> headerList12 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput13 = request10.getBody();
        java.util.List<retrofit.client.Header> headerList14 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput15 = request10.getBody();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput15);
    }

    @Test
    public void test11878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11878");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter.LogLevel logLevel8 = builder6.logLevel;
        builder6.ensureSaneDefaults();
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.httpExecutor = executor19;
        retrofit.RestAdapter.Builder builder22 = builder18.setServer("hi!");
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder18.setLog(log23);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter25.logLevel = logLevel27;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        restAdapter25.requestInterceptor = requestInterceptor29;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter25.logLevel = logLevel31;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log23, logLevel31);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.RestAdapter.Builder builder38 = builder34.setServer("hi!");
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder40 = builder34.setLog(log39);
        restAdapter33.log = log39;
        builder6.log = log39;
        java.util.concurrent.Executor executor43 = null;
        builder6.httpExecutor = executor43;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor46 = restAdapter45.requestInterceptor;
        retrofit.converter.Converter converter47 = restAdapter45.converter;
        java.util.concurrent.Executor executor48 = null;
        restAdapter45.callbackExecutor = executor48;
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter45.logLevel;
        java.util.concurrent.Executor executor51 = restAdapter45.callbackExecutor;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = null;
        builder52.httpExecutor = executor53;
        retrofit.RestAdapter.Builder builder56 = builder52.setServer("hi!");
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder52.setLog(log57);
        retrofit.RestAdapter restAdapter59 = builder52.build();
        java.util.concurrent.Executor executor60 = restAdapter59.httpExecutor;
        restAdapter45.httpExecutor = executor60;
        builder6.callbackExecutor = executor60;
        retrofit.RequestInterceptor requestInterceptor63 = builder6.requestInterceptor;
        retrofit.RestAdapter.Builder builder64 = builder0.setRequestInterceptor(requestInterceptor63);
        retrofit.RestAdapter.Log log65 = builder64.log;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertNull(converter47);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertNotNull(executor60);
        org.junit.Assert.assertNotNull(requestInterceptor63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(log65);
    }

    @Test
    public void test11879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11879");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.ErrorHandler errorHandler20 = builder0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel21 = builder0.logLevel;
        retrofit.Server server22 = builder0.server;
        retrofit.Profiler profiler23 = builder0.profiler;
        retrofit.Server server24 = builder0.server;
        retrofit.RestAdapter.Builder builder26 = builder0.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler27 = builder0.errorHandler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNotNull(server24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler27);
    }

    @Test
    public void test11880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11880");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter1 = null;
        restAdapter0.converter = converter1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.Profiler profiler5 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        restAdapter0.logLevel = logLevel6;
        java.util.concurrent.Executor executor9 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter0.getLogLevel();
        retrofit.Profiler profiler11 = null;
        restAdapter0.profiler = profiler11;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter0.getLogLevel();
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log15 = restAdapter14.log;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        restAdapter14.requestInterceptor = requestInterceptor16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter14.getLogLevel();
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter19.logLevel = logLevel21;
        retrofit.Profiler profiler23 = restAdapter19.profiler;
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter19.new RestHandler();
        retrofit.Server server25 = null;
        restAdapter19.server = server25;
        retrofit.Profiler profiler27 = null;
        restAdapter19.profiler = profiler27;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter30 = null;
        restAdapter29.converter = converter30;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        restAdapter29.requestInterceptor = requestInterceptor32;
        retrofit.Profiler profiler34 = restAdapter29.profiler;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean36 = logLevel35.log();
        restAdapter29.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.httpExecutor = executor39;
        retrofit.RestAdapter.Builder builder42 = builder38.setServer("hi!");
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder38.setLog(log43);
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter45.logLevel;
        retrofit.converter.Converter converter48 = null;
        restAdapter45.converter = converter48;
        retrofit.ErrorHandler errorHandler50 = restAdapter45.errorHandler;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter52 = null;
        builder51.converter = converter52;
        retrofit.client.Client.Provider provider54 = null;
        builder51.clientProvider = provider54;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        builder51.requestInterceptor = requestInterceptor56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.httpExecutor = executor59;
        retrofit.RestAdapter.Builder builder62 = builder58.setServer("hi!");
        retrofit.Profiler profiler63 = null;
        builder62.profiler = profiler63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = null;
        builder65.httpExecutor = executor66;
        retrofit.RestAdapter.Builder builder69 = builder65.setServer("hi!");
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder65.setLog(log70);
        retrofit.RestAdapter restAdapter72 = builder65.build();
        retrofit.converter.Converter converter73 = null;
        builder65.converter = converter73;
        retrofit.ErrorHandler errorHandler75 = null;
        builder65.errorHandler = errorHandler75;
        retrofit.RequestInterceptor requestInterceptor77 = builder65.requestInterceptor;
        builder62.requestInterceptor = requestInterceptor77;
        retrofit.RestAdapter.Builder builder79 = builder51.setRequestInterceptor(requestInterceptor77);
        restAdapter45.requestInterceptor = requestInterceptor77;
        builder38.requestInterceptor = requestInterceptor77;
        restAdapter29.requestInterceptor = requestInterceptor77;
        restAdapter19.requestInterceptor = requestInterceptor77;
        restAdapter14.requestInterceptor = requestInterceptor77;
        restAdapter0.requestInterceptor = requestInterceptor77;
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(profiler34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(restAdapter72);
        org.junit.Assert.assertNotNull(requestInterceptor77);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test11881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11881");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.client.Client.Provider provider10 = null;
        builder7.clientProvider = provider10;
        retrofit.client.Client.Provider provider12 = builder7.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.httpExecutor = executor16;
        retrofit.RestAdapter.Builder builder19 = builder15.setServer("hi!");
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        builder19.requestInterceptor = requestInterceptor22;
        retrofit.RestAdapter restAdapter24 = builder19.build();
        retrofit.converter.Converter converter25 = restAdapter24.converter;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        log26.log("");
        restAdapter24.log = log26;
        retrofit.RestAdapter.Builder builder30 = builder7.setLog(log26);
        retrofit.RestAdapter.Builder builder31 = builder5.setLog(log26);
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter33 = null;
        builder32.converter = converter33;
        retrofit.client.Client.Provider provider35 = null;
        builder32.clientProvider = provider35;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        builder32.requestInterceptor = requestInterceptor37;
        retrofit.Profiler profiler39 = builder32.profiler;
        java.util.concurrent.Executor executor40 = builder32.callbackExecutor;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.httpExecutor = executor42;
        retrofit.client.Client.Provider provider44 = null;
        builder41.clientProvider = provider44;
        retrofit.client.Client.Provider provider46 = builder41.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder48 = builder41.setLogLevel(logLevel47);
        retrofit.client.Client.Provider provider49 = builder41.clientProvider;
        retrofit.Profiler profiler50 = builder41.profiler;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor52 = restAdapter51.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        restAdapter51.requestInterceptor = requestInterceptor53;
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel64);
        restAdapter51.log = log63;
        retrofit.ErrorHandler errorHandler67 = null;
        restAdapter51.errorHandler = errorHandler67;
        java.util.concurrent.Executor executor69 = null;
        restAdapter51.callbackExecutor = executor69;
        retrofit.RestAdapter.Log log71 = restAdapter51.log;
        retrofit.RestAdapter.Builder builder72 = builder41.setLog(log71);
        builder32.log = log71;
        retrofit.RestAdapter.Builder builder74 = builder5.setLog(log71);
        retrofit.RestAdapter.Builder builder76 = builder5.setServer("hi!");
        java.util.concurrent.Executor executor77 = builder5.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel78 = builder5.logLevel;
        retrofit.Profiler profiler79 = null;
        builder5.profiler = profiler79;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(converter25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(profiler39);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(provider46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(provider49);
        org.junit.Assert.assertNull(profiler50);
        org.junit.Assert.assertNull(requestInterceptor52);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(executor77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test11882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11882");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.Server server8 = restAdapter7.server;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        restAdapter7.logLevel = logLevel9;
        retrofit.client.Client.Provider provider11 = restAdapter7.clientProvider;
        retrofit.RequestInterceptor requestInterceptor12 = restAdapter7.requestInterceptor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNotNull(provider11);
        org.junit.Assert.assertNotNull(requestInterceptor12);
    }

    @Test
    public void test11883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11883");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.client.Client.Provider provider10 = null;
        builder7.clientProvider = provider10;
        retrofit.client.Client.Provider provider12 = builder7.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.httpExecutor = executor16;
        retrofit.RestAdapter.Builder builder19 = builder15.setServer("hi!");
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        builder19.requestInterceptor = requestInterceptor22;
        retrofit.RestAdapter restAdapter24 = builder19.build();
        retrofit.converter.Converter converter25 = restAdapter24.converter;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        log26.log("");
        restAdapter24.log = log26;
        retrofit.RestAdapter.Builder builder30 = builder7.setLog(log26);
        retrofit.RestAdapter.Builder builder31 = builder5.setLog(log26);
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter33 = builder32.converter;
        retrofit.RestAdapter.LogLevel logLevel34 = builder32.logLevel;
        builder32.ensureSaneDefaults();
        retrofit.client.Client.Provider provider36 = null;
        builder32.clientProvider = provider36;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder46.setLog(log51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter53.logLevel = logLevel55;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        restAdapter53.requestInterceptor = requestInterceptor57;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter53.logLevel = logLevel59;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log51, logLevel59);
        builder32.logLevel = logLevel59;
        retrofit.RestAdapter.LogLevel logLevel63 = builder32.logLevel;
        retrofit.RestAdapter.Builder builder64 = builder5.setLogLevel(logLevel63);
        boolean boolean65 = logLevel63.log();
        boolean boolean66 = logLevel63.log();
        boolean boolean67 = logLevel63.log();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(converter25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(converter33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test11884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11884");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        restAdapter0.log = log12;
        retrofit.ErrorHandler errorHandler16 = null;
        restAdapter0.errorHandler = errorHandler16;
        retrofit.Server server18 = restAdapter0.server;
        retrofit.RestAdapter.Log log19 = restAdapter0.log;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNotNull(log19);
    }

    @Test
    public void test11885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11885");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = null;
        builder5.httpExecutor = executor6;
        retrofit.RestAdapter.Builder builder9 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter10 = builder9.build();
        retrofit.client.Header[] headerArray13 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList14 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList14, headerArray13);
        retrofit.mime.TypedOutput typedOutput16 = null;
        retrofit.client.Request request17 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList14, typedOutput16);
        java.lang.String str18 = request17.getMethod();
        java.lang.String str19 = request17.getMethod();
        retrofit.client.Request request20 = restAdapter10.logAndReplaceRequest(request17);
        retrofit.converter.Converter converter21 = restAdapter10.converter;
        restAdapter0.converter = converter21;
        retrofit.Profiler profiler23 = null;
        restAdapter0.profiler = profiler23;
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNotNull(headerArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(converter21);
        org.junit.Assert.assertNull(logLevel25);
    }

    @Test
    public void test11886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11886");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.httpExecutor = executor9;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor13 = null;
        builder8.httpExecutor = executor13;
        retrofit.RestAdapter restAdapter15 = builder8.build();
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter17 = builder16.converter;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter18.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        restAdapter18.requestInterceptor = requestInterceptor20;
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        restAdapter18.log = log30;
        retrofit.ErrorHandler errorHandler34 = null;
        restAdapter18.errorHandler = errorHandler34;
        retrofit.RestAdapter.Log log36 = restAdapter18.log;
        retrofit.RestAdapter.Builder builder37 = builder16.setLog(log36);
        retrofit.Profiler profiler38 = builder37.profiler;
        retrofit.Profiler profiler39 = builder37.profiler;
        java.util.concurrent.Executor executor40 = builder37.callbackExecutor;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.httpExecutor = executor42;
        retrofit.RestAdapter.Builder builder45 = builder41.setServer("hi!");
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder41.setLog(log46);
        retrofit.RestAdapter restAdapter48 = builder41.build();
        java.util.concurrent.Executor executor49 = restAdapter48.httpExecutor;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = null;
        builder50.httpExecutor = executor51;
        retrofit.client.Client.Provider provider53 = null;
        builder50.clientProvider = provider53;
        retrofit.RestAdapter.Builder builder56 = builder50.setServer("hi!");
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor58 = null;
        builder57.httpExecutor = executor58;
        retrofit.RestAdapter.Builder builder61 = builder57.setServer("hi!");
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder63 = builder57.setLog(log62);
        retrofit.RestAdapter restAdapter64 = builder57.build();
        java.util.concurrent.Executor executor65 = restAdapter64.httpExecutor;
        builder56.callbackExecutor = executor65;
        retrofit.RestAdapter.Builder builder67 = builder37.setExecutors(executor49, executor65);
        restAdapter15.httpExecutor = executor49;
        retrofit.client.Client.Provider provider69 = null;
        restAdapter15.clientProvider = provider69;
        retrofit.Profiler profiler71 = null;
        restAdapter15.profiler = profiler71;
        retrofit.Server server73 = restAdapter15.server;
        retrofit.RestAdapter.Builder builder74 = builder0.setServer(server73);
        retrofit.RestAdapter.LogLevel logLevel75 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler76 = builder0.errorHandler;
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(restAdapter15);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(profiler38);
        org.junit.Assert.assertNull(profiler39);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertNotNull(executor49);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(restAdapter64);
        org.junit.Assert.assertNotNull(executor65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(server73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler76);
    }

    @Test
    public void test11887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11887");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder21.requestInterceptor;
        retrofit.Server server23 = null;
        builder21.server = server23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = builder25.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor27 = builder25.requestInterceptor;
        retrofit.ErrorHandler errorHandler28 = null;
        builder25.errorHandler = errorHandler28;
        retrofit.converter.Converter converter30 = null;
        builder25.converter = converter30;
        retrofit.ErrorHandler errorHandler32 = null;
        builder25.errorHandler = errorHandler32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor35 = restAdapter34.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        restAdapter34.requestInterceptor = requestInterceptor36;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel47);
        restAdapter34.log = log46;
        retrofit.ErrorHandler errorHandler50 = null;
        restAdapter34.errorHandler = errorHandler50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter53 = builder52.converter;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor55 = restAdapter54.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        restAdapter54.requestInterceptor = requestInterceptor56;
        retrofit.Server server58 = null;
        retrofit.client.Client.Provider provider59 = null;
        java.util.concurrent.Executor executor60 = null;
        java.util.concurrent.Executor executor61 = null;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        retrofit.converter.Converter converter63 = null;
        retrofit.Profiler profiler64 = null;
        retrofit.ErrorHandler errorHandler65 = null;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server58, provider59, executor60, executor61, requestInterceptor62, converter63, profiler64, errorHandler65, log66, logLevel67);
        restAdapter54.log = log66;
        retrofit.ErrorHandler errorHandler70 = null;
        restAdapter54.errorHandler = errorHandler70;
        retrofit.RestAdapter.Log log72 = restAdapter54.log;
        retrofit.RestAdapter.Builder builder73 = builder52.setLog(log72);
        retrofit.RequestInterceptor requestInterceptor74 = builder52.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor75 = builder52.requestInterceptor;
        retrofit.RestAdapter.Builder builder77 = builder52.setServer("hi!");
        retrofit.Server server78 = builder52.server;
        restAdapter34.server = server78;
        retrofit.RestAdapter.Builder builder80 = builder25.setServer(server78);
        retrofit.RestAdapter.Builder builder81 = builder21.setServer(server78);
        retrofit.RestAdapter.Builder builder83 = builder81.setServer("hi!");
        retrofit.converter.Converter converter84 = builder83.converter;
        retrofit.RestAdapter.Builder builder86 = builder83.setServer("Retrofit-Idle");
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter53);
        org.junit.Assert.assertNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(requestInterceptor74);
        org.junit.Assert.assertNull(requestInterceptor75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(server78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNull(converter84);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test11888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11888");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.RestAdapter.Log log9 = builder0.log;
        java.util.concurrent.Executor executor10 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = null;
        builder11.converter = converter12;
        retrofit.client.Client.Provider provider14 = null;
        builder11.clientProvider = provider14;
        java.util.concurrent.Executor executor16 = builder11.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        builder11.requestInterceptor = requestInterceptor17;
        retrofit.converter.Converter converter19 = null;
        builder11.converter = converter19;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter22 = null;
        restAdapter21.converter = converter22;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        restAdapter21.requestInterceptor = requestInterceptor24;
        retrofit.Profiler profiler26 = restAdapter21.profiler;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean28 = logLevel27.log();
        restAdapter21.logLevel = logLevel27;
        java.util.concurrent.Executor executor30 = restAdapter21.httpExecutor;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = builder31.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor33 = builder31.requestInterceptor;
        retrofit.ErrorHandler errorHandler34 = null;
        builder31.errorHandler = errorHandler34;
        retrofit.converter.Converter converter36 = null;
        builder31.converter = converter36;
        retrofit.ErrorHandler errorHandler38 = null;
        builder31.errorHandler = errorHandler38;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor41 = restAdapter40.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        restAdapter40.requestInterceptor = requestInterceptor42;
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel53);
        restAdapter40.log = log52;
        retrofit.ErrorHandler errorHandler56 = null;
        restAdapter40.errorHandler = errorHandler56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter59 = builder58.converter;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor61 = restAdapter60.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        restAdapter60.requestInterceptor = requestInterceptor62;
        retrofit.Server server64 = null;
        retrofit.client.Client.Provider provider65 = null;
        java.util.concurrent.Executor executor66 = null;
        java.util.concurrent.Executor executor67 = null;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        retrofit.converter.Converter converter69 = null;
        retrofit.Profiler profiler70 = null;
        retrofit.ErrorHandler errorHandler71 = null;
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter(server64, provider65, executor66, executor67, requestInterceptor68, converter69, profiler70, errorHandler71, log72, logLevel73);
        restAdapter60.log = log72;
        retrofit.ErrorHandler errorHandler76 = null;
        restAdapter60.errorHandler = errorHandler76;
        retrofit.RestAdapter.Log log78 = restAdapter60.log;
        retrofit.RestAdapter.Builder builder79 = builder58.setLog(log78);
        retrofit.RequestInterceptor requestInterceptor80 = builder58.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor81 = builder58.requestInterceptor;
        retrofit.RestAdapter.Builder builder83 = builder58.setServer("hi!");
        retrofit.Server server84 = builder58.server;
        restAdapter40.server = server84;
        retrofit.RestAdapter.Builder builder86 = builder31.setServer(server84);
        restAdapter21.server = server84;
        retrofit.RestAdapter.Builder builder88 = builder11.setServer(server84);
        retrofit.Server server89 = builder88.server;
        builder0.server = server89;
        retrofit.converter.Converter converter91 = null;
        builder0.converter = converter91;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(profiler26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter59);
        org.junit.Assert.assertNull(requestInterceptor61);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(requestInterceptor80);
        org.junit.Assert.assertNull(requestInterceptor81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(server84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(server89);
    }

    @Test
    public void test11889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11889");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder6.setLogLevel(logLevel9);
        retrofit.converter.Converter converter11 = builder6.converter;
        java.util.concurrent.Executor executor12 = builder6.callbackExecutor;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter13.logLevel = logLevel15;
        retrofit.RestAdapter.Builder builder17 = builder6.setLogLevel(logLevel15);
        java.util.concurrent.Executor executor18 = builder6.httpExecutor;
        retrofit.Profiler profiler19 = builder6.profiler;
        java.util.concurrent.Executor executor20 = builder6.callbackExecutor;
        retrofit.client.Client client21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder22 = builder6.setClient(client21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNull(executor20);
    }

    @Test
    public void test11890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11890");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel3 = builder0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel4 = builder0.logLevel;
        retrofit.Profiler profiler5 = null;
        builder0.profiler = profiler5;
        builder0.ensureSaneDefaults();
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor9 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = builder10.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor12 = builder10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor13 = builder10.requestInterceptor;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.Profiler profiler19 = null;
        builder18.profiler = profiler19;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        builder18.requestInterceptor = requestInterceptor21;
        retrofit.RestAdapter restAdapter23 = builder18.build();
        retrofit.client.Client.Provider provider24 = builder18.clientProvider;
        builder10.clientProvider = provider24;
        retrofit.Profiler profiler26 = null;
        builder10.profiler = profiler26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("hi!");
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder28.setLog(log33);
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel44);
        builder28.logLevel = logLevel44;
        retrofit.converter.Converter converter47 = builder28.converter;
        retrofit.ErrorHandler errorHandler48 = builder28.errorHandler;
        retrofit.Server server49 = builder28.server;
        builder10.server = server49;
        retrofit.RestAdapter.Builder builder51 = builder0.setServer(server49);
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter53 = builder52.converter;
        retrofit.Profiler profiler54 = null;
        builder52.profiler = profiler54;
        retrofit.RestAdapter.Log log56 = builder52.log;
        builder52.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor58 = null;
        builder52.requestInterceptor = requestInterceptor58;
        retrofit.ErrorHandler errorHandler60 = null;
        builder52.errorHandler = errorHandler60;
        retrofit.RestAdapter.Log log62 = builder52.log;
        retrofit.RestAdapter.Builder builder63 = builder0.setLog(log62);
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor9);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(restAdapter23);
        org.junit.Assert.assertNotNull(provider24);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter47);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNotNull(server49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(converter53);
        org.junit.Assert.assertNull(log56);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test11891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11891");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel7 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor10 = builder8.requestInterceptor;
        java.util.concurrent.Executor executor11 = builder8.httpExecutor;
        retrofit.RestAdapter.Builder builder13 = builder8.setServer("hi!");
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log15 = restAdapter14.log;
        retrofit.ErrorHandler errorHandler16 = restAdapter14.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter14.new RestHandler();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.httpExecutor = executor19;
        retrofit.RestAdapter.Builder builder22 = builder18.setServer("hi!");
        retrofit.Profiler profiler23 = null;
        builder22.profiler = profiler23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder25.setLog(log30);
        retrofit.RestAdapter restAdapter32 = builder25.build();
        retrofit.converter.Converter converter33 = null;
        builder25.converter = converter33;
        retrofit.ErrorHandler errorHandler35 = null;
        builder25.errorHandler = errorHandler35;
        retrofit.RequestInterceptor requestInterceptor37 = builder25.requestInterceptor;
        builder22.requestInterceptor = requestInterceptor37;
        restAdapter14.requestInterceptor = requestInterceptor37;
        retrofit.RequestInterceptor requestInterceptor40 = restAdapter14.requestInterceptor;
        builder13.requestInterceptor = requestInterceptor40;
        retrofit.Profiler profiler42 = builder13.profiler;
        retrofit.RequestInterceptor requestInterceptor43 = builder13.requestInterceptor;
        retrofit.RestAdapter.Builder builder44 = builder0.setRequestInterceptor(requestInterceptor43);
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(errorHandler6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNotNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(requestInterceptor40);
        org.junit.Assert.assertNull(profiler42);
        org.junit.Assert.assertNotNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test11892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11892");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder1 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter2 = builder1.converter;
        retrofit.RestAdapter.LogLevel logLevel3 = builder1.logLevel;
        builder1.ensureSaneDefaults();
        retrofit.client.Client.Provider provider5 = null;
        builder1.clientProvider = provider5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.httpExecutor = executor16;
        retrofit.RestAdapter.Builder builder19 = builder15.setServer("hi!");
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder15.setLog(log20);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter22.logLevel = logLevel24;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        restAdapter22.requestInterceptor = requestInterceptor26;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter22.logLevel = logLevel28;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log20, logLevel28);
        builder1.logLevel = logLevel28;
        retrofit.client.Client.Provider provider32 = null;
        builder1.clientProvider = provider32;
        retrofit.converter.Converter converter34 = builder1.converter;
        builder0.converter = converter34;
        retrofit.Server server36 = builder0.server;
        retrofit.Profiler profiler37 = builder0.profiler;
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(converter34);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertNull(profiler37);
    }

    @Test
    public void test11893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11893");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        restAdapter0.server = server4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.httpExecutor = executor7;
        retrofit.RestAdapter.Builder builder10 = builder6.setServer("hi!");
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder6.setLog(log11);
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        builder6.logLevel = logLevel22;
        java.util.concurrent.Executor executor25 = builder6.httpExecutor;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.client.Client.Provider provider29 = null;
        builder26.clientProvider = provider29;
        retrofit.client.Client.Provider provider31 = builder26.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel32);
        builder6.logLevel = logLevel32;
        restAdapter0.logLevel = logLevel32;
        retrofit.RequestInterceptor requestInterceptor36 = restAdapter0.requestInterceptor;
        retrofit.Server server37 = restAdapter0.server;
        retrofit.RequestInterceptor requestInterceptor38 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor39 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(provider31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(requestInterceptor36);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNull(requestInterceptor39);
    }

    @Test
    public void test11894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11894");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        java.util.concurrent.Executor executor8 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder9.logLevel = logLevel14;
        retrofit.converter.Converter converter16 = null;
        builder9.converter = converter16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter19 = builder18.converter;
        retrofit.Profiler profiler20 = null;
        builder18.profiler = profiler20;
        retrofit.RestAdapter.Builder builder23 = builder18.setServer("Retrofit-Idle");
        retrofit.Profiler profiler24 = builder23.profiler;
        retrofit.Server server25 = builder23.server;
        retrofit.RestAdapter.Builder builder26 = builder9.setServer(server25);
        retrofit.RestAdapter.Builder builder27 = builder0.setServer(server25);
        java.util.concurrent.Executor executor28 = builder27.httpExecutor;
        retrofit.RestAdapter.Log log29 = builder27.log;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(profiler24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(log29);
    }

    @Test
    public void test11895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11895");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.RestAdapter.Log log26 = restAdapter8.log;
        retrofit.RestAdapter.Builder builder27 = builder6.setLog(log26);
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter29.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder28.setLogLevel(logLevel31);
        retrofit.Profiler profiler34 = builder33.profiler;
        retrofit.Server server35 = builder33.server;
        retrofit.Profiler profiler36 = null;
        builder33.profiler = profiler36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter39 = null;
        builder38.converter = converter39;
        retrofit.client.Client.Provider provider41 = null;
        builder38.clientProvider = provider41;
        retrofit.converter.Converter converter43 = null;
        builder38.converter = converter43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.httpExecutor = executor46;
        retrofit.client.Client.Provider provider48 = null;
        builder45.clientProvider = provider48;
        retrofit.RestAdapter.Builder builder51 = builder45.setServer("hi!");
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter52.logLevel = logLevel54;
        retrofit.Profiler profiler56 = restAdapter52.profiler;
        retrofit.RestAdapter.RestHandler restHandler57 = restAdapter52.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor58 = restAdapter52.requestInterceptor;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log60 = restAdapter59.log;
        java.util.concurrent.Executor executor61 = restAdapter59.callbackExecutor;
        retrofit.Profiler profiler62 = restAdapter59.profiler;
        retrofit.Profiler profiler63 = null;
        restAdapter59.profiler = profiler63;
        retrofit.Server server65 = null;
        retrofit.client.Client.Provider provider66 = null;
        java.util.concurrent.Executor executor67 = null;
        java.util.concurrent.Executor executor68 = null;
        retrofit.RequestInterceptor requestInterceptor69 = null;
        retrofit.converter.Converter converter70 = null;
        retrofit.Profiler profiler71 = null;
        retrofit.ErrorHandler errorHandler72 = null;
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server65, provider66, executor67, executor68, requestInterceptor69, converter70, profiler71, errorHandler72, log73, logLevel74);
        restAdapter59.log = log73;
        restAdapter52.log = log73;
        retrofit.RestAdapter.Builder builder78 = builder45.setLog(log73);
        retrofit.Server server79 = builder45.server;
        retrofit.RestAdapter.Builder builder80 = builder38.setServer(server79);
        builder33.server = server79;
        retrofit.Profiler profiler82 = builder33.profiler;
        retrofit.RestAdapter.LogLevel logLevel83 = builder33.logLevel;
        retrofit.ErrorHandler errorHandler84 = builder33.errorHandler;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(profiler34);
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler56);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNull(log60);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNull(profiler62);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(server79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(profiler82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(errorHandler84);
    }

    @Test
    public void test11896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11896");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = null;
        restAdapter4.httpExecutor = executor5;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        restAdapter4.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter.Log log9 = restAdapter4.log;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter11 = builder10.converter;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter12.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        restAdapter12.requestInterceptor = requestInterceptor14;
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel25);
        restAdapter12.log = log24;
        retrofit.ErrorHandler errorHandler28 = null;
        restAdapter12.errorHandler = errorHandler28;
        retrofit.RestAdapter.Log log30 = restAdapter12.log;
        retrofit.RestAdapter.Builder builder31 = builder10.setLog(log30);
        retrofit.Profiler profiler32 = builder31.profiler;
        retrofit.RestAdapter.LogLevel logLevel33 = builder31.logLevel;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor35 = restAdapter34.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        restAdapter34.requestInterceptor = requestInterceptor36;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel47);
        restAdapter34.log = log46;
        retrofit.ErrorHandler errorHandler50 = null;
        restAdapter34.errorHandler = errorHandler50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter53 = builder52.converter;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor55 = restAdapter54.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        restAdapter54.requestInterceptor = requestInterceptor56;
        retrofit.Server server58 = null;
        retrofit.client.Client.Provider provider59 = null;
        java.util.concurrent.Executor executor60 = null;
        java.util.concurrent.Executor executor61 = null;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        retrofit.converter.Converter converter63 = null;
        retrofit.Profiler profiler64 = null;
        retrofit.ErrorHandler errorHandler65 = null;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server58, provider59, executor60, executor61, requestInterceptor62, converter63, profiler64, errorHandler65, log66, logLevel67);
        restAdapter54.log = log66;
        retrofit.ErrorHandler errorHandler70 = null;
        restAdapter54.errorHandler = errorHandler70;
        retrofit.RestAdapter.Log log72 = restAdapter54.log;
        retrofit.RestAdapter.Builder builder73 = builder52.setLog(log72);
        retrofit.RequestInterceptor requestInterceptor74 = builder52.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor75 = builder52.requestInterceptor;
        retrofit.RestAdapter.Builder builder77 = builder52.setServer("hi!");
        retrofit.Server server78 = builder52.server;
        restAdapter34.server = server78;
        builder31.server = server78;
        restAdapter4.server = server78;
        builder0.server = server78;
        retrofit.RestAdapter.Builder builder84 = builder0.setServer("Retrofit-Idle");
        retrofit.RequestInterceptor requestInterceptor85 = builder0.requestInterceptor;
        retrofit.Profiler profiler86 = null;
        builder0.profiler = profiler86;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(profiler32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter53);
        org.junit.Assert.assertNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(requestInterceptor74);
        org.junit.Assert.assertNull(requestInterceptor75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(server78);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(requestInterceptor85);
    }

    @Test
    public void test11897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11897");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter7.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        restAdapter7.requestInterceptor = requestInterceptor9;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        restAdapter7.log = log19;
        retrofit.ErrorHandler errorHandler23 = null;
        restAdapter7.errorHandler = errorHandler23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter26 = builder25.converter;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor28 = restAdapter27.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        restAdapter27.requestInterceptor = requestInterceptor29;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        restAdapter27.log = log39;
        retrofit.ErrorHandler errorHandler43 = null;
        restAdapter27.errorHandler = errorHandler43;
        retrofit.RestAdapter.Log log45 = restAdapter27.log;
        retrofit.RestAdapter.Builder builder46 = builder25.setLog(log45);
        retrofit.RequestInterceptor requestInterceptor47 = builder25.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor48 = builder25.requestInterceptor;
        retrofit.RestAdapter.Builder builder50 = builder25.setServer("hi!");
        retrofit.Server server51 = builder25.server;
        restAdapter7.server = server51;
        builder6.server = server51;
        retrofit.Profiler profiler54 = null;
        builder6.profiler = profiler54;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter26);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(requestInterceptor47);
        org.junit.Assert.assertNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(server51);
    }

    @Test
    public void test11898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11898");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        retrofit.client.Client.Provider provider8 = restAdapter0.clientProvider;
        retrofit.converter.Converter converter9 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("hi!");
        retrofit.RestAdapter restAdapter15 = builder14.build();
        retrofit.client.Header[] headerArray18 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList19 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList19, headerArray18);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput21);
        java.lang.String str23 = request22.getMethod();
        java.lang.String str24 = request22.getMethod();
        retrofit.client.Request request25 = restAdapter15.logAndReplaceRequest(request22);
        retrofit.RestAdapter.Log log26 = restAdapter15.log;
        restAdapter0.log = log26;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(restAdapter15);
        org.junit.Assert.assertNotNull(headerArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(log26);
    }

    @Test
    public void test11899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11899");
        retrofit.client.Header[] headerArray16 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList17 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList17, headerArray16);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput19);
        java.lang.String str21 = request20.getUrl();
        java.util.List<retrofit.client.Header> headerList22 = request20.getHeaders();
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("hi!", "", headerList22, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList22, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "", headerList22, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList22, typedOutput29);
        java.lang.String str31 = request30.getMethod();
        retrofit.mime.TypedOutput typedOutput32 = request30.getBody();
        retrofit.mime.TypedOutput typedOutput33 = request30.getBody();
        java.lang.String str34 = request30.getUrl();
        java.util.List<retrofit.client.Header> headerList35 = request30.getHeaders();
        retrofit.mime.TypedOutput typedOutput36 = null;
        retrofit.client.Request request37 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList35, typedOutput36);
        retrofit.mime.TypedOutput typedOutput38 = null;
        retrofit.client.Request request39 = new retrofit.client.Request("Retrofit-Idle", "", headerList35, typedOutput38);
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList35, typedOutput40);
        org.junit.Assert.assertNotNull(headerArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(headerList22);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Retrofit-Idle" + "'", str31, "Retrofit-Idle");
        org.junit.Assert.assertNull(typedOutput32);
        org.junit.Assert.assertNull(typedOutput33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(headerList35);
    }

    @Test
    public void test11900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11900");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.getUrl();
        java.util.List<retrofit.client.Header> headerList12 = request10.getHeaders();
        java.lang.String str13 = request10.getMethod();
        retrofit.mime.TypedOutput typedOutput14 = request10.getBody();
        java.util.List<retrofit.client.Header> headerList15 = request10.getHeaders();
        java.lang.String str16 = request10.getUrl();
        java.lang.String str17 = request10.getUrl();
        java.util.List<retrofit.client.Header> headerList18 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("Retrofit-Idle", "", headerList18, typedOutput19);
        java.util.List<retrofit.client.Header> headerList21 = request20.getHeaders();
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", headerList21, typedOutput22);
        java.lang.String str24 = request23.getMethod();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(headerList21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Retrofit-Idle" + "'", str24, "Retrofit-Idle");
    }

    @Test
    public void test11901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11901");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        java.util.concurrent.Executor executor8 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor9 = builder0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor10 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor11 = builder0.httpExecutor;
        retrofit.client.Client.Provider provider12 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel13 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter15 = builder14.converter;
        retrofit.Profiler profiler16 = null;
        builder14.profiler = profiler16;
        retrofit.ErrorHandler errorHandler18 = null;
        builder14.errorHandler = errorHandler18;
        retrofit.RestAdapter.Builder builder21 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor23 = restAdapter22.requestInterceptor;
        java.util.concurrent.Executor executor24 = restAdapter22.callbackExecutor;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter25.logLevel = logLevel27;
        retrofit.Profiler profiler29 = restAdapter25.profiler;
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter25.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor31 = restAdapter25.requestInterceptor;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log33 = restAdapter32.log;
        java.util.concurrent.Executor executor34 = restAdapter32.callbackExecutor;
        retrofit.Profiler profiler35 = restAdapter32.profiler;
        retrofit.Profiler profiler36 = null;
        restAdapter32.profiler = profiler36;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel47);
        restAdapter32.log = log46;
        restAdapter25.log = log46;
        restAdapter22.log = log46;
        retrofit.RestAdapter.Builder builder52 = builder14.setLog(log46);
        java.util.concurrent.Executor executor53 = builder52.httpExecutor;
        retrofit.RestAdapter restAdapter54 = builder52.build();
        retrofit.RestAdapter.Log log55 = restAdapter54.log;
        java.util.concurrent.Executor executor56 = restAdapter54.httpExecutor;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter58 = builder57.converter;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor60 = restAdapter59.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        restAdapter59.requestInterceptor = requestInterceptor61;
        retrofit.Server server63 = null;
        retrofit.client.Client.Provider provider64 = null;
        java.util.concurrent.Executor executor65 = null;
        java.util.concurrent.Executor executor66 = null;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        retrofit.converter.Converter converter68 = null;
        retrofit.Profiler profiler69 = null;
        retrofit.ErrorHandler errorHandler70 = null;
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server63, provider64, executor65, executor66, requestInterceptor67, converter68, profiler69, errorHandler70, log71, logLevel72);
        restAdapter59.log = log71;
        retrofit.ErrorHandler errorHandler75 = null;
        restAdapter59.errorHandler = errorHandler75;
        retrofit.RestAdapter.Log log77 = restAdapter59.log;
        retrofit.RestAdapter.Builder builder78 = builder57.setLog(log77);
        builder57.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder81 = builder57.setServer("Retrofit-Idle");
        retrofit.RequestInterceptor requestInterceptor82 = builder57.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor83 = builder57.requestInterceptor;
        retrofit.RestAdapter.Log log84 = builder57.log;
        restAdapter54.log = log84;
        retrofit.RestAdapter.Builder builder86 = builder0.setLog(log84);
        retrofit.RequestInterceptor requestInterceptor87 = builder0.requestInterceptor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNull(log33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(profiler35);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertNotNull(restAdapter54);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(executor56);
        org.junit.Assert.assertNull(converter58);
        org.junit.Assert.assertNull(requestInterceptor60);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(requestInterceptor82);
        org.junit.Assert.assertNotNull(requestInterceptor83);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNull(requestInterceptor87);
    }

    @Test
    public void test11902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11902");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder0.logLevel = logLevel5;
        retrofit.RestAdapter.Log log7 = builder0.log;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.httpExecutor = executor9;
        retrofit.client.Client.Provider provider11 = null;
        builder8.clientProvider = provider11;
        retrofit.RestAdapter.Builder builder14 = builder8.setServer("hi!");
        retrofit.Profiler profiler15 = builder8.profiler;
        retrofit.RestAdapter restAdapter16 = builder8.build();
        retrofit.converter.Converter converter17 = restAdapter16.converter;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter19 = null;
        builder18.converter = converter19;
        retrofit.client.Client.Provider provider21 = null;
        builder18.clientProvider = provider21;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        builder18.requestInterceptor = requestInterceptor23;
        retrofit.Profiler profiler25 = builder18.profiler;
        retrofit.Profiler profiler26 = null;
        builder18.profiler = profiler26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = builder28.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor30 = builder28.requestInterceptor;
        java.util.concurrent.Executor executor31 = builder28.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel32 = builder28.logLevel;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.Profiler profiler38 = null;
        builder37.profiler = profiler38;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        builder37.requestInterceptor = requestInterceptor40;
        retrofit.RestAdapter restAdapter42 = builder37.build();
        retrofit.converter.Converter converter43 = null;
        builder37.converter = converter43;
        retrofit.client.Client.Provider provider45 = builder37.clientProvider;
        retrofit.RestAdapter.Builder builder46 = builder28.setClient(provider45);
        retrofit.RestAdapter.Builder builder47 = builder18.setClient(provider45);
        restAdapter16.clientProvider = provider45;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter51 = builder50.converter;
        retrofit.RestAdapter.LogLevel logLevel52 = builder50.logLevel;
        builder50.ensureSaneDefaults();
        retrofit.client.Client.Provider provider54 = null;
        builder50.clientProvider = provider54;
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor65 = null;
        builder64.httpExecutor = executor65;
        retrofit.RestAdapter.Builder builder68 = builder64.setServer("hi!");
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder70 = builder64.setLog(log69);
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter71.logLevel = logLevel73;
        retrofit.RequestInterceptor requestInterceptor75 = null;
        restAdapter71.requestInterceptor = requestInterceptor75;
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter71.logLevel = logLevel77;
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log69, logLevel77);
        builder50.logLevel = logLevel77;
        retrofit.client.Client.Provider provider81 = null;
        builder50.clientProvider = provider81;
        retrofit.converter.Converter converter83 = builder50.converter;
        builder49.converter = converter83;
        retrofit.RestAdapter.LogLevel logLevel85 = builder49.logLevel;
        boolean boolean86 = logLevel85.log();
        restAdapter16.logLevel = logLevel85;
        retrofit.RestAdapter.Builder builder88 = builder0.setLogLevel(logLevel85);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(converter17);
        org.junit.Assert.assertNull(profiler25);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(restAdapter42);
        org.junit.Assert.assertNotNull(provider45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(converter51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(logLevel72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(converter83);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test11903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11903");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.RestAdapter.Builder builder8 = builder4.setServer("hi!");
        retrofit.client.Client.Provider provider9 = builder8.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        builder8.logLevel = logLevel10;
        retrofit.RestAdapter restAdapter13 = builder8.build();
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter14.requestInterceptor;
        java.util.concurrent.Executor executor16 = restAdapter14.callbackExecutor;
        retrofit.converter.Converter converter17 = null;
        restAdapter14.converter = converter17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter20 = builder19.converter;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor22 = restAdapter21.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter21.requestInterceptor = requestInterceptor23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        restAdapter21.log = log33;
        retrofit.ErrorHandler errorHandler37 = null;
        restAdapter21.errorHandler = errorHandler37;
        retrofit.RestAdapter.Log log39 = restAdapter21.log;
        retrofit.RestAdapter.Builder builder40 = builder19.setLog(log39);
        restAdapter14.log = log39;
        retrofit.RestAdapter.Builder builder42 = builder8.setLog(log39);
        restAdapter0.log = log39;
        retrofit.converter.Converter converter44 = restAdapter0.converter;
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.Server server53 = null;
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server53, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log61, logLevel62);
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter64.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter64.logLevel = logLevel66;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter64.setLogLevel(logLevel68);
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log61, logLevel68);
        restAdapter0.logLevel = logLevel68;
        retrofit.converter.Converter converter72 = restAdapter0.converter;
        java.lang.Throwable throwable73 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable73, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(restAdapter13);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(converter44);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter72);
    }

    @Test
    public void test11904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11904");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        restAdapter0.server = server4;
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        java.util.concurrent.Executor executor12 = null;
        builder7.httpExecutor = executor12;
        retrofit.RestAdapter restAdapter14 = builder7.build();
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter16 = builder15.converter;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter17.requestInterceptor = requestInterceptor19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        restAdapter17.log = log29;
        retrofit.ErrorHandler errorHandler33 = null;
        restAdapter17.errorHandler = errorHandler33;
        retrofit.RestAdapter.Log log35 = restAdapter17.log;
        retrofit.RestAdapter.Builder builder36 = builder15.setLog(log35);
        retrofit.Profiler profiler37 = builder36.profiler;
        retrofit.Profiler profiler38 = builder36.profiler;
        java.util.concurrent.Executor executor39 = builder36.callbackExecutor;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.httpExecutor = executor41;
        retrofit.RestAdapter.Builder builder44 = builder40.setServer("hi!");
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder46 = builder40.setLog(log45);
        retrofit.RestAdapter restAdapter47 = builder40.build();
        java.util.concurrent.Executor executor48 = restAdapter47.httpExecutor;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.client.Client.Provider provider52 = null;
        builder49.clientProvider = provider52;
        retrofit.RestAdapter.Builder builder55 = builder49.setServer("hi!");
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = null;
        builder56.httpExecutor = executor57;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = builder56.setLog(log61);
        retrofit.RestAdapter restAdapter63 = builder56.build();
        java.util.concurrent.Executor executor64 = restAdapter63.httpExecutor;
        builder55.callbackExecutor = executor64;
        retrofit.RestAdapter.Builder builder66 = builder36.setExecutors(executor48, executor64);
        restAdapter14.httpExecutor = executor48;
        retrofit.Server server68 = null;
        retrofit.client.Client.Provider provider69 = null;
        java.util.concurrent.Executor executor70 = null;
        java.util.concurrent.Executor executor71 = null;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        retrofit.converter.Converter converter73 = null;
        retrofit.Profiler profiler74 = null;
        retrofit.ErrorHandler errorHandler75 = null;
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter(server68, provider69, executor70, executor71, requestInterceptor72, converter73, profiler74, errorHandler75, log76, logLevel77);
        restAdapter14.logLevel = logLevel77;
        retrofit.ErrorHandler errorHandler80 = restAdapter14.errorHandler;
        retrofit.RequestInterceptor requestInterceptor81 = restAdapter14.requestInterceptor;
        retrofit.converter.Converter converter82 = restAdapter14.converter;
        retrofit.RestAdapter.LogLevel logLevel83 = restAdapter14.getLogLevel();
        restAdapter0.logLevel = logLevel83;
        retrofit.Profiler profiler85 = restAdapter0.profiler;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(profiler37);
        org.junit.Assert.assertNull(profiler38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(restAdapter47);
        org.junit.Assert.assertNotNull(executor48);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(restAdapter63);
        org.junit.Assert.assertNotNull(executor64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(errorHandler80);
        org.junit.Assert.assertNotNull(requestInterceptor81);
        org.junit.Assert.assertNotNull(converter82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler85);
    }

    @Test
    public void test11905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11905");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter5.logLevel;
        retrofit.ErrorHandler errorHandler8 = restAdapter5.errorHandler;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.client.Client.Provider provider18 = builder17.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        builder17.logLevel = logLevel19;
        retrofit.RestAdapter restAdapter22 = builder17.build();
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor24 = restAdapter23.requestInterceptor;
        java.util.concurrent.Executor executor25 = restAdapter23.callbackExecutor;
        retrofit.converter.Converter converter26 = null;
        restAdapter23.converter = converter26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter29 = builder28.converter;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor31 = restAdapter30.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        restAdapter30.requestInterceptor = requestInterceptor32;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel43);
        restAdapter30.log = log42;
        retrofit.ErrorHandler errorHandler46 = null;
        restAdapter30.errorHandler = errorHandler46;
        retrofit.RestAdapter.Log log48 = restAdapter30.log;
        retrofit.RestAdapter.Builder builder49 = builder28.setLog(log48);
        restAdapter23.log = log48;
        retrofit.RestAdapter.Builder builder51 = builder17.setLog(log48);
        restAdapter9.log = log48;
        restAdapter5.log = log48;
        retrofit.RestAdapter.Builder builder54 = builder0.setLog(log48);
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log56 = restAdapter55.log;
        java.util.concurrent.Executor executor57 = restAdapter55.callbackExecutor;
        java.util.concurrent.Executor executor58 = restAdapter55.callbackExecutor;
        retrofit.Profiler profiler59 = restAdapter55.profiler;
        retrofit.RestAdapter.Log log60 = restAdapter55.log;
        retrofit.RestAdapter.RestHandler restHandler61 = restAdapter55.new RestHandler();
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.httpExecutor = executor63;
        retrofit.RestAdapter.Builder builder66 = builder62.setServer("hi!");
        retrofit.RestAdapter restAdapter67 = builder66.build();
        retrofit.client.Header[] headerArray70 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList71 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList71, headerArray70);
        retrofit.mime.TypedOutput typedOutput73 = null;
        retrofit.client.Request request74 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList71, typedOutput73);
        java.lang.String str75 = request74.getMethod();
        java.lang.String str76 = request74.getMethod();
        retrofit.client.Request request77 = restAdapter67.logAndReplaceRequest(request74);
        retrofit.RequestInterceptor requestInterceptor78 = restAdapter67.requestInterceptor;
        restAdapter55.requestInterceptor = requestInterceptor78;
        retrofit.RestAdapter.Builder builder80 = builder54.setRequestInterceptor(requestInterceptor78);
        retrofit.RestAdapter.Log log81 = builder80.log;
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(restAdapter22);
        org.junit.Assert.assertNull(requestInterceptor24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(converter29);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(log56);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNull(profiler59);
        org.junit.Assert.assertNull(log60);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(restAdapter67);
        org.junit.Assert.assertNotNull(headerArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(request77);
        org.junit.Assert.assertNotNull(requestInterceptor78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(log81);
    }

    @Test
    public void test11906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11906");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = null;
        restAdapter0.logLevel = logLevel4;
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler7 = null;
        restAdapter0.profiler = profiler7;
        retrofit.Server server9 = restAdapter0.server;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(server9);
    }

    @Test
    public void test11907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11907");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.Server server2 = restAdapter0.server;
        retrofit.client.Client.Provider provider3 = null;
        restAdapter0.clientProvider = provider3;
        retrofit.Server server5 = null;
        restAdapter0.server = server5;
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        java.util.concurrent.Executor executor8 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder15 = builder9.setLog(log14);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter17 = builder16.converter;
        retrofit.RestAdapter.LogLevel logLevel18 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder19 = builder15.setLogLevel(logLevel18);
        retrofit.converter.Converter converter20 = builder15.converter;
        java.util.concurrent.Executor executor21 = builder15.callbackExecutor;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.httpExecutor = executor23;
        retrofit.client.Client.Provider provider25 = null;
        builder22.clientProvider = provider25;
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("hi!");
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder28.setLog(log33);
        retrofit.RestAdapter restAdapter35 = builder28.build();
        retrofit.converter.Converter converter36 = null;
        builder28.converter = converter36;
        retrofit.ErrorHandler errorHandler38 = null;
        builder28.errorHandler = errorHandler38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter41 = builder40.converter;
        retrofit.RestAdapter.LogLevel logLevel42 = builder40.logLevel;
        builder40.ensureSaneDefaults();
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = null;
        builder52.httpExecutor = executor53;
        retrofit.RestAdapter.Builder builder56 = builder52.setServer("hi!");
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder52.setLog(log57);
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel60 = restAdapter59.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter59.logLevel = logLevel61;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        restAdapter59.requestInterceptor = requestInterceptor63;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter59.logLevel = logLevel65;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log57, logLevel65);
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor69 = null;
        builder68.httpExecutor = executor69;
        retrofit.RestAdapter.Builder builder72 = builder68.setServer("hi!");
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder74 = builder68.setLog(log73);
        restAdapter67.log = log73;
        builder40.log = log73;
        java.util.concurrent.Executor executor77 = null;
        builder40.httpExecutor = executor77;
        retrofit.converter.Converter converter79 = null;
        builder40.converter = converter79;
        retrofit.ErrorHandler errorHandler81 = builder40.errorHandler;
        retrofit.RestAdapter.Builder builder82 = builder28.setErrorHandler(errorHandler81);
        builder22.errorHandler = errorHandler81;
        builder15.errorHandler = errorHandler81;
        retrofit.RestAdapter restAdapter85 = builder15.build();
        retrofit.converter.Converter converter86 = builder15.converter;
        restAdapter0.converter = converter86;
        retrofit.converter.Converter converter88 = restAdapter0.converter;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(restAdapter35);
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(logLevel60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(errorHandler81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(restAdapter85);
        org.junit.Assert.assertNotNull(converter86);
        org.junit.Assert.assertNotNull(converter88);
    }

    @Test
    public void test11908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11908");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder0.requestInterceptor = requestInterceptor20;
        builder0.ensureSaneDefaults();
        builder0.ensureSaneDefaults();
        retrofit.client.Client.Provider provider24 = builder0.clientProvider;
        java.util.concurrent.Executor executor25 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter27 = builder26.converter;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter28.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter28.requestInterceptor = requestInterceptor30;
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        restAdapter28.log = log40;
        retrofit.ErrorHandler errorHandler44 = null;
        restAdapter28.errorHandler = errorHandler44;
        retrofit.RestAdapter.Log log46 = restAdapter28.log;
        retrofit.RestAdapter.Builder builder47 = builder26.setLog(log46);
        retrofit.Profiler profiler48 = builder47.profiler;
        retrofit.client.Client.Provider provider49 = builder47.clientProvider;
        retrofit.RestAdapter.Builder builder51 = builder47.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter52 = builder51.build();
        retrofit.RestAdapter.Log log53 = builder51.log;
        retrofit.client.Client.Provider provider54 = builder51.clientProvider;
        builder0.clientProvider = provider54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = null;
        builder56.httpExecutor = executor57;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder56.logLevel = logLevel61;
        retrofit.converter.Converter converter63 = null;
        builder56.converter = converter63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter66 = builder65.converter;
        retrofit.Profiler profiler67 = null;
        builder65.profiler = profiler67;
        retrofit.RestAdapter.Builder builder70 = builder65.setServer("Retrofit-Idle");
        retrofit.Profiler profiler71 = builder70.profiler;
        retrofit.Server server72 = builder70.server;
        retrofit.RestAdapter.Builder builder73 = builder56.setServer(server72);
        builder0.server = server72;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNotNull(provider24);
        org.junit.Assert.assertNotNull(executor25);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(profiler48);
        org.junit.Assert.assertNull(provider49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(provider54);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter66);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(profiler71);
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test11909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11909");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.RestAdapter.Log log26 = restAdapter8.log;
        retrofit.RestAdapter.Builder builder27 = builder6.setLog(log26);
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = builder29.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor31 = builder29.requestInterceptor;
        retrofit.ErrorHandler errorHandler32 = null;
        builder29.errorHandler = errorHandler32;
        retrofit.converter.Converter converter34 = null;
        builder29.converter = converter34;
        retrofit.ErrorHandler errorHandler36 = null;
        builder29.errorHandler = errorHandler36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.httpExecutor = executor39;
        retrofit.RestAdapter.Builder builder42 = builder38.setServer("hi!");
        retrofit.Profiler profiler43 = null;
        builder42.profiler = profiler43;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        builder42.requestInterceptor = requestInterceptor45;
        retrofit.RestAdapter restAdapter47 = builder42.build();
        retrofit.converter.Converter converter48 = restAdapter47.converter;
        retrofit.RestAdapter.Builder builder49 = builder29.setConverter(converter48);
        builder28.converter = converter48;
        retrofit.Server server51 = builder28.server;
        retrofit.Server server52 = builder28.server;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter53 = builder28.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(restAdapter47);
        org.junit.Assert.assertNotNull(converter48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(server51);
        org.junit.Assert.assertNull(server52);
    }

    @Test
    public void test11910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11910");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.Server server5 = null;
        builder0.server = server5;
        retrofit.RequestInterceptor requestInterceptor7 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("Retrofit-Idle");
        org.junit.Assert.assertNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test11911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11911");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = null;
        builder8.converter = converter9;
        retrofit.client.Client.Provider provider11 = null;
        builder8.clientProvider = provider11;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        builder8.requestInterceptor = requestInterceptor13;
        retrofit.Profiler profiler15 = builder8.profiler;
        retrofit.Profiler profiler16 = null;
        builder8.profiler = profiler16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = builder18.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor20 = builder18.requestInterceptor;
        java.util.concurrent.Executor executor21 = builder18.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel22 = builder18.logLevel;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        retrofit.Profiler profiler28 = null;
        builder27.profiler = profiler28;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        builder27.requestInterceptor = requestInterceptor30;
        retrofit.RestAdapter restAdapter32 = builder27.build();
        retrofit.converter.Converter converter33 = null;
        builder27.converter = converter33;
        retrofit.client.Client.Provider provider35 = builder27.clientProvider;
        retrofit.RestAdapter.Builder builder36 = builder18.setClient(provider35);
        retrofit.RestAdapter.Builder builder37 = builder8.setClient(provider35);
        retrofit.client.Client.Provider provider38 = builder37.clientProvider;
        builder0.clientProvider = provider38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter41 = null;
        builder40.converter = converter41;
        retrofit.client.Client.Provider provider43 = null;
        builder40.clientProvider = provider43;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        builder40.requestInterceptor = requestInterceptor45;
        retrofit.Profiler profiler47 = builder40.profiler;
        retrofit.Profiler profiler48 = null;
        builder40.profiler = profiler48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = builder50.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor52 = builder50.requestInterceptor;
        java.util.concurrent.Executor executor53 = builder50.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel54 = builder50.logLevel;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.httpExecutor = executor56;
        retrofit.RestAdapter.Builder builder59 = builder55.setServer("hi!");
        retrofit.Profiler profiler60 = null;
        builder59.profiler = profiler60;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        builder59.requestInterceptor = requestInterceptor62;
        retrofit.RestAdapter restAdapter64 = builder59.build();
        retrofit.converter.Converter converter65 = null;
        builder59.converter = converter65;
        retrofit.client.Client.Provider provider67 = builder59.clientProvider;
        retrofit.RestAdapter.Builder builder68 = builder50.setClient(provider67);
        retrofit.RestAdapter.Builder builder69 = builder40.setClient(provider67);
        retrofit.RestAdapter.Builder builder70 = builder0.setClient(provider67);
        retrofit.Server server71 = builder70.server;
        java.util.concurrent.Executor executor72 = builder70.callbackExecutor;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNotNull(provider35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(provider38);
        org.junit.Assert.assertNull(profiler47);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(requestInterceptor52);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(restAdapter64);
        org.junit.Assert.assertNotNull(provider67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(server71);
        org.junit.Assert.assertNull(executor72);
    }

    @Test
    public void test11912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11912");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder4.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter restAdapter9 = builder4.build();
        retrofit.converter.Converter converter10 = null;
        builder4.converter = converter10;
        retrofit.Profiler profiler12 = null;
        builder4.profiler = profiler12;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer("Retrofit-Idle");
        retrofit.Profiler profiler16 = null;
        builder4.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = builder4.logLevel;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test11913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11913");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter5 = builder4.build();
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor7 = restAdapter6.requestInterceptor;
        retrofit.converter.Converter converter8 = restAdapter6.converter;
        java.util.concurrent.Executor executor9 = restAdapter6.httpExecutor;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("hi!");
        retrofit.client.Client.Provider provider15 = builder14.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean17 = logLevel16.log();
        builder14.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter19 = builder14.build();
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor21 = restAdapter20.requestInterceptor;
        java.util.concurrent.Executor executor22 = restAdapter20.callbackExecutor;
        retrofit.converter.Converter converter23 = null;
        restAdapter20.converter = converter23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter26 = builder25.converter;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor28 = restAdapter27.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        restAdapter27.requestInterceptor = requestInterceptor29;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        restAdapter27.log = log39;
        retrofit.ErrorHandler errorHandler43 = null;
        restAdapter27.errorHandler = errorHandler43;
        retrofit.RestAdapter.Log log45 = restAdapter27.log;
        retrofit.RestAdapter.Builder builder46 = builder25.setLog(log45);
        restAdapter20.log = log45;
        retrofit.RestAdapter.Builder builder48 = builder14.setLog(log45);
        restAdapter6.log = log45;
        restAdapter5.log = log45;
        java.util.concurrent.Executor executor51 = restAdapter5.callbackExecutor;
        retrofit.ErrorHandler errorHandler52 = restAdapter5.errorHandler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNull(requestInterceptor7);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(restAdapter19);
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(converter26);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(executor51);
        org.junit.Assert.assertNotNull(errorHandler52);
    }

    @Test
    public void test11914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11914");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        java.util.concurrent.Executor executor5 = builder0.httpExecutor;
        retrofit.Profiler profiler6 = builder0.profiler;
        retrofit.ErrorHandler errorHandler7 = null;
        builder0.errorHandler = errorHandler7;
        retrofit.converter.Converter converter9 = null;
        builder0.converter = converter9;
        retrofit.RestAdapter.LogLevel logLevel11 = builder0.logLevel;
        boolean boolean12 = logLevel11.log();
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test11915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11915");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.client.Client.Provider provider23 = builder21.clientProvider;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter26 = builder25.build();
        retrofit.RestAdapter.Log log27 = builder25.log;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter28.logLevel = logLevel30;
        retrofit.Profiler profiler32 = restAdapter28.profiler;
        retrofit.ErrorHandler errorHandler33 = null;
        restAdapter28.errorHandler = errorHandler33;
        java.util.concurrent.Executor executor35 = restAdapter28.httpExecutor;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder40 = builder36.setServer("hi!");
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder36.setLog(log41);
        retrofit.ErrorHandler errorHandler43 = builder36.errorHandler;
        retrofit.client.Client.Provider provider44 = builder36.clientProvider;
        retrofit.Server server45 = null;
        builder36.server = server45;
        retrofit.converter.Converter converter47 = null;
        builder36.converter = converter47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = builder49.callbackExecutor;
        retrofit.RestAdapter.Log log51 = builder49.log;
        retrofit.Server server52 = null;
        retrofit.client.Client.Provider provider53 = null;
        java.util.concurrent.Executor executor54 = null;
        java.util.concurrent.Executor executor55 = null;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        retrofit.converter.Converter converter57 = null;
        retrofit.Profiler profiler58 = null;
        retrofit.ErrorHandler errorHandler59 = null;
        retrofit.Server server60 = null;
        retrofit.client.Client.Provider provider61 = null;
        java.util.concurrent.Executor executor62 = null;
        java.util.concurrent.Executor executor63 = null;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        retrofit.converter.Converter converter65 = null;
        retrofit.Profiler profiler66 = null;
        retrofit.ErrorHandler errorHandler67 = null;
        retrofit.RestAdapter.Log log68 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server60, provider61, executor62, executor63, requestInterceptor64, converter65, profiler66, errorHandler67, log68, logLevel69);
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter71.logLevel = logLevel73;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter71.setLogLevel(logLevel75);
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server52, provider53, executor54, executor55, requestInterceptor56, converter57, profiler58, errorHandler59, log68, logLevel75);
        retrofit.RestAdapter.Builder builder78 = builder49.setLogLevel(logLevel75);
        retrofit.ErrorHandler errorHandler79 = null;
        builder78.errorHandler = errorHandler79;
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor82 = builder81.callbackExecutor;
        retrofit.Server server83 = null;
        retrofit.client.Client.Provider provider84 = null;
        java.util.concurrent.Executor executor85 = null;
        java.util.concurrent.Executor executor86 = null;
        retrofit.RequestInterceptor requestInterceptor87 = null;
        retrofit.converter.Converter converter88 = null;
        retrofit.Profiler profiler89 = null;
        retrofit.ErrorHandler errorHandler90 = null;
        retrofit.RestAdapter.Log log91 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel92 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter93 = new retrofit.RestAdapter(server83, provider84, executor85, executor86, requestInterceptor87, converter88, profiler89, errorHandler90, log91, logLevel92);
        retrofit.RestAdapter.Builder builder94 = builder81.setLogLevel(logLevel92);
        retrofit.RestAdapter.Builder builder95 = builder78.setLogLevel(logLevel92);
        retrofit.RestAdapter.Builder builder96 = builder36.setLogLevel(logLevel92);
        restAdapter28.setLogLevel(logLevel92);
        retrofit.RestAdapter.Builder builder98 = builder25.setLogLevel(logLevel92);
        boolean boolean99 = logLevel92.log();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler32);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(executor82);
        org.junit.Assert.assertNotNull(log91);
        org.junit.Assert.assertTrue("'" + logLevel92 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel92.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test11916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11916");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter0.requestInterceptor;
        java.lang.Throwable throwable4 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable4, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(requestInterceptor3);
    }

    @Test
    public void test11917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11917");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.Profiler profiler8 = null;
        builder0.profiler = profiler8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter11 = builder10.converter;
        retrofit.RestAdapter.LogLevel logLevel12 = builder10.logLevel;
        builder10.ensureSaneDefaults();
        retrofit.client.Client.Provider provider14 = null;
        builder10.clientProvider = provider14;
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder30 = builder24.setLog(log29);
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter31.logLevel = logLevel33;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        restAdapter31.requestInterceptor = requestInterceptor35;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter31.logLevel = logLevel37;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log29, logLevel37);
        builder10.logLevel = logLevel37;
        retrofit.RestAdapter.LogLevel logLevel41 = builder10.logLevel;
        java.util.concurrent.Executor executor42 = builder10.httpExecutor;
        builder0.callbackExecutor = executor42;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter44.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        restAdapter44.requestInterceptor = requestInterceptor46;
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter44.getLogLevel();
        retrofit.Server server49 = restAdapter44.server;
        java.util.concurrent.Executor executor50 = restAdapter44.callbackExecutor;
        retrofit.ErrorHandler errorHandler51 = null;
        restAdapter44.errorHandler = errorHandler51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter54 = builder53.converter;
        retrofit.RestAdapter.LogLevel logLevel55 = builder53.logLevel;
        builder53.ensureSaneDefaults();
        retrofit.client.Client.Provider provider57 = null;
        builder53.clientProvider = provider57;
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = null;
        builder67.httpExecutor = executor68;
        retrofit.RestAdapter.Builder builder71 = builder67.setServer("hi!");
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder73 = builder67.setLog(log72);
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel75 = restAdapter74.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter74.logLevel = logLevel76;
        retrofit.RequestInterceptor requestInterceptor78 = null;
        restAdapter74.requestInterceptor = requestInterceptor78;
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter74.logLevel = logLevel80;
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter(server59, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log72, logLevel80);
        builder53.logLevel = logLevel80;
        retrofit.client.Client.Provider provider84 = null;
        builder53.clientProvider = provider84;
        retrofit.converter.Converter converter86 = builder53.converter;
        restAdapter44.converter = converter86;
        builder0.converter = converter86;
        retrofit.Server server89 = builder0.server;
        retrofit.client.Client client90 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder91 = builder0.setClient(client90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor42);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertNull(server49);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertNull(converter54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(logLevel75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(converter86);
        org.junit.Assert.assertNull(server89);
    }

    @Test
    public void test11918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11918");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter21 = builder20.converter;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor23 = restAdapter22.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        restAdapter22.requestInterceptor = requestInterceptor24;
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log34, logLevel35);
        restAdapter22.log = log34;
        retrofit.ErrorHandler errorHandler38 = null;
        restAdapter22.errorHandler = errorHandler38;
        retrofit.RestAdapter.Log log40 = restAdapter22.log;
        retrofit.RestAdapter.Builder builder41 = builder20.setLog(log40);
        retrofit.RequestInterceptor requestInterceptor42 = builder20.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor43 = builder20.requestInterceptor;
        retrofit.RestAdapter.Builder builder45 = builder20.setServer("hi!");
        retrofit.Server server46 = builder20.server;
        restAdapter2.server = server46;
        builder0.server = server46;
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor50 = builder0.callbackExecutor;
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(requestInterceptor42);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(server46);
        org.junit.Assert.assertNotNull(executor50);
    }

    @Test
    public void test11919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11919");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.Log log6 = builder0.log;
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder15 = builder9.setLog(log14);
        retrofit.RequestInterceptor requestInterceptor16 = builder15.requestInterceptor;
        retrofit.RestAdapter restAdapter17 = builder15.build();
        retrofit.Server server18 = builder15.server;
        builder0.server = server18;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor21 = restAdapter20.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        restAdapter20.requestInterceptor = requestInterceptor22;
        java.util.concurrent.Executor executor24 = restAdapter20.httpExecutor;
        retrofit.Server server25 = null;
        restAdapter20.server = server25;
        retrofit.client.Client.Provider provider27 = restAdapter20.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter20.new RestHandler();
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = null;
        builder29.httpExecutor = executor30;
        retrofit.RestAdapter.Builder builder33 = builder29.setServer("hi!");
        java.util.concurrent.Executor executor34 = null;
        builder29.httpExecutor = executor34;
        retrofit.RestAdapter restAdapter36 = builder29.build();
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter38 = builder37.converter;
        retrofit.Profiler profiler39 = null;
        builder37.profiler = profiler39;
        retrofit.ErrorHandler errorHandler41 = null;
        builder37.errorHandler = errorHandler41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter44 = builder43.converter;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor46 = restAdapter45.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        restAdapter45.requestInterceptor = requestInterceptor47;
        retrofit.Server server49 = null;
        retrofit.client.Client.Provider provider50 = null;
        java.util.concurrent.Executor executor51 = null;
        java.util.concurrent.Executor executor52 = null;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        retrofit.converter.Converter converter54 = null;
        retrofit.Profiler profiler55 = null;
        retrofit.ErrorHandler errorHandler56 = null;
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server49, provider50, executor51, executor52, requestInterceptor53, converter54, profiler55, errorHandler56, log57, logLevel58);
        restAdapter45.log = log57;
        retrofit.ErrorHandler errorHandler61 = null;
        restAdapter45.errorHandler = errorHandler61;
        retrofit.RestAdapter.Log log63 = restAdapter45.log;
        retrofit.RestAdapter.Builder builder64 = builder43.setLog(log63);
        retrofit.RestAdapter.Builder builder65 = builder37.setLog(log63);
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = builder66.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor68 = builder66.requestInterceptor;
        retrofit.ErrorHandler errorHandler69 = null;
        builder66.errorHandler = errorHandler69;
        retrofit.converter.Converter converter71 = null;
        builder66.converter = converter71;
        retrofit.ErrorHandler errorHandler73 = null;
        builder66.errorHandler = errorHandler73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor76 = null;
        builder75.httpExecutor = executor76;
        retrofit.RestAdapter.Builder builder79 = builder75.setServer("hi!");
        retrofit.Profiler profiler80 = null;
        builder79.profiler = profiler80;
        retrofit.RequestInterceptor requestInterceptor82 = null;
        builder79.requestInterceptor = requestInterceptor82;
        retrofit.RestAdapter restAdapter84 = builder79.build();
        retrofit.converter.Converter converter85 = restAdapter84.converter;
        retrofit.RestAdapter.Builder builder86 = builder66.setConverter(converter85);
        builder65.converter = converter85;
        builder29.converter = converter85;
        retrofit.RestAdapter restAdapter89 = builder29.build();
        retrofit.Profiler profiler90 = restAdapter89.profiler;
        retrofit.RestAdapter.RestHandler restHandler91 = restAdapter89.new RestHandler();
        java.util.concurrent.Executor executor92 = restAdapter89.httpExecutor;
        restAdapter20.httpExecutor = executor92;
        builder0.callbackExecutor = executor92;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNull(log6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNotNull(restAdapter17);
        org.junit.Assert.assertNotNull(server18);
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNull(converter38);
        org.junit.Assert.assertNull(converter44);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(executor67);
        org.junit.Assert.assertNull(requestInterceptor68);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(restAdapter84);
        org.junit.Assert.assertNotNull(converter85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(restAdapter89);
        org.junit.Assert.assertNull(profiler90);
        org.junit.Assert.assertNotNull(executor92);
    }

    @Test
    public void test11920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11920");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.Server server5 = restAdapter0.server;
        java.util.concurrent.Executor executor6 = restAdapter0.callbackExecutor;
        retrofit.ErrorHandler errorHandler7 = null;
        restAdapter0.errorHandler = errorHandler7;
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor10 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor11 = restAdapter0.httpExecutor;
        retrofit.client.Response response13 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response15 = restAdapter0.logAndReplaceResponse("hi!", response13, (long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(executor11);
    }

    @Test
    public void test11921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11921");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.client.Client.Provider provider7 = null;
        builder4.clientProvider = provider7;
        retrofit.RestAdapter.Builder builder10 = builder4.setServer("hi!");
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder11.setLog(log16);
        retrofit.RestAdapter restAdapter18 = builder11.build();
        java.util.concurrent.Executor executor19 = restAdapter18.httpExecutor;
        builder10.callbackExecutor = executor19;
        builder0.callbackExecutor = executor19;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        java.util.concurrent.Executor executor28 = null;
        builder23.httpExecutor = executor28;
        retrofit.RestAdapter restAdapter30 = builder23.build();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.client.Client.Provider provider32 = restAdapter30.clientProvider;
        builder0.clientProvider = provider32;
        java.util.concurrent.Executor executor34 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.httpExecutor = executor36;
        retrofit.RestAdapter.Builder builder39 = builder35.setServer("hi!");
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder35.setLog(log40);
        retrofit.RestAdapter restAdapter42 = builder35.build();
        retrofit.converter.Converter converter43 = null;
        builder35.converter = converter43;
        retrofit.ErrorHandler errorHandler45 = null;
        builder35.errorHandler = errorHandler45;
        retrofit.RequestInterceptor requestInterceptor47 = builder35.requestInterceptor;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor49 = restAdapter48.requestInterceptor;
        retrofit.converter.Converter converter50 = restAdapter48.converter;
        java.util.concurrent.Executor executor51 = restAdapter48.httpExecutor;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = null;
        builder52.httpExecutor = executor53;
        retrofit.RestAdapter.Builder builder56 = builder52.setServer("hi!");
        retrofit.client.Client.Provider provider57 = builder56.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean59 = logLevel58.log();
        builder56.logLevel = logLevel58;
        retrofit.RestAdapter restAdapter61 = builder56.build();
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor63 = restAdapter62.requestInterceptor;
        java.util.concurrent.Executor executor64 = restAdapter62.callbackExecutor;
        retrofit.converter.Converter converter65 = null;
        restAdapter62.converter = converter65;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter68 = builder67.converter;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor70 = restAdapter69.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        restAdapter69.requestInterceptor = requestInterceptor71;
        retrofit.Server server73 = null;
        retrofit.client.Client.Provider provider74 = null;
        java.util.concurrent.Executor executor75 = null;
        java.util.concurrent.Executor executor76 = null;
        retrofit.RequestInterceptor requestInterceptor77 = null;
        retrofit.converter.Converter converter78 = null;
        retrofit.Profiler profiler79 = null;
        retrofit.ErrorHandler errorHandler80 = null;
        retrofit.RestAdapter.Log log81 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter(server73, provider74, executor75, executor76, requestInterceptor77, converter78, profiler79, errorHandler80, log81, logLevel82);
        restAdapter69.log = log81;
        retrofit.ErrorHandler errorHandler85 = null;
        restAdapter69.errorHandler = errorHandler85;
        retrofit.RestAdapter.Log log87 = restAdapter69.log;
        retrofit.RestAdapter.Builder builder88 = builder67.setLog(log87);
        restAdapter62.log = log87;
        retrofit.RestAdapter.Builder builder90 = builder56.setLog(log87);
        restAdapter48.log = log87;
        builder35.log = log87;
        builder0.log = log87;
        builder0.ensureSaneDefaults();
        retrofit.Profiler profiler95 = null;
        builder0.profiler = profiler95;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter97 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(provider32);
        org.junit.Assert.assertNotNull(executor34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(restAdapter42);
        org.junit.Assert.assertNotNull(requestInterceptor47);
        org.junit.Assert.assertNull(requestInterceptor49);
        org.junit.Assert.assertNull(converter50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(provider57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(restAdapter61);
        org.junit.Assert.assertNull(requestInterceptor63);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(converter68);
        org.junit.Assert.assertNull(requestInterceptor70);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test11922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11922");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.converter.Converter converter5 = null;
        restAdapter0.converter = converter5;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter8 = null;
        restAdapter7.converter = converter8;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter7.requestInterceptor = requestInterceptor10;
        retrofit.Profiler profiler12 = restAdapter7.profiler;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean14 = logLevel13.log();
        restAdapter7.logLevel = logLevel13;
        java.util.concurrent.Executor executor16 = restAdapter7.httpExecutor;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = builder17.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor19 = builder17.requestInterceptor;
        retrofit.ErrorHandler errorHandler20 = null;
        builder17.errorHandler = errorHandler20;
        retrofit.converter.Converter converter22 = null;
        builder17.converter = converter22;
        retrofit.ErrorHandler errorHandler24 = null;
        builder17.errorHandler = errorHandler24;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter26.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        restAdapter26.requestInterceptor = requestInterceptor28;
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel39);
        restAdapter26.log = log38;
        retrofit.ErrorHandler errorHandler42 = null;
        restAdapter26.errorHandler = errorHandler42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter45 = builder44.converter;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor47 = restAdapter46.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        restAdapter46.requestInterceptor = requestInterceptor48;
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel59);
        restAdapter46.log = log58;
        retrofit.ErrorHandler errorHandler62 = null;
        restAdapter46.errorHandler = errorHandler62;
        retrofit.RestAdapter.Log log64 = restAdapter46.log;
        retrofit.RestAdapter.Builder builder65 = builder44.setLog(log64);
        retrofit.RequestInterceptor requestInterceptor66 = builder44.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor67 = builder44.requestInterceptor;
        retrofit.RestAdapter.Builder builder69 = builder44.setServer("hi!");
        retrofit.Server server70 = builder44.server;
        restAdapter26.server = server70;
        retrofit.RestAdapter.Builder builder72 = builder17.setServer(server70);
        restAdapter7.server = server70;
        restAdapter0.server = server70;
        retrofit.RestAdapter.LogLevel logLevel75 = restAdapter0.logLevel;
        retrofit.client.Client.Provider provider76 = restAdapter0.clientProvider;
        retrofit.ErrorHandler errorHandler77 = restAdapter0.errorHandler;
        retrofit.client.Client.Provider provider78 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter45);
        org.junit.Assert.assertNull(requestInterceptor47);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(requestInterceptor66);
        org.junit.Assert.assertNull(requestInterceptor67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(server70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(logLevel75);
        org.junit.Assert.assertNull(provider76);
        org.junit.Assert.assertNull(errorHandler77);
        org.junit.Assert.assertNull(provider78);
    }

    @Test
    public void test11923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11923");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        restAdapter0.log = log12;
        retrofit.ErrorHandler errorHandler16 = null;
        restAdapter0.errorHandler = errorHandler16;
        retrofit.converter.Converter converter18 = null;
        restAdapter0.converter = converter18;
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler22 = null;
        restAdapter0.profiler = profiler22;
        retrofit.Profiler profiler24 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder25.setLog(log30);
        retrofit.RestAdapter restAdapter32 = builder25.build();
        java.util.concurrent.Executor executor33 = restAdapter32.httpExecutor;
        retrofit.Profiler profiler34 = null;
        restAdapter32.profiler = profiler34;
        java.util.concurrent.Executor executor36 = restAdapter32.callbackExecutor;
        retrofit.RestAdapter.Log log37 = restAdapter32.log;
        java.util.concurrent.Executor executor38 = restAdapter32.callbackExecutor;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.client.Client.Provider provider42 = null;
        builder39.clientProvider = provider42;
        retrofit.client.Client.Provider provider44 = builder39.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel45);
        retrofit.Profiler profiler47 = null;
        builder39.profiler = profiler47;
        retrofit.RestAdapter.Builder builder50 = builder39.setServer("Retrofit-Idle");
        java.util.concurrent.Executor executor51 = builder50.httpExecutor;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter53 = builder52.converter;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor55 = restAdapter54.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        restAdapter54.requestInterceptor = requestInterceptor56;
        retrofit.Server server58 = null;
        retrofit.client.Client.Provider provider59 = null;
        java.util.concurrent.Executor executor60 = null;
        java.util.concurrent.Executor executor61 = null;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        retrofit.converter.Converter converter63 = null;
        retrofit.Profiler profiler64 = null;
        retrofit.ErrorHandler errorHandler65 = null;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server58, provider59, executor60, executor61, requestInterceptor62, converter63, profiler64, errorHandler65, log66, logLevel67);
        restAdapter54.log = log66;
        retrofit.ErrorHandler errorHandler70 = null;
        restAdapter54.errorHandler = errorHandler70;
        retrofit.RestAdapter.Log log72 = restAdapter54.log;
        retrofit.RestAdapter.Builder builder73 = builder52.setLog(log72);
        builder52.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor76 = null;
        builder75.httpExecutor = executor76;
        retrofit.RestAdapter.Builder builder79 = builder75.setServer("hi!");
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder81 = builder75.setLog(log80);
        retrofit.RestAdapter restAdapter82 = builder75.build();
        java.util.concurrent.Executor executor83 = restAdapter82.httpExecutor;
        builder52.callbackExecutor = executor83;
        builder50.callbackExecutor = executor83;
        restAdapter32.callbackExecutor = executor83;
        restAdapter0.httpExecutor = executor83;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNull(profiler24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNotNull(executor33);
        org.junit.Assert.assertNotNull(executor36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(executor38);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(converter53);
        org.junit.Assert.assertNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(restAdapter82);
        org.junit.Assert.assertNotNull(executor83);
    }

    @Test
    public void test11924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11924");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor8 = restAdapter0.httpExecutor;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log10 = restAdapter9.log;
        java.util.concurrent.Executor executor11 = restAdapter9.callbackExecutor;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder12.logLevel = logLevel17;
        retrofit.converter.Converter converter19 = null;
        builder12.converter = converter19;
        retrofit.client.Client.Provider provider21 = null;
        builder12.clientProvider = provider21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter24 = builder23.converter;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor26 = restAdapter25.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        restAdapter25.requestInterceptor = requestInterceptor27;
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel38);
        restAdapter25.log = log37;
        retrofit.ErrorHandler errorHandler41 = null;
        restAdapter25.errorHandler = errorHandler41;
        retrofit.RestAdapter.Log log43 = restAdapter25.log;
        retrofit.RestAdapter.Builder builder44 = builder23.setLog(log43);
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder46.setLog(log51);
        retrofit.RestAdapter restAdapter53 = builder46.build();
        java.util.concurrent.Executor executor54 = restAdapter53.httpExecutor;
        builder23.callbackExecutor = executor54;
        builder12.httpExecutor = executor54;
        restAdapter9.callbackExecutor = executor54;
        restAdapter0.callbackExecutor = executor54;
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter61 = builder60.converter;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor63 = restAdapter62.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        restAdapter62.requestInterceptor = requestInterceptor64;
        retrofit.Server server66 = null;
        retrofit.client.Client.Provider provider67 = null;
        java.util.concurrent.Executor executor68 = null;
        java.util.concurrent.Executor executor69 = null;
        retrofit.RequestInterceptor requestInterceptor70 = null;
        retrofit.converter.Converter converter71 = null;
        retrofit.Profiler profiler72 = null;
        retrofit.ErrorHandler errorHandler73 = null;
        retrofit.RestAdapter.Log log74 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server66, provider67, executor68, executor69, requestInterceptor70, converter71, profiler72, errorHandler73, log74, logLevel75);
        restAdapter62.log = log74;
        retrofit.ErrorHandler errorHandler78 = null;
        restAdapter62.errorHandler = errorHandler78;
        retrofit.RestAdapter.Log log80 = restAdapter62.log;
        retrofit.RestAdapter.Builder builder81 = builder60.setLog(log80);
        retrofit.Profiler profiler82 = builder81.profiler;
        retrofit.client.Client.Provider provider83 = builder81.clientProvider;
        retrofit.RestAdapter.Builder builder85 = builder81.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter86 = builder85.build();
        retrofit.ErrorHandler errorHandler87 = restAdapter86.errorHandler;
        restAdapter0.errorHandler = errorHandler87;
        java.lang.Throwable throwable89 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable89, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(executor54);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertNull(converter61);
        org.junit.Assert.assertNull(requestInterceptor63);
        org.junit.Assert.assertNotNull(log74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(profiler82);
        org.junit.Assert.assertNull(provider83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertNotNull(errorHandler87);
    }

    @Test
    public void test11925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11925");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.Server server2 = restAdapter0.server;
        retrofit.client.Client.Provider provider3 = null;
        restAdapter0.clientProvider = provider3;
        java.util.concurrent.Executor executor5 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.httpExecutor = executor7;
        retrofit.RestAdapter.Builder builder10 = builder6.setServer("hi!");
        retrofit.Profiler profiler11 = null;
        builder10.profiler = profiler11;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        builder10.requestInterceptor = requestInterceptor13;
        retrofit.RestAdapter restAdapter15 = builder10.build();
        retrofit.converter.Converter converter16 = restAdapter15.converter;
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter15.requestInterceptor;
        restAdapter0.requestInterceptor = requestInterceptor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter20 = builder19.converter;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor22 = restAdapter21.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter21.requestInterceptor = requestInterceptor23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        restAdapter21.log = log33;
        retrofit.ErrorHandler errorHandler37 = null;
        restAdapter21.errorHandler = errorHandler37;
        retrofit.RestAdapter.Log log39 = restAdapter21.log;
        retrofit.RestAdapter.Builder builder40 = builder19.setLog(log39);
        retrofit.RequestInterceptor requestInterceptor41 = builder19.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor42 = builder19.requestInterceptor;
        retrofit.RestAdapter.Builder builder44 = builder19.setServer("hi!");
        java.util.concurrent.Executor executor45 = builder44.httpExecutor;
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor55 = restAdapter54.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        restAdapter54.requestInterceptor = requestInterceptor56;
        retrofit.Server server58 = null;
        retrofit.client.Client.Provider provider59 = null;
        java.util.concurrent.Executor executor60 = null;
        java.util.concurrent.Executor executor61 = null;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        retrofit.converter.Converter converter63 = null;
        retrofit.Profiler profiler64 = null;
        retrofit.ErrorHandler errorHandler65 = null;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server58, provider59, executor60, executor61, requestInterceptor62, converter63, profiler64, errorHandler65, log66, logLevel67);
        restAdapter54.log = log66;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean71 = logLevel70.log();
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log66, logLevel70);
        retrofit.RestAdapter.Builder builder73 = builder44.setLogLevel(logLevel70);
        retrofit.client.Client.Provider provider74 = builder44.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel75 = builder44.logLevel;
        restAdapter0.logLevel = logLevel75;
        retrofit.RestAdapter.RestHandler restHandler77 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor78 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(restAdapter15);
        org.junit.Assert.assertNotNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor17);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(requestInterceptor41);
        org.junit.Assert.assertNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(provider74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test11926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11926");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        java.util.concurrent.Executor executor10 = restAdapter8.callbackExecutor;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter11.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter11.logLevel = logLevel13;
        retrofit.Profiler profiler15 = restAdapter11.profiler;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter11.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter11.requestInterceptor;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log19 = restAdapter18.log;
        java.util.concurrent.Executor executor20 = restAdapter18.callbackExecutor;
        retrofit.Profiler profiler21 = restAdapter18.profiler;
        retrofit.Profiler profiler22 = null;
        restAdapter18.profiler = profiler22;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel33);
        restAdapter18.log = log32;
        restAdapter11.log = log32;
        restAdapter8.log = log32;
        retrofit.RestAdapter.Builder builder38 = builder0.setLog(log32);
        java.util.concurrent.Executor executor39 = builder38.httpExecutor;
        retrofit.RestAdapter restAdapter40 = builder38.build();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.logLevel;
        boolean boolean42 = logLevel41.log();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNotNull(restAdapter40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test11927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11927");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.converter.Converter converter4 = null;
        restAdapter0.converter = converter4;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor7 = restAdapter6.requestInterceptor;
        retrofit.converter.Converter converter8 = restAdapter6.converter;
        java.util.concurrent.Executor executor9 = null;
        restAdapter6.callbackExecutor = executor9;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = null;
        restAdapter11.httpExecutor = executor12;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        restAdapter11.requestInterceptor = requestInterceptor14;
        retrofit.RestAdapter.Log log16 = restAdapter11.log;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter11.logLevel = logLevel17;
        restAdapter6.logLevel = logLevel17;
        restAdapter0.logLevel = logLevel17;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter21.logLevel = logLevel23;
        restAdapter0.logLevel = logLevel23;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor37 = restAdapter36.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        restAdapter36.requestInterceptor = requestInterceptor38;
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel49);
        restAdapter36.log = log48;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean53 = logLevel52.log();
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log48, logLevel52);
        retrofit.RestAdapter.Builder builder55 = builder26.setLog(log48);
        retrofit.Server server56 = builder55.server;
        retrofit.ErrorHandler errorHandler57 = null;
        builder55.errorHandler = errorHandler57;
        retrofit.Profiler profiler59 = null;
        builder55.profiler = profiler59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.httpExecutor = executor62;
        retrofit.RestAdapter.Builder builder65 = builder61.setServer("hi!");
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder61.setLog(log66);
        retrofit.RestAdapter restAdapter68 = builder61.build();
        retrofit.converter.Converter converter69 = null;
        builder61.converter = converter69;
        retrofit.ErrorHandler errorHandler71 = null;
        builder61.errorHandler = errorHandler71;
        retrofit.RequestInterceptor requestInterceptor73 = builder61.requestInterceptor;
        retrofit.RestAdapter.Builder builder74 = builder55.setRequestInterceptor(requestInterceptor73);
        restAdapter0.requestInterceptor = requestInterceptor73;
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter0.logLevel;
        retrofit.client.Client.Provider provider77 = restAdapter0.clientProvider;
        retrofit.Profiler profiler78 = restAdapter0.profiler;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(requestInterceptor7);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(server56);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(restAdapter68);
        org.junit.Assert.assertNotNull(requestInterceptor73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(provider77);
        org.junit.Assert.assertNull(profiler78);
    }

    @Test
    public void test11928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11928");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.client.Client.Provider provider23 = builder21.clientProvider;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter26 = builder25.build();
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor28 = null;
        restAdapter27.httpExecutor = executor28;
        retrofit.client.Client.Provider provider30 = restAdapter27.clientProvider;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        restAdapter27.requestInterceptor = requestInterceptor31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel49);
        builder33.logLevel = logLevel49;
        retrofit.converter.Converter converter52 = builder33.converter;
        retrofit.ErrorHandler errorHandler53 = builder33.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel54 = builder33.logLevel;
        retrofit.Server server55 = builder33.server;
        restAdapter27.server = server55;
        retrofit.Profiler profiler57 = null;
        restAdapter27.profiler = profiler57;
        retrofit.Profiler profiler59 = null;
        restAdapter27.profiler = profiler59;
        retrofit.Server server61 = restAdapter27.server;
        restAdapter26.server = server61;
        java.util.concurrent.Executor executor63 = restAdapter26.callbackExecutor;
        java.util.concurrent.Executor executor64 = null;
        restAdapter26.httpExecutor = executor64;
        retrofit.converter.Converter converter66 = restAdapter26.converter;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter52);
        org.junit.Assert.assertNull(errorHandler53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server55);
        org.junit.Assert.assertNotNull(server61);
        org.junit.Assert.assertNotNull(executor63);
        org.junit.Assert.assertNotNull(converter66);
    }

    @Test
    public void test11929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11929");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.RequestInterceptor requestInterceptor8 = null;
        builder7.requestInterceptor = requestInterceptor8;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter10.logLevel;
        retrofit.converter.Converter converter13 = null;
        restAdapter10.converter = converter13;
        retrofit.ErrorHandler errorHandler15 = restAdapter10.errorHandler;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log17 = restAdapter16.log;
        retrofit.ErrorHandler errorHandler18 = restAdapter16.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.httpExecutor = executor21;
        retrofit.RestAdapter.Builder builder24 = builder20.setServer("hi!");
        retrofit.Profiler profiler25 = null;
        builder24.profiler = profiler25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.httpExecutor = executor28;
        retrofit.RestAdapter.Builder builder31 = builder27.setServer("hi!");
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder27.setLog(log32);
        retrofit.RestAdapter restAdapter34 = builder27.build();
        retrofit.converter.Converter converter35 = null;
        builder27.converter = converter35;
        retrofit.ErrorHandler errorHandler37 = null;
        builder27.errorHandler = errorHandler37;
        retrofit.RequestInterceptor requestInterceptor39 = builder27.requestInterceptor;
        builder24.requestInterceptor = requestInterceptor39;
        restAdapter16.requestInterceptor = requestInterceptor39;
        retrofit.RequestInterceptor requestInterceptor42 = restAdapter16.requestInterceptor;
        restAdapter10.requestInterceptor = requestInterceptor42;
        retrofit.RestAdapter.Builder builder44 = builder7.setRequestInterceptor(requestInterceptor42);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.httpExecutor = executor46;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("hi!");
        retrofit.Profiler profiler50 = null;
        builder49.profiler = profiler50;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        builder49.requestInterceptor = requestInterceptor52;
        java.util.concurrent.Executor executor54 = builder49.callbackExecutor;
        retrofit.Profiler profiler55 = null;
        builder49.profiler = profiler55;
        retrofit.Server server57 = builder49.server;
        retrofit.RestAdapter.Builder builder58 = builder7.setServer(server57);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(restAdapter34);
        org.junit.Assert.assertNotNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNotNull(server57);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test11930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11930");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.client.Client.Provider provider7 = null;
        builder4.clientProvider = provider7;
        retrofit.client.Client.Provider provider9 = builder4.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder11 = builder4.setLogLevel(logLevel10);
        retrofit.ErrorHandler errorHandler12 = null;
        builder11.errorHandler = errorHandler12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter15 = builder14.converter;
        retrofit.Profiler profiler16 = null;
        builder14.profiler = profiler16;
        retrofit.RestAdapter.Log log18 = builder14.log;
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter21 = builder20.converter;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor23 = restAdapter22.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        restAdapter22.requestInterceptor = requestInterceptor24;
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log34, logLevel35);
        restAdapter22.log = log34;
        retrofit.ErrorHandler errorHandler38 = null;
        restAdapter22.errorHandler = errorHandler38;
        retrofit.RestAdapter.Log log40 = restAdapter22.log;
        retrofit.RestAdapter.Builder builder41 = builder20.setLog(log40);
        retrofit.RequestInterceptor requestInterceptor42 = builder20.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor43 = builder20.requestInterceptor;
        retrofit.RestAdapter.Builder builder45 = builder20.setServer("hi!");
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor55 = null;
        builder54.httpExecutor = executor55;
        retrofit.RestAdapter.Builder builder58 = builder54.setServer("hi!");
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder60 = builder54.setLog(log59);
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter61.logLevel = logLevel63;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        restAdapter61.requestInterceptor = requestInterceptor65;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter61.logLevel = logLevel67;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log59, logLevel67);
        boolean boolean70 = logLevel67.log();
        retrofit.RestAdapter.Builder builder71 = builder45.setLogLevel(logLevel67);
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor73 = null;
        builder72.httpExecutor = executor73;
        retrofit.RestAdapter.Builder builder76 = builder72.setServer("hi!");
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder78 = builder72.setLog(log77);
        retrofit.RestAdapter restAdapter79 = builder72.build();
        java.util.concurrent.Executor executor80 = restAdapter79.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler81 = restAdapter79.new RestHandler();
        retrofit.converter.Converter converter82 = restAdapter79.converter;
        builder71.converter = converter82;
        retrofit.RestAdapter.Builder builder84 = builder14.setConverter(converter82);
        builder11.converter = converter82;
        retrofit.RestAdapter.Builder builder86 = builder0.setConverter(converter82);
        retrofit.Profiler profiler87 = null;
        builder0.profiler = profiler87;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter89 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(requestInterceptor42);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(restAdapter79);
        org.junit.Assert.assertNotNull(executor80);
        org.junit.Assert.assertNotNull(converter82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test11931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11931");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.Server server2 = restAdapter0.server;
        retrofit.Profiler profiler3 = null;
        restAdapter0.profiler = profiler3;
        retrofit.ErrorHandler errorHandler5 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler7 = restAdapter0.errorHandler;
        retrofit.Profiler profiler8 = restAdapter0.profiler;
        retrofit.client.Client.Provider provider9 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNull(provider9);
    }

    @Test
    public void test11932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11932");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor26 = builder25.httpExecutor;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor36 = restAdapter35.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        restAdapter35.requestInterceptor = requestInterceptor37;
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel48);
        restAdapter35.log = log47;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean52 = logLevel51.log();
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log47, logLevel51);
        retrofit.RestAdapter.Builder builder54 = builder25.setLogLevel(logLevel51);
        retrofit.RestAdapter.Log log55 = builder54.log;
        log55.log("Retrofit-Idle");
        log55.log("Retrofit-Idle");
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(log55);
    }

    @Test
    public void test11933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11933");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.httpExecutor = executor9;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder8.setLog(log13);
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter15.logLevel = logLevel17;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter15.requestInterceptor = requestInterceptor19;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter15.logLevel = logLevel21;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log13, logLevel21);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder30 = builder24.setLog(log29);
        restAdapter23.log = log29;
        retrofit.client.Client.Provider provider32 = restAdapter23.clientProvider;
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(provider32);
    }

    @Test
    public void test11934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11934");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder6.setLogLevel(logLevel9);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.RestAdapter.LogLevel logLevel13 = builder11.logLevel;
        builder11.ensureSaneDefaults();
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder23.setLog(log28);
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter30.logLevel = logLevel32;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter30.requestInterceptor = requestInterceptor34;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter30.logLevel = logLevel36;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log28, logLevel36);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder39.setLog(log44);
        restAdapter38.log = log44;
        builder11.log = log44;
        java.util.concurrent.Executor executor48 = null;
        builder11.httpExecutor = executor48;
        retrofit.converter.Converter converter50 = null;
        builder11.converter = converter50;
        retrofit.ErrorHandler errorHandler52 = builder11.errorHandler;
        retrofit.RestAdapter.Builder builder53 = builder6.setErrorHandler(errorHandler52);
        retrofit.ErrorHandler errorHandler54 = builder6.errorHandler;
        java.util.concurrent.Executor executor55 = builder6.httpExecutor;
        java.util.concurrent.Executor executor56 = builder6.callbackExecutor;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor58 = null;
        builder57.httpExecutor = executor58;
        retrofit.RestAdapter.Builder builder61 = builder57.setServer("hi!");
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder63 = builder57.setLog(log62);
        retrofit.RestAdapter restAdapter64 = builder57.build();
        retrofit.RequestInterceptor requestInterceptor65 = restAdapter64.requestInterceptor;
        retrofit.RestAdapter.Builder builder66 = builder6.setRequestInterceptor(requestInterceptor65);
        retrofit.Profiler profiler67 = null;
        builder6.profiler = profiler67;
        retrofit.RestAdapter.LogLevel logLevel69 = builder6.logLevel;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(errorHandler52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(errorHandler54);
        org.junit.Assert.assertNull(executor55);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(restAdapter64);
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test11935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11935");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.Profiler profiler19 = builder0.profiler;
        retrofit.Profiler profiler20 = null;
        builder0.profiler = profiler20;
        retrofit.RestAdapter.Log log22 = builder0.log;
        retrofit.ErrorHandler errorHandler23 = builder0.errorHandler;
        retrofit.RestAdapter.Log log24 = builder0.log;
        retrofit.Profiler profiler25 = null;
        builder0.profiler = profiler25;
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNotNull(log24);
    }

    @Test
    public void test11936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11936");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = builder0.build();
        java.util.concurrent.Executor executor8 = restAdapter7.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter7.new RestHandler();
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        java.lang.String str19 = request18.getUrl();
        java.util.List<retrofit.client.Header> headerList20 = request18.getHeaders();
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "", headerList20, typedOutput21);
        java.lang.String str23 = request22.getMethod();
        retrofit.mime.TypedOutput typedOutput24 = request22.getBody();
        java.util.List<retrofit.client.Header> headerList25 = request22.getHeaders();
        retrofit.client.Request request26 = restAdapter7.logAndReplaceRequest(request22);
        java.lang.String str27 = request26.getMethod();
        java.util.List<retrofit.client.Header> headerList28 = request26.getHeaders();
        java.util.List<retrofit.client.Header> headerList29 = request26.getHeaders();
        java.util.List<retrofit.client.Header> headerList30 = request26.getHeaders();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(executor8);
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(typedOutput24);
        org.junit.Assert.assertNotNull(headerList25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(headerList28);
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertNotNull(headerList30);
    }

    @Test
    public void test11937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11937");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor26 = builder25.httpExecutor;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log28 = restAdapter27.log;
        java.util.concurrent.Executor executor29 = restAdapter27.callbackExecutor;
        retrofit.Profiler profiler30 = restAdapter27.profiler;
        retrofit.Profiler profiler31 = null;
        restAdapter27.profiler = profiler31;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        restAdapter27.log = log41;
        log41.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder47 = builder25.setLog(log41);
        java.util.concurrent.Executor executor48 = builder47.callbackExecutor;
        retrofit.RestAdapter restAdapter49 = builder47.build();
        retrofit.client.Client client50 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder51 = builder47.setClient(client50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNotNull(restAdapter49);
    }

    @Test
    public void test11938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11938");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log9 = restAdapter8.log;
        java.util.concurrent.Executor executor10 = restAdapter8.callbackExecutor;
        retrofit.Profiler profiler11 = restAdapter8.profiler;
        retrofit.Profiler profiler12 = null;
        restAdapter8.profiler = profiler12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter8.log = log22;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("hi!");
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder26.setLog(log31);
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        builder26.logLevel = logLevel42;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log22, logLevel42);
        retrofit.converter.Converter converter46 = restAdapter45.converter;
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter45.logLevel;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.httpExecutor = executor49;
        retrofit.RestAdapter.Builder builder52 = builder48.setServer("hi!");
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder48.setLog(log53);
        retrofit.RestAdapter restAdapter55 = builder48.build();
        java.util.concurrent.Executor executor56 = restAdapter55.httpExecutor;
        restAdapter45.callbackExecutor = executor56;
        retrofit.Server server58 = restAdapter45.server;
        retrofit.ErrorHandler errorHandler59 = restAdapter45.errorHandler;
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNotNull(executor56);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertNull(errorHandler59);
    }

    @Test
    public void test11939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11939");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor26 = builder25.httpExecutor;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log28 = restAdapter27.log;
        java.util.concurrent.Executor executor29 = restAdapter27.callbackExecutor;
        retrofit.Profiler profiler30 = restAdapter27.profiler;
        retrofit.Profiler profiler31 = null;
        restAdapter27.profiler = profiler31;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        restAdapter27.log = log41;
        log41.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder47 = builder25.setLog(log41);
        java.util.concurrent.Executor executor48 = builder47.callbackExecutor;
        retrofit.RestAdapter restAdapter49 = builder47.build();
        retrofit.RestAdapter restAdapter50 = builder47.build();
        retrofit.RestAdapter.Log log51 = builder47.log;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNotNull(restAdapter49);
        org.junit.Assert.assertNotNull(restAdapter50);
        org.junit.Assert.assertNotNull(log51);
    }

    @Test
    public void test11940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11940");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder0.profiler;
        retrofit.converter.Converter converter23 = null;
        builder0.converter = converter23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter40.logLevel = logLevel42;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        restAdapter40.requestInterceptor = requestInterceptor44;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter40.logLevel = logLevel46;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log38, logLevel46);
        retrofit.RestAdapter.Builder builder49 = builder0.setLog(log38);
        retrofit.RestAdapter.Log log50 = null;
        builder49.log = log50;
        retrofit.Server server52 = builder49.server;
        retrofit.converter.Converter converter53 = builder49.converter;
        retrofit.Profiler profiler54 = null;
        builder49.profiler = profiler54;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertNull(converter53);
    }

    @Test
    public void test11941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11941");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler6 = null;
        restAdapter0.errorHandler = errorHandler6;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.Profiler profiler10 = null;
        restAdapter0.profiler = profiler10;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log13 = restAdapter12.log;
        java.util.concurrent.Executor executor14 = restAdapter12.callbackExecutor;
        java.util.concurrent.Executor executor15 = restAdapter12.callbackExecutor;
        retrofit.Profiler profiler16 = restAdapter12.profiler;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter17.logLevel;
        retrofit.converter.Converter converter20 = null;
        restAdapter17.converter = converter20;
        retrofit.ErrorHandler errorHandler22 = restAdapter17.errorHandler;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter24 = null;
        builder23.converter = converter24;
        retrofit.client.Client.Provider provider26 = null;
        builder23.clientProvider = provider26;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        builder23.requestInterceptor = requestInterceptor28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.httpExecutor = executor31;
        retrofit.RestAdapter.Builder builder34 = builder30.setServer("hi!");
        retrofit.Profiler profiler35 = null;
        builder34.profiler = profiler35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.httpExecutor = executor38;
        retrofit.RestAdapter.Builder builder41 = builder37.setServer("hi!");
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder37.setLog(log42);
        retrofit.RestAdapter restAdapter44 = builder37.build();
        retrofit.converter.Converter converter45 = null;
        builder37.converter = converter45;
        retrofit.ErrorHandler errorHandler47 = null;
        builder37.errorHandler = errorHandler47;
        retrofit.RequestInterceptor requestInterceptor49 = builder37.requestInterceptor;
        builder34.requestInterceptor = requestInterceptor49;
        retrofit.RestAdapter.Builder builder51 = builder23.setRequestInterceptor(requestInterceptor49);
        restAdapter17.requestInterceptor = requestInterceptor49;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor54 = restAdapter53.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        restAdapter53.requestInterceptor = requestInterceptor55;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel66);
        restAdapter53.log = log65;
        restAdapter17.log = log65;
        restAdapter12.log = log65;
        restAdapter0.log = log65;
        log65.log("Retrofit-Idle");
        log65.log("");
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(requestInterceptor54);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test11942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11942");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.Profiler profiler9 = builder0.profiler;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder10.logLevel = logLevel15;
        retrofit.converter.Converter converter17 = null;
        builder10.converter = converter17;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter19.requestInterceptor;
        retrofit.converter.Converter converter21 = restAdapter19.converter;
        java.util.concurrent.Executor executor22 = null;
        restAdapter19.callbackExecutor = executor22;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor25 = null;
        restAdapter24.httpExecutor = executor25;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        restAdapter24.requestInterceptor = requestInterceptor27;
        retrofit.RestAdapter.Log log29 = restAdapter24.log;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter24.logLevel = logLevel30;
        restAdapter19.logLevel = logLevel30;
        retrofit.RestAdapter.Builder builder33 = builder10.setLogLevel(logLevel30);
        builder0.logLevel = logLevel30;
        retrofit.Server server35 = builder0.server;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter37 = null;
        builder36.converter = converter37;
        retrofit.client.Client.Provider provider39 = null;
        builder36.clientProvider = provider39;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        builder36.requestInterceptor = requestInterceptor41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler44 = builder43.errorHandler;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor46 = restAdapter45.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        restAdapter45.requestInterceptor = requestInterceptor47;
        retrofit.Server server49 = null;
        retrofit.client.Client.Provider provider50 = null;
        java.util.concurrent.Executor executor51 = null;
        java.util.concurrent.Executor executor52 = null;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        retrofit.converter.Converter converter54 = null;
        retrofit.Profiler profiler55 = null;
        retrofit.ErrorHandler errorHandler56 = null;
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server49, provider50, executor51, executor52, requestInterceptor53, converter54, profiler55, errorHandler56, log57, logLevel58);
        restAdapter45.log = log57;
        retrofit.ErrorHandler errorHandler61 = null;
        restAdapter45.errorHandler = errorHandler61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter64 = builder63.converter;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor66 = restAdapter65.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        restAdapter65.requestInterceptor = requestInterceptor67;
        retrofit.Server server69 = null;
        retrofit.client.Client.Provider provider70 = null;
        java.util.concurrent.Executor executor71 = null;
        java.util.concurrent.Executor executor72 = null;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        retrofit.converter.Converter converter74 = null;
        retrofit.Profiler profiler75 = null;
        retrofit.ErrorHandler errorHandler76 = null;
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server69, provider70, executor71, executor72, requestInterceptor73, converter74, profiler75, errorHandler76, log77, logLevel78);
        restAdapter65.log = log77;
        retrofit.ErrorHandler errorHandler81 = null;
        restAdapter65.errorHandler = errorHandler81;
        retrofit.RestAdapter.Log log83 = restAdapter65.log;
        retrofit.RestAdapter.Builder builder84 = builder63.setLog(log83);
        retrofit.RequestInterceptor requestInterceptor85 = builder63.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor86 = builder63.requestInterceptor;
        retrofit.RestAdapter.Builder builder88 = builder63.setServer("hi!");
        retrofit.Server server89 = builder63.server;
        restAdapter45.server = server89;
        builder43.server = server89;
        retrofit.RestAdapter.Builder builder92 = builder36.setServer(server89);
        retrofit.RestAdapter.Builder builder93 = builder0.setServer(server89);
        retrofit.Profiler profiler94 = builder93.profiler;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter64);
        org.junit.Assert.assertNull(requestInterceptor66);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(requestInterceptor85);
        org.junit.Assert.assertNull(requestInterceptor86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(server89);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNull(profiler94);
    }

    @Test
    public void test11943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11943");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log9 = restAdapter8.log;
        java.util.concurrent.Executor executor10 = restAdapter8.callbackExecutor;
        retrofit.Profiler profiler11 = restAdapter8.profiler;
        retrofit.Profiler profiler12 = null;
        restAdapter8.profiler = profiler12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter8.log = log22;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("hi!");
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder26.setLog(log31);
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        builder26.logLevel = logLevel42;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log22, logLevel42);
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter47 = builder46.converter;
        retrofit.Profiler profiler48 = null;
        builder46.profiler = profiler48;
        retrofit.ErrorHandler errorHandler50 = null;
        builder46.errorHandler = errorHandler50;
        retrofit.Server server52 = builder46.server;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter54 = builder53.converter;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor56 = restAdapter55.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        restAdapter55.requestInterceptor = requestInterceptor57;
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server59, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log67, logLevel68);
        restAdapter55.log = log67;
        retrofit.ErrorHandler errorHandler71 = null;
        restAdapter55.errorHandler = errorHandler71;
        retrofit.RestAdapter.Log log73 = restAdapter55.log;
        retrofit.RestAdapter.Builder builder74 = builder53.setLog(log73);
        builder53.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor77 = null;
        builder76.httpExecutor = executor77;
        retrofit.RestAdapter.Builder builder80 = builder76.setServer("hi!");
        retrofit.RestAdapter.Log log81 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder82 = builder76.setLog(log81);
        retrofit.RestAdapter restAdapter83 = builder76.build();
        java.util.concurrent.Executor executor84 = restAdapter83.httpExecutor;
        builder53.callbackExecutor = executor84;
        builder46.httpExecutor = executor84;
        restAdapter45.httpExecutor = executor84;
        retrofit.RequestInterceptor requestInterceptor88 = restAdapter45.requestInterceptor;
        retrofit.RestAdapter.Log log89 = restAdapter45.log;
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter47);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertNull(converter54);
        org.junit.Assert.assertNull(requestInterceptor56);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(restAdapter83);
        org.junit.Assert.assertNotNull(executor84);
        org.junit.Assert.assertNull(requestInterceptor88);
        org.junit.Assert.assertNotNull(log89);
    }

    @Test
    public void test11944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11944");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder0.requestInterceptor = requestInterceptor20;
        retrofit.converter.Converter converter22 = builder0.converter;
        java.util.concurrent.Executor executor23 = builder0.httpExecutor;
        java.util.concurrent.Executor executor24 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor25 = builder0.httpExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor25);
    }

    @Test
    public void test11945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11945");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = builder26.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor28 = builder26.requestInterceptor;
        retrofit.Profiler profiler29 = builder26.profiler;
        retrofit.RestAdapter.LogLevel logLevel30 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder31 = builder25.setLogLevel(logLevel30);
        retrofit.converter.Converter converter32 = builder31.converter;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log34 = restAdapter33.log;
        retrofit.ErrorHandler errorHandler35 = restAdapter33.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter33.new RestHandler();
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.httpExecutor = executor38;
        retrofit.RestAdapter.Builder builder41 = builder37.setServer("hi!");
        retrofit.Profiler profiler42 = null;
        builder41.profiler = profiler42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.httpExecutor = executor45;
        retrofit.RestAdapter.Builder builder48 = builder44.setServer("hi!");
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder44.setLog(log49);
        retrofit.RestAdapter restAdapter51 = builder44.build();
        retrofit.converter.Converter converter52 = null;
        builder44.converter = converter52;
        retrofit.ErrorHandler errorHandler54 = null;
        builder44.errorHandler = errorHandler54;
        retrofit.RequestInterceptor requestInterceptor56 = builder44.requestInterceptor;
        builder41.requestInterceptor = requestInterceptor56;
        restAdapter33.requestInterceptor = requestInterceptor56;
        retrofit.RestAdapter.Builder builder59 = builder31.setRequestInterceptor(requestInterceptor56);
        java.util.concurrent.Executor executor60 = builder31.httpExecutor;
        retrofit.RestAdapter.Builder builder62 = builder31.setServer("hi!");
        java.util.concurrent.Executor executor63 = builder62.httpExecutor;
        retrofit.ErrorHandler errorHandler64 = builder62.errorHandler;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertNotNull(requestInterceptor56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNull(errorHandler64);
    }

    @Test
    public void test11946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11946");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder0.requestInterceptor = requestInterceptor20;
        retrofit.converter.Converter converter22 = builder0.converter;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter24 = null;
        builder23.converter = converter24;
        retrofit.client.Client.Provider provider26 = null;
        builder23.clientProvider = provider26;
        retrofit.RestAdapter.Builder builder29 = builder23.setServer("hi!");
        retrofit.Server server30 = builder23.server;
        retrofit.RestAdapter.Builder builder31 = builder0.setServer(server30);
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter32.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter32.requestInterceptor = requestInterceptor34;
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter32.getLogLevel();
        retrofit.Server server37 = restAdapter32.server;
        java.util.concurrent.Executor executor38 = restAdapter32.callbackExecutor;
        retrofit.client.Client.Provider provider39 = restAdapter32.clientProvider;
        retrofit.client.Client.Provider provider40 = restAdapter32.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter32.new RestHandler();
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor43 = restAdapter42.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        restAdapter42.requestInterceptor = requestInterceptor44;
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter42.getLogLevel();
        retrofit.client.Client.Provider provider47 = null;
        restAdapter42.clientProvider = provider47;
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter42.logLevel;
        retrofit.Server server50 = restAdapter42.server;
        retrofit.client.Client.Provider provider51 = restAdapter42.clientProvider;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log53 = restAdapter52.log;
        retrofit.ErrorHandler errorHandler54 = restAdapter52.errorHandler;
        retrofit.converter.Converter converter55 = null;
        restAdapter52.converter = converter55;
        retrofit.RequestInterceptor requestInterceptor57 = restAdapter52.requestInterceptor;
        retrofit.ErrorHandler errorHandler58 = null;
        restAdapter52.errorHandler = errorHandler58;
        retrofit.ErrorHandler errorHandler60 = restAdapter52.errorHandler;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.httpExecutor = executor62;
        retrofit.RestAdapter.Builder builder65 = builder61.setServer("hi!");
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder61.setLog(log66);
        retrofit.RestAdapter restAdapter68 = builder61.build();
        java.util.concurrent.Executor executor69 = restAdapter68.httpExecutor;
        restAdapter52.callbackExecutor = executor69;
        restAdapter42.httpExecutor = executor69;
        restAdapter32.httpExecutor = executor69;
        builder31.httpExecutor = executor69;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(server30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(provider39);
        org.junit.Assert.assertNull(provider40);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertNull(logLevel49);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertNull(log53);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNull(errorHandler60);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(restAdapter68);
        org.junit.Assert.assertNotNull(executor69);
    }

    @Test
    public void test11947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11947");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.getUrl();
        java.util.List<retrofit.client.Header> headerList12 = request10.getHeaders();
        java.lang.String str13 = request10.getMethod();
        retrofit.mime.TypedOutput typedOutput14 = request10.getBody();
        java.util.List<retrofit.client.Header> headerList15 = request10.getHeaders();
        java.lang.String str16 = request10.getUrl();
        java.lang.String str17 = request10.getUrl();
        java.util.List<retrofit.client.Header> headerList18 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("Retrofit-Idle", "", headerList18, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "hi!", headerList18, typedOutput21);
        java.lang.String str23 = request22.getMethod();
        java.util.List<retrofit.client.Header> headerList24 = request22.getHeaders();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(headerList24);
    }

    @Test
    public void test11948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11948");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter0.requestInterceptor = requestInterceptor4;
        retrofit.RestAdapter.Log log6 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider8 = null;
        restAdapter0.clientProvider = provider8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.client.Client.Provider provider13 = null;
        builder10.clientProvider = provider13;
        retrofit.client.Client.Provider provider15 = builder10.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder17 = builder10.setLogLevel(logLevel16);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler19 = builder18.errorHandler;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter28.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter28.requestInterceptor = requestInterceptor30;
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        restAdapter28.log = log40;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean45 = logLevel44.log();
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log40, logLevel44);
        retrofit.RestAdapter.Builder builder47 = builder18.setLog(log40);
        retrofit.Server server48 = builder47.server;
        retrofit.ErrorHandler errorHandler49 = null;
        builder47.errorHandler = errorHandler49;
        retrofit.Profiler profiler51 = null;
        builder47.profiler = profiler51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor54 = builder53.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor55 = builder53.requestInterceptor;
        java.util.concurrent.Executor executor56 = builder53.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel57 = builder53.logLevel;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.httpExecutor = executor59;
        retrofit.RestAdapter.Builder builder62 = builder58.setServer("hi!");
        retrofit.Profiler profiler63 = null;
        builder62.profiler = profiler63;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        builder62.requestInterceptor = requestInterceptor65;
        retrofit.RestAdapter restAdapter67 = builder62.build();
        retrofit.converter.Converter converter68 = null;
        builder62.converter = converter68;
        retrofit.client.Client.Provider provider70 = builder62.clientProvider;
        retrofit.RestAdapter.Builder builder71 = builder53.setClient(provider70);
        builder47.clientProvider = provider70;
        builder17.clientProvider = provider70;
        restAdapter0.clientProvider = provider70;
        java.util.concurrent.Executor executor75 = restAdapter0.httpExecutor;
        retrofit.ErrorHandler errorHandler76 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(log6);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(server48);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNull(requestInterceptor55);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(restAdapter67);
        org.junit.Assert.assertNotNull(provider70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(executor75);
        org.junit.Assert.assertNull(errorHandler76);
    }

    @Test
    public void test11949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11949");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList5, typedOutput9);
        java.util.List<retrofit.client.Header> headerList11 = request10.getHeaders();
        java.lang.String str12 = request10.getMethod();
        java.util.List<retrofit.client.Header> headerList13 = request10.getHeaders();
        java.util.List<retrofit.client.Header> headerList14 = request10.getHeaders();
        java.util.List<retrofit.client.Header> headerList15 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput16 = request10.getBody();
        java.util.List<retrofit.client.Header> headerList17 = request10.getHeaders();
        java.lang.String str18 = request10.getMethod();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Retrofit-Idle" + "'", str18, "Retrofit-Idle");
    }

    @Test
    public void test11950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11950");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.client.Client.Provider provider19 = builder0.clientProvider;
        retrofit.RestAdapter restAdapter20 = builder0.build();
        retrofit.Profiler profiler21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder22 = builder0.setProfiler(profiler21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNotNull(restAdapter20);
    }

    @Test
    public void test11951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11951");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.client.Client.Provider provider4 = null;
        restAdapter0.clientProvider = provider4;
        retrofit.client.Client.Provider provider6 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Log log27 = restAdapter9.log;
        retrofit.RestAdapter.Builder builder28 = builder7.setLog(log27);
        retrofit.RequestInterceptor requestInterceptor29 = builder7.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor30 = builder7.requestInterceptor;
        retrofit.RestAdapter.Builder builder32 = builder7.setServer("hi!");
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.httpExecutor = executor42;
        retrofit.RestAdapter.Builder builder45 = builder41.setServer("hi!");
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder41.setLog(log46);
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter48.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter48.logLevel = logLevel50;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        restAdapter48.requestInterceptor = requestInterceptor52;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter48.logLevel = logLevel54;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log46, logLevel54);
        boolean boolean57 = logLevel54.log();
        retrofit.RestAdapter.Builder builder58 = builder32.setLogLevel(logLevel54);
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor60 = null;
        builder59.httpExecutor = executor60;
        retrofit.RestAdapter.Builder builder63 = builder59.setServer("hi!");
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder65 = builder59.setLog(log64);
        retrofit.RestAdapter restAdapter66 = builder59.build();
        java.util.concurrent.Executor executor67 = restAdapter66.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter66.new RestHandler();
        retrofit.converter.Converter converter69 = restAdapter66.converter;
        builder58.converter = converter69;
        restAdapter0.converter = converter69;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(logLevel49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(restAdapter66);
        org.junit.Assert.assertNotNull(executor67);
        org.junit.Assert.assertNotNull(converter69);
    }

    @Test
    public void test11952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11952");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor23 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder30 = builder24.setLog(log29);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter32 = builder31.converter;
        retrofit.RestAdapter.LogLevel logLevel33 = builder31.logLevel;
        retrofit.RestAdapter.Builder builder34 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter36 = builder35.converter;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor38 = restAdapter37.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        restAdapter37.requestInterceptor = requestInterceptor39;
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel50);
        restAdapter37.log = log49;
        retrofit.ErrorHandler errorHandler53 = null;
        restAdapter37.errorHandler = errorHandler53;
        retrofit.RestAdapter.Log log55 = restAdapter37.log;
        retrofit.RestAdapter.Builder builder56 = builder35.setLog(log55);
        retrofit.RequestInterceptor requestInterceptor57 = builder35.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor58 = builder35.requestInterceptor;
        retrofit.RestAdapter.Builder builder60 = builder35.setServer("hi!");
        retrofit.Server server61 = builder35.server;
        retrofit.RestAdapter.Builder builder62 = builder30.setServer(server61);
        retrofit.RestAdapter.Builder builder63 = builder0.setServer(server61);
        retrofit.Profiler profiler64 = builder0.profiler;
        retrofit.RestAdapter restAdapter65 = builder0.build();
        retrofit.Profiler profiler66 = null;
        builder0.profiler = profiler66;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(server61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(profiler64);
        org.junit.Assert.assertNotNull(restAdapter65);
    }

    @Test
    public void test11953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11953");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor3 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.RestAdapter.Builder builder8 = builder4.setServer("hi!");
        retrofit.Profiler profiler9 = null;
        builder8.profiler = profiler9;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        builder8.requestInterceptor = requestInterceptor11;
        retrofit.RestAdapter restAdapter13 = builder8.build();
        retrofit.client.Client.Provider provider14 = builder8.clientProvider;
        builder0.clientProvider = provider14;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log17 = restAdapter16.log;
        java.util.concurrent.Executor executor18 = restAdapter16.callbackExecutor;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.httpExecutor = executor20;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder19.logLevel = logLevel24;
        retrofit.converter.Converter converter26 = null;
        builder19.converter = converter26;
        retrofit.client.Client.Provider provider28 = null;
        builder19.clientProvider = provider28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter31 = builder30.converter;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter32.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter32.requestInterceptor = requestInterceptor34;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        restAdapter32.log = log44;
        retrofit.ErrorHandler errorHandler48 = null;
        restAdapter32.errorHandler = errorHandler48;
        retrofit.RestAdapter.Log log50 = restAdapter32.log;
        retrofit.RestAdapter.Builder builder51 = builder30.setLog(log50);
        builder30.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor54 = null;
        builder53.httpExecutor = executor54;
        retrofit.RestAdapter.Builder builder57 = builder53.setServer("hi!");
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder59 = builder53.setLog(log58);
        retrofit.RestAdapter restAdapter60 = builder53.build();
        java.util.concurrent.Executor executor61 = restAdapter60.httpExecutor;
        builder30.callbackExecutor = executor61;
        builder19.httpExecutor = executor61;
        restAdapter16.callbackExecutor = executor61;
        builder0.callbackExecutor = executor61;
        java.util.concurrent.Executor executor66 = null;
        builder0.callbackExecutor = executor66;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(restAdapter13);
        org.junit.Assert.assertNotNull(provider14);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNotNull(executor61);
    }

    @Test
    public void test11954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11954");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.converter.Converter converter8 = builder0.converter;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.client.Client.Provider provider14 = builder13.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        builder13.logLevel = logLevel15;
        retrofit.RestAdapter restAdapter18 = builder13.build();
        retrofit.ErrorHandler errorHandler19 = builder13.errorHandler;
        retrofit.RestAdapter.Builder builder20 = builder0.setErrorHandler(errorHandler19);
        retrofit.converter.Converter converter21 = builder20.converter;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter23 = builder22.converter;
        retrofit.RestAdapter.LogLevel logLevel24 = builder22.logLevel;
        builder22.ensureSaneDefaults();
        retrofit.client.Client.Provider provider26 = null;
        builder22.clientProvider = provider26;
        retrofit.Profiler profiler28 = builder22.profiler;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = builder29.callbackExecutor;
        retrofit.RestAdapter.Log log31 = builder29.log;
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel49);
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter51.logLevel = logLevel53;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter51.setLogLevel(logLevel55);
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log48, logLevel55);
        retrofit.RestAdapter.Builder builder58 = builder29.setLogLevel(logLevel55);
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor60 = null;
        builder59.httpExecutor = executor60;
        retrofit.RestAdapter.Builder builder63 = builder59.setServer("hi!");
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder65 = builder59.setLog(log64);
        builder29.log = log64;
        retrofit.RestAdapter.Builder builder67 = builder22.setLog(log64);
        retrofit.converter.Converter converter68 = builder67.converter;
        builder20.converter = converter68;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter70 = builder20.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(errorHandler19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler28);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(converter68);
    }

    @Test
    public void test11955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11955");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter0.requestInterceptor = requestInterceptor4;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter0.logLevel = logLevel6;
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.RestAdapter.LogLevel logLevel13 = builder11.logLevel;
        builder11.ensureSaneDefaults();
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder23.setLog(log28);
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter30.logLevel = logLevel32;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter30.requestInterceptor = requestInterceptor34;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter30.logLevel = logLevel36;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log28, logLevel36);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder39.setLog(log44);
        restAdapter38.log = log44;
        builder11.log = log44;
        java.util.concurrent.Executor executor48 = null;
        builder11.httpExecutor = executor48;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor51 = restAdapter50.requestInterceptor;
        retrofit.converter.Converter converter52 = restAdapter50.converter;
        java.util.concurrent.Executor executor53 = null;
        restAdapter50.callbackExecutor = executor53;
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter50.logLevel;
        java.util.concurrent.Executor executor56 = restAdapter50.callbackExecutor;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor58 = null;
        builder57.httpExecutor = executor58;
        retrofit.RestAdapter.Builder builder61 = builder57.setServer("hi!");
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder63 = builder57.setLog(log62);
        retrofit.RestAdapter restAdapter64 = builder57.build();
        java.util.concurrent.Executor executor65 = restAdapter64.httpExecutor;
        restAdapter50.httpExecutor = executor65;
        builder11.callbackExecutor = executor65;
        retrofit.RequestInterceptor requestInterceptor68 = builder11.requestInterceptor;
        retrofit.ErrorHandler errorHandler69 = builder11.errorHandler;
        retrofit.converter.Converter converter70 = builder11.converter;
        restAdapter0.converter = converter70;
        retrofit.RequestInterceptor requestInterceptor72 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter73.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter73.logLevel = logLevel75;
        retrofit.RequestInterceptor requestInterceptor77 = null;
        restAdapter73.requestInterceptor = requestInterceptor77;
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter73.logLevel;
        restAdapter0.setLogLevel(logLevel79);
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(requestInterceptor51);
        org.junit.Assert.assertNull(converter52);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(restAdapter64);
        org.junit.Assert.assertNotNull(executor65);
        org.junit.Assert.assertNotNull(requestInterceptor68);
        org.junit.Assert.assertNotNull(errorHandler69);
        org.junit.Assert.assertNotNull(converter70);
        org.junit.Assert.assertNull(requestInterceptor72);
        org.junit.Assert.assertNull(logLevel74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test11956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11956");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        restAdapter0.server = server4;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(log1);
    }

    @Test
    public void test11957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11957");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = null;
        builder6.converter = converter7;
        retrofit.client.Client.Provider provider9 = null;
        builder6.clientProvider = provider9;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        builder6.requestInterceptor = requestInterceptor11;
        retrofit.Profiler profiler13 = builder6.profiler;
        retrofit.Profiler profiler14 = null;
        builder6.profiler = profiler14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = builder16.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor18 = builder16.requestInterceptor;
        java.util.concurrent.Executor executor19 = builder16.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel20 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.httpExecutor = executor22;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("hi!");
        retrofit.Profiler profiler26 = null;
        builder25.profiler = profiler26;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        builder25.requestInterceptor = requestInterceptor28;
        retrofit.RestAdapter restAdapter30 = builder25.build();
        retrofit.converter.Converter converter31 = null;
        builder25.converter = converter31;
        retrofit.client.Client.Provider provider33 = builder25.clientProvider;
        retrofit.RestAdapter.Builder builder34 = builder16.setClient(provider33);
        retrofit.RestAdapter.Builder builder35 = builder6.setClient(provider33);
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter37 = builder36.converter;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor39 = restAdapter38.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        restAdapter38.requestInterceptor = requestInterceptor40;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel51);
        restAdapter38.log = log50;
        retrofit.ErrorHandler errorHandler54 = null;
        restAdapter38.errorHandler = errorHandler54;
        retrofit.RestAdapter.Log log56 = restAdapter38.log;
        retrofit.RestAdapter.Builder builder57 = builder36.setLog(log56);
        retrofit.RequestInterceptor requestInterceptor58 = builder36.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor59 = builder36.requestInterceptor;
        retrofit.RestAdapter.Builder builder61 = builder36.setServer("hi!");
        java.util.concurrent.Executor executor62 = builder61.httpExecutor;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log64 = restAdapter63.log;
        java.util.concurrent.Executor executor65 = restAdapter63.callbackExecutor;
        retrofit.Profiler profiler66 = restAdapter63.profiler;
        retrofit.Profiler profiler67 = null;
        restAdapter63.profiler = profiler67;
        retrofit.Server server69 = null;
        retrofit.client.Client.Provider provider70 = null;
        java.util.concurrent.Executor executor71 = null;
        java.util.concurrent.Executor executor72 = null;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        retrofit.converter.Converter converter74 = null;
        retrofit.Profiler profiler75 = null;
        retrofit.ErrorHandler errorHandler76 = null;
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server69, provider70, executor71, executor72, requestInterceptor73, converter74, profiler75, errorHandler76, log77, logLevel78);
        restAdapter63.log = log77;
        log77.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder83 = builder61.setLog(log77);
        builder6.log = log77;
        restAdapter0.log = log77;
        retrofit.RestAdapter.LogLevel logLevel86 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel87 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNotNull(provider33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(converter37);
        org.junit.Assert.assertNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNull(requestInterceptor59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(log64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNull(profiler66);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNull(logLevel86);
        org.junit.Assert.assertNull(logLevel87);
    }

    @Test
    public void test11958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11958");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.client.Client.Provider provider9 = restAdapter7.clientProvider;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("hi!");
        java.util.concurrent.Executor executor15 = null;
        builder10.httpExecutor = executor15;
        retrofit.RestAdapter restAdapter17 = builder10.build();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter19 = builder18.converter;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor21 = restAdapter20.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        restAdapter20.requestInterceptor = requestInterceptor22;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel33);
        restAdapter20.log = log32;
        retrofit.ErrorHandler errorHandler36 = null;
        restAdapter20.errorHandler = errorHandler36;
        retrofit.RestAdapter.Log log38 = restAdapter20.log;
        retrofit.RestAdapter.Builder builder39 = builder18.setLog(log38);
        retrofit.Profiler profiler40 = builder39.profiler;
        retrofit.Profiler profiler41 = builder39.profiler;
        java.util.concurrent.Executor executor42 = builder39.callbackExecutor;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor44 = null;
        builder43.httpExecutor = executor44;
        retrofit.RestAdapter.Builder builder47 = builder43.setServer("hi!");
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder43.setLog(log48);
        retrofit.RestAdapter restAdapter50 = builder43.build();
        java.util.concurrent.Executor executor51 = restAdapter50.httpExecutor;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = null;
        builder52.httpExecutor = executor53;
        retrofit.client.Client.Provider provider55 = null;
        builder52.clientProvider = provider55;
        retrofit.RestAdapter.Builder builder58 = builder52.setServer("hi!");
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor60 = null;
        builder59.httpExecutor = executor60;
        retrofit.RestAdapter.Builder builder63 = builder59.setServer("hi!");
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder65 = builder59.setLog(log64);
        retrofit.RestAdapter restAdapter66 = builder59.build();
        java.util.concurrent.Executor executor67 = restAdapter66.httpExecutor;
        builder58.callbackExecutor = executor67;
        retrofit.RestAdapter.Builder builder69 = builder39.setExecutors(executor51, executor67);
        restAdapter17.httpExecutor = executor51;
        retrofit.client.Client.Provider provider71 = null;
        restAdapter17.clientProvider = provider71;
        retrofit.Profiler profiler73 = null;
        restAdapter17.profiler = profiler73;
        retrofit.Server server75 = restAdapter17.server;
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter17.logLevel;
        restAdapter7.setLogLevel(logLevel76);
        retrofit.Profiler profiler78 = null;
        restAdapter7.profiler = profiler78;
        retrofit.client.Response response81 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response83 = restAdapter7.logAndReplaceResponse("Retrofit-Idle", response81, (long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(provider9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(restAdapter17);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(profiler40);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(restAdapter50);
        org.junit.Assert.assertNotNull(executor51);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(restAdapter66);
        org.junit.Assert.assertNotNull(executor67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(server75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test11959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11959");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.converter.Converter converter8 = null;
        builder0.converter = converter8;
        retrofit.ErrorHandler errorHandler10 = null;
        builder0.errorHandler = errorHandler10;
        retrofit.RequestInterceptor requestInterceptor12 = builder0.requestInterceptor;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        retrofit.converter.Converter converter15 = restAdapter13.converter;
        java.util.concurrent.Executor executor16 = restAdapter13.httpExecutor;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.httpExecutor = executor18;
        retrofit.RestAdapter.Builder builder21 = builder17.setServer("hi!");
        retrofit.client.Client.Provider provider22 = builder21.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean24 = logLevel23.log();
        builder21.logLevel = logLevel23;
        retrofit.RestAdapter restAdapter26 = builder21.build();
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor28 = restAdapter27.requestInterceptor;
        java.util.concurrent.Executor executor29 = restAdapter27.callbackExecutor;
        retrofit.converter.Converter converter30 = null;
        restAdapter27.converter = converter30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter33 = builder32.converter;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor35 = restAdapter34.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        restAdapter34.requestInterceptor = requestInterceptor36;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel47);
        restAdapter34.log = log46;
        retrofit.ErrorHandler errorHandler50 = null;
        restAdapter34.errorHandler = errorHandler50;
        retrofit.RestAdapter.Log log52 = restAdapter34.log;
        retrofit.RestAdapter.Builder builder53 = builder32.setLog(log52);
        restAdapter27.log = log52;
        retrofit.RestAdapter.Builder builder55 = builder21.setLog(log52);
        restAdapter13.log = log52;
        builder0.log = log52;
        retrofit.RestAdapter.Builder builder59 = builder0.setServer("hi!");
        builder0.ensureSaneDefaults();
        retrofit.Server server61 = builder0.server;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(provider22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(converter33);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(server61);
    }

    @Test
    public void test11960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11960");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.Server server2 = restAdapter0.server;
        retrofit.Profiler profiler3 = null;
        restAdapter0.profiler = profiler3;
        retrofit.ErrorHandler errorHandler5 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.getLogLevel();
        retrofit.converter.Converter converter7 = restAdapter0.converter;
        java.util.concurrent.Executor executor8 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(executor8);
    }

    @Test
    public void test11961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11961");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.converter.Converter converter5 = null;
        builder0.converter = converter5;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor9 = restAdapter8.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter8.logLevel;
        retrofit.ErrorHandler errorHandler11 = restAdapter8.errorHandler;
        retrofit.Profiler profiler12 = null;
        restAdapter8.profiler = profiler12;
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter8.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter8.requestInterceptor;
        java.util.concurrent.Executor executor16 = restAdapter8.httpExecutor;
        retrofit.Profiler profiler17 = restAdapter8.profiler;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter18.logLevel;
        java.util.concurrent.Executor executor21 = restAdapter18.httpExecutor;
        retrofit.converter.Converter converter22 = null;
        restAdapter18.converter = converter22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = builder24.callbackExecutor;
        retrofit.RestAdapter.Log log26 = builder24.log;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel44);
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter46.logLevel = logLevel48;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter46.setLogLevel(logLevel50);
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log43, logLevel50);
        retrofit.RestAdapter.Builder builder53 = builder24.setLogLevel(logLevel50);
        retrofit.ErrorHandler errorHandler54 = null;
        builder53.errorHandler = errorHandler54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter57 = builder56.converter;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor59 = restAdapter58.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        restAdapter58.requestInterceptor = requestInterceptor60;
        retrofit.Server server62 = null;
        retrofit.client.Client.Provider provider63 = null;
        java.util.concurrent.Executor executor64 = null;
        java.util.concurrent.Executor executor65 = null;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        retrofit.converter.Converter converter67 = null;
        retrofit.Profiler profiler68 = null;
        retrofit.ErrorHandler errorHandler69 = null;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server62, provider63, executor64, executor65, requestInterceptor66, converter67, profiler68, errorHandler69, log70, logLevel71);
        restAdapter58.log = log70;
        retrofit.ErrorHandler errorHandler74 = null;
        restAdapter58.errorHandler = errorHandler74;
        retrofit.RestAdapter.Log log76 = restAdapter58.log;
        retrofit.RestAdapter.Builder builder77 = builder56.setLog(log76);
        builder56.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor80 = null;
        builder79.httpExecutor = executor80;
        retrofit.RestAdapter.Builder builder83 = builder79.setServer("hi!");
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder85 = builder79.setLog(log84);
        retrofit.RestAdapter restAdapter86 = builder79.build();
        java.util.concurrent.Executor executor87 = restAdapter86.httpExecutor;
        builder56.callbackExecutor = executor87;
        builder53.httpExecutor = executor87;
        restAdapter18.callbackExecutor = executor87;
        restAdapter8.httpExecutor = executor87;
        builder0.callbackExecutor = executor87;
        retrofit.RequestInterceptor requestInterceptor93 = builder0.requestInterceptor;
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(converter57);
        org.junit.Assert.assertNull(requestInterceptor59);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertNotNull(executor87);
        org.junit.Assert.assertNotNull(requestInterceptor93);
    }

    @Test
    public void test11962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11962");
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        java.lang.String str19 = request18.getUrl();
        java.util.List<retrofit.client.Header> headerList20 = request18.getHeaders();
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "", headerList20, typedOutput21);
        java.lang.String str23 = request22.getMethod();
        retrofit.mime.TypedOutput typedOutput24 = request22.getBody();
        java.util.List<retrofit.client.Header> headerList25 = request22.getHeaders();
        java.util.List<retrofit.client.Header> headerList26 = request22.getHeaders();
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "", headerList26, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList26, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "Retrofit-Idle", headerList26, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", headerList26, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", headerList26, typedOutput35);
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(typedOutput24);
        org.junit.Assert.assertNotNull(headerList25);
        org.junit.Assert.assertNotNull(headerList26);
    }

    @Test
    public void test11963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11963");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        restAdapter0.log = log12;
        retrofit.ErrorHandler errorHandler16 = null;
        restAdapter0.errorHandler = errorHandler16;
        retrofit.converter.Converter converter18 = null;
        restAdapter0.converter = converter18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter28.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter28.requestInterceptor = requestInterceptor30;
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        restAdapter28.log = log40;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean45 = logLevel44.log();
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log40, logLevel44);
        restAdapter0.logLevel = logLevel44;
        java.util.concurrent.Executor executor48 = restAdapter0.callbackExecutor;
        retrofit.ErrorHandler errorHandler49 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Log log50 = restAdapter0.log;
        log50.log("Retrofit-Idle");
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertNotNull(log50);
    }

    @Test
    public void test11964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11964");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        java.util.concurrent.Executor executor5 = builder0.httpExecutor;
        retrofit.Profiler profiler6 = builder0.profiler;
        retrofit.RestAdapter.Log log7 = builder0.log;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.callbackExecutor;
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log18, logLevel19);
        retrofit.RestAdapter.Builder builder21 = builder8.setLogLevel(logLevel19);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter22.logLevel = logLevel24;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.setLogLevel(logLevel26);
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter22.getLogLevel();
        builder21.logLevel = logLevel28;
        retrofit.RestAdapter.Builder builder30 = builder0.setLogLevel(logLevel28);
        retrofit.RequestInterceptor requestInterceptor31 = null;
        builder0.requestInterceptor = requestInterceptor31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.Profiler profiler40 = null;
        builder39.profiler = profiler40;
        retrofit.client.Client.Provider provider42 = builder39.clientProvider;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor44 = restAdapter43.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        restAdapter43.requestInterceptor = requestInterceptor45;
        java.util.concurrent.Executor executor47 = restAdapter43.httpExecutor;
        java.util.concurrent.Executor executor48 = restAdapter43.httpExecutor;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = builder49.setServer("hi!");
        retrofit.Profiler profiler54 = null;
        builder53.profiler = profiler54;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        builder53.requestInterceptor = requestInterceptor56;
        retrofit.RestAdapter restAdapter58 = builder53.build();
        retrofit.converter.Converter converter59 = restAdapter58.converter;
        restAdapter43.converter = converter59;
        retrofit.RestAdapter.Builder builder61 = builder39.setConverter(converter59);
        builder0.converter = converter59;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor64 = restAdapter63.requestInterceptor;
        java.util.concurrent.Executor executor65 = restAdapter63.callbackExecutor;
        retrofit.ErrorHandler errorHandler66 = restAdapter63.errorHandler;
        retrofit.Server server67 = null;
        retrofit.client.Client.Provider provider68 = null;
        java.util.concurrent.Executor executor69 = null;
        java.util.concurrent.Executor executor70 = null;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        retrofit.converter.Converter converter72 = null;
        retrofit.Profiler profiler73 = null;
        retrofit.ErrorHandler errorHandler74 = null;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor76 = null;
        builder75.httpExecutor = executor76;
        retrofit.RestAdapter.Builder builder79 = builder75.setServer("hi!");
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder81 = builder75.setLog(log80);
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel83 = restAdapter82.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter82.logLevel = logLevel84;
        retrofit.RequestInterceptor requestInterceptor86 = null;
        restAdapter82.requestInterceptor = requestInterceptor86;
        retrofit.RestAdapter.LogLevel logLevel88 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter82.logLevel = logLevel88;
        retrofit.RestAdapter restAdapter90 = new retrofit.RestAdapter(server67, provider68, executor69, executor70, requestInterceptor71, converter72, profiler73, errorHandler74, log80, logLevel88);
        log80.log("Retrofit-Idle");
        restAdapter63.log = log80;
        retrofit.RestAdapter.Builder builder94 = builder0.setLog(log80);
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor96 = builder0.callbackExecutor;
        retrofit.client.Client client97 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder98 = builder0.setClient(client97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(provider42);
        org.junit.Assert.assertNull(requestInterceptor44);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter58);
        org.junit.Assert.assertNotNull(converter59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(requestInterceptor64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNull(errorHandler66);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(logLevel83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(executor96);
    }

    @Test
    public void test11965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11965");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter5 = builder4.build();
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.getMethod();
        java.lang.String str14 = request12.getMethod();
        retrofit.client.Request request15 = restAdapter5.logAndReplaceRequest(request12);
        retrofit.converter.Converter converter16 = restAdapter5.converter;
        retrofit.Server server17 = restAdapter5.server;
        retrofit.ErrorHandler errorHandler18 = restAdapter5.errorHandler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(converter16);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(errorHandler18);
    }

    @Test
    public void test11966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11966");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        builder0.requestInterceptor = requestInterceptor3;
        retrofit.RequestInterceptor requestInterceptor5 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.RestAdapter.Log log26 = restAdapter8.log;
        retrofit.RestAdapter.Builder builder27 = builder6.setLog(log26);
        retrofit.RequestInterceptor requestInterceptor28 = builder6.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor29 = builder6.requestInterceptor;
        retrofit.RestAdapter.Builder builder31 = builder6.setServer("hi!");
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.httpExecutor = executor41;
        retrofit.RestAdapter.Builder builder44 = builder40.setServer("hi!");
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder46 = builder40.setLog(log45);
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter47.logLevel = logLevel49;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        restAdapter47.requestInterceptor = requestInterceptor51;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter47.logLevel = logLevel53;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log45, logLevel53);
        boolean boolean56 = logLevel53.log();
        retrofit.RestAdapter.Builder builder57 = builder31.setLogLevel(logLevel53);
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.httpExecutor = executor59;
        retrofit.RestAdapter.Builder builder62 = builder58.setServer("hi!");
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder64 = builder58.setLog(log63);
        retrofit.RestAdapter restAdapter65 = builder58.build();
        java.util.concurrent.Executor executor66 = restAdapter65.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter65.new RestHandler();
        retrofit.converter.Converter converter68 = restAdapter65.converter;
        builder57.converter = converter68;
        builder57.ensureSaneDefaults();
        retrofit.converter.Converter converter71 = builder57.converter;
        retrofit.RestAdapter.Builder builder72 = builder0.setConverter(converter71);
        retrofit.RequestInterceptor requestInterceptor73 = builder0.requestInterceptor;
        retrofit.RestAdapter.Log log74 = builder0.log;
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertNotNull(executor66);
        org.junit.Assert.assertNotNull(converter68);
        org.junit.Assert.assertNotNull(converter71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(requestInterceptor73);
        org.junit.Assert.assertNull(log74);
    }

    @Test
    public void test11967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11967");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder6.setLogLevel(logLevel9);
        retrofit.converter.Converter converter11 = builder6.converter;
        java.util.concurrent.Executor executor12 = builder6.callbackExecutor;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter13.logLevel = logLevel15;
        retrofit.RestAdapter.Builder builder17 = builder6.setLogLevel(logLevel15);
        java.util.concurrent.Executor executor18 = builder17.callbackExecutor;
        retrofit.Profiler profiler19 = builder17.profiler;
        retrofit.RestAdapter restAdapter20 = builder17.build();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.httpExecutor = executor22;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("hi!");
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder27 = builder21.setLog(log26);
        retrofit.RestAdapter restAdapter28 = builder21.build();
        java.util.concurrent.Executor executor29 = restAdapter28.httpExecutor;
        retrofit.client.Client.Provider provider30 = null;
        restAdapter28.clientProvider = provider30;
        retrofit.client.Client.Provider provider32 = null;
        restAdapter28.clientProvider = provider32;
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter28.logLevel;
        retrofit.RestAdapter.Builder builder35 = builder17.setLogLevel(logLevel34);
        retrofit.client.Client client36 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder37 = builder35.setClient(client36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(restAdapter28);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test11968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11968");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor3 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.RestAdapter.Builder builder8 = builder4.setServer("hi!");
        retrofit.Profiler profiler9 = null;
        builder8.profiler = profiler9;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        builder8.requestInterceptor = requestInterceptor11;
        retrofit.RestAdapter restAdapter13 = builder8.build();
        retrofit.client.Client.Provider provider14 = builder8.clientProvider;
        builder0.clientProvider = provider14;
        retrofit.RestAdapter.Builder builder17 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log19 = restAdapter18.log;
        java.util.concurrent.Executor executor20 = restAdapter18.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        restAdapter18.requestInterceptor = requestInterceptor21;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log24 = restAdapter23.log;
        retrofit.ErrorHandler errorHandler25 = restAdapter23.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.httpExecutor = executor28;
        retrofit.RestAdapter.Builder builder31 = builder27.setServer("hi!");
        retrofit.Profiler profiler32 = null;
        builder31.profiler = profiler32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.RestAdapter.Builder builder38 = builder34.setServer("hi!");
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder40 = builder34.setLog(log39);
        retrofit.RestAdapter restAdapter41 = builder34.build();
        retrofit.converter.Converter converter42 = null;
        builder34.converter = converter42;
        retrofit.ErrorHandler errorHandler44 = null;
        builder34.errorHandler = errorHandler44;
        retrofit.RequestInterceptor requestInterceptor46 = builder34.requestInterceptor;
        builder31.requestInterceptor = requestInterceptor46;
        restAdapter23.requestInterceptor = requestInterceptor46;
        retrofit.RequestInterceptor requestInterceptor49 = restAdapter23.requestInterceptor;
        restAdapter18.requestInterceptor = requestInterceptor49;
        retrofit.RestAdapter.Builder builder51 = builder17.setRequestInterceptor(requestInterceptor49);
        retrofit.RestAdapter.Log log52 = builder51.log;
        retrofit.Profiler profiler53 = builder51.profiler;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor55 = null;
        builder54.httpExecutor = executor55;
        retrofit.RestAdapter.Builder builder58 = builder54.setServer("hi!");
        retrofit.Profiler profiler59 = null;
        builder58.profiler = profiler59;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        builder58.requestInterceptor = requestInterceptor61;
        retrofit.RestAdapter restAdapter63 = builder58.build();
        retrofit.client.Client.Provider provider64 = restAdapter63.clientProvider;
        retrofit.ErrorHandler errorHandler65 = restAdapter63.errorHandler;
        builder51.errorHandler = errorHandler65;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(restAdapter13);
        org.junit.Assert.assertNotNull(provider14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(restAdapter41);
        org.junit.Assert.assertNotNull(requestInterceptor46);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter63);
        org.junit.Assert.assertNotNull(provider64);
        org.junit.Assert.assertNotNull(errorHandler65);
    }

    @Test
    public void test11969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11969");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.Profiler profiler4 = null;
        restAdapter0.profiler = profiler4;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        restAdapter0.requestInterceptor = requestInterceptor6;
        retrofit.Server server8 = null;
        restAdapter0.server = server8;
        retrofit.Server server10 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        retrofit.RestAdapter restAdapter16 = builder15.build();
        retrofit.client.Header[] headerArray19 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList20 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList20, headerArray19);
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList20, typedOutput22);
        java.lang.String str24 = request23.getMethod();
        java.lang.String str25 = request23.getMethod();
        retrofit.client.Request request26 = restAdapter16.logAndReplaceRequest(request23);
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter16.requestInterceptor;
        restAdapter0.requestInterceptor = requestInterceptor27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = null;
        builder29.httpExecutor = executor30;
        retrofit.RestAdapter.Builder builder33 = builder29.setServer("hi!");
        java.util.concurrent.Executor executor34 = null;
        builder29.httpExecutor = executor34;
        retrofit.ErrorHandler errorHandler36 = builder29.errorHandler;
        java.util.concurrent.Executor executor37 = builder29.callbackExecutor;
        java.util.concurrent.Executor executor38 = builder29.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor39 = builder29.requestInterceptor;
        retrofit.Profiler profiler40 = builder29.profiler;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter42 = builder41.converter;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor44 = restAdapter43.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        restAdapter43.requestInterceptor = requestInterceptor45;
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel56);
        restAdapter43.log = log55;
        retrofit.ErrorHandler errorHandler59 = null;
        restAdapter43.errorHandler = errorHandler59;
        retrofit.RestAdapter.Log log61 = restAdapter43.log;
        retrofit.RestAdapter.Builder builder62 = builder41.setLog(log61);
        retrofit.Profiler profiler63 = builder62.profiler;
        retrofit.Profiler profiler64 = builder62.profiler;
        java.util.concurrent.Executor executor65 = builder62.callbackExecutor;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = null;
        builder66.httpExecutor = executor67;
        retrofit.RestAdapter.Builder builder70 = builder66.setServer("hi!");
        retrofit.client.Client.Provider provider71 = builder70.clientProvider;
        builder70.ensureSaneDefaults();
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        log73.log("");
        builder70.log = log73;
        retrofit.Server server77 = builder70.server;
        builder62.server = server77;
        retrofit.RestAdapter.Builder builder79 = builder29.setServer(server77);
        restAdapter0.server = server77;
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor82 = null;
        builder81.httpExecutor = executor82;
        retrofit.RestAdapter.Builder builder85 = builder81.setServer("hi!");
        retrofit.Profiler profiler86 = null;
        builder85.profiler = profiler86;
        retrofit.RequestInterceptor requestInterceptor88 = null;
        builder85.requestInterceptor = requestInterceptor88;
        retrofit.RestAdapter restAdapter90 = builder85.build();
        retrofit.converter.Converter converter91 = restAdapter90.converter;
        retrofit.RestAdapter.Log log92 = retrofit.RestAdapter.Log.NONE;
        log92.log("");
        restAdapter90.log = log92;
        restAdapter0.log = log92;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(headerArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(requestInterceptor39);
        org.junit.Assert.assertNull(profiler40);
        org.junit.Assert.assertNull(converter42);
        org.junit.Assert.assertNull(requestInterceptor44);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(profiler63);
        org.junit.Assert.assertNull(profiler64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(provider71);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(server77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(restAdapter90);
        org.junit.Assert.assertNotNull(converter91);
        org.junit.Assert.assertNotNull(log92);
    }

    @Test
    public void test11970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11970");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList10 = request8.getHeaders();
        java.lang.String str11 = request8.getMethod();
        retrofit.mime.TypedOutput typedOutput12 = request8.getBody();
        java.util.List<retrofit.client.Header> headerList13 = request8.getHeaders();
        java.lang.String str14 = request8.getUrl();
        java.lang.String str15 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList16 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("Retrofit-Idle", "", headerList16, typedOutput17);
        java.lang.String str19 = request18.getMethod();
        retrofit.mime.TypedOutput typedOutput20 = request18.getBody();
        java.lang.String str21 = request18.getUrl();
        retrofit.mime.TypedOutput typedOutput22 = request18.getBody();
        java.lang.String str23 = request18.getUrl();
        java.lang.String str24 = request18.getMethod();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Retrofit-Idle" + "'", str19, "Retrofit-Idle");
        org.junit.Assert.assertNull(typedOutput20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(typedOutput22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Retrofit-Idle" + "'", str24, "Retrofit-Idle");
    }

    @Test
    public void test11971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11971");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder4.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter restAdapter9 = builder4.build();
        retrofit.converter.Converter converter10 = null;
        builder4.converter = converter10;
        retrofit.Profiler profiler12 = null;
        builder4.profiler = profiler12;
        builder4.ensureSaneDefaults();
        retrofit.Profiler profiler15 = null;
        builder4.profiler = profiler15;
        java.util.concurrent.Executor executor17 = builder4.callbackExecutor;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log19 = restAdapter18.log;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = builder20.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor22 = builder20.requestInterceptor;
        retrofit.ErrorHandler errorHandler23 = null;
        builder20.errorHandler = errorHandler23;
        retrofit.converter.Converter converter25 = null;
        builder20.converter = converter25;
        retrofit.ErrorHandler errorHandler27 = null;
        builder20.errorHandler = errorHandler27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = null;
        builder29.httpExecutor = executor30;
        retrofit.RestAdapter.Builder builder33 = builder29.setServer("hi!");
        retrofit.Profiler profiler34 = null;
        builder33.profiler = profiler34;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        builder33.requestInterceptor = requestInterceptor36;
        retrofit.RestAdapter restAdapter38 = builder33.build();
        retrofit.converter.Converter converter39 = restAdapter38.converter;
        retrofit.RestAdapter.Builder builder40 = builder20.setConverter(converter39);
        restAdapter18.converter = converter39;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter43 = builder42.converter;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter44.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        restAdapter44.requestInterceptor = requestInterceptor46;
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel57);
        restAdapter44.log = log56;
        retrofit.ErrorHandler errorHandler60 = null;
        restAdapter44.errorHandler = errorHandler60;
        retrofit.RestAdapter.Log log62 = restAdapter44.log;
        retrofit.RestAdapter.Builder builder63 = builder42.setLog(log62);
        retrofit.Profiler profiler64 = builder63.profiler;
        retrofit.client.Client.Provider provider65 = builder63.clientProvider;
        retrofit.RestAdapter.Builder builder67 = builder63.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter68 = builder67.build();
        retrofit.ErrorHandler errorHandler69 = restAdapter68.errorHandler;
        restAdapter18.errorHandler = errorHandler69;
        builder4.errorHandler = errorHandler69;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNotNull(converter39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(profiler64);
        org.junit.Assert.assertNull(provider65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(restAdapter68);
        org.junit.Assert.assertNotNull(errorHandler69);
    }

    @Test
    public void test11972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11972");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler5 = null;
        restAdapter0.errorHandler = errorHandler5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        java.util.concurrent.Executor executor12 = null;
        builder7.httpExecutor = executor12;
        retrofit.RestAdapter restAdapter14 = builder7.build();
        retrofit.converter.Converter converter15 = restAdapter14.converter;
        restAdapter0.converter = converter15;
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter0.getLogLevel();
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter18.logLevel = logLevel20;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        restAdapter18.requestInterceptor = requestInterceptor22;
        retrofit.Profiler profiler24 = restAdapter18.profiler;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        builder25.requestInterceptor = requestInterceptor28;
        retrofit.RequestInterceptor requestInterceptor30 = builder25.requestInterceptor;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.httpExecutor = executor32;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder31.logLevel = logLevel36;
        retrofit.converter.Converter converter38 = null;
        builder31.converter = converter38;
        retrofit.client.Client.Provider provider40 = null;
        builder31.clientProvider = provider40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter43 = builder42.converter;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter44.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        restAdapter44.requestInterceptor = requestInterceptor46;
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel57);
        restAdapter44.log = log56;
        retrofit.ErrorHandler errorHandler60 = null;
        restAdapter44.errorHandler = errorHandler60;
        retrofit.RestAdapter.Log log62 = restAdapter44.log;
        retrofit.RestAdapter.Builder builder63 = builder42.setLog(log62);
        builder42.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = null;
        builder65.httpExecutor = executor66;
        retrofit.RestAdapter.Builder builder69 = builder65.setServer("hi!");
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder65.setLog(log70);
        retrofit.RestAdapter restAdapter72 = builder65.build();
        java.util.concurrent.Executor executor73 = restAdapter72.httpExecutor;
        builder42.callbackExecutor = executor73;
        builder31.httpExecutor = executor73;
        builder25.httpExecutor = executor73;
        restAdapter18.httpExecutor = executor73;
        retrofit.RequestInterceptor requestInterceptor78 = restAdapter18.requestInterceptor;
        retrofit.Profiler profiler79 = restAdapter18.profiler;
        retrofit.RestAdapter.LogLevel logLevel80 = restAdapter18.logLevel;
        restAdapter0.setLogLevel(logLevel80);
        retrofit.RequestInterceptor requestInterceptor82 = restAdapter0.requestInterceptor;
        retrofit.client.Response response84 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response86 = restAdapter0.logAndReplaceResponse("Retrofit-Idle", response84, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNotNull(converter15);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler24);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(restAdapter72);
        org.junit.Assert.assertNotNull(executor73);
        org.junit.Assert.assertNull(requestInterceptor78);
        org.junit.Assert.assertNull(profiler79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor82);
    }

    @Test
    public void test11973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11973");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.client.Client.Provider provider1 = null;
        restAdapter0.clientProvider = provider1;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        retrofit.RestAdapter.LogLevel logLevel7 = null;
        restAdapter0.logLevel = logLevel7;
        java.util.concurrent.Executor executor9 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor10 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter11 = null;
        restAdapter0.converter = converter11;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(logLevel13);
    }

    @Test
    public void test11974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11974");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel3 = builder0.logLevel;
        java.util.concurrent.Executor executor4 = builder0.httpExecutor;
        retrofit.Profiler profiler5 = null;
        builder0.profiler = profiler5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = builder7.errorHandler;
        retrofit.client.Client.Provider provider9 = builder7.clientProvider;
        retrofit.ErrorHandler errorHandler10 = builder7.errorHandler;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.RestAdapter.LogLevel logLevel13 = builder11.logLevel;
        builder11.ensureSaneDefaults();
        retrofit.client.Client.Provider provider15 = null;
        builder11.clientProvider = provider15;
        retrofit.ErrorHandler errorHandler17 = builder11.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel18 = builder11.logLevel;
        java.util.concurrent.Executor executor19 = builder11.callbackExecutor;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.httpExecutor = executor21;
        retrofit.RestAdapter.Builder builder24 = builder20.setServer("hi!");
        java.util.concurrent.Executor executor25 = null;
        builder20.httpExecutor = executor25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log28 = restAdapter27.log;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        restAdapter27.requestInterceptor = requestInterceptor29;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter31.logLevel = logLevel33;
        retrofit.Profiler profiler35 = restAdapter31.profiler;
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter38 = builder37.converter;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor40 = restAdapter39.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        restAdapter39.requestInterceptor = requestInterceptor41;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel52);
        restAdapter39.log = log51;
        retrofit.ErrorHandler errorHandler55 = null;
        restAdapter39.errorHandler = errorHandler55;
        retrofit.RestAdapter.Log log57 = restAdapter39.log;
        retrofit.RestAdapter.Builder builder58 = builder37.setLog(log57);
        retrofit.Profiler profiler59 = builder58.profiler;
        retrofit.RestAdapter.LogLevel logLevel60 = builder58.logLevel;
        restAdapter31.logLevel = logLevel60;
        java.util.concurrent.Executor executor62 = restAdapter31.callbackExecutor;
        retrofit.Server server63 = restAdapter31.server;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter65 = builder64.converter;
        retrofit.Profiler profiler66 = null;
        builder64.profiler = profiler66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor69 = null;
        builder68.httpExecutor = executor69;
        retrofit.client.Client.Provider provider71 = null;
        builder68.clientProvider = provider71;
        retrofit.RestAdapter.Builder builder74 = builder68.setServer("hi!");
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor76 = null;
        builder75.httpExecutor = executor76;
        retrofit.RestAdapter.Builder builder79 = builder75.setServer("hi!");
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder81 = builder75.setLog(log80);
        retrofit.RestAdapter restAdapter82 = builder75.build();
        java.util.concurrent.Executor executor83 = restAdapter82.httpExecutor;
        builder74.callbackExecutor = executor83;
        builder64.callbackExecutor = executor83;
        restAdapter31.httpExecutor = executor83;
        restAdapter27.callbackExecutor = executor83;
        builder20.callbackExecutor = executor83;
        java.util.concurrent.Executor executor89 = builder20.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor90 = builder20.requestInterceptor;
        java.util.concurrent.Executor executor91 = builder20.callbackExecutor;
        retrofit.RestAdapter.Builder builder92 = builder7.setExecutors(executor19, executor91);
        builder0.httpExecutor = executor91;
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(errorHandler17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler35);
        org.junit.Assert.assertNull(converter38);
        org.junit.Assert.assertNull(requestInterceptor40);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(profiler59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(server63);
        org.junit.Assert.assertNull(converter65);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(restAdapter82);
        org.junit.Assert.assertNotNull(executor83);
        org.junit.Assert.assertNotNull(executor89);
        org.junit.Assert.assertNull(requestInterceptor90);
        org.junit.Assert.assertNotNull(executor91);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test11975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11975");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList5, typedOutput9);
        java.util.List<retrofit.client.Header> headerList11 = request10.getHeaders();
        java.lang.String str12 = request10.getMethod();
        java.lang.String str13 = request10.getMethod();
        java.lang.String str14 = request10.getMethod();
        retrofit.mime.TypedOutput typedOutput15 = request10.getBody();
        java.lang.String str16 = request10.getMethod();
        retrofit.mime.TypedOutput typedOutput17 = request10.getBody();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-Idle" + "'", str14, "Retrofit-Idle");
        org.junit.Assert.assertNull(typedOutput15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertNull(typedOutput17);
    }

    @Test
    public void test11976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11976");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder0.requestInterceptor = requestInterceptor20;
        retrofit.RestAdapter restAdapter22 = builder0.build();
        retrofit.Server server23 = builder0.server;
        retrofit.Profiler profiler24 = null;
        builder0.profiler = profiler24;
        retrofit.RestAdapter restAdapter26 = builder0.build();
        retrofit.client.Client.Provider provider27 = builder0.clientProvider;
        retrofit.Profiler profiler28 = builder0.profiler;
        retrofit.Profiler profiler29 = builder0.profiler;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = builder30.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor32 = builder30.requestInterceptor;
        retrofit.Profiler profiler33 = builder30.profiler;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler35 = builder34.errorHandler;
        retrofit.RestAdapter.Log log36 = builder34.log;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter38 = builder37.converter;
        retrofit.RestAdapter.LogLevel logLevel39 = builder37.logLevel;
        builder37.ensureSaneDefaults();
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = builder49.setServer("hi!");
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder49.setLog(log54);
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter56.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter56.logLevel = logLevel58;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        restAdapter56.requestInterceptor = requestInterceptor60;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter56.logLevel = logLevel62;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log54, logLevel62);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = null;
        builder65.httpExecutor = executor66;
        retrofit.RestAdapter.Builder builder69 = builder65.setServer("hi!");
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder65.setLog(log70);
        restAdapter64.log = log70;
        builder37.log = log70;
        java.util.concurrent.Executor executor74 = null;
        builder37.httpExecutor = executor74;
        retrofit.converter.Converter converter76 = null;
        builder37.converter = converter76;
        retrofit.ErrorHandler errorHandler78 = builder37.errorHandler;
        retrofit.RestAdapter.Builder builder79 = builder34.setErrorHandler(errorHandler78);
        retrofit.RestAdapter.Builder builder80 = builder30.setErrorHandler(errorHandler78);
        retrofit.ErrorHandler errorHandler81 = builder30.errorHandler;
        retrofit.RestAdapter.Builder builder82 = builder0.setErrorHandler(errorHandler81);
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor84 = builder83.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor85 = builder83.requestInterceptor;
        java.util.concurrent.Executor executor86 = builder83.httpExecutor;
        retrofit.RestAdapter.Builder builder88 = builder83.setServer("hi!");
        retrofit.RestAdapter.Log log89 = builder83.log;
        retrofit.RestAdapter restAdapter90 = builder83.build();
        retrofit.ErrorHandler errorHandler91 = builder83.errorHandler;
        retrofit.RestAdapter.Builder builder92 = builder0.setErrorHandler(errorHandler91);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNotNull(restAdapter22);
        org.junit.Assert.assertNotNull(server23);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNotNull(provider27);
        org.junit.Assert.assertNull(profiler28);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(requestInterceptor32);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertNull(converter38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(errorHandler78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(errorHandler81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(executor84);
        org.junit.Assert.assertNull(requestInterceptor85);
        org.junit.Assert.assertNull(executor86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNull(log89);
        org.junit.Assert.assertNotNull(restAdapter90);
        org.junit.Assert.assertNotNull(errorHandler91);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test11977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11977");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        builder0.ensureSaneDefaults();
        retrofit.Profiler profiler6 = null;
        builder0.profiler = profiler6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.Profiler profiler10 = null;
        builder8.profiler = profiler10;
        retrofit.ErrorHandler errorHandler12 = null;
        builder8.errorHandler = errorHandler12;
        retrofit.Server server14 = builder8.server;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter16 = builder15.converter;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter17.requestInterceptor = requestInterceptor19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        restAdapter17.log = log29;
        retrofit.ErrorHandler errorHandler33 = null;
        restAdapter17.errorHandler = errorHandler33;
        retrofit.RestAdapter.Log log35 = restAdapter17.log;
        retrofit.RestAdapter.Builder builder36 = builder15.setLog(log35);
        builder15.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.httpExecutor = executor39;
        retrofit.RestAdapter.Builder builder42 = builder38.setServer("hi!");
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder38.setLog(log43);
        retrofit.RestAdapter restAdapter45 = builder38.build();
        java.util.concurrent.Executor executor46 = restAdapter45.httpExecutor;
        builder15.callbackExecutor = executor46;
        builder8.httpExecutor = executor46;
        java.util.concurrent.Executor executor49 = builder8.httpExecutor;
        builder0.httpExecutor = executor49;
        retrofit.RestAdapter.LogLevel logLevel51 = builder0.logLevel;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(restAdapter45);
        org.junit.Assert.assertNotNull(executor46);
        org.junit.Assert.assertNotNull(executor49);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test11978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11978");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        java.util.concurrent.Executor executor14 = null;
        builder9.httpExecutor = executor14;
        retrofit.RestAdapter restAdapter16 = builder9.build();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter18 = builder17.converter;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter19.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        restAdapter19.requestInterceptor = requestInterceptor21;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel32);
        restAdapter19.log = log31;
        retrofit.ErrorHandler errorHandler35 = null;
        restAdapter19.errorHandler = errorHandler35;
        retrofit.RestAdapter.Log log37 = restAdapter19.log;
        retrofit.RestAdapter.Builder builder38 = builder17.setLog(log37);
        retrofit.Profiler profiler39 = builder38.profiler;
        retrofit.Profiler profiler40 = builder38.profiler;
        java.util.concurrent.Executor executor41 = builder38.callbackExecutor;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.httpExecutor = executor43;
        retrofit.RestAdapter.Builder builder46 = builder42.setServer("hi!");
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder48 = builder42.setLog(log47);
        retrofit.RestAdapter restAdapter49 = builder42.build();
        java.util.concurrent.Executor executor50 = restAdapter49.httpExecutor;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = null;
        builder51.httpExecutor = executor52;
        retrofit.client.Client.Provider provider54 = null;
        builder51.clientProvider = provider54;
        retrofit.RestAdapter.Builder builder57 = builder51.setServer("hi!");
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.httpExecutor = executor59;
        retrofit.RestAdapter.Builder builder62 = builder58.setServer("hi!");
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder64 = builder58.setLog(log63);
        retrofit.RestAdapter restAdapter65 = builder58.build();
        java.util.concurrent.Executor executor66 = restAdapter65.httpExecutor;
        builder57.callbackExecutor = executor66;
        retrofit.RestAdapter.Builder builder68 = builder38.setExecutors(executor50, executor66);
        restAdapter16.httpExecutor = executor50;
        retrofit.client.Client.Provider provider70 = null;
        restAdapter16.clientProvider = provider70;
        retrofit.ErrorHandler errorHandler72 = restAdapter16.errorHandler;
        retrofit.RestAdapter.Builder builder73 = builder0.setErrorHandler(errorHandler72);
        retrofit.RestAdapter.LogLevel logLevel74 = builder73.logLevel;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(profiler39);
        org.junit.Assert.assertNull(profiler40);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(restAdapter49);
        org.junit.Assert.assertNotNull(executor50);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertNotNull(executor66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(errorHandler72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test11979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11979");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder4.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter restAdapter9 = builder4.build();
        retrofit.Server server10 = builder4.server;
        retrofit.Server server11 = builder4.server;
        retrofit.ErrorHandler errorHandler12 = builder4.errorHandler;
        retrofit.Server server13 = builder4.server;
        retrofit.RestAdapter.LogLevel logLevel14 = builder4.logLevel;
        retrofit.converter.Converter converter15 = builder4.converter;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNotNull(server10);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNotNull(errorHandler12);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(converter15);
    }

    @Test
    public void test11980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11980");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor26 = builder25.httpExecutor;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter27.logLevel;
        java.util.concurrent.Executor executor30 = restAdapter27.httpExecutor;
        retrofit.converter.Converter converter31 = null;
        restAdapter27.converter = converter31;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter33.requestInterceptor;
        retrofit.converter.Converter converter35 = restAdapter33.converter;
        java.util.concurrent.Executor executor36 = null;
        restAdapter33.callbackExecutor = executor36;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor39 = null;
        restAdapter38.httpExecutor = executor39;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        restAdapter38.requestInterceptor = requestInterceptor41;
        retrofit.RestAdapter.Log log43 = restAdapter38.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter38.logLevel = logLevel44;
        restAdapter33.logLevel = logLevel44;
        restAdapter27.logLevel = logLevel44;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter48.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter48.logLevel = logLevel50;
        restAdapter27.logLevel = logLevel50;
        retrofit.RestAdapter.Builder builder53 = builder25.setLogLevel(logLevel50);
        retrofit.client.Client.Provider provider54 = builder25.clientProvider;
        retrofit.Server server55 = builder25.server;
        retrofit.Profiler profiler56 = builder25.profiler;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNull(converter35);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(provider54);
        org.junit.Assert.assertNotNull(server55);
        org.junit.Assert.assertNull(profiler56);
    }

    @Test
    public void test11981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11981");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        builder0.requestInterceptor = requestInterceptor3;
        retrofit.RequestInterceptor requestInterceptor5 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.httpExecutor = executor7;
        retrofit.RestAdapter.Builder builder10 = builder6.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder6.logLevel = logLevel11;
        retrofit.converter.Converter converter13 = null;
        builder6.converter = converter13;
        retrofit.client.Client.Provider provider15 = null;
        builder6.clientProvider = provider15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter18 = builder17.converter;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter19.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        restAdapter19.requestInterceptor = requestInterceptor21;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel32);
        restAdapter19.log = log31;
        retrofit.ErrorHandler errorHandler35 = null;
        restAdapter19.errorHandler = errorHandler35;
        retrofit.RestAdapter.Log log37 = restAdapter19.log;
        retrofit.RestAdapter.Builder builder38 = builder17.setLog(log37);
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.httpExecutor = executor41;
        retrofit.RestAdapter.Builder builder44 = builder40.setServer("hi!");
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder46 = builder40.setLog(log45);
        retrofit.RestAdapter restAdapter47 = builder40.build();
        java.util.concurrent.Executor executor48 = restAdapter47.httpExecutor;
        builder17.callbackExecutor = executor48;
        builder6.httpExecutor = executor48;
        builder0.httpExecutor = executor48;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = null;
        builder52.httpExecutor = executor53;
        retrofit.RestAdapter.Builder builder56 = builder52.setServer("hi!");
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder52.setLog(log57);
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server59, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log67, logLevel68);
        builder52.logLevel = logLevel68;
        retrofit.converter.Converter converter71 = builder52.converter;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        builder52.requestInterceptor = requestInterceptor72;
        retrofit.RestAdapter restAdapter74 = builder52.build();
        retrofit.Server server75 = builder52.server;
        retrofit.RestAdapter.Builder builder76 = builder0.setServer(server75);
        retrofit.Profiler profiler77 = null;
        builder0.profiler = profiler77;
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(restAdapter47);
        org.junit.Assert.assertNotNull(executor48);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter71);
        org.junit.Assert.assertNotNull(restAdapter74);
        org.junit.Assert.assertNotNull(server75);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test11982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11982");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.Profiler profiler12 = null;
        builder11.profiler = profiler12;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        builder11.requestInterceptor = requestInterceptor14;
        retrofit.RestAdapter restAdapter16 = builder11.build();
        retrofit.converter.Converter converter17 = restAdapter16.converter;
        retrofit.RestAdapter.Builder builder18 = builder0.setConverter(converter17);
        retrofit.RestAdapter.LogLevel logLevel19 = builder18.logLevel;
        java.util.concurrent.Executor executor20 = builder18.httpExecutor;
        java.util.concurrent.Executor executor21 = builder18.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel22 = builder18.logLevel;
        boolean boolean23 = logLevel22.log();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(converter17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test11983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11983");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.ErrorHandler errorHandler5 = restAdapter0.errorHandler;
        retrofit.client.Client.Provider provider6 = null;
        restAdapter0.clientProvider = provider6;
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder15 = builder9.setLog(log14);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = builder16.callbackExecutor;
        retrofit.RestAdapter.Log log18 = builder16.log;
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel36);
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter38.logLevel = logLevel40;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter38.setLogLevel(logLevel42);
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log35, logLevel42);
        retrofit.RestAdapter.Builder builder45 = builder16.setLogLevel(logLevel42);
        retrofit.ErrorHandler errorHandler46 = null;
        builder45.errorHandler = errorHandler46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = builder48.callbackExecutor;
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel59);
        retrofit.RestAdapter.Builder builder61 = builder48.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder62 = builder45.setLogLevel(logLevel59);
        builder62.ensureSaneDefaults();
        retrofit.Server server64 = null;
        retrofit.client.Client.Provider provider65 = null;
        java.util.concurrent.Executor executor66 = null;
        java.util.concurrent.Executor executor67 = null;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        retrofit.converter.Converter converter69 = null;
        retrofit.Profiler profiler70 = null;
        retrofit.ErrorHandler errorHandler71 = null;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor73 = restAdapter72.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor74 = null;
        restAdapter72.requestInterceptor = requestInterceptor74;
        retrofit.Server server76 = null;
        retrofit.client.Client.Provider provider77 = null;
        java.util.concurrent.Executor executor78 = null;
        java.util.concurrent.Executor executor79 = null;
        retrofit.RequestInterceptor requestInterceptor80 = null;
        retrofit.converter.Converter converter81 = null;
        retrofit.Profiler profiler82 = null;
        retrofit.ErrorHandler errorHandler83 = null;
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel85 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter86 = new retrofit.RestAdapter(server76, provider77, executor78, executor79, requestInterceptor80, converter81, profiler82, errorHandler83, log84, logLevel85);
        restAdapter72.log = log84;
        retrofit.RestAdapter.LogLevel logLevel88 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean89 = logLevel88.log();
        retrofit.RestAdapter restAdapter90 = new retrofit.RestAdapter(server64, provider65, executor66, executor67, requestInterceptor68, converter69, profiler70, errorHandler71, log84, logLevel88);
        retrofit.RestAdapter.Builder builder91 = builder62.setLog(log84);
        retrofit.converter.Converter converter92 = builder62.converter;
        retrofit.RestAdapter.Builder builder93 = builder15.setConverter(converter92);
        restAdapter0.converter = converter92;
        retrofit.Profiler profiler95 = null;
        restAdapter0.profiler = profiler95;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(requestInterceptor73);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(converter92);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test11984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11984");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter7 = restAdapter0.converter;
        retrofit.ErrorHandler errorHandler8 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor9 = restAdapter0.callbackExecutor;
        retrofit.Server server10 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        java.util.concurrent.Executor executor16 = null;
        builder11.httpExecutor = executor16;
        retrofit.ErrorHandler errorHandler18 = builder11.errorHandler;
        java.util.concurrent.Executor executor19 = builder11.callbackExecutor;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter21 = builder20.converter;
        retrofit.Profiler profiler22 = null;
        builder20.profiler = profiler22;
        retrofit.RestAdapter.Builder builder25 = builder20.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter26 = builder25.converter;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.httpExecutor = executor28;
        retrofit.client.Client.Provider provider30 = null;
        builder27.clientProvider = provider30;
        retrofit.client.Client.Provider provider32 = builder27.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder34 = builder27.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.httpExecutor = executor36;
        retrofit.RestAdapter.Builder builder39 = builder35.setServer("hi!");
        retrofit.Profiler profiler40 = null;
        builder39.profiler = profiler40;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        builder39.requestInterceptor = requestInterceptor42;
        retrofit.RestAdapter restAdapter44 = builder39.build();
        retrofit.converter.Converter converter45 = restAdapter44.converter;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        log46.log("");
        restAdapter44.log = log46;
        retrofit.RestAdapter.Builder builder50 = builder27.setLog(log46);
        retrofit.RestAdapter.Builder builder51 = builder25.setLog(log46);
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter53 = builder52.converter;
        retrofit.RestAdapter.LogLevel logLevel54 = builder52.logLevel;
        builder52.ensureSaneDefaults();
        retrofit.client.Client.Provider provider56 = null;
        builder52.clientProvider = provider56;
        retrofit.Server server58 = null;
        retrofit.client.Client.Provider provider59 = null;
        java.util.concurrent.Executor executor60 = null;
        java.util.concurrent.Executor executor61 = null;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        retrofit.converter.Converter converter63 = null;
        retrofit.Profiler profiler64 = null;
        retrofit.ErrorHandler errorHandler65 = null;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = null;
        builder66.httpExecutor = executor67;
        retrofit.RestAdapter.Builder builder70 = builder66.setServer("hi!");
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder72 = builder66.setLog(log71);
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter73.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter73.logLevel = logLevel75;
        retrofit.RequestInterceptor requestInterceptor77 = null;
        restAdapter73.requestInterceptor = requestInterceptor77;
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter73.logLevel = logLevel79;
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server58, provider59, executor60, executor61, requestInterceptor62, converter63, profiler64, errorHandler65, log71, logLevel79);
        builder52.logLevel = logLevel79;
        retrofit.RestAdapter.LogLevel logLevel83 = builder52.logLevel;
        retrofit.RestAdapter.Builder builder84 = builder25.setLogLevel(logLevel83);
        boolean boolean85 = logLevel83.log();
        retrofit.RestAdapter.Builder builder86 = builder11.setLogLevel(logLevel83);
        restAdapter0.setLogLevel(logLevel83);
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(converter26);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNotNull(converter45);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(converter53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(logLevel74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test11985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11985");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        restAdapter0.server = server4;
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        java.util.concurrent.Executor executor12 = null;
        builder7.httpExecutor = executor12;
        retrofit.RestAdapter restAdapter14 = builder7.build();
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter16 = builder15.converter;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter17.requestInterceptor = requestInterceptor19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        restAdapter17.log = log29;
        retrofit.ErrorHandler errorHandler33 = null;
        restAdapter17.errorHandler = errorHandler33;
        retrofit.RestAdapter.Log log35 = restAdapter17.log;
        retrofit.RestAdapter.Builder builder36 = builder15.setLog(log35);
        retrofit.Profiler profiler37 = builder36.profiler;
        retrofit.Profiler profiler38 = builder36.profiler;
        java.util.concurrent.Executor executor39 = builder36.callbackExecutor;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.httpExecutor = executor41;
        retrofit.RestAdapter.Builder builder44 = builder40.setServer("hi!");
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder46 = builder40.setLog(log45);
        retrofit.RestAdapter restAdapter47 = builder40.build();
        java.util.concurrent.Executor executor48 = restAdapter47.httpExecutor;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.client.Client.Provider provider52 = null;
        builder49.clientProvider = provider52;
        retrofit.RestAdapter.Builder builder55 = builder49.setServer("hi!");
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = null;
        builder56.httpExecutor = executor57;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = builder56.setLog(log61);
        retrofit.RestAdapter restAdapter63 = builder56.build();
        java.util.concurrent.Executor executor64 = restAdapter63.httpExecutor;
        builder55.callbackExecutor = executor64;
        retrofit.RestAdapter.Builder builder66 = builder36.setExecutors(executor48, executor64);
        restAdapter14.httpExecutor = executor48;
        retrofit.Server server68 = null;
        retrofit.client.Client.Provider provider69 = null;
        java.util.concurrent.Executor executor70 = null;
        java.util.concurrent.Executor executor71 = null;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        retrofit.converter.Converter converter73 = null;
        retrofit.Profiler profiler74 = null;
        retrofit.ErrorHandler errorHandler75 = null;
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter(server68, provider69, executor70, executor71, requestInterceptor72, converter73, profiler74, errorHandler75, log76, logLevel77);
        restAdapter14.logLevel = logLevel77;
        retrofit.ErrorHandler errorHandler80 = restAdapter14.errorHandler;
        retrofit.RequestInterceptor requestInterceptor81 = restAdapter14.requestInterceptor;
        retrofit.converter.Converter converter82 = restAdapter14.converter;
        retrofit.RestAdapter.LogLevel logLevel83 = restAdapter14.getLogLevel();
        restAdapter0.logLevel = logLevel83;
        retrofit.RestAdapter.Log log85 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel86 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(profiler37);
        org.junit.Assert.assertNull(profiler38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(restAdapter47);
        org.junit.Assert.assertNotNull(executor48);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(restAdapter63);
        org.junit.Assert.assertNotNull(executor64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(errorHandler80);
        org.junit.Assert.assertNotNull(requestInterceptor81);
        org.junit.Assert.assertNotNull(converter82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(log85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test11986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11986");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.converter.Converter converter5 = null;
        restAdapter2.converter = converter5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Log log27 = restAdapter9.log;
        retrofit.RestAdapter.Builder builder28 = builder7.setLog(log27);
        restAdapter2.log = log27;
        log27.log("");
        log27.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder34 = builder0.setLog(log27);
        retrofit.Profiler profiler35 = null;
        builder0.profiler = profiler35;
        retrofit.Profiler profiler37 = null;
        builder0.profiler = profiler37;
        retrofit.Server server39 = builder0.server;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.httpExecutor = executor41;
        retrofit.client.Client.Provider provider43 = null;
        builder40.clientProvider = provider43;
        retrofit.RestAdapter.Builder builder46 = builder40.setServer("hi!");
        retrofit.Profiler profiler47 = builder40.profiler;
        retrofit.RestAdapter restAdapter48 = builder40.build();
        retrofit.RestAdapter.Log log49 = restAdapter48.log;
        log49.log("hi!");
        retrofit.RestAdapter.Builder builder52 = builder0.setLog(log49);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(profiler47);
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test11987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11987");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.Profiler profiler5 = builder0.profiler;
        java.util.concurrent.Executor executor6 = builder0.httpExecutor;
        retrofit.converter.Converter converter7 = builder0.converter;
        java.util.concurrent.Executor executor8 = builder0.httpExecutor;
        retrofit.converter.Converter converter9 = builder0.converter;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter11.getLogLevel();
        retrofit.Server server13 = restAdapter11.server;
        retrofit.Profiler profiler14 = null;
        restAdapter11.profiler = profiler14;
        retrofit.ErrorHandler errorHandler16 = restAdapter11.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter11.getLogLevel();
        retrofit.ErrorHandler errorHandler18 = restAdapter11.errorHandler;
        retrofit.Profiler profiler19 = restAdapter11.profiler;
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter11.requestInterceptor;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.httpExecutor = executor22;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("hi!");
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder27 = builder21.setLog(log26);
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel37);
        builder21.logLevel = logLevel37;
        retrofit.converter.Converter converter40 = builder21.converter;
        retrofit.ErrorHandler errorHandler41 = builder21.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel42 = builder21.logLevel;
        retrofit.Server server43 = builder21.server;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter45 = builder44.converter;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor47 = restAdapter46.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        restAdapter46.requestInterceptor = requestInterceptor48;
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel59);
        restAdapter46.log = log58;
        retrofit.ErrorHandler errorHandler62 = null;
        restAdapter46.errorHandler = errorHandler62;
        retrofit.RestAdapter.Log log64 = restAdapter46.log;
        retrofit.RestAdapter.Builder builder65 = builder44.setLog(log64);
        retrofit.RequestInterceptor requestInterceptor66 = builder44.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor67 = builder44.requestInterceptor;
        retrofit.RestAdapter.Builder builder69 = builder44.setServer("hi!");
        retrofit.Server server70 = builder44.server;
        retrofit.RestAdapter.LogLevel logLevel71 = builder44.logLevel;
        builder21.logLevel = logLevel71;
        retrofit.Server server73 = builder21.server;
        restAdapter11.server = server73;
        builder0.server = server73;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter40);
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server43);
        org.junit.Assert.assertNull(converter45);
        org.junit.Assert.assertNull(requestInterceptor47);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(requestInterceptor66);
        org.junit.Assert.assertNull(requestInterceptor67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(server70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(server73);
    }

    @Test
    public void test11988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11988");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor4 = null;
        builder3.httpExecutor = executor4;
        retrofit.RestAdapter.Builder builder7 = builder3.setServer("hi!");
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder3.setLog(log8);
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log18, logLevel19);
        builder3.logLevel = logLevel19;
        retrofit.converter.Converter converter22 = builder3.converter;
        retrofit.ErrorHandler errorHandler23 = builder3.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel24 = builder3.logLevel;
        retrofit.Server server25 = builder3.server;
        builder0.server = server25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter27.logLevel = logLevel29;
        retrofit.Profiler profiler31 = restAdapter27.profiler;
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter34 = builder33.converter;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor36 = restAdapter35.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        restAdapter35.requestInterceptor = requestInterceptor37;
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel48);
        restAdapter35.log = log47;
        retrofit.ErrorHandler errorHandler51 = null;
        restAdapter35.errorHandler = errorHandler51;
        retrofit.RestAdapter.Log log53 = restAdapter35.log;
        retrofit.RestAdapter.Builder builder54 = builder33.setLog(log53);
        retrofit.Profiler profiler55 = builder54.profiler;
        retrofit.RestAdapter.LogLevel logLevel56 = builder54.logLevel;
        restAdapter27.logLevel = logLevel56;
        java.util.concurrent.Executor executor58 = restAdapter27.callbackExecutor;
        retrofit.Server server59 = restAdapter27.server;
        retrofit.RestAdapter.LogLevel logLevel60 = null;
        restAdapter27.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter63 = builder62.converter;
        retrofit.Profiler profiler64 = null;
        builder62.profiler = profiler64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = null;
        builder66.httpExecutor = executor67;
        retrofit.client.Client.Provider provider69 = null;
        builder66.clientProvider = provider69;
        retrofit.RestAdapter.Builder builder72 = builder66.setServer("hi!");
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor74 = null;
        builder73.httpExecutor = executor74;
        retrofit.RestAdapter.Builder builder77 = builder73.setServer("hi!");
        retrofit.RestAdapter.Log log78 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder79 = builder73.setLog(log78);
        retrofit.RestAdapter restAdapter80 = builder73.build();
        java.util.concurrent.Executor executor81 = restAdapter80.httpExecutor;
        builder72.callbackExecutor = executor81;
        builder62.callbackExecutor = executor81;
        restAdapter27.httpExecutor = executor81;
        builder0.httpExecutor = executor81;
        retrofit.client.Client.Provider provider86 = builder0.clientProvider;
        java.util.concurrent.Executor executor87 = builder0.callbackExecutor;
        retrofit.RestAdapter restAdapter88 = builder0.build();
        retrofit.Profiler profiler89 = null;
        restAdapter88.profiler = profiler89;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(profiler55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNull(server59);
        org.junit.Assert.assertNull(converter63);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNotNull(executor81);
        org.junit.Assert.assertNull(provider86);
        org.junit.Assert.assertNull(executor87);
        org.junit.Assert.assertNotNull(restAdapter88);
    }

    @Test
    public void test11989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11989");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = restAdapter0.httpExecutor;
        retrofit.Server server5 = null;
        restAdapter0.server = server5;
        retrofit.client.Client.Provider provider7 = restAdapter0.clientProvider;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter9 = null;
        restAdapter8.converter = converter9;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter8.requestInterceptor = requestInterceptor11;
        retrofit.Profiler profiler13 = null;
        restAdapter8.profiler = profiler13;
        retrofit.Profiler profiler15 = null;
        restAdapter8.profiler = profiler15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        retrofit.converter.Converter converter19 = restAdapter17.converter;
        java.util.concurrent.Executor executor20 = restAdapter17.httpExecutor;
        retrofit.Profiler profiler21 = null;
        restAdapter17.profiler = profiler21;
        java.util.concurrent.Executor executor23 = restAdapter17.httpExecutor;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter24.logLevel = logLevel26;
        retrofit.Profiler profiler28 = restAdapter24.profiler;
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter31 = builder30.converter;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter32.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter32.requestInterceptor = requestInterceptor34;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        restAdapter32.log = log44;
        retrofit.ErrorHandler errorHandler48 = null;
        restAdapter32.errorHandler = errorHandler48;
        retrofit.RestAdapter.Log log50 = restAdapter32.log;
        retrofit.RestAdapter.Builder builder51 = builder30.setLog(log50);
        retrofit.Profiler profiler52 = builder51.profiler;
        retrofit.RestAdapter.LogLevel logLevel53 = builder51.logLevel;
        restAdapter24.logLevel = logLevel53;
        java.util.concurrent.Executor executor55 = restAdapter24.callbackExecutor;
        retrofit.Server server56 = restAdapter24.server;
        retrofit.RestAdapter.LogLevel logLevel57 = null;
        restAdapter24.setLogLevel(logLevel57);
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter60 = builder59.converter;
        retrofit.Profiler profiler61 = null;
        builder59.profiler = profiler61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor64 = null;
        builder63.httpExecutor = executor64;
        retrofit.client.Client.Provider provider66 = null;
        builder63.clientProvider = provider66;
        retrofit.RestAdapter.Builder builder69 = builder63.setServer("hi!");
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor71 = null;
        builder70.httpExecutor = executor71;
        retrofit.RestAdapter.Builder builder74 = builder70.setServer("hi!");
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder76 = builder70.setLog(log75);
        retrofit.RestAdapter restAdapter77 = builder70.build();
        java.util.concurrent.Executor executor78 = restAdapter77.httpExecutor;
        builder69.callbackExecutor = executor78;
        builder59.callbackExecutor = executor78;
        restAdapter24.httpExecutor = executor78;
        restAdapter17.httpExecutor = executor78;
        restAdapter8.httpExecutor = executor78;
        restAdapter0.httpExecutor = executor78;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler28);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(profiler52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor55);
        org.junit.Assert.assertNull(server56);
        org.junit.Assert.assertNull(converter60);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(restAdapter77);
        org.junit.Assert.assertNotNull(executor78);
    }

    @Test
    public void test11990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11990");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.client.Client.Provider provider10 = null;
        builder7.clientProvider = provider10;
        retrofit.client.Client.Provider provider12 = builder7.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.httpExecutor = executor16;
        retrofit.RestAdapter.Builder builder19 = builder15.setServer("hi!");
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        builder19.requestInterceptor = requestInterceptor22;
        retrofit.RestAdapter restAdapter24 = builder19.build();
        retrofit.converter.Converter converter25 = restAdapter24.converter;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        log26.log("");
        restAdapter24.log = log26;
        retrofit.RestAdapter.Builder builder30 = builder7.setLog(log26);
        retrofit.RestAdapter.Builder builder31 = builder5.setLog(log26);
        java.util.concurrent.Executor executor32 = builder31.httpExecutor;
        retrofit.client.Client.Provider provider33 = builder31.clientProvider;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("hi!");
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder40 = builder36.setServer("hi!");
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder36.setLog(log41);
        retrofit.ErrorHandler errorHandler43 = builder36.errorHandler;
        retrofit.client.Client.Provider provider44 = builder36.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel45 = builder36.logLevel;
        retrofit.Server server46 = null;
        builder36.server = server46;
        retrofit.Server server48 = builder36.server;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.client.Client.Provider provider52 = null;
        builder49.clientProvider = provider52;
        retrofit.client.Client.Provider provider54 = builder49.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder56 = builder49.setLogLevel(logLevel55);
        java.util.concurrent.Executor executor57 = builder56.callbackExecutor;
        builder56.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor60 = null;
        builder59.httpExecutor = executor60;
        retrofit.client.Client.Provider provider62 = null;
        builder59.clientProvider = provider62;
        retrofit.RestAdapter.Builder builder65 = builder59.setServer("hi!");
        retrofit.Profiler profiler66 = builder59.profiler;
        retrofit.RestAdapter restAdapter67 = builder59.build();
        retrofit.converter.Converter converter68 = restAdapter67.converter;
        retrofit.RestAdapter.Builder builder69 = builder56.setConverter(converter68);
        builder36.converter = converter68;
        retrofit.RestAdapter.Builder builder71 = builder35.setConverter(converter68);
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(converter25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(provider33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server48);
        org.junit.Assert.assertNull(provider54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(profiler66);
        org.junit.Assert.assertNotNull(restAdapter67);
        org.junit.Assert.assertNotNull(converter68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test11991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11991");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.RestAdapter restAdapter8 = builder0.build();
        retrofit.RestAdapter.Log log9 = restAdapter8.log;
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter8.requestInterceptor;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNotNull(restAdapter8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(requestInterceptor11);
    }

    @Test
    public void test11992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11992");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor3 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.Profiler profiler5 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler6 = restAdapter0.errorHandler;
        retrofit.client.Header[] headerArray11 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList12 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList12, headerArray11);
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList12, typedOutput14);
        java.lang.String str16 = request15.getUrl();
        java.util.List<retrofit.client.Header> headerList17 = request15.getHeaders();
        java.lang.String str18 = request15.getMethod();
        retrofit.mime.TypedOutput typedOutput19 = request15.getBody();
        java.util.List<retrofit.client.Header> headerList20 = request15.getHeaders();
        java.lang.String str21 = request15.getUrl();
        java.lang.String str22 = request15.getUrl();
        retrofit.mime.TypedOutput typedOutput23 = request15.getBody();
        java.util.List<retrofit.client.Header> headerList24 = request15.getHeaders();
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "", headerList24, typedOutput25);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request27 = restAdapter0.logAndReplaceRequest(request26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNotNull(headerArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(typedOutput19);
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(typedOutput23);
        org.junit.Assert.assertNotNull(headerList24);
    }

    @Test
    public void test11993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11993");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler5 = builder4.errorHandler;
        retrofit.RestAdapter.Log log6 = builder4.log;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        builder7.ensureSaneDefaults();
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.httpExecutor = executor20;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("hi!");
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder19.setLog(log24);
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter26.logLevel = logLevel28;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter26.requestInterceptor = requestInterceptor30;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter26.logLevel = logLevel32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log24, logLevel32);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.httpExecutor = executor36;
        retrofit.RestAdapter.Builder builder39 = builder35.setServer("hi!");
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder35.setLog(log40);
        restAdapter34.log = log40;
        builder7.log = log40;
        java.util.concurrent.Executor executor44 = null;
        builder7.httpExecutor = executor44;
        retrofit.converter.Converter converter46 = null;
        builder7.converter = converter46;
        retrofit.ErrorHandler errorHandler48 = builder7.errorHandler;
        retrofit.RestAdapter.Builder builder49 = builder4.setErrorHandler(errorHandler48);
        retrofit.RestAdapter.Builder builder50 = builder0.setErrorHandler(errorHandler48);
        java.util.concurrent.Executor executor51 = builder50.httpExecutor;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter53 = builder52.converter;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor55 = restAdapter54.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        restAdapter54.requestInterceptor = requestInterceptor56;
        retrofit.Server server58 = null;
        retrofit.client.Client.Provider provider59 = null;
        java.util.concurrent.Executor executor60 = null;
        java.util.concurrent.Executor executor61 = null;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        retrofit.converter.Converter converter63 = null;
        retrofit.Profiler profiler64 = null;
        retrofit.ErrorHandler errorHandler65 = null;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server58, provider59, executor60, executor61, requestInterceptor62, converter63, profiler64, errorHandler65, log66, logLevel67);
        restAdapter54.log = log66;
        retrofit.ErrorHandler errorHandler70 = null;
        restAdapter54.errorHandler = errorHandler70;
        retrofit.RestAdapter.Log log72 = restAdapter54.log;
        retrofit.RestAdapter.Builder builder73 = builder52.setLog(log72);
        retrofit.Profiler profiler74 = builder73.profiler;
        retrofit.Profiler profiler75 = builder73.profiler;
        java.util.concurrent.Executor executor76 = builder73.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor77 = null;
        builder73.requestInterceptor = requestInterceptor77;
        builder73.ensureSaneDefaults();
        retrofit.client.Client.Provider provider80 = builder73.clientProvider;
        retrofit.RequestInterceptor requestInterceptor81 = builder73.requestInterceptor;
        builder50.requestInterceptor = requestInterceptor81;
        retrofit.RequestInterceptor requestInterceptor83 = builder50.requestInterceptor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(log6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(errorHandler48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(converter53);
        org.junit.Assert.assertNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(profiler74);
        org.junit.Assert.assertNull(profiler75);
        org.junit.Assert.assertNull(executor76);
        org.junit.Assert.assertNotNull(provider80);
        org.junit.Assert.assertNotNull(requestInterceptor81);
        org.junit.Assert.assertNotNull(requestInterceptor83);
    }

    @Test
    public void test11994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11994");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = restAdapter0.httpExecutor;
        retrofit.Server server5 = null;
        restAdapter0.server = server5;
        retrofit.client.Client.Provider provider7 = restAdapter0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor9 = restAdapter0.callbackExecutor;
        retrofit.ErrorHandler errorHandler10 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(errorHandler10);
    }

    @Test
    public void test11995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11995");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder7.setLog(log12);
        retrofit.RestAdapter restAdapter14 = builder7.build();
        java.util.concurrent.Executor executor15 = restAdapter14.httpExecutor;
        builder6.callbackExecutor = executor15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter18 = builder17.converter;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter19.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        restAdapter19.requestInterceptor = requestInterceptor21;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel32);
        restAdapter19.log = log31;
        retrofit.ErrorHandler errorHandler35 = null;
        restAdapter19.errorHandler = errorHandler35;
        retrofit.RestAdapter.Log log37 = restAdapter19.log;
        retrofit.RestAdapter.Builder builder38 = builder17.setLog(log37);
        retrofit.Profiler profiler39 = builder38.profiler;
        retrofit.Profiler profiler40 = builder38.profiler;
        java.util.concurrent.Executor executor41 = builder38.callbackExecutor;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.httpExecutor = executor43;
        retrofit.RestAdapter.Builder builder46 = builder42.setServer("hi!");
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder48 = builder42.setLog(log47);
        retrofit.RestAdapter restAdapter49 = builder42.build();
        java.util.concurrent.Executor executor50 = restAdapter49.httpExecutor;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = null;
        builder51.httpExecutor = executor52;
        retrofit.client.Client.Provider provider54 = null;
        builder51.clientProvider = provider54;
        retrofit.RestAdapter.Builder builder57 = builder51.setServer("hi!");
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.httpExecutor = executor59;
        retrofit.RestAdapter.Builder builder62 = builder58.setServer("hi!");
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder64 = builder58.setLog(log63);
        retrofit.RestAdapter restAdapter65 = builder58.build();
        java.util.concurrent.Executor executor66 = restAdapter65.httpExecutor;
        builder57.callbackExecutor = executor66;
        retrofit.RestAdapter.Builder builder68 = builder38.setExecutors(executor50, executor66);
        builder6.callbackExecutor = executor66;
        retrofit.client.Client.Provider provider70 = builder6.clientProvider;
        retrofit.RequestInterceptor requestInterceptor71 = builder6.requestInterceptor;
        retrofit.converter.Converter converter72 = builder6.converter;
        retrofit.RequestInterceptor requestInterceptor73 = builder6.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor74 = builder6.requestInterceptor;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(profiler39);
        org.junit.Assert.assertNull(profiler40);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(restAdapter49);
        org.junit.Assert.assertNotNull(executor50);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertNotNull(executor66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(provider70);
        org.junit.Assert.assertNull(requestInterceptor71);
        org.junit.Assert.assertNull(converter72);
        org.junit.Assert.assertNull(requestInterceptor73);
        org.junit.Assert.assertNull(requestInterceptor74);
    }

    @Test
    public void test11996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11996");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.client.Client.Provider provider23 = builder21.clientProvider;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("Retrofit-Idle");
        java.util.concurrent.Executor executor26 = builder21.httpExecutor;
        retrofit.Profiler profiler27 = builder21.profiler;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("hi!");
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder28.setLog(log33);
        retrofit.RestAdapter restAdapter35 = builder28.build();
        retrofit.converter.Converter converter36 = null;
        builder28.converter = converter36;
        retrofit.ErrorHandler errorHandler38 = null;
        builder28.errorHandler = errorHandler38;
        retrofit.RequestInterceptor requestInterceptor40 = builder28.requestInterceptor;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.httpExecutor = executor42;
        retrofit.RestAdapter.Builder builder45 = builder41.setServer("hi!");
        retrofit.client.Client.Provider provider46 = builder45.clientProvider;
        builder45.ensureSaneDefaults();
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        log48.log("");
        builder45.log = log48;
        retrofit.Server server52 = builder45.server;
        builder28.server = server52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor55 = null;
        builder54.httpExecutor = executor55;
        retrofit.RestAdapter.Builder builder58 = builder54.setServer("hi!");
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder60 = builder54.setLog(log59);
        retrofit.RestAdapter restAdapter61 = builder54.build();
        java.util.concurrent.Executor executor62 = restAdapter61.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler63 = restAdapter61.new RestHandler();
        retrofit.converter.Converter converter64 = restAdapter61.converter;
        builder28.converter = converter64;
        retrofit.Profiler profiler66 = null;
        builder28.profiler = profiler66;
        retrofit.ErrorHandler errorHandler68 = null;
        builder28.errorHandler = errorHandler68;
        java.util.concurrent.Executor executor70 = builder28.callbackExecutor;
        builder21.callbackExecutor = executor70;
        retrofit.Server server72 = builder21.server;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(profiler27);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(restAdapter35);
        org.junit.Assert.assertNotNull(requestInterceptor40);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(provider46);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(server52);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(restAdapter61);
        org.junit.Assert.assertNotNull(executor62);
        org.junit.Assert.assertNotNull(converter64);
        org.junit.Assert.assertNotNull(executor70);
        org.junit.Assert.assertNotNull(server72);
    }

    @Test
    public void test11997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11997");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.Server server8 = restAdapter7.server;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        restAdapter7.logLevel = logLevel9;
        retrofit.Profiler profiler11 = restAdapter7.profiler;
        java.lang.Throwable throwable12 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter7.logException(throwable12, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNull(profiler11);
    }

    @Test
    public void test11998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11998");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor3 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.client.Client.Provider provider6 = restAdapter0.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = null;
        builder8.converter = converter9;
        retrofit.client.Client.Provider provider11 = null;
        builder8.clientProvider = provider11;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        builder8.requestInterceptor = requestInterceptor13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler16 = builder15.errorHandler;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter17.requestInterceptor = requestInterceptor19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        restAdapter17.log = log29;
        retrofit.ErrorHandler errorHandler33 = null;
        restAdapter17.errorHandler = errorHandler33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter36 = builder35.converter;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor38 = restAdapter37.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        restAdapter37.requestInterceptor = requestInterceptor39;
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel50);
        restAdapter37.log = log49;
        retrofit.ErrorHandler errorHandler53 = null;
        restAdapter37.errorHandler = errorHandler53;
        retrofit.RestAdapter.Log log55 = restAdapter37.log;
        retrofit.RestAdapter.Builder builder56 = builder35.setLog(log55);
        retrofit.RequestInterceptor requestInterceptor57 = builder35.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor58 = builder35.requestInterceptor;
        retrofit.RestAdapter.Builder builder60 = builder35.setServer("hi!");
        retrofit.Server server61 = builder35.server;
        restAdapter17.server = server61;
        builder15.server = server61;
        retrofit.RestAdapter.Builder builder64 = builder8.setServer(server61);
        retrofit.RestAdapter restAdapter65 = builder8.build();
        retrofit.RequestInterceptor requestInterceptor66 = builder8.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel67 = null;
        builder8.logLevel = logLevel67;
        retrofit.ErrorHandler errorHandler69 = builder8.errorHandler;
        restAdapter0.errorHandler = errorHandler69;
        retrofit.RequestInterceptor requestInterceptor71 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter72 = restAdapter0.converter;
        java.util.concurrent.Executor executor73 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(server61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertNotNull(requestInterceptor66);
        org.junit.Assert.assertNotNull(errorHandler69);
        org.junit.Assert.assertNull(requestInterceptor71);
        org.junit.Assert.assertNull(converter72);
        org.junit.Assert.assertNull(executor73);
    }

    @Test
    public void test11999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11999");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.RestAdapter.Builder builder8 = builder4.setServer("hi!");
        retrofit.Profiler profiler9 = null;
        builder8.profiler = profiler9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder11.setLog(log16);
        retrofit.RestAdapter restAdapter18 = builder11.build();
        retrofit.converter.Converter converter19 = null;
        builder11.converter = converter19;
        retrofit.ErrorHandler errorHandler21 = null;
        builder11.errorHandler = errorHandler21;
        retrofit.RequestInterceptor requestInterceptor23 = builder11.requestInterceptor;
        builder8.requestInterceptor = requestInterceptor23;
        restAdapter0.requestInterceptor = requestInterceptor23;
        retrofit.client.Response response27 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response29 = restAdapter0.logAndReplaceResponse("hi!", response27, 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(requestInterceptor23);
    }

    @Test
    public void test12000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test12000");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.converter.Converter converter5 = restAdapter0.converter;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        retrofit.RestAdapter.Log log7 = restAdapter0.log;
        java.util.concurrent.Executor executor8 = null;
        restAdapter0.httpExecutor = executor8;
        retrofit.Server server10 = restAdapter0.server;
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter0.logLevel;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log13 = restAdapter12.log;
        java.util.concurrent.Executor executor14 = restAdapter12.callbackExecutor;
        retrofit.Profiler profiler15 = restAdapter12.profiler;
        retrofit.Profiler profiler16 = null;
        restAdapter12.profiler = profiler16;
        retrofit.converter.Converter converter18 = restAdapter12.converter;
        retrofit.Profiler profiler19 = restAdapter12.profiler;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.httpExecutor = executor21;
        retrofit.client.Client.Provider provider23 = null;
        builder20.clientProvider = provider23;
        retrofit.RestAdapter.Builder builder26 = builder20.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor28 = restAdapter27.requestInterceptor;
        java.util.concurrent.Executor executor29 = restAdapter27.callbackExecutor;
        retrofit.converter.Converter converter30 = null;
        restAdapter27.converter = converter30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter33 = builder32.converter;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor35 = restAdapter34.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        restAdapter34.requestInterceptor = requestInterceptor36;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel47);
        restAdapter34.log = log46;
        retrofit.ErrorHandler errorHandler50 = null;
        restAdapter34.errorHandler = errorHandler50;
        retrofit.RestAdapter.Log log52 = restAdapter34.log;
        retrofit.RestAdapter.Builder builder53 = builder32.setLog(log52);
        restAdapter27.log = log52;
        retrofit.RestAdapter.Builder builder55 = builder20.setLog(log52);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter57 = builder56.converter;
        retrofit.Profiler profiler58 = null;
        builder56.profiler = profiler58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.httpExecutor = executor61;
        retrofit.client.Client.Provider provider63 = null;
        builder60.clientProvider = provider63;
        retrofit.RestAdapter.Builder builder66 = builder60.setServer("hi!");
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = null;
        builder67.httpExecutor = executor68;
        retrofit.RestAdapter.Builder builder71 = builder67.setServer("hi!");
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder73 = builder67.setLog(log72);
        retrofit.RestAdapter restAdapter74 = builder67.build();
        java.util.concurrent.Executor executor75 = restAdapter74.httpExecutor;
        builder66.callbackExecutor = executor75;
        builder56.callbackExecutor = executor75;
        builder55.httpExecutor = executor75;
        restAdapter12.httpExecutor = executor75;
        restAdapter0.callbackExecutor = executor75;
        retrofit.ErrorHandler errorHandler81 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(converter33);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(converter57);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(restAdapter74);
        org.junit.Assert.assertNotNull(executor75);
        org.junit.Assert.assertNull(errorHandler81);
    }
}

